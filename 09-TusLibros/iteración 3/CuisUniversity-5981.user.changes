

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (6 November 2023 19:34:55) as /home/clinux01/Documentos/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Documentos/TusLibros-33.st----!

TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'Sof D 11/6/2023 19:59:30'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'no messages' stamp: 'Sof D 11/6/2023 20:00:01' overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:00:40'!
test01! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:02:21'!
test01CanCreateACartForARegisteredClient
	|  |! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:02:32'!
dasasdasd! !

!methodRemoval: ClientInterfaceTest #test01 stamp: 'Sof D 11/6/2023 20:02:32'!
test01!

!methodRemoval: ClientInterfaceTest #dasasdasd stamp: 'Sof D 11/6/2023 20:02:34'!
dasasdasd!
!ClientInterfaceTest methodsFor: 'setup' stamp: 'Sof D 11/6/2023 20:09:13' prior: 50650892 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/6/2023 20:13:22'!
Object subclass: #ClientInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:13:34'!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface new.
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	on: Error! !

!methodRemoval: ClientInterfaceTest #test01CanCreateACartForARegisteredClient stamp: 'Sof D 11/6/2023 20:13:42'!
test01CanCreateACartForARegisteredClient
	|  |!

TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory passwordAutenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'Sof D 11/6/2023 20:14:31'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory passwordAutenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'setup' stamp: 'Sof D 11/6/2023 20:15:07' prior: 50650915 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	passwordAutenticator := [:clientId :password | ].! !
!ClientInterface methodsFor: 'no messages' stamp: 'Sof D 11/6/2023 20:15:48'!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:16:09' prior: 50650927!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface new.
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	on: Error
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:17:31' prior: 50650968!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface new.
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	on: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:17:49' prior: 50650978!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface new.
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		
		]! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'Sof D 11/6/2023 20:18:55'!
validClient
	
	^'BOCA'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'Sof D 11/6/2023 20:19:02'!
invalidClient
	
	^'riBer'! !
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'Sof D 11/6/2023 20:19:43'!
invalidPassword
	
	^'riBer'! !

!methodRemoval: StoreTestObjectsFactory #invalidClient stamp: 'Sof D 11/6/2023 20:19:43'!
invalidClient
	
	^'riBer'!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'Sof D 11/6/2023 20:19:50'!
validPassword
	
	^'BOCA'! !

!methodRemoval: StoreTestObjectsFactory #validClient stamp: 'Sof D 11/6/2023 20:19:50'!
validClient
	
	^'BOCA'!

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'Sof D 11/6/2023 20:22:23'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory passwordAutenticator authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:22:22' prior: 50650989!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface with: authenticator.
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !

TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'Sof D 11/6/2023 20:22:42'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'Sof D 11/6/2023 20:22:48'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory passwordAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:22:48' prior: 50651033!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface with: passwordAuthenticator.
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'setup' stamp: 'Sof D 11/6/2023 20:23:09' prior: 50650956 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	passwordAuthenticator := [:clientId :password | ].! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:23:16' prior: 50651070!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface with: self.
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:25:00' prior: 50651092!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface with: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:25:46'!
clientIsNotRegistered
	^'ups!! You are not registered!! bakita el maÃÅs grande papa'! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:26:03' prior: 50651106!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface with: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  '' withPassword: '' ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:28:39' prior: 50651130!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface with: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  '' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:29:04' prior: 50651148!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface with: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		
		]! !

!testRun: #ClientInterfaceTest #test01CantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 20:29:14'!
ERROR!

!testRun: #ClientInterfaceTest #test01CantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 20:29:14'!
ERROR!
!ClientInterface class methodsFor: 'no messages' stamp: 'Sof D 11/6/2023 20:29:41'!
with: aPasswordAuthenticator! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:29:51'!
for: aPasswordAuthenticator! !

!methodRemoval: ClientInterface class #with: stamp: 'Sof D 11/6/2023 20:29:51'!
with: aPasswordAuthenticator!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:30:00' prior: 50651167!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		
		]! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:30:23' prior: 50651198!
for: aPasswordAuthenticator
	^self new initializeWith: aPasswordAuthenticator! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:30:38'!
initializeWith: aPasswordAuthenticator
	! !

Object subclass: #ClientInterface
	instanceVariableNames: ' passwordAuthenticator '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/6/2023 20:30:50'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:30:59' prior: 50651232!
initializeWith: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:31:17' prior: 50650962!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	passwordAuthenticator! !
!ClientInterfaceTest methodsFor: 'password protocol' stamp: 'Sof D 11/6/2023 20:32:52'!
validateClientId: aClientIdToValidate withPassword: aPasswordToValidate! !
!ClientInterfaceTest methodsFor: 'password protocol' stamp: 'Sof D 11/6/2023 20:32:56' prior: 50651263!
validateClientId: aClientIdToValidate withPassword: aPasswordToValidate
	! !
!ClientInterfaceTest methodsFor: 'password protocol' stamp: 'Sof D 11/6/2023 20:33:14' prior: 50651269!
validateClientId: aClientIdToValidate withPassword: aPasswordToValidate
	passwordAuthenticator value: aClientIdToValidate! !
!ClientInterfaceTest methodsFor: 'password protocol' stamp: 'Sof D 11/6/2023 20:34:09' prior: 50651275!
validateClientId: aClientIdToValidate withPassword: aPasswordToValidate
	passwordAuthenticator value: aClientIdToValidate value: aPasswordToValidate.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:35:34' prior: 50651257!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.! !

!testRun: #ClientInterfaceTest #test01CantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 20:35:38'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:36:03' prior: 50651206!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface listCart
		]! !

!testRun: #ClientInterfaceTest #test01CantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 20:36:16'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:36:23'!
listCart
	self shouldBeImplemented.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:38:26' prior: 50651327!
listCart
	self error: self cartNotCreatedErrorDescription.! !

!testRun: #ClientInterfaceTest #test01CantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 20:44:47'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:45:15' prior: 50651303!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface carts
		]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:46:12'!
carts
	self error: self cartNotCreatedErrorDescription.! !

!methodRemoval: ClientInterface #listCart stamp: 'Sof D 11/6/2023 20:46:12'!
listCart
	self error: self cartNotCreatedErrorDescription.!

Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/6/2023 20:47:13'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:47:25' prior: 50651250!
initializeWith: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	carts := OrderedCollection new.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:47:34' prior: 50651361!
carts
	^carts copy.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:47:54' prior: 50651341!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface carts equals: OrderedCollection new.
		]! !

!testRun: #ClientInterfaceTest #test01CantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 20:48:00'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:48:24'!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface carts equals: OrderedCollection new.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:50:05' prior: 50651421!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: Error - MessageNotUnderstood! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:50:16' prior: 50651442!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:50:34' prior: 50651458!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | ].
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:50:42' prior: 50651474!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:50:57' prior: 50651488!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered
	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:51:06' prior: 50651396!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface carts isEmpty .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:51:19' prior: 50651500!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: clientInterface carts isEmpty not
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:52:29'!
hasCarts
	^carts isEmpty .! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:52:42' prior: 50651512!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface hasCarts .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:52:50' prior: 50651533!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: clientInterface hasCarts.
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 20:52:54' prior: 50651551!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self deny: clientInterface hasCarts .
		]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 20:53:02' prior: 50651547!
hasCarts
	^carts isEmpty not.! !

!methodRemoval: ClientInterface #carts stamp: 'Sof D 11/6/2023 20:53:05'!
carts
	^carts copy.!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:05:41'!
test03ClientInterfaceCanAddABookToACart
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: clientInterface hasCarts.
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:05:52'!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: clientInterface hasCarts.
	! !

!methodRemoval: ClientInterfaceTest #test02CanCreateACartForARegisteredClient stamp: 'Sof D 11/6/2023 21:05:52'!
test02CanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: clientInterface hasCarts.
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:05:59'!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self deny: clientInterface hasCarts .
		]! !

!methodRemoval: ClientInterfaceTest #test01CantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 21:05:59'!
test01CantCreateACartForANotRegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self deny: clientInterface hasCarts .
		]!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:07:31' prior: 50651613!
test03ClientInterfaceCanAddABookToACart
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword 
	! !

!methodRemoval: ClientInterfaceTest #test03ClientInterfaceCanAddABookToACart stamp: 'Sof D 11/6/2023 21:14:09'!
test03ClientInterfaceCanAddABookToACart
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword 
	!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'Sof D 11/6/2023 21:16:19'!
cartList
	^Dictionary new.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 21:16:32'!
emptyCartList
	^Dictionary new.! !

!methodRemoval: StoreTestObjectsFactory #cartList stamp: 'Sof D 11/6/2023 21:16:32'!
cartList
	^Dictionary new.!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:17:16' prior: 50651653!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartList |
	clientInterface := ClientInterface for: self.
	cartList := testObjectsFactory emptyCartList .
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self deny: clientInterface hasCarts .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:17:37' prior: 50651727!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartList |
	clientInterface := ClientInterface for: self.
	cartList := testObjectsFactory emptyCartList .
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: cartList isEmpty.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:20:47' prior: 50651750!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartList |
	cartList := testObjectsFactory emptyCartList .
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: cartList isEmpty.
		]! !

!methodRemoval: ClientInterface #hasCarts stamp: 'Sof D 11/6/2023 21:22:05'!
hasCarts
	^carts isEmpty not.!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:22:11' prior: 50651626!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: clientInterface.
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:22:17' prior: 50651799!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface |
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: true.
	! !

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'Sof D 11/6/2023 21:26:31'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory passwordAuthenticator cartsList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'nil' stamp: 'Sof D 11/6/2023 21:26:30'!
addCart: aCartToAddToList withID: theIDOfTheCart
	cartsList at: 		theIDOfTheCart put: aCartToAddToList ! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:26:48' prior: 50651773!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartList |
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: cartList isEmpty.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:26:53' prior: 50651842!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface |
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: cartsList isEmpty.
		]! !
!ClientInterfaceTest methodsFor: 'setup' stamp: 'Sof D 11/6/2023 21:27:04' prior: 50651085 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	passwordAuthenticator := [:clientId :password | ].
	cartsList := testObjectsFactory emptyCartList .! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 21:27:13'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:34:49' prior: 50651813!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: true.
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:36:09' prior: 50651898!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: ''
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:37:37' prior: 50651912!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	self shouldnt: [cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword ]
	raise: clientInterface clientIsNotRegistered.
	self assert: (cartsList includesKey: cartId).
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:40:53' prior: 50651863!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface |
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface listCart.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:41:33' prior: 50651941!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartId|
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: clientInterface listCart: cartId.
		]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 21:42:28'!
 listCart: cartId! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 21:42:42' prior: 50651984!
listCart: cartId
	^true! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 21:42:46'!
ERROR!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 21:42:46'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/6/2023 21:42:59' prior: 50651962!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartId|
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		self assert: (clientInterface listCart: cartId).
		]! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 21:43:02'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 21:44:17'!
PASSED!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 21:46:44'!
nextCartId
	^0! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/6/2023 21:47:37'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 21:47:37' prior: 50651384!
initializeWith: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/6/2023 21:48:11' prior: 50651988!
listCart: cartId
	^cartsIds isEmpty ! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/6/2023 21:48:19'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClintInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/6/2023 21:48:21'!
FAILURE!

!testRun: #ClientInterfaceTest #test02ClintInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/6/2023 21:48:21'!
FAILURE!

----QUIT----(6 November 2023 21:51:16) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (7 November 2023 00:39:32) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!


!classRemoval: #TusLibrosStoreCashier stamp: 'eaam 11/7/2023 00:39:44'!
Object subclass: #TusLibrosStoreCashier
	instanceVariableNames: 'cart card purchaseAmount currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #TusLibrosCart stamp: 'eaam 11/7/2023 00:39:45'!
Object subclass: #TusLibrosCart
	instanceVariableNames: 'contents catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #MerchantProcessorInterface stamp: 'eaam 11/7/2023 00:39:45'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: 'cardsWithCredit transactionSuccess'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #CreditCard stamp: 'eaam 11/7/2023 00:39:46'!
Object subclass: #CreditCard
	instanceVariableNames: 'name expireDate id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #TestSetUp stamp: 'eaam 11/7/2023 00:39:46'!
Object subclass: #TestSetUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #TusLibrosStoreCashierTest stamp: 'eaam 11/7/2023 00:39:47'!
TestCase subclass: #TusLibrosStoreCashierTest
	instanceVariableNames: 'testSetUp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #TusLibrosCartTests stamp: 'eaam 11/7/2023 00:39:47'!
TestCase subclass: #TusLibrosCartTests
	instanceVariableNames: 'testSetUp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #MerchantProcessorInterfaceTest stamp: 'eaam 11/7/2023 00:39:47'!
TestCase subclass: #MerchantProcessorInterfaceTest
	instanceVariableNames: 'testSetUP'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibrosDotCom.st----!

!classRemoval: #TusLibrosStoreCashier stamp: 'eaam 11/7/2023 00:41:53'!
Object subclass: #TusLibrosStoreCashier
	instanceVariableNames: 'cart card purchaseAmount currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #TusLibrosCart stamp: 'eaam 11/7/2023 00:41:53'!
Object subclass: #TusLibrosCart
	instanceVariableNames: 'contents catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #MerchantProcessorInterface stamp: 'eaam 11/7/2023 00:41:54'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: 'cardsWithCredit transactionSuccess'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #CreditCard stamp: 'eaam 11/7/2023 00:41:54'!
Object subclass: #CreditCard
	instanceVariableNames: 'name expireDate id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #TestSetUp stamp: 'eaam 11/7/2023 00:41:55'!
Object subclass: #TestSetUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #TusLibrosStoreCashierTest stamp: 'eaam 11/7/2023 00:41:55'!
TestCase subclass: #TusLibrosStoreCashierTest
	instanceVariableNames: 'testSetUp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #TusLibrosCartTests stamp: 'eaam 11/7/2023 00:41:56'!
TestCase subclass: #TusLibrosCartTests
	instanceVariableNames: 'testSetUp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #MerchantProcessorInterfaceTest stamp: 'eaam 11/7/2023 00:41:56'!
TestCase subclass: #MerchantProcessorInterfaceTest
	instanceVariableNames: 'testSetUP'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibros.st----!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 00:49:36' prior: 50653582!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (cartsList includesKey: cartId).
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:04:41' prior: 50653978!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) .
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 01:04:49' prior: 50653814!
listCart: cartId
	^''! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 01:05:37' prior: 50653799!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	^self nextCartId! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 01:05:40'!
ERROR!

!testRun: #ClientInterfaceTest #test02ClintInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 01:05:40'!
ERROR!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 01:05:42'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:06:00' prior: 50653561!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartId|
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:06:08' prior: 50654029!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface |
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:06:26' prior: 50654049!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface |
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator :=[:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 01:06:32'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClintInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 01:06:33'!
ERROR!

!testRun: #ClientInterfaceTest #test02ClintInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 01:06:33'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:06:47' prior: 50653991!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	! !

!testRun: #ClientInterfaceTest #test02ClintInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 01:06:49'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:06:59' prior: 50654101!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	! !

!methodRemoval: ClientInterfaceTest #addCart:withID: stamp: 'eaam 11/7/2023 01:07:03'!
addCart: aCartToAddToList withID: theIDOfTheCart
	cartsList at: 		theIDOfTheCart put: aCartToAddToList !
!ClientInterfaceTest methodsFor: 'setup' stamp: 'eaam 11/7/2023 01:07:10' prior: 50653545 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	passwordAuthenticator := [:clientId :password | ].! !

TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory passwordAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'eaam 11/7/2023 01:07:19'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'testObjectsFactory passwordAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:25:00'!
test02ClientInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	! !

!methodRemoval: ClientInterfaceTest #test02ClintInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 01:25:00'!
test02ClintInterfaceCanCreateACartForARegisteredClient
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:32:01'!
test03ClintInterfaceDoesntAddItemsToANotCreatedCart
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	! !

!methodRemoval: ClientInterfaceTest #test03ClintInterfaceDoesntAddItemsToANotCreatedCart stamp: 'eaam 11/7/2023 01:32:05'!
test03ClintInterfaceDoesntAddItemsToANotCreatedCart
	| clientInterface cartId|
	clientInterface := ClientInterface for: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:32:16' prior: 50654069!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface |
	
	clientInterface := ClientInterface for: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 01:32:35'!
sadfadfsd: aPasswordAuthenticator
	^self new initializeWith: aPasswordAuthenticator! !

!methodRemoval: ClientInterface class #for: stamp: 'eaam 11/7/2023 01:32:35'!
for: aPasswordAuthenticator
	^self new initializeWith: aPasswordAuthenticator!

!methodRemoval: ClientInterface class #sadfadfsd: stamp: 'eaam 11/7/2023 01:32:39'!
sadfadfsd: aPasswordAuthenticator
	^self new initializeWith: aPasswordAuthenticator!
!ClientInterface class methodsFor: 'no messages' stamp: 'eaam 11/7/2023 01:35:45'!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAthe: aPassword! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 01:36:00'!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: passwordAuthenticator! !

!methodRemoval: ClientInterface class #forCartDatabase:merchantProcessor:catalog:passwordAthe: stamp: 'eaam 11/7/2023 01:36:02'!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAthe: aPassword!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:46:02' prior: 50654211!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase merchantProcessor: self catalog: testObjectsFactory catalog passwordAuthenticator: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:46:23' prior: 50654269!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase merchantProcessor: self catalog: testObjectsFactory defaultCatalog passwordAuthenticator: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 01:46:42' prior: 50654159!
test02ClientInterfaceCanCreateACartForARegisteredClient
		| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase merchantProcessor: self catalog: testObjectsFactory defaultCatalog passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	! !

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 01:57:42'!
ERROR!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 01:57:42'!
ERROR!
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 01:58:39' prior: 50654254!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: passwordAuthenticator
	^self new initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: passwordAuthenticator! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 01:59:02'!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 01:59:16' prior: 50654346!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator
	^self new initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 02:07:08' prior: 50654294!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
	merchantProcessor: self 
	catalog: testObjectsFactory defaultCatalog 
	passwordAuthenticator: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 02:07:15' prior: 50654382!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegistered.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegistered.
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 02:07:45' prior: 50654319!
test02ClientInterfaceCanCreateACartForARegisteredClient
		| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 02:08:38'!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: '' .
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:02:27' prior: 50654450!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory ].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:03:10' prior: 50654468!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory validBook].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:03:23' prior: 50654487!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore].
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:04:22'!
asdasfasdfadfasd: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.! !

!methodRemoval: ClientInterface #initializeWith: stamp: 'eaam 11/7/2023 03:04:22'!
initializeWith: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.!

!methodRemoval: ClientInterface #asdasfasdfadfasd: stamp: 'eaam 11/7/2023 03:04:27'!
asdasfasdfadfasd: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:05:30'!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:05:46' prior: 50654506!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:05:59' prior: 50654550!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:06:26' prior: 50654570!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:06:36' prior: 50654591!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:07:26' prior: 50654613!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:23:27' prior: 50654635!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:23:51'!
cartDoestExistErrorDescription
	^'cart id is not registered'! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'eaam 11/7/2023 03:24:11'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds database'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:24:08' prior: 50654358!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	database := aDatabaseOfCarts! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'eaam 11/7/2023 03:24:16'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:24:16' prior: 50654698!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:26:30' prior: 50654545!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	(cartDatabase includesKey: aCartId) ifFalse: [self error: self cartDoestExistErrorDescription].! !

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 03:26:34'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 03:26:38'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 03:26:38'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 03:26:38'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:27:46'!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:38:37' prior: 50654754!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice.
	self assert: (clientInterface listCart: testObjectsFactory itemSellByTheStore).! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:39:53' prior: 50654774!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice.
	self assert: (clientInterface listCart: testObjectsFactory itemSellByTheStore) equals: ''.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:41:58' prior: 50654797!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId expectedBookList|
	
	expectedBookList := Bag new.
	expectedBookList add: testObjectsFactory itemSellByTheStore.
	
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice.
	self assert: (clientInterface listCart: testObjectsFactory itemSellByTheStore) equals: expectedBookList.! !

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:42:24'!
ERROR!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:42:24'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:43:00' prior: 50654820!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId expectedBookList|
	
	expectedBookList := Bag new.
	expectedBookList add: testObjectsFactory itemSellByTheStore.
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice.
	self assert: (clientInterface listCart: testObjectsFactory itemSellByTheStore) equals: expectedBookList.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:43:28' prior: 50654008!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	
	^self nextCartId! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:44:00' prior: 50654882!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	cartDatabase at: self nextCartId put: ''.! !

Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'eaam 11/7/2023 03:45:01'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:45:17' prior: 50654718!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:46:05' prior: 50654891!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	cartDatabase at: self nextCartId put: (Cart acceptingItemsOf: catalog).! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:46:43' prior: 50654928!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	| cartId |
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	cartId := self nextCartId.
	cartDatabase at: cartId put: (Cart acceptingItemsOf: catalog).
	^cartId! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 03:46:47'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 03:46:47'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 03:46:47'!
FAILURE!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:46:47'!
FAILURE!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 03:46:49'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:48:24' prior: 50654658!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:48:30' prior: 50654970!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'eaam 11/7/2023 03:48:52'!
invalidCartId
	^'invalidId'! !

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 03:49:01'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:49:03'!
FAILURE!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:49:03'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:51:35' prior: 50654854!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId expectedBookList|
	
	expectedBookList := Bag new.
	expectedBookList add: testObjectsFactory itemSellByTheStore.
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	self assert: (clientInterface listCart: testObjectsFactory itemSellByTheStore) equals: expectedBookList.! !

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:51:37'!
FAILURE!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:51:37'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:54:18' prior: 50655035!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId expectedBookList|
	
	expectedBookList := Bag new.
	expectedBookList add: testObjectsFactory itemSellByTheStore.
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  equals: expectedBookList.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 03:54:55' prior: 50655068!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSellByTheStore.! !

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:54:58'!
FAILURE!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:54:58'!
FAILURE!

cartDatabase!

self at: 0 !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:57:09' prior: 50654730!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	(cartDatabase includesKey: aCartId) ifFalse: [self error: self cartDoestExistErrorDescription].
	(cartDatabase at: aCartId)! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 03:57:58' prior: 50655123!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	(cartDatabase includesKey: aCartId) ifFalse: [self error: self cartDoestExistErrorDescription].
	(cartDatabase at: aCartId) add: aQuantityToAdd of: aBookToAdd.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 03:57:59'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 03:57:59'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 03:57:59'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 03:57:59'!
PASSED!

----QUIT----(7 November 2023 04:00:40) CuisUniversity-5981.image priorSource: 12494913!

----STARTUP---- (7 November 2023 11:32:21) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!

!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:35:03'!
test05ClientInterfaceCanListTheBooksOfACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSellByTheStore.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:36:04' prior: 50655165!
test05ClientInterfaceCanListTheBooksOfACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: Bag new.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:36:20' prior: 50654432!
test02ClientInterfaceCanCreateACartForARegisteredClient
		| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: Bag new. .
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:37:31' prior: 50655187!
test05ClientInterfaceCanListTheBooksOfACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	
	
	self assert: (clientInterface listCart: cartId) equals: Bag new.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:39:12' prior: 50655224!
test05ClientInterfaceCanListTheBooksOfACart
	| clientInterface cartDatabase cartId expectedListCartOutput|
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	
	expectedListCartOutput := Bag new.
	expectedListCartOutput add: testObjectsFactory itemSellByTheStore.
	
	self assert: (clientInterface listCart: cartId) equals: expectedListCartOutput.! !

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:39:14'!
FAILURE!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:39:14'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:39:46'!
test05ClientInterfaceCanListTheBooksOfAEmptyCart
	| clientInterface cartDatabase cartId expectedListCartOutput|
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	
	expectedListCartOutput := Bag new.
	expectedListCartOutput add: testObjectsFactory itemSellByTheStore.
	
	self assert: (clientInterface listCart: cartId) equals: expectedListCartOutput.! !

!methodRemoval: ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:39:46'!
test05ClientInterfaceCanListTheBooksOfACart
	| clientInterface cartDatabase cartId expectedListCartOutput|
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	
	expectedListCartOutput := Bag new.
	expectedListCartOutput add: testObjectsFactory itemSellByTheStore.
	
	self assert: (clientInterface listCart: cartId) equals: expectedListCartOutput.!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:39:57'!
test06ClientInterfaceCanListTheBooksOfACart
	| clientInterface cartDatabase cartId expectedListCartOutput|
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	
	expectedListCartOutput := Bag new.
	expectedListCartOutput add: testObjectsFactory itemSellByTheStore.
	
	self assert: (clientInterface listCart: cartId) equals: expectedListCartOutput.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:40:15' prior: 50655275!
test05ClientInterfaceCanListTheBooksOfAEmptyCart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSellByTheStore inQuantity: 1.
	
	
	self assert: (clientInterface listCart: cartId) equals: Bag new.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 11:40:28' prior: 50654004!
listCart: cartId
	^Bag new.! !

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfAEmptyCart stamp: 'eaam 11/7/2023 11:40:33'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:40:35'!
FAILURE!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:40:35'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 11:41:10' prior: 50655375!
listCart: cartId
	^(cartDatabase at: cartId).! !
!Cart methodsFor: 'total' stamp: 'eaam 11/7/2023 11:43:31'!
listOfBooks

	^ items inject: Bag new into:[:aBag :anItem | aBag add: anItem ]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 11:43:51' prior: 50655391!
listCart: cartId
	^(cartDatabase at: cartId) listOfBooks.! !

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:43:55'!
FAILURE!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:43:55'!
FAILURE!
!Cart methodsFor: 'total' stamp: 'eaam 11/7/2023 11:45:09' prior: 50655395!
listOfBooks

	^ items asBag.! !

a := OrderedCollection new.
a add: ''; add: ''.
b := add asBag.
b!

a := OrderedCollection new.
a add: ''; add: ''.
b := a asBag.
b!

b!

a := OrderedCollection new.
a add: ''; add: '.'; add: ''.
b := a asBag.!

b at: ''!

b !

b occurrencesOf: ''!
!Cart methodsFor: 'total' stamp: 'eaam 11/7/2023 11:48:00' prior: 50655413!
listOfBooks

	^ items asBag.! !

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:48:06'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:48:09'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 11:48:09'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 11:48:09'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 11:48:09'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 11:48:09'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfAEmptyCart stamp: 'eaam 11/7/2023 11:48:09'!
FAILURE!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:48:09'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfAEmptyCart stamp: 'eaam 11/7/2023 11:48:09'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 11:48:26' prior: 50655353!
test05ClientInterfaceCanListTheBooksOfAEmptyCart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	
	self assert: (clientInterface listCart: cartId) equals: Bag new.! !

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfAEmptyCart stamp: 'eaam 11/7/2023 11:48:28'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 11:48:29'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 12:32:39'!
test03ClientInterfaceCantAddToACartIdWithoutACart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	! !

!methodRemoval: ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/7/2023 12:32:39'!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 12:32:51'!
test07ClientInterfaceCantAddToACartIdWithoutACart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 12:36:01' prior: 50655536!
test07ClientInterfaceCantAddToACartIdWithoutACart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface listCart: testObjectsFactory invalidCartId]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 12:44:39' prior: 50655490!
test03ClientInterfaceCantAddToACartIdWithoutACart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		
		].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/7/2023 12:45:23' prior: 50655579!
test03ClientInterfaceCantAddToACartIdWithoutACart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSellByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		self deny: (cartDatabase includesKey: testObjectsFactory invalidCartId).
		].
	! !

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToACartIdWithoutACart stamp: 'eaam 11/7/2023 12:45:25'!
PASSED!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 12:47:33'!
assertInDatabaseTheCartId: aCartId

	^ (cartDatabase includesKey: aCartId) ifFalse: [self error: self cartDoestExistErrorDescription]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 12:47:33' prior: 50655133!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(cartDatabase at: aCartId) add: aQuantityToAdd of: aBookToAdd.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/7/2023 12:47:50' prior: 50655401!
listCart: aCartId
	self assertInDatabaseTheCartId: aCartId.
	^(cartDatabase at: aCartId) listOfBooks.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/7/2023 12:47:57'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/7/2023 12:47:57'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToACartIdWithoutACart stamp: 'eaam 11/7/2023 12:47:57'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/7/2023 12:47:57'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanListTheBooksOfAEmptyCart stamp: 'eaam 11/7/2023 12:47:57'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCanListTheBooksOfACart stamp: 'eaam 11/7/2023 12:47:57'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCantAddToACartIdWithoutACart stamp: 'eaam 11/7/2023 12:47:57'!
PASSED!

----QUIT----(7 November 2023 12:48:15) CuisUniversity-5981.image priorSource: 10352251!

----STARTUP---- (8 November 2023 00:19:27) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


!classRemoval: #TusLibrosStoreCashier stamp: 'Sof D 11/8/2023 00:20:23'!
Object subclass: #TusLibrosStoreCashier
	instanceVariableNames: 'cart card purchaseAmount currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #TusLibrosCart stamp: 'Sof D 11/8/2023 00:20:23'!
Object subclass: #TusLibrosCart
	instanceVariableNames: 'contents catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #MerchantProcessorInterface stamp: 'Sof D 11/8/2023 00:20:24'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: 'cardsWithCredit transactionSuccess'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #CreditCard stamp: 'Sof D 11/8/2023 00:20:24'!
Object subclass: #CreditCard
	instanceVariableNames: 'name expireDate id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #TestSetUp stamp: 'Sof D 11/8/2023 00:20:24'!
Object subclass: #TestSetUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #TusLibrosStoreCashierTest stamp: 'Sof D 11/8/2023 00:20:24'!
TestCase subclass: #TusLibrosStoreCashierTest
	instanceVariableNames: 'testSetUp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #TusLibrosCartTests stamp: 'Sof D 11/8/2023 00:20:24'!
TestCase subclass: #TusLibrosCartTests
	instanceVariableNames: 'testSetUp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classRemoval: #MerchantProcessorInterfaceTest stamp: 'Sof D 11/8/2023 00:20:24'!
TestCase subclass: #MerchantProcessorInterfaceTest
	instanceVariableNames: 'testSetUP'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

----End fileIn of C:\Users\sofia\Documents\SmalltalkVM\windows64\TusLibros.st----!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'Sof D 11/8/2023 00:25:23'!
itemSoldByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:23' prior: 50655815!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSoldByTheStore.
	self assert: (cart includes: testObjectsFactory itemSoldByTheStore)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655917!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655787!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655824!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSoldByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655832!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSoldByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSoldByTheStore) = 2! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655879!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSoldByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50656487!
defaultCatalog
	
	^ Dictionary new
		at: self itemSoldByTheStore put: self itemSellByTheStorePrice;
		yourself ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655778!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSoldByTheStore.
	self deny: cart isEmpty ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655895!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655960!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50655935!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSoldByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50656074!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 00:25:24' prior: 50656097!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !

!methodRemoval: StoreTestObjectsFactory #itemSellByTheStore stamp: 'Sof D 11/8/2023 00:25:24'!
itemSellByTheStore
	
	^ 'validBook'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:18:43'!
test05ClientInterfaceCantAddNegativeAmountOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:18:52' prior: 50656764!
test05ClientInterfaceCantAddNegativeAmountOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:19:25' prior: 50656787!
test05ClientInterfaceCantAddNegativeAmountOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].! !

!testRun: #ClientInterfaceTest #test05ClientInterfaceCantAddNegativeAmountOfABookToACart stamp: 'Sof D 11/8/2023 01:19:27'!
ERROR!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCantAddNegativeAmountOfABookToACart stamp: 'Sof D 11/8/2023 01:19:27'!
ERROR!

!methodRemoval: ClientInterfaceTest #test05ClientInterfaceCantAddNegativeAmountOfABookToACart stamp: 'Sof D 11/8/2023 01:19:55'!
test05ClientInterfaceCantAddNegativeAmountOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1.
	self should: [clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface cartDoestExistErrorDescription.
		].!
!ClientInterfaceTest methodsFor: 'nil' stamp: 'Sof D 11/8/2023 01:25:00'!
test05CannotListCartWithInvalidID

	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:26:11' prior: 50656876!
test05CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self should: [clientInterface listCart: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface invalidCartId .
		]! !

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:26:20'!
FAILURE!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:26:20'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:27:56' prior: 50656359!
listCart: cartId
	^(cartDatabase at: cartId) ! !
!Cart methodsFor: 'initialization' stamp: 'Sof D 11/8/2023 01:29:06' prior: 50656153!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!methodRemoval: Cart #add: stamp: 'Sof D 11/8/2023 01:29:18'!
add: anItem

	^ self add: 1 of: anItem !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Sof D 11/8/2023 01:29:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:29:30'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Sof D 11/8/2023 01:29:30'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Sof D 11/8/2023 01:29:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Sof D 11/8/2023 01:29:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Sof D 11/8/2023 01:29:30'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Sof D 11/8/2023 01:29:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Sof D 11/8/2023 01:29:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:29:37'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:29:37'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:29:59' prior: 50655764!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore of: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:30:06' prior: 50656629!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSoldByTheStore of: 1.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Sof D 11/8/2023 01:30:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:30:21'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Sof D 11/8/2023 01:30:21'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Sof D 11/8/2023 01:30:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Sof D 11/8/2023 01:30:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Sof D 11/8/2023 01:30:21'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Sof D 11/8/2023 01:30:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Sof D 11/8/2023 01:30:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:30:23'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:30:38'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:30:38'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:30:55' prior: 50656954!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: (testObjectsFactory itemNotSellByTheStore) of: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:30:56'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:30:56'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:31:15' prior: 50657013!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore of: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!Cart methodsFor: 'adding' stamp: 'Sof D 11/8/2023 01:31:28' prior: 50656180!
add: anItem  of: aQuantity

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'Sof D 11/8/2023 01:31:57'!
addItem: anItem  inAmount: aQuantity

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:31:57' prior: 50655801!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart addItem: 2 inAmount: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:31:57' prior: 50656569!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart addItem: 0 inAmount: testObjectsFactory itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:31:57' prior: 50657034!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart addItem: testObjectsFactory itemNotSellByTheStore inAmount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:31:57' prior: 50656604!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart addItem: 2 inAmount: testObjectsFactory itemSoldByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:31:57' prior: 50656314!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	(cartDatabase includesKey: aCartId) ifFalse: [self error: self cartDoestExistErrorDescription].
	(cartDatabase at: aCartId) addItem: aQuantityToAdd inAmount: aBookToAdd.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:31:57' prior: 50656593!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart addItem: 2 inAmount: testObjectsFactory itemSoldByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:31:57' prior: 50656968!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	self deny: cart isEmpty ! !

!methodRemoval: Cart #add:of: stamp: 'Sof D 11/8/2023 01:31:57'!
add: anItem  of: aQuantity

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]!
!Cart methodsFor: 'adding' stamp: 'Sof D 11/8/2023 01:32:20' prior: 50657056!
addItem: anItemToAddToTheCart  inAmount: theAmountToAdd

	self assertIsValidQuantity: theAmountToAdd.
	self assertIsValidItem: anItemToAddToTheCart.

	1 to: theAmountToAdd do: [ :aNumber | items add: anItemToAddToTheCart ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Sof D 11/8/2023 01:32:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:32:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Sof D 11/8/2023 01:32:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Sof D 11/8/2023 01:32:27'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Sof D 11/8/2023 01:32:27'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Sof D 11/8/2023 01:32:27'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Sof D 11/8/2023 01:32:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Sof D 11/8/2023 01:32:27'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Sof D 11/8/2023 01:32:30'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:32:48' prior: 50657080!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 0]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:32:58' prior: 50657065!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart addItem: testObjectsFactory itemNotSellByTheStore inAmount: 2 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Sof D 11/8/2023 01:33:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:33:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Sof D 11/8/2023 01:33:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Sof D 11/8/2023 01:33:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Sof D 11/8/2023 01:33:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Sof D 11/8/2023 01:33:01'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Sof D 11/8/2023 01:33:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Sof D 11/8/2023 01:33:01'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Sof D 11/8/2023 01:33:03'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:33:23' prior: 50656540!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart addItem: testObjectsFactory itemSoldByTheStore amount: 1.
	self assert: (cart includes: testObjectsFactory itemSoldByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:33:30' prior: 50657263!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	self assert: (cart includes: testObjectsFactory itemSoldByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:33:39' prior: 50657139!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 2.
	self assert: (cart occurrencesOf: testObjectsFactory itemSoldByTheStore) = 2! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Sof D 11/8/2023 01:33:41'!
PASSED!
!Cart methodsFor: 'nil' stamp: 'Sof D 11/8/2023 01:36:39'!
listCart
	^items copy! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:36:47' prior: 50656907!
listCart: cartId
	^(cartDatabase at: cartId) listCart! !
!CashierTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:37:28' prior: 50657110!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 2.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:37:49' prior: 50656638!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:38:01' prior: 50656550!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:38:12' prior: 50656688!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:38:23' prior: 50656660!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Sof D 11/8/2023 01:38:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Sof D 11/8/2023 01:38:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Sof D 11/8/2023 01:38:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Sof D 11/8/2023 01:38:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Sof D 11/8/2023 01:38:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Sof D 11/8/2023 01:38:28'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:38:43'!
ERROR!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:38:43'!
ERROR!
!ClientInterface class methodsFor: 'nil' stamp: 'Sof D 11/8/2023 01:41:00'!
clientIsNotRegistered
	^'ups!! You are not registered!! bakita el maÃÅs grande papa'! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:41:22'!
clientIsNotRegisteredErrorDescription
	^'ups!! You are not registered!! bakita el maÃÅs grande papa'! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:41:22'!
clientIsNotRegisteredErrorDescription
	^'ups!! You are not registered!! bakita el maÃÅs grande papa'! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:41:22' prior: 50656031!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: clientInterface clientIsNotRegisteredErrorDescription.
		]! !

!methodRemoval: ClientInterface class #clientIsNotRegistered stamp: 'Sof D 11/8/2023 01:41:22'!
clientIsNotRegistered
	^'ups!! You are not registered!! bakita el maÃÅs grande papa'!

!methodRemoval: ClientInterface #clientIsNotRegistered stamp: 'Sof D 11/8/2023 01:41:22'!
clientIsNotRegistered
	^'ups!! You are not registered!! bakita el maÃÅs grande papa'!

!methodRemoval: ClientInterface #clientIsNotRegisteredErrorDescription stamp: 'Sof D 11/8/2023 01:41:51'!
clientIsNotRegisteredErrorDescription
	^'ups!! You are not registered!! bakita el maÃÅs grande papa'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:42:01' prior: 50657486!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: clientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface clientIsNotRegisteredErrorDescription.
		]! !
!ClientInterface class methodsFor: 'nil' stamp: 'Sof D 11/8/2023 01:42:43'!
cartDoesntExistErrorDescription
	^'Cart id is not registered'! !

!methodRemoval: ClientInterface #cartDoestExistErrorDescription stamp: 'Sof D 11/8/2023 01:42:53'!
cartDoestExistErrorDescription
	^'cart id is not registered'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:43:01' prior: 50656714!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription.
		].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:43:14' prior: 50656881!
test05CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self should: [clientInterface listCart: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:43:16'!
FAILURE!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:43:16'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:44:21' prior: 50657323!
listCart: cartId
	^cartDatabase at: cartId listCart ifAbsent: [ self error: self class cartDoesntExistErrorDescription ]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:44:30' prior: 50657128!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	(cartDatabase includesKey: aCartId) ifFalse: [self error: self class cartDoesntExistErrorDescription].
	(cartDatabase at: aCartId) addItem: aQuantityToAdd inAmount: aBookToAdd.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:44:52' prior: 50657530!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface clientIsNotRegisteredErrorDescription.
		]! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 01:44:54'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 01:44:54'!
ERROR!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 01:44:54'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 01:44:54'!
ERROR!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:44:54'!
ERROR!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 01:44:56'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:46:08' prior: 50657617!
listCart: cartId	| cart |
	cart := cartDatabase at: cartId ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].
	^cart listCart ! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 01:46:13'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 01:46:13'!
FAILURE!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 01:46:13'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 01:46:13'!
ERROR!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:46:13'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 01:46:15'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:46:29' prior: 50656056!
test02ClientInterfaceCanCreateACartForARegisteredClient
		| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCart: cartId) equals: Bag new .
	! !

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 01:46:30'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 01:46:32'!
ERROR!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 01:46:32'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 01:46:53' prior: 50657625!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	(cartDatabase includesKey: aCartId) ifFalse: [self error: self class cartDoesntExistErrorDescription].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 01:46:56'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 01:46:56'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 01:46:56'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 01:46:56'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 01:46:56'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:48:59'!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self should: [clientInterface listCart: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:49:31' prior: 50657778!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self assert: clientInterface listCart: testObjectsFactory 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:50:09' prior: 50657798!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCart: cartId) equals: Bag new. 
	! !

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/8/2023 01:50:11'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:51:32'!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface listCart: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore) . 
	! !

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/8/2023 01:51:33'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 01:52:09' prior: 50657834!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCart: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:00:50' prior: 50657566!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCart: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription.	self deny: (cartDatabase includesKey: testObjectsFactory invalidCartId).
		].
	! !

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 02:00:53'!
PASSED!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:02:35' prior: 50657686!
listCart: aCartId	self assertInDatabaseTheCartId: aCartId.

	^cartDatabase at: aCartId! !
!ClientInterface methodsFor: 'nil' stamp: 'Sof D 11/8/2023 02:02:51'!
assertInDatabaseTheCartId: aCartId

	^ (cartDatabase includesKey: aCartId) ifFalse: [self error: self cartDoesntExistErrorDescription]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:02:55' prior: 50657921!
assertInDatabaseTheCartId: aCartId

	^ (cartDatabase includesKey: aCartId) ifFalse: [self error: self class cartDoesntExistErrorDescription]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:03:17' prior: 50657748!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:04:27'!
test08CannotCheckoutCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self should: [clientInterface listCart: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:05:23' prior: 50657946!
test08CannotCheckoutCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self should: [clientInterface checkOutCart: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !

!methodRemoval: ClientInterfaceTest #test08CannotCheckoutCartWithInvalidID stamp: 'Sof D 11/8/2023 02:05:31'!
test08CannotCheckoutCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self should: [clientInterface checkOutCart: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:26:32'!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCart: cartId) equals: Bag new. 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:27:02' prior: 50658005!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId) equals: Bag new. 
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:13'!
listCartWithID: aCartId	self assertInDatabaseTheCartId: aCartId.

	^cartDatabase at: aCartId! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:13' prior: 50657590!
test05CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:13' prior: 50657717!
test02ClientInterfaceCanCreateACartForARegisteredClient
		| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new .
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:13' prior: 50657812!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new. 
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:13' prior: 50657861!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCart: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	! !

!methodRemoval: ClientInterface #listCart: stamp: 'Sof D 11/8/2023 02:27:13'!
listCart: aCartId	self assertInDatabaseTheCartId: aCartId.

	^cartDatabase at: aCartId!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:24'!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:24' prior: 50656738!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:24' prior: 50658107!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:24' prior: 50657885!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
	

	self should: [clientInterface addToCartWithID: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription.	self deny: (cartDatabase includesKey: testObjectsFactory invalidCartId).
		].
	! !

!methodRemoval: ClientInterface #addToCart:theBook:inQuantity: stamp: 'Sof D 11/8/2023 02:27:24'!
addToCart: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:27:38' prior: 50658023!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self.
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId) equals: true. 
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:27:40'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:27:40'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:27:46'!
checkoutCartWithID: cartId 
	self shouldBeImplemented.! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/8/2023 02:36:03'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase catalog aMerchanProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/8/2023 02:36:05'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase catalog aMerchanProcessor currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/8/2023 02:36:07'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase catalog aMerchanProcessor currentDate sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:36:00'!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .
	cart :=  cartDatabase at: aCartId.
	card := CreditCard expiringOn: theExpiryDateOfTheCard .
	cashier := Cashier toCheckout: cart  charging: card throught: aMerchanProcessor on: currentDate registeringOn: sales.
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:36:26' prior: 50658287!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .
	cart :=  cartDatabase at: aCartId.
	card := CreditCard expiringOn: theExpiryDateOfTheCard .
	cashier := Cashier toCheckout: cart  charging: card throught: aMerchanProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:36:56'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:36:56'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:37:56' prior: 50658304!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .
	cart :=  cartDatabase at: aCartId.
	card := CreditCard expiringOn: theExpiryDateOfTheCard .
	cashier := Cashier toCheckout: cart  charging: card throught: aMerchanProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !

!methodRemoval: ClientInterface #checkoutCartWithID: stamp: 'Sof D 11/8/2023 02:38:24'!
checkoutCartWithID: cartId 
	self shouldBeImplemented.!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:38:38' prior: 50658328!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .
	cart :=  cartDatabase at: aCartId.
	card := CreditCard expiringOn: theExpiryDateOfTheCard .
	cashier := Cashier toCheckout: cart  charging: card throught: aMerchanProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'Sof D 11/8/2023 02:39:04'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase catalog merchantProcessor currentDate sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:04' prior: 50658351!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .
	cart :=  cartDatabase at: aCartId.
	card := CreditCard expiringOn: theExpiryDateOfTheCard .
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:47'!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: currentDate 
	^self new initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50658147!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50658170!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50657636!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface clientIsNotRegisteredErrorDescription.
		]! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50658088!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new. 
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50658068!
test02ClientInterfaceCanCreateACartForARegisteredClient
		| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new .
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50658230!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId) equals: true. 
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50658195!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
	

	self should: [clientInterface addToCartWithID: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription.	self deny: (cartDatabase includesKey: testObjectsFactory invalidCartId).
		].
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:48' prior: 50658048!
test05CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
	

	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !

!methodRemoval: ClientInterface class #forCartDatabase:merchantProcessor:catalog:passwordAuthenticator: stamp: 'Sof D 11/8/2023 02:39:48'!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator
	^self new initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator!
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:39:52' prior: 50658397!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	^self new initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 02:39:56'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 02:39:56'!
FAILURE!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 02:39:56'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 02:39:56'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 02:39:56'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/8/2023 02:39:56'!
FAILURE!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/8/2023 02:39:56'!
FAILURE!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:39:56'!
ERROR!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 02:40:00'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:40:34' prior: 50658041!
listCartWithID: aCartId	self assertInDatabaseTheCartId: aCartId.

	^(cartDatabase at: aCartId) listCart! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 02:40:36'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 02:40:36'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 02:40:36'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 02:40:36'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 02:40:36'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/8/2023 02:40:36'!
PASSED!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/8/2023 02:40:37'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:40:37'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:40:37'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:41:40' prior: 50658530!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: 1 cardExpiryDate: 1  cardOwner: 1) equals: true. 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:42:18' prior: 50658701!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: (December of: 2023)  cardOwner: 'Juan Perez') equals: true. 
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:42:20'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:42:20'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:42:52' prior: 50658722!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: (December of: 2023)  cardOwner: 'Juan Perez') equals: true. 
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:42:53'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:42:53'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:45:57' prior: 50658379!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .
	cart :=  cartDatabase at: aCartId.
	card := CreditCard expiringOn: (Month month: theExpiryDateOfTheCard monthIndex year: theExpiryDateOfTheCard yearNumber + 1).
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:46:00'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:46:00'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:46:46' prior: 50658750!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: (Month month: 12 year: 2026 )  cardOwner: 'Juan Perez') equals: true. 
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:46:47'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:46:47'!
ERROR!

(Month month: 1 year: 2023)!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:50:31' prior: 50658782!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .
	cart :=  cartDatabase at: aCartId.
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:50:49' prior: 50658808!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (December of: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:50:50'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:50:50'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:51:47'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:51:47'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:52:54' prior: 50658862!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (1).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:53:18' prior: 50658899!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:53:19'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:53:19'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:54:21'!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .
	
	currentDate := theCurrentDate ! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:54:26' prior: 50658613!
forCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	^self new initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate ! !

!methodRemoval: ClientInterface #initializeWithCartDatabase:merchantProcessor:catalog:passwordAuthenticator:currentDate: stamp: 'Sof D 11/8/2023 02:54:42'!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .
	
	currentDate := theCurrentDate !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:54:47'!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:54:55' prior: 50659000!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .
	
	currentDate :=  theCurrentDate ! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 02:54:56'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 02:54:56'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 02:54:56'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 02:54:56'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 02:54:56'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/8/2023 02:54:56'!
PASSED!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/8/2023 02:54:56'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:54:56'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:54:56'!
ERROR!

!methodRemoval: ClientInterface #initializeWithCartDatabase:merchantProcessor:catalog:passwordAuthenticator: stamp: 'Sof D 11/8/2023 02:55:01'!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:55:04'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:55:04'!
ERROR!
!ClientInterfaceTest methodsFor: 'nil' stamp: 'Sof D 11/8/2023 02:55:40'!
debit: anAmount from: aCreditCard 

	! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:55:43'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:55:43'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:56:46' prior: 50659014!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .
	
	currentDate :=  theCurrentDate .
	
	merchantProcessor := aMerchantProcessor ! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:56:52'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:56:52'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/8/2023 02:57:26' prior: 50659092!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .
	
	currentDate :=  theCurrentDate .
	
	merchantProcessor := aMerchantProcessor .
	
	sales := OrderedCollection new.! !

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:57:30'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:57:33'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:57:48' prior: 50658435!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	! !

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/8/2023 02:57:49'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:57:53' prior: 50658489!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new. 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:57:59' prior: 50658578!
test05CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	

	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:58:04' prior: 50658411!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:58:08' prior: 50658550!
test03ClientInterfaceCantAddToANonexistentCart
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	

	self should: [clientInterface addToCartWithID: testObjectsFactory invalidCartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: testObjectsFactory itemSellByTheStorePrice]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription.	self deny: (cartDatabase includesKey: testObjectsFactory invalidCartId).
		].
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:58:12' prior: 50658509!
test02ClientInterfaceCanCreateACartForARegisteredClient
		| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new .
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:58:17' prior: 50658461!
test01ClientInterfaceCantCreateACartForANotRegisteredClient
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface createCartForClient: 'Lord Valdomero' withPassword: testObjectsFactory invalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface clientIsNotRegisteredErrorDescription.
		]! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/8/2023 02:58:19'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:58:33'!
test08CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:58:50' prior: 50659365!
test08CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	

	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:59:13' prior: 50659391!
test08CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: 1 withCreditCardNumbered:  1cardExpiryDate: 1 cardOwner: 1]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:59:28'!
test09CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: 1 withCreditCardNumbered:  1cardExpiryDate: 1 cardOwner: 1]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!methodRemoval: ClientInterfaceTest #test08CantCheckoutNonexistentCart stamp: 'Sof D 11/8/2023 02:59:28'!
test08CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: 1 withCreditCardNumbered:  1cardExpiryDate: 1 cardOwner: 1]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/8/2023 02:59:44' prior: 50659427!
test09CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!testRun: #ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/8/2023 02:59:47'!
PASSED!

----QUIT----(9 November 2023 02:22:39) CuisUniversity-5981.image priorSource: 12495124!

----STARTUP---- (9 November 2023 03:48:50) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!

!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 03:55:12'!
test05ClientInterfaceCanAddManyOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 03:56:31' prior: 50659506!
test05ClientInterfaceCanAddManyOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	self assert: ((cartDatabase at: cartId)  occurrencesOf: testObjectsFactory itemSoldByTheStore) equals: 2.! !

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 03:56:32'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:00:23'!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	self assert: ((cartDatabase at: cartId)  occurrencesOf: testObjectsFactory itemSoldByTheStore) equals: 2.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:00:55' prior: 50659558!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSellByTheStore inQuantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'Sof D 11/9/2023 04:01:10'!
itemNotSoldByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:10' prior: 50657219!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart addItem: testObjectsFactory itemNotSoldByTheStore inAmount: 2 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:10' prior: 50657095!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart addItem: testObjectsFactory itemNotSoldByTheStore inAmount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:10' prior: 50659583!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !

!methodRemoval: StoreTestObjectsFactory #itemNotSellByTheStore stamp: 'Sof D 11/9/2023 04:01:10'!
itemNotSellByTheStore
	
	^'invalidBook'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:01:27' prior: 50659645!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemErrorDescription .
		]! !

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:01:31'!
ERROR!
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:41'!
invalidItemErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:54' prior: 50659708!
invalidItemErrorDescription
	^'Selected item isnt sold by catalog'! !

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:01:58'!
FAILURE!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:01:58'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:04:46' prior: 50658137!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(catalog includes: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:04:50'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:04:50'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:04:50'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:04:50'!
ERROR!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:04:50'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:04:50'!
ERROR!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:04:50'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:04:50'!
PASSED!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:04:50'!
ERROR!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/9/2023 04:04:50'!
ERROR!

!testRun: #ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:04:50'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:05:02'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:05:50' prior: 50659235!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: (OrderedCollection with: testObjectsFactory itemSoldByTheStore) 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:05:52'!
ERROR!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:05:52'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:06:21' prior: 50659728!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(catalog includesKey: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:06:23'!
ERROR!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:06:23'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:06:23'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:06:47' prior: 50659785!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!

!testRun: #ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:06:51'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:07:23' prior: 50659677!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:07:36'!
test07ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:07:38'!
ERROR!
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:07:43'!
invalidItemAmountErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:07:56' prior: 50659997!
invalidItemAmountErrorDescription
	^'Item amount must be positive'! !

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:08:00'!
FAILURE!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:08:00'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:08:31' prior: 50659817!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(catalog includesKey: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(aQuantityToAdd > 0) ifFalse: [ self error: self class invalidItemAmountErrorDescription ].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Sof D 11/9/2023 04:08:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Sof D 11/9/2023 04:08:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Sof D 11/9/2023 04:08:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Sof D 11/9/2023 04:08:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Sof D 11/9/2023 04:08:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Sof D 11/9/2023 04:08:35'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:08:38'!
FAILURE!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:08:38'!
FAILURE!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!

!testRun: #ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:08:38'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:09:14'!
test06ClientInterfaceCannotAddNonexistentBook
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemErrorDescription .
		]! !

!methodRemoval: ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:09:16'!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:09:43'!
FAILURE!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:09:43'!
FAILURE!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:10:07'!
FAILURE!

!testRun: #ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:10:07'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:10:07'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:10:25' prior: 50659966!
test07ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:10:27'!
FAILURE!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:10:27'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:10:33' prior: 50660210!
test07ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:10:34'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:10:53'!
test08CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	

	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !

!methodRemoval: ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:10:53'!
test05CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	

	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:00'!
test09ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new. 
	! !

!methodRemoval: ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:11:00'!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new. 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:06'!
test10ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	! !

!methodRemoval: ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:11:06'!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:32'!
test10CanCheckoutCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !

!methodRemoval: ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/9/2023 04:11:32'!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:40'!
test11CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!methodRemoval: ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:11:40'!
test09CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:51'!
test11CanCheckoutCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !

!methodRemoval: ClientInterfaceTest #test10CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 04:11:51'!
test10CanCheckoutCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:54'!
test12CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!methodRemoval: ClientInterfaceTest #test11CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:11:54'!
test11CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:12:08'!
test13CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!methodRemoval: ClientInterfaceTest #test12CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:12:08'!
test12CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:13:02'!
test12CantCheckoutEmptyCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
		
	
self should: [clientInterface checkoutCartWithID: cartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:13:26' prior: 50660655!
test12CantCheckoutEmptyCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
		
	
self should: [clientInterface checkoutCartWithID: cartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cannotCheckoutEmptyCartErrorDescription .
		]
	 
	! !

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 04:13:34'!
ERROR!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 04:13:34'!
ERROR!
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:13:41'!
cannotCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:13:51' prior: 50660716!
cannotCheckoutEmptyCartErrorDescription
	^'Cannot checkout empty cart'! !

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 04:13:57'!
FAILURE!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 04:13:57'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:16:29' prior: 50658841!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: cart) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 04:16:32'!
ERROR!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 04:16:32'!
FAILURE!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:16:32'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 04:16:43'!
ERROR!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 04:17:24'!
ERROR!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 04:17:24'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:17:54' prior: 50660735!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:17:57'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:21:17'!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:21:30' prior: 50660892!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 04:21:32'!
ERROR!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 04:21:32'!
ERROR!
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:21:36'!
expiredCreditCardErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:21:55' prior: 50660949!
expiredCreditCardErrorDescription
	^'Cant use expired credit card for payment'! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:22:42' prior: 50660819!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:23:22' prior: 50660961!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	(card isExpiredOn: currentDate) ifTrue: [ self error: self class expiredCreditCardErrorDescription ].
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 04:23:24'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 04:23:24'!
FAILURE!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 04:23:24'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:23:38' prior: 50660917!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:23:54' prior: 50661072!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
		
	
self should: [clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 04:23:55'!
FAILURE!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 04:23:55'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:24:10' prior: 50661096!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.

		
	
self should: [clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 04:24:11'!
PASSED!

----STARTUP---- (9 November 2023 01:26:04) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!

!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 03:55:12'!
test05ClientInterfaceCanAddManyOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 03:56:31' prior: 50661169!
test05ClientInterfaceCanAddManyOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	self assert: ((cartDatabase at: cartId)  occurrencesOf: testObjectsFactory itemSoldByTheStore) equals: 2.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:00:23'!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	self assert: ((cartDatabase at: cartId)  occurrencesOf: testObjectsFactory itemSoldByTheStore) equals: 2.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:00:55' prior: 50661217!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSellByTheStore inQuantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'Sof D 11/9/2023 04:01:10'!
itemNotSoldByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:10' prior: 50657219!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart addItem: testObjectsFactory itemNotSoldByTheStore inAmount: 2 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:10' prior: 50657095!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart addItem: testObjectsFactory itemNotSoldByTheStore inAmount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:10' prior: 50661242!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 2. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !

!methodRemoval: StoreTestObjectsFactory #itemNotSellByTheStore stamp: 'Sof D 11/9/2023 01:26:06'!
itemNotSellByTheStore
	
	^'invalidBook'!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:01:27' prior: 50661304!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemErrorDescription .
		]! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:41'!
invalidItemErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:01:54' prior: 50661363!
invalidItemErrorDescription
	^'Selected item isnt sold by catalog'! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:04:46' prior: 50658137!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(catalog includes: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:05:50' prior: 50659235!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: (OrderedCollection with: testObjectsFactory itemSoldByTheStore) 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:06:21' prior: 50661375!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(catalog includesKey: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:06:47' prior: 50661387!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (cartDatabase at: cartId)  includes: testObjectsFactory itemSoldByTheStore.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:07:23' prior: 50661336!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:07:36'!
test07ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:07:43'!
invalidItemAmountErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:07:56' prior: 50661503!
invalidItemAmountErrorDescription
	^'Item amount must be positive'! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:08:31' prior: 50661412!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	(catalog includesKey: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(aQuantityToAdd > 0) ifFalse: [ self error: self class invalidItemAmountErrorDescription ].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:09:14'!
test06ClientInterfaceCannotAddNonexistentBook
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemErrorDescription .
		]! !

!methodRemoval: ClientInterfaceTest #test06ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 01:26:06'!
test06ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:10:25' prior: 50661476!
test07ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:10:33' prior: 50661585!
test07ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:10:53'!
test08CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	

	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !

!methodRemoval: ClientInterfaceTest #test05CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 01:26:06'!
test05CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	

	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:00'!
test09ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new. 
	! !

!methodRemoval: ClientInterfaceTest #test06ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 01:26:06'!
test06ListCartReturnsCorrectResultForNewCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: Bag new. 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:06'!
test10ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	! !

!methodRemoval: ClientInterfaceTest #test07ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 01:26:06'!
test07ListCartReturnsCorrectResultForCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	

	
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore) . 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:32'!
test10CanCheckoutCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !

!methodRemoval: ClientInterfaceTest #test08CanCheckoutCart stamp: 'Sof D 11/9/2023 01:26:06'!
test08CanCheckoutCart

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:40'!
test11CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!methodRemoval: ClientInterfaceTest #test09CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 01:26:06'!
test09CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:51'!
test11CanCheckoutCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	! !

!methodRemoval: ClientInterfaceTest #test10CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 01:26:06'!
test10CanCheckoutCartWithItems

	
	| clientInterface cartDatabase cartId|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	

	
	self assert: (clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez') equals: true. 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:11:54'!
test12CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!methodRemoval: ClientInterfaceTest #test11CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 01:26:06'!
test11CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:12:08'!
test13CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !

!methodRemoval: ClientInterfaceTest #test12CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 01:26:06'!
test12CantCheckoutNonexistentCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:13:02'!
test12CantCheckoutEmptyCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
		
	
self should: [clientInterface checkoutCartWithID: cartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:13:26' prior: 50662018!
test12CantCheckoutEmptyCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
		
	
self should: [clientInterface checkoutCartWithID: cartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cannotCheckoutEmptyCartErrorDescription .
		]
	 
	! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:13:41'!
cannotCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:13:51' prior: 50662072!
cannotCheckoutEmptyCartErrorDescription
	^'Cannot checkout empty cart'! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:16:29' prior: 50658841!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: cart) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:17:54' prior: 50662084!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:21:17'!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:21:30' prior: 50662134!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory invalidCartId withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:21:36'!
expiredCreditCardErrorDescription
	self shouldBeImplemented.! !
!ClientInterface class methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:21:55' prior: 50662184!
expiredCreditCardErrorDescription
	^'Cant use expired credit card for payment'! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:22:42' prior: 50662109!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 04:23:22' prior: 50662196!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	(card isExpiredOn: currentDate) ifTrue: [ self error: self class expiredCreditCardErrorDescription ].
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	^true
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:23:38' prior: 50662159!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
self should: [clientInterface checkoutCartWithID: testObjectsFactory  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:23:54' prior: 50662250!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
		
	
self should: [clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 04:24:10' prior: 50662274!
test14CantCheckoutCartUsingExpiredCreditCart

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.

		
	
self should: [clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2023' cardOwner: 'Juan Perez']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface expiredCreditCardErrorDescription .
		]
	 
	! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 01:26:10'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:32:32'!
test15ValidClientCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:36:49' prior: 50662385!
test15ValidClientCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 'Nicolas Rinaldi' withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:38:22' prior: 50662410!
test15ValidClientCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore.
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !

!testRun: #ClientInterfaceTest #test15ValidClientCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:38:25'!
ERROR!

!testRun: #ClientInterfaceTest #test15ValidClientCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:38:25'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:38:32'!
listPurchasesOfClientWithID: aRenameMe1 
	self shouldBeImplemented.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:39:26' prior: 50662472!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 
	^Bag new! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:39:38'!
test15ValidClientWithNoPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore.
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:39:58'!
test16ValidClientWithPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore.
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:40:08' prior: 50662514!
test16ValidClientWithPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore.
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !

!methodRemoval: ClientInterfaceTest #test15ValidClientCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:40:10'!
test15ValidClientCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore.
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:40:24' prior: 50662545!
test16ValidClientWithPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:40:25'!
FAILURE!

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:40:25'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:40:41' prior: 50662483!
test15ValidClientWithNoPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: Bag new.
	
	

	
	! !

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:40:44'!
ERROR!

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:40:44'!
ERROR!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:40:55' prior: 50662647!
test15ValidClientWithNoPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: Bag new.
	
	

	
	! !

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:40:58'!
PASSED!

!testRun: #ClientInterfaceTest #test16ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:41:02'!
FAILURE!

!testRun: #ClientInterfaceTest #test16ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:41:02'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:41:34' prior: 50662478!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 
	^sales at: theIdOfTheClientToListThePurchasesOf ! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'Sof D 11/9/2023 01:41:36'!
PASSED!

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:41:36'!
ERROR!

!testRun: #ClientInterfaceTest #test16ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:41:36'!
FAILURE!

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:41:38'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:42:51' prior: 50656335!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	| cartId |
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	cartId := self nextCartId.
	cartDatabase at: cartId put: (Cart acceptingItemsOf: catalog).
	
	self registerNewClientInSalesList.
	^cartId! !
!ClientInterface methodsFor: 'nil' stamp: 'Sof D 11/9/2023 01:43:32'!
registerNewClientInSalesList
	(sales includesKey: 1) ifFalse: [ sales at: 1 put: Bag new ]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:44:12'!
registerNewClientInSalesList: theIdOfTheNewClient
	(sales includesKey: 1) ifFalse: [ sales at: 1 put: Bag new ]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:44:12' prior: 50662780!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	| cartId |
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	cartId := self nextCartId.
	cartDatabase at: cartId put: (Cart acceptingItemsOf: catalog).
	
	self registerNewClientInSalesList: self.
	^cartId! !

!methodRemoval: ClientInterface #registerNewClientInSalesList stamp: 'Sof D 11/9/2023 01:44:12'!
registerNewClientInSalesList
	(sales includesKey: 1) ifFalse: [ sales at: 1 put: Bag new ]!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:44:24' prior: 50662806!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	| cartId |
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	cartId := self nextCartId.
	cartDatabase at: cartId put: (Cart acceptingItemsOf: catalog).
	
	self registerNewClientInSalesList: aClientToCheck .
	^cartId! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:44:31' prior: 50662799!
registerNewClientInSalesList: theIdOfTheNewClient
	(sales includesKey: theIdOfTheNewClient) ifFalse: [ sales at: theIdOfTheNewClient put: Bag new ]! !

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:44:38'!
ERROR!

!testRun: #ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:44:38'!
ERROR!

!methodRemoval: ClientInterfaceTest #test15ValidClientWithNoPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:45:08'!
test15ValidClientWithNoPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: Bag new.
	
	

	
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:45:12'!
test15ValidClientWithPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !

!methodRemoval: ClientInterfaceTest #test16ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'Sof D 11/9/2023 01:45:12'!
test16ValidClientWithPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:45:22' prior: 50662826!
createCartForClient:  aClientToCheck withPassword: aPasswordToCheck
	| cartId |
	passwordAuthenticator validateClientId: aClientToCheck withPassword: aPasswordToCheck.
	cartId := self nextCartId.
	cartDatabase at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'Sof D 11/9/2023 01:45:45' prior: 50662222!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	(card isExpiredOn: currentDate) ifTrue: [ self error: self class expiredCreditCardErrorDescription ].
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	
	
	
	^true
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:46:52' prior: 50662873!
test15ValidClientWithPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:54:06' prior: 50661425!
test04ClientInterfaceCanAddBookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 1.
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore )! !

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'Sof D 11/9/2023 01:54:07'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:56:57' prior: 50661193!
test05ClientInterfaceCanAddManyOfABookToACart
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	self assert: (clientInterface listCartWithID: cartId) equals: (Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore )! !

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'Sof D 11/9/2023 01:56:58'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:57:12' prior: 50661530!
test06ClientInterfaceCannotAddNonexistentBook
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemErrorDescription .
		
		]! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:57:32' prior: 50663069!
test06ClientInterfaceCannotAddNonexistentBook
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemNotSoldByTheStore inQuantity: 1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemErrorDescription .
		self assert: (clientInterface listCartWithID: cartId) equals: (Bag new)
		]! !

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'Sof D 11/9/2023 01:57:37'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'Sof D 11/9/2023 01:57:46' prior: 50661612!
test07ClientInterfaceCannotAddNegativeAmountOfBooks
	| clientInterface cartDatabase cartId |
	
	cartDatabase := Dictionary new.
	
	clientInterface := ClientInterface 
		forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	
	cartId := clientInterface createCartForClient:  'Lord Valdomero' withPassword: testObjectsFactory validPassword.
	self should: [	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: -1. ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface invalidItemAmountErrorDescription .
		self assert: (clientInterface listCartWithID: cartId) equals: (Bag new)

		]! !

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 01:57:47'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'Sof D 11/9/2023 01:58:50'!
PASSED!

----QUIT----(9 November 2023 02:07:50) CuisUniversity-5981.image priorSource: 10491147!

----STARTUP---- (9 November 2023 02:08:00) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


----QUIT----(9 November 2023 02:08:07) CuisUniversity-5981.image priorSource: 10608485!

----STARTUP---- (9 November 2023 02:36:58) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!

!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 02:41:54' prior: 50661639!
test08CannotListCartWithInvalidID

	
	| clientInterface cartDatabase|
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self 
		currentDate: (Month month: 1 year: 2025).	
	self should: [clientInterface listCartWithID: testObjectsFactory invalidCartId ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError |
		self assert: anError messageText equals: ClientInterface cartDoesntExistErrorDescription .
		]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 02:45:07' prior: 50661515!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	
	(catalog includesKey: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(aQuantityToAdd > 0) ifFalse: [ self error: self class invalidItemAmountErrorDescription ].
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 02:46:35'!
assertIsInCatalogTheBook: aBookToAdd AndIsGreaterThanTwo: aQuantityToAdd

	(catalog includesKey: aBookToAdd) ifFalse: [ self error: self class invalidItemErrorDescription ].
	(aQuantityToAdd > 0) ifFalse: [ self error: self class invalidItemAmountErrorDescription ]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 02:46:35' prior: 50663201!
addToCartWithID: aCartId theBook: aBookToAdd inQuantity: aQuantityToAdd
	self assertInDatabaseTheCartId: aCartId.
	
	self assertIsInCatalogTheBook: aBookToAdd AndIsGreaterThanTwo: aQuantityToAdd.
	(cartDatabase at: aCartId) addItem: aBookToAdd  inAmount: aQuantityToAdd.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 02:47:45' prior: 50662950!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	(card isExpiredOn: currentDate) ifTrue: [ self error: self class expiredCreditCardErrorDescription ].
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: sales.
	cashier checkOut .
	
	
	
	^true
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 03:29:23'!
test16ListPurcharcesIsEmptyForANewUserId
	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !

!testRun: #ClientInterfaceTest #test16ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 03:29:26'!
FAILURE!

!testRun: #ClientInterfaceTest #test15ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'eaam 11/9/2023 03:29:37'!
FAILURE!

!testRun: #ClientInterfaceTest #test15ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'eaam 11/9/2023 03:29:37'!
FAILURE!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 03:29:41'!
PASSED!

!testRun: #ClientInterfaceTest #test15ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'eaam 11/9/2023 03:29:43'!
FAILURE!

!testRun: #ClientInterfaceTest #test15ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'eaam 11/9/2023 03:29:43'!
FAILURE!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 03:42:48' prior: 50663268!
test16ListPurcharcesIsEmptyForANewUserId
	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 03:43:05' prior: 50663323!
test16ListPurcharcesIsEmptyForANewUserId
	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: Bag new.
	
	

	
	! !

!testRun: #ClientInterfaceTest #test16ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 03:43:12'!
ERROR!

!testRun: #ClientInterfaceTest #test16ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 03:43:12'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 03:43:27' prior: 50662708!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 
	^Bag new.! !

!testRun: #ClientInterfaceTest #test16ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 03:43:41'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 03:43:51'!
test15ListPurcharcesIsEmptyForANewUserId
	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: Bag new.
	
	

	
	! !

!methodRemoval: ClientInterfaceTest #test16ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 03:43:51'!
test16ListPurcharcesIsEmptyForANewUserId
	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: Bag new.
	
	

	
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 03:46:54'!
test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !

!methodRemoval: ClientInterfaceTest #test15ValidClientWithPurchasesCanSeeTheirPurchases stamp: 'eaam 11/9/2023 03:46:54'!
test15ValidClientWithPurchasesCanSeeTheirPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 03:47:25' prior: 50663419!
test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1) equals: expectedPurchaseList.
	
	

	
	! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'eaam 11/9/2023 03:53:42'!
Object subclass: #ClientInterface
	instanceVariableNames: 'passwordAuthenticator cartsIds cartDatabase catalog merchantProcessor currentDate salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 03:53:42' prior: 50659114!
initializeWithCartDatabase: aDatabaseOfCarts merchantProcessor: aMerchantProcessor catalog: aCatalog passwordAuthenticator: aPasswordAuthenticator currentDate: theCurrentDate 
	passwordAuthenticator := aPasswordAuthenticator.
	cartsIds := OrderedCollection new.
	cartDatabase := aDatabaseOfCarts.
	catalog := aCatalog .
	
	currentDate :=  theCurrentDate .
	
	merchantProcessor := aMerchantProcessor .
	
	salesBook := OrderedCollection new.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 03:53:42' prior: 50662840!
registerNewClientInSalesList: theIdOfTheNewClient
	(salesBook includesKey: theIdOfTheNewClient) ifFalse: [ salesBook at: theIdOfTheNewClient put: Bag new ]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 03:53:42' prior: 50663240!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	(card isExpiredOn: currentDate) ifTrue: [ self error: self class expiredCreditCardErrorDescription ].
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: salesBook.
	cashier checkOut .
	
	
	
	^true
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 03:58:23' prior: 50663371!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 
	^ salesBook collect: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf].! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:00:11' prior: 50663583!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 
	^ (salesBook collect: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) asBag.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'eaam 11/9/2023 04:00:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'testing' stamp: 'eaam 11/9/2023 04:00:43'!
isFromClient: aClientIdToCheck
	
	^clientId =  aClientIdToCheck ! !
!CreditCard methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:01:06' prior: 50656406!
initializeExpiringOn: aMonth 
	
	expiration := aMonth. 
	clientId := 1.! !

!methodRemoval: CreditCard #isFromClient: stamp: 'eaam 11/9/2023 04:01:33'!
isFromClient: aClientIdToCheck
	
	^clientId =  aClientIdToCheck !

!classDefinition: #Sale category: 'TusLibros' stamp: 'eaam 11/9/2023 04:01:39'!
Object subclass: #Sale
	instanceVariableNames: 'total clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:01:38'!
isFromClient: aClientIdToCheck
	
	^clientId =  aClientIdToCheck ! !
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:02:05' prior: 50656438!
initializeTotal: aTotal

	total := aTotal.
	clientId := 1.! !
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:02:28'!
initializeTotal: aTotal a: a 

	total := aTotal.
	clientId := 1.! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:02:28' prior: 50656450!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal a: a ! !

!methodRemoval: Sale #initializeTotal: stamp: 'eaam 11/9/2023 04:02:28'!
initializeTotal: aTotal

	total := aTotal.
	clientId := 1.!
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:02:50'!
initializeTotal: aTotal forClient: aClientId 

	total := aTotal.
	clientId := aClientId.! !

!methodRemoval: Sale #initializeTotal:forClient: stamp: 'eaam 11/9/2023 04:03:04'!
initializeTotal: aTotal forClient: aClientId 

	total := aTotal.
	clientId := aClientId.!
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:03:15'!
initializeTotal: aTotal forClient: a 

	total := aTotal.
	clientId := 1.! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:03:15' prior: 50663644!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: a ! !

!methodRemoval: Sale #initializeTotal:a: stamp: 'eaam 11/9/2023 04:03:15'!
initializeTotal: aTotal a: a 

	total := aTotal.
	clientId := 1.!
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:03:28' prior: 50663665!
initializeTotal: aTotal forClient: aClientId 

	total := aTotal.
	clientId := 1.! !
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:03:31' prior: 50663682!
initializeTotal: aTotal forClient: aClientId 

	total := aTotal.
	clientId := aClientId.! !
!Sale class methodsFor: 'instance creation' stamp: 'eaam 11/9/2023 04:04:16'!
a: a of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: a ! !

!methodRemoval: Sale class #of: stamp: 'eaam 11/9/2023 04:04:16'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: a !
!Sale class methodsFor: 'instance creation' stamp: 'eaam 11/9/2023 04:04:48'!
of: aTotal forClient: aClientId

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: aClientId ! !

!methodRemoval: Sale class #a:of: stamp: 'eaam 11/9/2023 04:04:52'!
a: a of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: a !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'eaam 11/9/2023 04:05:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:05:08'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'eaam 11/9/2023 04:05:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'eaam 11/9/2023 04:05:08'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'eaam 11/9/2023 04:05:08'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'eaam 11/9/2023 04:05:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:05:11'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'eaam 11/9/2023 04:05:41' prior: 50656219!
createSale

	^ Sale of: total forClient: 1
! !
!Cashier class methodsFor: 'instance creation' stamp: 'eaam 11/9/2023 04:08:34'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook forClient: forClient 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:08:34' prior: 50657386!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook forClient: 1.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:08:34' prior: 50657345!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook forClient: 1 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:08:34' prior: 50657412!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook forClient: 1.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:08:34' prior: 50655861!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook forClient: 1 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:08:34' prior: 50657367!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 1.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook forClient: 1.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:08:34' prior: 50657328!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart addItem: testObjectsFactory itemSoldByTheStore inAmount: 2.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new forClient: 1.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:08:34' prior: 50663554!
checkoutCartWithID: aCartId withCreditCardNumbered: theNumberOfTheCreditCardToCharge cardExpiryDate: theExpiryDateOfTheCard cardOwner: theNameOfTheCardOwner
	| cashier cart card |
	self assertInDatabaseTheCartId: aCartId .

	cart :=  cartDatabase at: aCartId.
	
	((self listCartWithID: aCartId ) isEmpty) ifTrue: [ self error: self class cannotCheckoutEmptyCartErrorDescription ].
	
	card := CreditCard expiringOn: (Month month: ((theExpiryDateOfTheCard copyFrom: 1 to: 2) asNumber )year: ((theExpiryDateOfTheCard copyFrom: 4 to: 7) asNumber)).
	
	(card isExpiredOn: currentDate) ifTrue: [ self error: self class expiredCreditCardErrorDescription ].
	
	cashier := Cashier toCheckout: cart  charging: card throught: merchantProcessor on: currentDate registeringOn: salesBook forClient: 1.
	cashier checkOut .
	
	
	
	^true
	! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'eaam 11/9/2023 04:08:34'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!
!Cashier class methodsFor: 'instance creation' stamp: 'eaam 11/9/2023 04:08:57' prior: 50663748!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook forClient: aClientId 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!Cashier methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:09:50'!
withClient: aClientId initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:09:50' prior: 50663941!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook forClient: aClientId 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new withClient: aClientId initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'eaam 11/9/2023 04:09:50'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'eaam 11/9/2023 04:10:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:10:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'eaam 11/9/2023 04:10:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'eaam 11/9/2023 04:10:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'eaam 11/9/2023 04:10:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'eaam 11/9/2023 04:10:03'!
PASSED!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'eaam 11/9/2023 04:10:21'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:10:20' prior: 50663954!
withClient: aClientId initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
		client := aClientId.

	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier methodsFor: 'checkout - private' stamp: 'eaam 11/9/2023 04:10:30' prior: 50663743!
createSale

	^ Sale of: total forClient: client
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'eaam 11/9/2023 04:10:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:10:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'eaam 11/9/2023 04:10:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'eaam 11/9/2023 04:10:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'eaam 11/9/2023 04:10:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'eaam 11/9/2023 04:10:31'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:10:47'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:10:47'!
FAILURE!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:10:47'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:11:12' prior: 50663592!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 
	^ (salesBook detect: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) asBag.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:11:14'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:11:14'!
ERROR!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:11:14'!
ERROR!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:11:18'!
ERROR!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:12:11' prior: 50664120!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 
	^ (salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) asBag.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:12:12'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:12:12'!
FAILURE!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:12:12'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'eaam 11/9/2023 04:15:49' prior: 50664030!
createSale

	^ Sale of: total forClient: client withItems: cart items
! !
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:16:44'!
initializeTotal: aTotal forClient: aClientId withItems: itemsBoughtByTheClient  

	total := aTotal.
	clientId := aClientId.! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:16:44' prior: 50663706!
of: aTotal forClient: aClientId

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: aClientId withItems: aBagOfItemsBoughtByTheClient ! !

!methodRemoval: Sale #initializeTotal:forClient: stamp: 'eaam 11/9/2023 04:16:44'!
initializeTotal: aTotal forClient: aClientId 

	total := aTotal.
	clientId := aClientId.!
!Sale class methodsFor: 'instance creation' stamp: 'eaam 11/9/2023 04:17:42'!
of: aTotal forClient: aClientId withItems: aBagOfItemsBoughtByTheClient 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: aClientId withItems: aBagOfItemsBoughtByTheClient ! !

!methodRemoval: Sale class #of:forClient: stamp: 'eaam 11/9/2023 04:17:42'!
of: aTotal forClient: aClientId

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal forClient: aClientId withItems: aBagOfItemsBoughtByTheClient !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'eaam 11/9/2023 04:17:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:17:57'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'eaam 11/9/2023 04:17:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'eaam 11/9/2023 04:17:57'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'eaam 11/9/2023 04:17:57'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'eaam 11/9/2023 04:17:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:18:00'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'eaam 11/9/2023 04:18:30' prior: 50664265!
createSale

	^ Sale of: total forClient: client withItems: cart listCart
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'eaam 11/9/2023 04:18:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:18:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'eaam 11/9/2023 04:18:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'eaam 11/9/2023 04:18:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'eaam 11/9/2023 04:18:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'eaam 11/9/2023 04:18:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:18:34'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eaam 11/9/2023 04:18:34'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:18:34'!
FAILURE!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:18:46'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:18:46'!
FAILURE!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:18:46'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:18:56' prior: 50664192!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 


	^ (salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) asBag.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'eaam 11/9/2023 04:19:50'!
Object subclass: #Sale
	instanceVariableNames: 'total clientId listOfItemsBoughtByTheClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'eaam 11/9/2023 04:19:49' prior: 50664270!
initializeTotal: aTotal forClient: aClientId withItems: itemsBoughtByTheClient  

	total := aTotal.
	clientId := aClientId.
	listOfItemsBoughtByTheClient := itemsBoughtByTheClient! !
!Sale methodsFor: 'total' stamp: 'eaam 11/9/2023 04:20:07'!
ItemsBought
	
	^ listOfItemsBoughtByTheClient ! !
!Sale methodsFor: 'total' stamp: 'eaam 11/9/2023 04:20:17' prior: 50664558!
ItemsBought
	
	^ listOfItemsBoughtByTheClient ! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'eaam 11/9/2023 04:20:24'!
Object subclass: #Sale
	instanceVariableNames: 'total clientId ItemsBought'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:20:24' prior: 50664550!
initializeTotal: aTotal forClient: aClientId withItems: itemsBoughtByTheClient  

	total := aTotal.
	clientId := aClientId.
	ItemsBought := itemsBoughtByTheClient! !
!Sale methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:20:24' prior: 50664562!
ItemsBought
	
	^ ItemsBought ! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:24:29' prior: 50664534!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 


	^ (salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale].! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:24:57' prior: 50664588!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 


	^ (salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought].! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:25:11' prior: 50664600!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 


	^ ((salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag.! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:25:13'!
PASSED!

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:25:15'!
PASSED!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:27:18'!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
	self should: (clientInterface listPurchasesOfClientWithID: 1)
	

	
	! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:28:11'!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf withPassword: aPassword  


	^ ((salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag.! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:28:11' prior: 50663484!
test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1 withPassword: '') equals: expectedPurchaseList.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:28:11' prior: 50663380!
test15ListPurcharcesIsEmptyForANewUserId
	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1 withPassword: '') equals: Bag new.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:28:11' prior: 50664743!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	
	self should: (clientInterface listPurchasesOfClientWithID: 1 withPassword: '')
	

	
	! !

!methodRemoval: ClientInterface #listPurchasesOfClientWithID: stamp: 'eaam 11/9/2023 04:28:11'!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf 


	^ ((salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag.!
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:28:59' prior: 50664827!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: (clientInterface listPurchasesOfClientWithID: 1 withPassword: '')
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:29:05' prior: 50664855!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: (clientInterface listPurchasesOfClientWithID: 1 withPassword: '')
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:29:21' prior: 50664876!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: (clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory invalidPassword)
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:29:31' prior: 50664897!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: (clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory invalidPassword)
	on: Error
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:30:08' prior: 50664919!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory invalidPassword]
	on: Error
	withExceptionDo: [:anError]
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:30:24' prior: 50664941!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory invalidPassword]
	raise: Error
	withExceptionDo: [:anError]
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:30:28' prior: 50664964!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory invalidPassword]
	raise: Error
	withExceptionDo: [:anError | ]
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:30:43' prior: 50664987!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory invalidPassword]
	raise: Error
	withExceptionDo: [:anError | 
		
		]
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:30:58' prior: 50665010!
test17CantListPurchacesOfAInalidClient
	
	| clientInterface cartDatabase |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	passwordAuthenticator := [:clientId :password | 
		clientInterface error: ClientInterface clientIsNotRegisteredErrorDescription.
		].
	
	self should: [clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory invalidPassword]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError messageText equals: ClientInterface clientIsNotRegisteredErrorDescription.
		]
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:31:15' prior: 50664772!
test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases

	
	| clientInterface cartDatabase cartId expectedPurchaseList |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	clientInterface addToCartWithID: cartId theBook: testObjectsFactory itemSoldByTheStore inQuantity: 2.
	clientInterface checkoutCartWithID: cartId  withCreditCardNumbered: '1111111111111111' cardExpiryDate: '12/2026' cardOwner: 'Juan Perez'.
	
	expectedPurchaseList := Bag with: testObjectsFactory itemSoldByTheStore with: testObjectsFactory itemSoldByTheStore .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory validPassword) equals: expectedPurchaseList.
	
	

	
	! !
!ClientInterfaceTest methodsFor: 'tests' stamp: 'eaam 11/9/2023 04:31:22' prior: 50664806!
test15ListPurcharcesIsEmptyForANewUserId
	
	| clientInterface cartDatabase cartId |
	cartDatabase := Dictionary new.
	clientInterface := ClientInterface forCartDatabase: cartDatabase 
		merchantProcessor: self 
		catalog: testObjectsFactory defaultCatalog 
		passwordAuthenticator: self currentDate: (Month month: 1 year: 2025).
		
	cartId := clientInterface createCartForClient: 1 withPassword: testObjectsFactory validPassword .
	
	self assert: (clientInterface listPurchasesOfClientWithID: 1 withPassword: testObjectsFactory validPassword) equals: Bag new.
	
	

	
	! !

!testRun: #ClientInterfaceTest #test01ClientInterfaceCantCreateACartForANotRegisteredClient stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test02ClientInterfaceCanCreateACartForARegisteredClient stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test03ClientInterfaceCantAddToANonexistentCart stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test04ClientInterfaceCanAddBookToACart stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test05ClientInterfaceCanAddManyOfABookToACart stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test06ClientInterfaceCannotAddNonexistentBook stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test07ClientInterfaceCannotAddNegativeAmountOfBooks stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test08CannotListCartWithInvalidID stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test09ListCartReturnsCorrectResultForNewCart stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test10ListCartReturnsCorrectResultForCartWithItems stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test11CanCheckoutCartWithItems stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test12CantCheckoutEmptyCart stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test13CantCheckoutNonexistentCart stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test14CantCheckoutCartUsingExpiredCreditCart stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test15ListPurcharcesIsEmptyForANewUserId stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test16ListPurchacesShowsPurchasesOfAValidClientWithPurchases stamp: 'eaam 11/9/2023 04:31:34'!
PASSED!

!testRun: #ClientInterfaceTest #test17CantListPurchacesOfAInalidClient stamp: 'eaam 11/9/2023 04:31:34'!
FAILURE!

!testRun: #ClientInterfaceTest #test17CantListPurchacesOfAInalidClient stamp: 'eaam 11/9/2023 04:31:34'!
FAILURE!
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:32:12' prior: 50664759!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf withPassword: aPassword  

	passwordAuthenticator validateClientId: theIdOfTheClientToListThePurchasesOf withPassword: aPassword.
	^ ((salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:32:40' prior: 50665182!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf withPassword: aPassword  

	passwordAuthenticator validateClientId: theIdOfTheClientToListThePurchasesOf withPassword: aPassword.
	

	^ ((salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:33:01'!
salesForClientId: theIdOfTheClientToListThePurchasesOf

	^ salesBook select: [:aSale | aSale isFromClient: theIdOfTheClientToListThePurchasesOf]! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:33:01' prior: 50665198!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf withPassword: aPassword  

	passwordAuthenticator validateClientId: theIdOfTheClientToListThePurchasesOf withPassword: aPassword.
	

	^ ((self salesForClientId: theIdOfTheClientToListThePurchasesOf) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:34:29'!
allPurchasesOfClientId: theIdOfTheClientToListThePurchasesOf

	^ ((self salesForClientId: theIdOfTheClientToListThePurchasesOf) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:34:29' prior: 50665222!
listPurchasesOfClientWithID: theIdOfTheClientToListThePurchasesOf withPassword: aPassword  

	passwordAuthenticator validateClientId: theIdOfTheClientToListThePurchasesOf withPassword: aPassword.
	

	^ self allPurchasesOfClientId: theIdOfTheClientToListThePurchasesOf.! !
!ClientInterface methodsFor: 'as yet unclassified' stamp: 'eaam 11/9/2023 04:36:31' prior: 50665237!
allPurchasesOfClientId: aClientIdToGetAllThePurchases

	^ ((self salesForClientId: aClientIdToGetAllThePurchases) inject: OrderedCollection new into: [:listOfPurchases :aSale | listOfPurchases addAll: aSale ItemsBought]) asBag! !

----QUIT----(9 November 2023 04:37:13) CuisUniversity-5981.image priorSource: 10608696!