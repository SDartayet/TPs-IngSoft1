

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (19 October 2023 21:28:45) as /home/clinux01/Documents/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Documents/linux64/Portfolio-Solucion.st----!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 21:32:49'!
ProtoObject subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:32:35'!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	on: Error
	do: Transfer accountCantTransferToItself.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:34:01' prior: 50651050!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExeptionDo: [Transfer accountCantTransferToItself.]! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:34:26' prior: 50651060!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo: [Transfer accountCantTransferToItself.]! !

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:34:28'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:35:30' prior: 50651070!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo: [Transfer accountCantTransferToItself.]! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:36:08' prior: 50651084!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: Transfer accountCantTransferToItself equals: anError messageText.]! !

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:36:12'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:36:36'!
accountCantTransferToItself
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:36:53' prior: 50651109!
accountCantTransferToItself
	^'NO MAN QUE HACES'.! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 21:37:18'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:37:55'!
accountCantTransferToItselfErrorDescription
	^'NO MAN QUE HACES'.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 21:37:55' prior: 50651094!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: Transfer accountCantTransferToItselfErrorDescription equals: anError messageText.]! !

!methodRemoval: Transfer class #accountCantTransferToItself stamp: 'eaam 10/19/2023 21:37:55'!
accountCantTransferToItself
	^'NO MAN QUE HACES'.!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:38:13'!
FAILURE!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:39:35'!
 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmmountToTransfer
	! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:39:49' prior: 50651156!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmmountToTransfer
	self class ! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:39:59' prior: 50651162!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self class accountCantTransferToItselfErrorDescription! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:42:11' prior: 50651168!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self error: self class accountCantTransferToItselfErrorDescription! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:42:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:42:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:44:32'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:44:44' prior: 50651136!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]! !

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:44:45'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:45:37'!
XXXX
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]! !

!methodRemoval: ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:45:37'!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:45:42' prior: 50651238!
XXXX
	"| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]"! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:45:59'!
test08TransferChangesBalance

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:46:22' prior: 50651273!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: account2).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:47:46' prior: 50651284!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: account2).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:48:53' prior: 50651295!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:48:54'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:49:11' prior: 50651176!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self error: self class accountCantTransferToItselfErrorDescription! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:12'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:12'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:49:57' prior: 50651323!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self error: self accountCantTransferToItselfErrorDescription! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:58'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:50:17' prior: 50651364!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit ! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:50:37' prior: 50651405!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit for: aAccountToTransferTo! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:51:00' prior: 50651411!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:51:20' prior: 50651418!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.
	Withdraw register: 1 on: aAccountToTransferFrom.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:21'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:21'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:39' prior: 50651308!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: 0 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:40'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:46' prior: 50651468!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:46'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:53' prior: 50651483!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: 0 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:54'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:59' prior: 50651498!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:52:24' prior: 50651425!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.
	Withdraw register: 1 on: aAccountToTransferFrom.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:52:29' prior: 50651525!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:52:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:52:30'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59' prior: 50651513!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:53:11' prior: 50651534!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.
	Withdraw register: 1 on: aAccountToTransferFrom.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:53:26' prior: 50651623!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:55:48'!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 21:56:25'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:58:34' prior: 50651672!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:59:27' prior: 50651695!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'eaam 10/19/2023 21:59:29'!
FAILURE!
!Transfer methodsFor: 'no messages' stamp: 'eaam 10/19/2023 22:00:29'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:00:33' prior: 50651721!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	
	! !

Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 22:00:44'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50651727!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:02:23'!
affectBalance: argumento! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:02:33' prior: 50651753!
affectBalance: aBalance! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:02:38' prior: 50651757!
affectBalance: aBalance
	! !

----QUIT----(19 October 2023 22:07:33) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (19 October 2023 22:09:26) as /home/clinux01/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!


----QUIT----(19 October 2023 22:09:36) CuisUniversity-5981.image priorSource: 10243644!

----STARTUP---- (19 October 2023 23:47:53) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 23:49:21' prior: 50651662!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	
	self initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/19/2023 23:51:13' prior: 50651778!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	aAccountToTransferFrom register: transfer.
	self initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/19/2023 23:52:07' prior: 50651787!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	
	self initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	aAccountToTransferFrom register: self.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/19/2023 23:52:58' prior: 50651798!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	aAccountToTransferFrom register: transfer.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 00:23:04'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09 stamp: 'eaam 10/20/2023 00:23:04'!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:07:22' prior: 50651819!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33' prior: 50651843!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

Transfer subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 01:32:35'!
Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 01:32:47'!
Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:35:10' prior: 50651808!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	aAccountToTransferTo register: IncomingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer.
	aAccountToTransferFrom register: IncomingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:39:20' prior: 50651898!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:39:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:39:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:39:29'!
ERROR!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:39:43'!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self shouldBeImplemented.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:40:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:40:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:40:29'!
ERROR!
!IncomingTransfer class methodsFor: 'error handling' stamp: 'eaam 10/20/2023 01:40:35' overrides: 16902107!
error: aRenameMe1 
	self shouldBeImplemented.! !

!methodRemoval: IncomingTransfer class #error: stamp: 'eaam 10/20/2023 01:40:48'!
error: aRenameMe1 
	self shouldBeImplemented.!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:41:09' prior: 50651969!
forAccount: aAccountToTransferFrpm amount: aAmountToTransfer 
	self shouldBeImplemented.! !
!OutgoingTransfer class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 01:41:14'!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self shouldBeImplemented.! !
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:45:51' prior: 50652027!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self new initializeFor: aAccountToTransferTo with: aAmountToTransfer.! !
!OutgoingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 01:46:27'!
initializeFor: aAccountToTransferTo with: aAmountToTransfer
	value := aAmountToTransfer.
	to := aAccountToTransferTo.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:47:08' prior: 50651915!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer).! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:47:25' prior: 50652048!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:47:50' overrides: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !

!methodRemoval: OutgoingTransfer class #forAccount:amount: stamp: 'eaam 10/20/2023 01:47:58'!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self new initializeFor: aAccountToTransferTo with: aAmountToTransfer.!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:48:09'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	to := aAccountToTransferTo.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:48:16' prior: 50652101!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !

!methodRemoval: OutgoingTransfer #initializeFor:with: stamp: 'eaam 10/20/2023 01:48:21'!
initializeFor: aAccountToTransferTo with: aAmountToTransfer
	value := aAmountToTransfer.
	to := aAccountToTransferTo.!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:49:31' overrides: 50651761!
affectBalance: aBalance

	^aBalance - value ! !
!IncomingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 01:49:39' overrides: 50651761!
affectBalance: aBalance

	^aBalance + value ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' overrides: 16902254!
value

	^value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:20'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:50:52' overrides: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !

!methodRemoval: IncomingTransfer class #forAccount:amount: stamp: 'eaam 10/20/2023 01:50:55'!
forAccount: aAccountToTransferFrpm amount: aAmountToTransfer 
	self shouldBeImplemented.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:51:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:51:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:51:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:51:43'!
FAILURE!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 02:26:21' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:26:27' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:26:31'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:26:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:26:34'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:27:37' prior: 50651761!
affectBalance: aBalance
	^self subclassResponsibility .	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:30:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:38'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:51'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:31:01'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:32:02' prior: 50652125 overrides: 50652276!
affectBalance: aBalance

	^aBalance - value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:32:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:08'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:25'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:54'!
ERROR!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:35:16' prior: 50652130 overrides: 50652276!
affectBalance: aBalance

	^aBalance + value ! !

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:35:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:35:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:35:34'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:35:34'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:36:08'!
ERROR!

Transfer subclass: #IncomingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer2 category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 02:46:28'!
Transfer subclass: #IncomingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #OutgoingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer2 category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 02:46:32'!
Transfer subclass: #OutgoingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer2 methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:46:40' overrides: 50652276!
affectBalance: aBalance

	^aBalance + value ! !
!IncomingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:46:47'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!IncomingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:46:54' prior: 50652432!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!IncomingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:47:04' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !
!IncomingTransfer2 class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:47:13' overrides: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 02:47:27' prior: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer2 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer2 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!classRemoval: #IncomingTransfer stamp: 'eaam 10/20/2023 02:47:36'!
Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer2 methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:47:47'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !
!OutgoingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:48:03'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !

!methodRemoval: OutgoingTransfer2 #from:to:amount: stamp: 'eaam 10/20/2023 02:48:40'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.!
!OutgoingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:48:42' overrides: 50652276!
affectBalance: aBalance

	^aBalance - value ! !
!OutgoingTransfer2 class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:48:55' overrides: 50652465!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !
!OutgoingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:49:03' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !

!classRemoval: #OutgoingTransfer stamp: 'eaam 10/20/2023 02:49:09'!
Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #IncomingTransfer2 as: #IncomingTransfer stamp: 'eaam 10/20/2023 02:49:14'!
Smalltalk renameClassNamed: #IncomingTransfer2 as: #IncomingTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:49:14' prior: 50652465!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer2 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!classRenamed: #OutgoingTransfer2 as: #OutgoingTransfer stamp: 'eaam 10/20/2023 02:49:27'!
Smalltalk renameClassNamed: #OutgoingTransfer2 as: #OutgoingTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:49:27' prior: 50652548!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:49:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:49:32'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:49:35'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 02:50:18' prior: 50652572!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer a |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (a from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (a from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!classRemoval: #IncomingTransfer stamp: 'eaam 10/20/2023 02:50:32'!
Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingTransfer stamp: 'eaam 10/20/2023 02:50:35'!
Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:50:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:50:40'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:07:57' prior: 50652627!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:07:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:07:59'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:10:45' prior: 50652691!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:10:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:10:46'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:13:02' prior: 50652276!
affectBalance: aBalance
	^0.	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:13:22' prior: 50652738!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	
	aAccountToTransferTo register: self.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:13:27' prior: 50652789!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: self.
	aAccountToTransferTo register: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:28'!
ERROR!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 03:13:48'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:54'!
ERROR!

Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 03:14:34'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50652785!
affectBalance: aBalance
	^aBalance.	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:17:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:17:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:18:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:18:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:22:17'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:22:17'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:26:38' prior: 50652800!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: self new.
	aAccountToTransferTo register: self new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:26:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:26:45'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:28:08' prior: 50653026!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

----QUIT----(20 October 2023 03:55:21) CuisUniversity-5981.image priorSource: 10243854!

----STARTUP---- (20 October 2023 13:13:00) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:37:10'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (account2 hasRegistered: transfer) .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:46:58' prior: 50653128!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (transfer from) equals: account1.
! !

Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExtractionTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:47:47'!
Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:48:04'!
Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #DepositTransfer as: #IncomingTransfer stamp: 'eaam 10/20/2023 13:49:10'!
Smalltalk renameClassNamed: #DepositTransfer as: #IncomingTransfer!

!classRenamed: #ExtractionTransfer as: #OutgoingTransfer stamp: 'eaam 10/20/2023 13:49:23'!
Smalltalk renameClassNamed: #ExtractionTransfer as: #OutgoingTransfer!

Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:49:48'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:49:53'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:49:57'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:50:05'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!OutgoingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:10' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!OutgoingTransfer class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50650938!
value 

	^transfer value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50650938!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50653250 overrides: 50650942!
affectBalance: aBalance

	^aBalance - transfer value ! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:53:24' prior: 50653075!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	Withdraw register: aAmountToTransfer on: yo.
	Deposit register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:53:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:53:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:53:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:53:57'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:54:28' prior: 50653291!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: aAmountToTransfer on: yo.
	IncomingTransfer register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:54:31'!
ERROR!

account1 := ReceptiveAccount new.
a := Transfer new.!

OutgoingTransfer register: 1 on: a .!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:57:23' prior: 50653342!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:57:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:57:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:57:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:58:10'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:58:10'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:59:56' prior: 50653397!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:59:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:59:57'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:19'!
from
	^from! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:33:59' prior: 50653142!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:34:48'!
a
	^from! !

!methodRemoval: Transfer #from stamp: 'eaam 10/20/2023 14:34:48'!
from
	^from!

!methodRemoval: Transfer #a stamp: 'eaam 10/20/2023 14:34:55'!
a
	^from!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:06'!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1.
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/20/2023 14:35:07'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:15'!
from
	self shouldBeImplemented.
	^from! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50653620!
from
	
	^from! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:42' prior: 50653605!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 from) equals: account1.
! !

----STARTUP---- (21 October 2023 00:15:44) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:16:06' prior: 50653075!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

----STARTUP---- (21 October 2023 00:16:21) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:37:10'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (account2 hasRegistered: transfer) .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:46:58' prior: 50653686!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (transfer from) equals: account1.
! !

!classDefinition: #ExtractionTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExtractionTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #DepositTransfer as: #IncomingTransfer stamp: 'eaam 10/21/2023 00:16:25'!
Smalltalk renameClassNamed: #DepositTransfer as: #IncomingTransfer!

!classRenamed: #ExtractionTransfer as: #OutgoingTransfer stamp: 'eaam 10/21/2023 00:16:25'!
Smalltalk renameClassNamed: #ExtractionTransfer as: #OutgoingTransfer!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!OutgoingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:10' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!OutgoingTransfer class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50650938!
value 

	^transfer value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50650938!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50653827 overrides: 50650942!
affectBalance: aBalance

	^aBalance - transfer value ! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:53:24' prior: 50653075!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	Withdraw register: aAmountToTransfer on: yo.
	Deposit register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:54:28' prior: 50653868!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: aAmountToTransfer on: yo.
	IncomingTransfer register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:57:23' prior: 50653880!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:59:56' prior: 50653893!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:19'!
from
	^from! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:33:59' prior: 50653700!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:34:48'!
a
	^from! !

!methodRemoval: Transfer #from stamp: 'eaam 10/21/2023 00:16:26'!
from
	^from!

!methodRemoval: Transfer #a stamp: 'eaam 10/21/2023 00:16:26'!
a
	^from!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:06'!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1.
! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:15'!
from
	self shouldBeImplemented.
	^from! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50653960!
from
	
	^from! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:42' prior: 50653948!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 from) equals: account1.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:16:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:16:52'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:17:18' prior: 50653969!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1.
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:17:37'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: account1.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:17:42'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:17:52' prior: 50654077!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:17:53'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:42:11' prior: 50654093!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	"| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer."
! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:43:50' prior: 50653906!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	IncomingTransfer register: transfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:45:57' prior: 50654122!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:46:08' prior: 50654139!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	transfer := self new initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:46:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:46:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:46:15'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:47:46' prior: 50654159!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:47:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:47:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:47:49'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:50:37' prior: 50653928!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account1 transactions first .
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:50:38'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:50:52' prior: 50654023!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:51:02' prior: 50654286!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:51:50' prior: 50654109!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:51:52'!
ERROR!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:04'!
transfer
	self shouldBeImplemented.
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13' prior: 50654389!
transfer
	^transfer! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:52:24' prior: 50654373!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:25'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:29'!
transfer
	self shouldBeImplemented.
	^transfer! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:32' prior: 50654458!
transfer
	^transfer! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:57:16'!
test13
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItself.! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:57:21'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:57:27'!
cantTransferToItself
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:58:13' prior: 50654525!
cantTransferToItself
	^'lol claramente no podes hacer esto'! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:58:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:58:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:58:59'!
FAILURE!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:59:49' prior: 50654511!
test13
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: Transfer class #cantTransferToItself stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItself
	^'lol claramente no podes hacer esto'!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:00:33' prior: 50654222!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItself].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:00:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:00:35'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:00:58' prior: 50654566!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self cantTransferToItself].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:01:14' prior: 50654636!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self aAccountToTransferTo].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:01:22' prior: 50654658!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self cantTransferToItselfErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:01:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:01:23'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:01:33' prior: 50654680!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 01:02:01'!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 01:02:09' prior: 50654817!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroDescription.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 01:02:16' prior: 50654831!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroDescription.! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/21/2023 01:02:18'!
ERROR!
!Transfer class methodsFor: 'category-name' stamp: 'eaam 10/21/2023 01:02:24'!
cantTransferZeroDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:02:58'!
cantTransferZeroErrorDescription
	self shouldBeImplemented.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 01:02:58' prior: 50654844!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: Transfer class #cantTransferZeroDescription stamp: 'eaam 10/21/2023 01:02:58'!
cantTransferZeroDescription
	self shouldBeImplemented.!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50654864!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !

!methodRemoval: Transfer class #accountCantTransferToItselfErrorDescription stamp: 'eaam 10/21/2023 01:03:20'!
accountCantTransferToItselfErrorDescription
	^'NO MAN QUE HACES'.!

!methodRemoval: ReceptiveAccountTest #XXXX stamp: 'eaam 10/21/2023 01:03:25'!
XXXX
	"| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]"!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/21/2023 01:03:28'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:03:50' prior: 50654750!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:04:08' prior: 50654913!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferZeroErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:04:25' prior: 50654940!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:02'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo for: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:02' prior: 50654967!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo for: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 01:05:28' prior: 50655004!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!methodRemoval: Transfer class #shouldTransfer:to:for: stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo for: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

----QUIT----(21 October 2023 01:05:42) CuisUniversity-5981.image priorSource: 10287054!

----STARTUP---- (22 October 2023 16:24:15) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!


TestCase subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTests category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 20:16:25'!
TestCase subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 20:53:52'!
test01
	| account |
	account := ReceptiveAccount new.
	self assert: account! !

!classDefinition: #Rece category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 21:01:37'!
Object subclass: #Rece
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Rece stamp: 'eaam 10/22/2023 21:01:49'!
Object subclass: #Rece
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #ReportTests as: #AccountSumaryTests stamp: 'eaam 10/22/2023 21:02:17'!
Smalltalk renameClassNamed: #ReportTests as: #AccountSumaryTests!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:03:40' prior: 50655138!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Balance = 0'.
	self assert: account report equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:30:16' prior: 50655161!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:30:56'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:31:15'!
sumary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:31:29' prior: 50655181!
sumary
	^'Balance = 0'! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:31:43' prior: 50655170!
test01
	| account resumen|
	account := ReceptiveAccount new.
	"resumen := OrderedCollection new."
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:31:50' prior: 50655190!
test01
	| account resumen|
	account := ReceptiveAccount new.
	"resumen := OrderedCollection new."
	resumen := 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:31:51'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:31:51'!
PASSED!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:32:25'!
test02
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account. 
	resumen := 'Balance = 0'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:32:31' prior: 50655199!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen := 'Balance = 0'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:33:31' prior: 50655212!
test02
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:33:33'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:34:33' prior: 50655186!
sumary
	| sumary |
	sumary := OrderedCollection new.
	^'Balance = 0'! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:35:19' prior: 50655245!
sumary
	| sumary |
	sumary := OrderedCollection new.
	transactions do: 
	[: aTransaction
		
		]
	^'Balance = 0'! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:35:28' prior: 50655231!
test02
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:38:51' prior: 50655251!
sumary
	| sumary |
	sumary := OrderedCollection new.
	transactions do: 
	[: aTransaction |
		
		]
	^'Balance = 0'! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:57:19' prior: 50655269!
sumary
	| sumary |
	sumary := OrderedCollection new.
	sumary add: 'Depósito = 10'.
	sumary add: 'Balance = 0'.
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:57:32'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:57:32'!
FAILURE!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:57:35'!
FAILURE!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:58:00' prior: 50655222!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:58:05'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:58:44' prior: 50655276!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty) ifTrue: [sumary add: 'Depósito = 10'].
	sumary add: 'Balance = 0'.
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:58:50'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:58:50'!
FAILURE!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:59:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:59:28' prior: 50655349!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito = 10'].
	sumary add: 'Balance = 0'.
	^sumary! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:59:32'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:59:32'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:59:32'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:00:09' prior: 50655412!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito = 10'.sumary add: 'Balance = 10'].
	sumary add: 'Balance = 0'.
	^sumary! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:00:25' prior: 50655428!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito = 10'.sumary add: 'Balance = 10']
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:00:30'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:00:30'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:00:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:01:03' prior: 50655437!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito por 10'.sumary add: 'Balance = 10']
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:01:07'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:01:07'!
PASSED!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 22:01:20'!
test03
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 22:03:14' prior: 50655562!
test03
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:03:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:05:22' prior: 50655501!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty) ifTrue: 
	[sumary add: transactions first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:05:34'!
ERROR!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:05:34'!
FAILURE!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:05:34'!
FAILURE!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:05:37'!
ERROR!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:06:04'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:06:10' prior: 50655587!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: 
	[sumary add: transactions first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:06:16'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:06:16'!
ERROR!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:06:16'!
ERROR!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:06:18'!
ERROR!
!Deposit methodsFor: 'print' stamp: 'eaam 10/22/2023 22:06:37'!
dataPrint
	self shouldBeImplemented.! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/22/2023 22:08:40' prior: 50655676!
dataPrint
	^('Depósito por ', self value asString)! !

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:08:45'!
ERROR!
!Withdraw methodsFor: 'print' stamp: 'eaam 10/22/2023 22:08:52'!
dataPrint
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/22/2023 22:09:22' prior: 50655687!
dataPrint
	^('Extracción por ', self value asString).! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:09:27'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:09:27'!
PASSED!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:09:27'!
PASSED!

!classDefinition: #AccountSumaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 22:12:20'!
Object subclass: #AccountSumaryReport
	instanceVariableNames: 'miVariable'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSumaryReport class methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20'!
sumary: aTransactions
	^self new initializeSumary: aTransactions! !
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20'!
initializeSumary: aTransactions
	miVariable := aTransactions.! !
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20'!
suma
	| sumary |
	sumary := OrderedCollection new.
	(miVariable isEmpty not) ifTrue: 
	[sumary add: miVariable first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20' prior: 50655657!
sumary
	^(AccountSumaryReport sumary: transactions) suma! !
!AccountSumaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/22/2023 22:13:07'!
sumaryOf: aTransactions
	^self new initializeSumary: aTransactions! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:13:07' prior: 50655732!
sumary
	^(AccountSumaryReport sumaryOf: transactions) suma! !

!methodRemoval: AccountSumaryReport class #sumary: stamp: 'eaam 10/22/2023 22:13:07'!
sumary: aTransactions
	^self new initializeSumary: aTransactions!

TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 23:45:46'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'eaam 10/22/2023 23:46:20'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:46:31'!
test01
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: TransferTest #test10 stamp: 'eaam 10/22/2023 23:46:31'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:46:47'!
test02
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:46:57'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:03'!
test03
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test12 stamp: 'eaam 10/22/2023 23:47:04'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:20'!
test04
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:35'!
test07
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:43'!
test06
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test04 stamp: 'eaam 10/22/2023 23:47:43'!
test04
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:54' prior: 50655880!
test06

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50655867!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50655830!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50655804!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50655778!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 23:49:41'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!

!methodRemoval: ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 23:49:43'!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!

!methodRemoval: ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 23:49:45'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!

!methodRemoval: ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 23:49:46'!
test13
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!

!methodRemoval: ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 23:49:47'!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:22' prior: 50654463!
transfer
	^self! !

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:50:32'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:50:32'!
FAILURE!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45' prior: 50656047!
transfer
	^transfer ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test06 stamp: 'eaam 10/22/2023 23:50:56'!
test06

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:51:30'!
ERROR!
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:44'!
from
	self shouldBeImplemented.! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55' prior: 50656106!
from
	^transfer from.! !

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test08 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:52:16'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:24'!
to
	self shouldBeImplemented.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32' prior: 50656147!
to
	^transfer to.! !

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test08 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!
!AccountSumaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50655737!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !
!AccountSumaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 00:03:55' prior: 50655717!
initializeSumary: aAccount
	miVariable := aAccount.! !

!classDefinition: #AccountSumaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 00:04:05'!
Object subclass: #AccountSumaryReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 00:04:05' prior: 50656184!
initializeSumary: aAccount
	account := aAccount.! !
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 00:04:05' prior: 50655722!
suma
	| sumary |
	sumary := OrderedCollection new.
	(account isEmpty not) ifTrue: 
	[sumary add: account first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:28:27' prior: 50655338!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSumaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	self assert: report content equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:28:51' prior: 50655258!
test02
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSumaryReport sumaryOf: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: report content equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:29:16' prior: 50655573!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSumaryReport sumaryOf: account .
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:29:22' prior: 50656237!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSumaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:29:43' prior: 50656250!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSumaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: report sumary equals: resumen! !
!AccountSumaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:30:18'!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(account isEmpty not) ifTrue: 
	[sumary add: account first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!methodRemoval: AccountSumaryReport #suma stamp: 'eaam 10/23/2023 01:30:18'!
suma
	| sumary |
	sumary := OrderedCollection new.
	(account isEmpty not) ifTrue: 
	[sumary add: account first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 01:44:53' prior: 50655743!
sumary
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 01:48:30'!
sumary: aReport
	(transactions isEmpty not) ifTrue: [transactions first dataPrintIn: aReport]
	! !

!methodRemoval: ReceptiveAccount #sumary stamp: 'eaam 10/23/2023 01:48:37'!
sumary
	!
!AccountSumaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:49:59' prior: 50656276!
sumary
	| sumary |
	sumary := OrderedCollection new.
	
	^sumary! !
!AccountSumaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:50:24' prior: 50656198!
initializeSumary: aAccount
	account := aAccount.
	AccountSumary := OrderedCollection new.! !

Object subclass: #AccountSumaryReport
	instanceVariableNames: 'account AccountSumary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSumaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 01:50:41'!
Object subclass: #AccountSumaryReport
	instanceVariableNames: 'account AccountSumary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSumaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:51:12' prior: 50656307!
sumary
	account sumary.! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:51:37'!
dataPrintIn
	^('Depósito por ', self value asString)! !

!methodRemoval: Deposit #dataPrint stamp: 'eaam 10/23/2023 01:51:37'!
dataPrint
	^('Depósito por ', self value asString)!
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:03'!
dataPrintIn: aReport
	^('Depósito por ', self value asString)! !

!methodRemoval: Deposit #dataPrintIn stamp: 'eaam 10/23/2023 01:52:03'!
dataPrintIn
	^('Depósito por ', self value asString)!
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:45' prior: 50656344!
dataPrintIn: aReport
	^aReport printDepositWithValue: value! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50656353!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:53:05'!
dataPrintIn
	^('Extracción por ', self value asString).! !

!methodRemoval: Withdraw #dataPrint stamp: 'eaam 10/23/2023 01:53:05'!
dataPrint
	^('Extracción por ', self value asString).!
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:53:30'!
dataPrintIn: aReport
	^('Extracción por ', self value asString).! !

!methodRemoval: Withdraw #dataPrintIn stamp: 'eaam 10/23/2023 01:53:30'!
dataPrintIn
	^('Extracción por ', self value asString).!
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:53:58' prior: 50656370!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50656379!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/23/2023 01:54:10'!
ERROR!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/23/2023 01:54:10'!
ERROR!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/23/2023 01:54:10'!
ERROR!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/23/2023 01:54:12'!
ERROR!

!classRenamed: #AccountSumaryTests as: #AccountSummaryTests stamp: 'eaam 10/23/2023 01:55:06'!
Smalltalk renameClassNamed: #AccountSumaryTests as: #AccountSummaryTests!

!classRenamed: #AccountSumaryReport as: #AccountSummaryReport stamp: 'eaam 10/23/2023 01:55:11'!
Smalltalk renameClassNamed: #AccountSumaryReport as: #AccountSummaryReport!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:11' prior: 50656224!
test02
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:11' prior: 50656263!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: report sumary equals: resumen! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:11' prior: 50656213!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	self assert: report content equals: resumen! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 01:55:24'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account AccountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:24' prior: 50656313!
initializeSumary: aAccount
	account := aAccount.
	AccountSummary := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 01:55:34'!
summary: aReport
	(transactions isEmpty not) ifTrue: [transactions first dataPrintIn: aReport]
	! !

!methodRemoval: ReceptiveAccount #sumary: stamp: 'eaam 10/23/2023 01:55:34'!
sumary: aReport
	(transactions isEmpty not) ifTrue: [transactions first dataPrintIn: aReport]
	!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:55:45'!
summary
	account sumary.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:45' prior: 50656333!
sumary
	account summary.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:45' prior: 50656516!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: report summary equals: resumen! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:45' prior: 50656567!
summary
	account summary.! !

!methodRemoval: AccountSummaryReport #sumary stamp: 'eaam 10/23/2023 01:55:46'!
sumary
	account summary.!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:30' prior: 50656503!
test02
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:36' prior: 50656529!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:40' prior: 50656577!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	report summary.
	self assert: report summary equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:44' prior: 50656622!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:03'!
content
	^''! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:11' prior: 50656648!
content
	^AccountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:29' prior: 50656590!
summary
	account summary.! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 01:57:39'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:57:39' prior: 50656549!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:57:39' prior: 50656652!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:58:17' prior: 50656656!
summary
	account summary.
	accountSummary add: ('Balance =', account balance asString)! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:58:19' prior: 50656680!
summary
	account summary.
	accountSummary add: ('Balance =', account balance asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:58:20'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 01:58:20'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 01:58:20'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:58:25'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:16'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:16'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:34'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 01:59:34'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 01:59:34'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:35'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:59:50'!
summary
	self shouldBeImplemented.! !

!methodRemoval: ReceptiveAccount #summary stamp: 'eaam 10/23/2023 02:00:07'!
summary
	self shouldBeImplemented.!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:25'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:00:25'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:00:25'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:27'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:00:51' prior: 50656686!
summary
	account summary: self.
	accountSummary add: ('Balance =', account balance asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:52'!
FAILURE!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:00:52'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:00:52'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:55'!
FAILURE!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50656737!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:01:16'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:01:16'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:01:16'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:01:20'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:29'!
printDepositWithValue: aValue 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:17' prior: 50656770!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:02:18'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:02:18'!
FAILURE!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:02:19'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:02:29'!
FAILURE!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50656775!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:02:49'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:02:49'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:02:49'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:02:49'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:56'!
printWithdrawWithValue: aValue 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50656808!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:03:32'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:03:32'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:03:32'!
FAILURE!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:03:32'!
FAILURE!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:04:49'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:04:49'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:04:49'!
FAILURE!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:04:49'!
FAILURE!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:06:35' prior: 50656635!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:08:06'!
test04
	| accounttoExtraxtFrom accountToDeposit resumen report|
	accounttoExtraxtFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer .
	report := AccountSummaryReport sumaryOf: accounttoExtraxtFrom.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:10:00'!
FAILURE!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:10:00'!
FAILURE!
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02'!
dataPrintIn: aReport! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:15:25' prior: 50656863!
test04
	| accounttoExtraxtFrom accountToDeposit resumen report|
	accounttoExtraxtFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtraxtFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtraxtFrom.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:15:31' prior: 50656987!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:16:06' prior: 50657005!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	resumen add: 'Salida por transferencia de 1'.
	resumen add: 'Balance = -1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:16:07'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:16:19'!
dataPrintIn: aReport 
	self shouldBeImplemented.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' prior: 50657043!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:17:40'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:17:40'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:17:40'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:17:40'!
ERROR!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:17:40'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:17:50'!
printOutgoingTransferWithValue: aRenameMe1 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:14' prior: 50657066!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50657072!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:18:52' prior: 50657023!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:18:53'!
ERROR!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:19:08'!
dataPrintIn: aReport 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24'!
dataPrintIn: aReport

	self subclassResponsibility ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' prior: 50657116 overrides: 50657121!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:20:11'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:20:11'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:20:11'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:11'!
ERROR!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:11'!
ERROR!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:20:27' prior: 50657096!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	resumen add: 'Salida por transferencia de 1'.
	resumen add: 'Balance = -1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:20:48'!
test05
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:20:49'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:20:58'!
printIncomingTransferWithValue: aRenameMe1 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50657196!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:27:10'!
test06
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:27:25' prior: 50657250!
test06
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: ''.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:27:59' prior: 50657265!
test06
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Depósito por 100'.
	resumen add: 'Extracción por 50'.
	resumen add: 'Balance = 50'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test06 stamp: 'eaam 10/23/2023 02:28:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50656555!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test06 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

----QUIT----(23 October 2023 02:30:27) CuisUniversity-5981.image priorSource: 10351001!

----STARTUP---- (23 October 2023 20:00:29) as /home/clinux01/Documents/cuis/linux64(1)/linux64/CuisUniversity-5981.image!

!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:09' prior: 50657121!
dataPrintIn: aReport

	^self subclassResponsibility! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50657360!
dataPrintIn: aReport

	self subclassResponsibility! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:34:55' prior: 50651856!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02' prior: 50657370!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:37:33' prior: 50655039!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !

TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 21:38:42'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'no messages' stamp: 'eaam 10/23/2023 21:38:50'!
test01! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:40:15' prior: 50657466!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	report summary.
	self assert: report content equals: resumen! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:41:11' prior: 50657470!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	report netTransfers.
	self assert: report content equals: resumen! !

!classRenamed: #IncomingTransfer as: #IncomingLegTransfer stamp: 'eaam 10/23/2023 21:45:00'!
Smalltalk renameClassNamed: #IncomingTransfer as: #IncomingLegTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:45:01' prior: 50657433!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !

!classRenamed: #OutgoingTransfer as: #OutgoingLegTransfer stamp: 'eaam 10/23/2023 21:45:25'!
Smalltalk renameClassNamed: #OutgoingTransfer as: #OutgoingLegTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:45:25' prior: 50657499!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58' prior: 50656611!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05' prior: 50656598!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15' prior: 50656840!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32' prior: 50657146!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43' prior: 50657176!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53' prior: 50657280!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:49:07' prior: 50657482!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Neto de transferencias: 0'.
	report netTransfers.
	self assert: report content equals: resumen! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:49:42' prior: 50657634!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report content equals: resumen! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:50:20' prior: 50657646!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:50:26'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:50:36'!
netTransfers
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:34' prior: 50657670!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: ''.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55' prior: 50657675!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:07'!
ERROR!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:07'!
ERROR!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:12'!
ERROR!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:12'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20' prior: 50657657!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:37'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:48'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:54:34' prior: 50657747!
test02
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27' prior: 50657760!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

----QUIT----(23 October 2023 21:59:08) CuisUniversity-5981.image priorSource: 10422461!

----STARTUP---- (24 October 2023 02:12:42) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Downloads\smalltalkVM\windows64\Portfolio-Solucion.st----!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:14:51'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:14:51'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:14:51'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06'!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:15:06'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:15:06'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:15:06'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!

!testRun: #AccountNetTransferTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:15:29'!
PASSED!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:15:31'!
ERROR!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:15:31'!
ERROR!

!testRun: #AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58'!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:17:58'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:18:13'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42'!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:18:42'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55'!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:18:55'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08'!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:19:08'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22'!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:19:22'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!

----STARTUP---- (24 October 2023 02:19:46) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:49'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:49'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:52'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:52'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:53'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:53'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50668508!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50668512!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50668517!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50668521!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50668500!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50668504!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:56'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:56'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:57'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:57'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50668512!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50668517!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50668508!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50668500!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50668504!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50668521!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33'!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39'!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39'!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40'!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31'!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30'!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31'!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15'!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51'!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24'!
dataPrintIn: aReport

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50668830!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50668834!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' overrides: 50668839!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50668834!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50668839!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50668830!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
IncomingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
IncomingTransfer class
	instanceVariableNames: ''!
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50668834!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50668839!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50668830!
value 

	^transfer value! !

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
OutgoingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
OutgoingTransfer class
	instanceVariableNames: ''!
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50668830!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50668834!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' overrides: 50668839!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23'!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02'!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18'!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16'!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:02'!
test08TransferChangesAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:20:02'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:09'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:20:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50667995!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50668001!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50668012!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50668034!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50668041!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50668052!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50668080!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50668086!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50668109!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50668142!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50668160!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50668181!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50668199!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50668218!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50668247!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50668285!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50668293!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50668302!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50668312!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50668322!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50668335!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50668347!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50668399!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50668410!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50668421!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50668432!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50668443!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50668454!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50668465!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50668476!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50668500!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50668504!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50668508!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50668512!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50668517!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50668521!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50668541!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50668546!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50668550!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50668554!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50668561!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50668568 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50668574 overrides: 50669900!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50668580 overrides: 50669904!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50668588 overrides: 50669910!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50668597 overrides: 50669915!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50668601!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50668608 overrides: 50669890!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50668615 overrides: 50669895!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50668624!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50668632!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50668639!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50668654!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50668660!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50668665!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50668688 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50668694 overrides: 50669904!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50668700!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50668706 overrides: 50669910!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50668711 overrides: 50669900!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50668718 overrides: 50669890!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50668724 overrides: 50669895!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50668729 overrides: 50669915!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55'!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50668733!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50668756!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50668762!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50668766!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50668772!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50668779!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50668786!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50668792!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50668809!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50668830 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50668834!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50668839!
dataPrintIn: aReport

	self subclassResponsibility! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50668854!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50668877!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50668882 overrides: 50670247!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50668886 overrides: 50670252!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50668891 overrides: 50670257!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50668905!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50670252!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50670257!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50670247!
value 

	^transfer value! !
!IncomingLegTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
IncomingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
IncomingLegTransfer class
	instanceVariableNames: ''!
!IncomingLegTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50670252!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50670257!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50670247!
value 

	^transfer value! !

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
OutgoingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
OutgoingLegTransfer class
	instanceVariableNames: ''!
!OutgoingLegTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50669049!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50669054 overrides: 50670247!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50669058 overrides: 50670252!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50669063 overrides: 50670257!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50669077!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50669097!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50669101!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50669109!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50669113 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50669116!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50669120!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:06'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:06'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:45:25' prior: 50669133!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50669156!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50669168!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50669173!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:20:06'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:20:06'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:20:06'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06'!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:20:06'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:20:06'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:20:06'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58'!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:20:06'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:20:06'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:20:06'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42'!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:20:06'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55'!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:20:07'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08'!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:20:07'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22'!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:20:07'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:30'!
test03FromLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test03 stamp: 'Sof D 10/24/2023 02:20:30'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:41'!
test04ToLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test04 stamp: 'Sof D 10/24/2023 02:20:41'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:58'!
test05ToLegCanAccessFromLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !

!methodRemoval: TransferTest #test05 stamp: 'Sof D 10/24/2023 02:20:59'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:21:11'!
test06FromLegCanAccessToLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !

!methodRemoval: TransferTest #test06 stamp: 'Sof D 10/24/2023 02:21:11'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
!

!testRun: #ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:21:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:21:34'!
FAILURE!

!methodRemoval: ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:21:43'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:21:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:21:58'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:21:58'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!

!methodRemoval: ReceptiveAccountTest #test09TransferChangesItsAccountsBalance stamp: 'Sof D 10/24/2023 02:22:15'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:38'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07 stamp: 'Sof D 10/24/2023 02:22:39'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:45'!
test07TransferOfAmountZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07TransferOfZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:22:45'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:23:02'!
test08TransferFromAccountToItselfIsntAllowed

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test08 stamp: 'Sof D 10/24/2023 02:23:02'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!

!classRemoval: #IncomingTransfer stamp: 'Sof D 10/24/2023 02:23:43'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingTransfer stamp: 'Sof D 10/24/2023 02:23:46'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:24:25'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:24:50' overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	! !
!TransferTest methodsFor: 'setup' stamp: 'Sof D 10/24/2023 02:25:25' prior: 50671294 overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: a1 to: a2 amount: 1! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:40' prior: 50670626!
test01TransferToLegHasReceivingAccount

	
	
		
	self assert: (t to) equals: a2 transactions first .
! !

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:44' prior: 50671307!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: a2 transactions first .
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:52' prior: 50670698!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: a1 transactions first.
! !

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:06' prior: 50670957!
test03FromLegCanAccessItsTransfer

		
	self assert: (t from) transfer equals: t.
! !

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:15' prior: 50670978!
test04ToLegCanAccessItsTransfer
		
	self assert: (t to) transfer equals: t.
! !

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:15'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:23' prior: 50670999!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (t to) from equals: (t from).
! !

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:24'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:24'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:24'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:32' prior: 50671021!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (t from) to equals: (t to).
! !

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:45' prior: 50671162!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: a1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:57' prior: 50671186!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: a1 to: a1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:27:06'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671350!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671300 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: a2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671533!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671572!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:27:11'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50671628 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50671635!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50671344!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: account2 transactions first .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:27:18'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671387!
test03FromLegCanAccessItsTransfer

		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671459!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671620!
test02TransferFromLegHasSendingAccount
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671496!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671423!
test04ToLegCanAccessItsTransfer
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671662 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671679!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:29:49'!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:29:49'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:30:00' prior: 50671744!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:30:34'!
ERROR!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:30:34'!
ERROR!

----STARTUP---- (24 October 2023 02:31:12) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:17'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:17'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:18'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:18'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50672318!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50672322!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50672327!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50672331!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50672310!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50672314!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:22'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:22'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:23'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:23'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50672322!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50672327!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50672318!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50672310!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50672314!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50672331!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33'!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:24'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:24'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39'!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39'!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40'!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31'!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30'!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31'!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15'!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51'!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24'!
dataPrintIn: aReport

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50672640!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50672644!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' overrides: 50672649!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50672644!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50672649!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50672640!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
IncomingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
IncomingTransfer class
	instanceVariableNames: ''!
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50672644!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50672649!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50672640!
value 

	^transfer value! !

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
OutgoingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
OutgoingTransfer class
	instanceVariableNames: ''!
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50672640!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50672644!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' overrides: 50672649!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23'!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02'!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18'!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16'!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:02'!
test08TransferChangesAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:31:28'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:09'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:31:28'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50671805!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50671811!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50671822!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50671844!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50671851!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50671862!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50671890!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50671896!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50671919!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50671952!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50671970!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50671991!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50672009!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50672028!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50672057!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50672095!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50672103!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50672112!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50672122!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50672132!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50672145!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50672157!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50672209!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50672220!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50672231!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50672242!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50672253!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50672264!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50672275!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50672286!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50672310!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50672314!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50672318!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50672322!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50672327!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50672331!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50672351!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50672356!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50672360!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50672364!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50672371!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50672378 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50672384 overrides: 50673710!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50672390 overrides: 50673714!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50672398 overrides: 50673720!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50672407 overrides: 50673725!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50672411!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50672418 overrides: 50673700!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50672425 overrides: 50673705!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50672434!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50672442!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50672449!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50672464!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50672470!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50672475!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50672498 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50672504 overrides: 50673714!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50672510!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50672516 overrides: 50673720!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50672521 overrides: 50673710!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50672528 overrides: 50673700!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50672534 overrides: 50673705!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50672539 overrides: 50673725!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55'!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50672543!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50672566!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50672572!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50672576!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50672582!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50672589!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50672596!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50672602!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50672619!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50672640 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50672644!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50672649!
dataPrintIn: aReport

	self subclassResponsibility! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50672664!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50672687!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50672692 overrides: 50674057!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50672696 overrides: 50674062!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50672701 overrides: 50674067!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50672715!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50674062!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50674067!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50674057!
value 

	^transfer value! !
!IncomingLegTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
IncomingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
IncomingLegTransfer class
	instanceVariableNames: ''!
!IncomingLegTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50674062!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50674067!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50674057!
value 

	^transfer value! !

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
OutgoingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
OutgoingLegTransfer class
	instanceVariableNames: ''!
!OutgoingLegTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50672859!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50672864 overrides: 50674057!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50672868 overrides: 50674062!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50672873 overrides: 50674067!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50672887!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50672907!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50672911!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50672919!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50672923 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50672926!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50672930!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:45:25' prior: 50672943!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50672966!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50672978!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50672983!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:31:32'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:31:32'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:31:32'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06'!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:31:32'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:31:32'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:31:32'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58'!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:31:33'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:31:33'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:31:33'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42'!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:31:33'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55'!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:31:33'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08'!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:31:33'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22'!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:31:33'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50673197!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50673203!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50673214!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50673236!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50673243!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50673254!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50673282!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50673288!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50673311!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50673344!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50673362!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50673383!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50673401!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50673420!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50673448!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50673486!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50673494!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50673503!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50673513!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50673523!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50673536!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50673548!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59' prior: 50673559!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33' prior: 50673570!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50673621!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50673632!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50673643!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50673654!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50673665!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50673676!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50673700!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50673705!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50673710!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50673714!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50673720!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50673725!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50673746!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50673751!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50673756!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50673760!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50673767!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50673774 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50673780 overrides: 50675309!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50673786 overrides: 50675314!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50673794 overrides: 50675320!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50673803 overrides: 50675325!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50673808!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50673816 overrides: 50675299!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50673823 overrides: 50675304!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50673833!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50673842!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50673849!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50673864!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50673870!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50673876!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50673900 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50673906 overrides: 50675314!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50673913!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50673919 overrides: 50675320!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50673924 overrides: 50675309!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50673932 overrides: 50675299!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50673938 overrides: 50675304!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50673944 overrides: 50675325!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50673956!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50673980!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50673986!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50673990!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50673996!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50674003!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50674010!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50674017!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50674035!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50674057 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50674062!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24' prior: 50674067!
dataPrintIn: aReport

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50674083!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50674106!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50674111 overrides: 50675653!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50674115 overrides: 50675658!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50674120 overrides: 50675663!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50674135!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' prior: 50672737 overrides: 50675658!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' prior: 50672743 overrides: 50675663!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42' prior: 50672749!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13' prior: 50672754!
transfer
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' prior: 50672759 overrides: 50675653!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55' prior: 50672763!
from
	^transfer from.! !

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
IncomingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
IncomingTransfer class
	instanceVariableNames: ''!
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41' prior: 50672777!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50672799 overrides: 50675658!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' prior: 50672805 overrides: 50675663!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46' prior: 50672811!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32' prior: 50672816!
to
	^transfer to.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45' prior: 50672820!
transfer
	^transfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' prior: 50672825 overrides: 50675653!
value 

	^transfer value! !

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
OutgoingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
OutgoingTransfer class
	instanceVariableNames: ''!
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45' prior: 50672839!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50674282!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50674287 overrides: 50675653!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50674291 overrides: 50675658!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50674296 overrides: 50675663!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50674311!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50674331!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50674336!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50674345!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50674349 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50674353!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50674357!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50674370!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50674390!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50674402!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50674408!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:02' prior: 50672988!
test08TransferChangesAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:31:35'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:09' prior: 50673012!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:31:35'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50674782!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50674788!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50674799!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50674822!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50674829!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50674840!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50674868!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50674874!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50674897!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50674931!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50674949!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50674971!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50674990!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50675010!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50675039!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50675078!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50675086!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50675095!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50675106!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50675116!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50675130!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50675143!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50675196!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50675207!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50675219!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50675230!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50675241!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50675252!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50675263!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50675275!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50675299!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50675304!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50675309!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50675314!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50675320!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50675325!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50675346!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50675351!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50675356!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50675361!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50675368!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50675376 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50675382 overrides: 50676737!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50675388 overrides: 50676741!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50675396 overrides: 50676747!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50675405 overrides: 50676752!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50675410!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50675418 overrides: 50676727!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50675425 overrides: 50676732!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50675435!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50675444!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50675452!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50675467!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50675473!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50675479!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50675503 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50675509 overrides: 50676741!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50675516!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50675522 overrides: 50676747!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50675527 overrides: 50676737!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50675535 overrides: 50676727!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50675541 overrides: 50676732!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50675547 overrides: 50676752!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55' prior: 50673948!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50675551!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50675575!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50675582!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50675586!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50675592!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50675599!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50675606!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50675613!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50675631!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50675653 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50675658!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50675663!
dataPrintIn: aReport

	self subclassResponsibility! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50675679!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50675702!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50675707 overrides: 50677084!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50675711 overrides: 50677089!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50675716 overrides: 50677094!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50675731!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' prior: 50674157 overrides: 50677089!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' prior: 50674163 overrides: 50677094!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42' prior: 50674169!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13' prior: 50674174!
transfer
	^transfer! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' prior: 50674179 overrides: 50677084!
value 

	^transfer value! !
!IncomingLegTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55' prior: 50674183!
from
	^transfer from.! !

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
IncomingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
IncomingLegTransfer class
	instanceVariableNames: ''!
!IncomingLegTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41' prior: 50674197!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50674220 overrides: 50677089!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' prior: 50674226 overrides: 50677094!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46' prior: 50674232!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32' prior: 50674237!
to
	^transfer to.! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45' prior: 50674241!
transfer
	^transfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' prior: 50674246 overrides: 50677084!
value 

	^transfer value! !

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
OutgoingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
OutgoingLegTransfer class
	instanceVariableNames: ''!
!OutgoingLegTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45' prior: 50674261!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50675879!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50675884 overrides: 50677084!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50675888 overrides: 50677089!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50675893 overrides: 50677094!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50675908!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50675928!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50675933!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50675942!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50675946 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50675950!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50675954!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:45:25' prior: 50675967!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50675990!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50676002!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50676008!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51' prior: 50674413!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51' prior: 50674436!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:31:38'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:31:38'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:31:38'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05' prior: 50674478!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06' prior: 50674508!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:31:38'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:31:38'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:31:38'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58' prior: 50674557!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:31:38'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:31:38'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27' prior: 50674609!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:31:38'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42' prior: 50674637!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:31:38'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55' prior: 50674664!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:31:38'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08' prior: 50674700!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:31:38'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22' prior: 50674735!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:31:38'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:30'!
test03FromLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test03 stamp: 'Sof D 10/24/2023 02:31:39'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:41'!
test04ToLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test04 stamp: 'Sof D 10/24/2023 02:31:39'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:58'!
test05ToLegCanAccessFromLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !

!methodRemoval: TransferTest #test05 stamp: 'Sof D 10/24/2023 02:31:39'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:21:11'!
test06FromLegCanAccessToLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !

!methodRemoval: TransferTest #test06 stamp: 'Sof D 10/24/2023 02:31:39'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
!

!methodRemoval: ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:31:39'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:21:58'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:31:39'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!

!methodRemoval: ReceptiveAccountTest #test09TransferChangesItsAccountsBalance stamp: 'Sof D 10/24/2023 02:31:39'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:38'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07 stamp: 'Sof D 10/24/2023 02:31:39'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:45'!
test07TransferOfAmountZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07TransferOfZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:31:39'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:23:02'!
test08TransferFromAccountToItselfIsntAllowed

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test08 stamp: 'Sof D 10/24/2023 02:31:39'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!

!classRemoval: #IncomingTransfer stamp: 'Sof D 10/24/2023 02:31:39'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingTransfer stamp: 'Sof D 10/24/2023 02:31:39'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:39'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:39'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:24:50' overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	! !
!TransferTest methodsFor: 'setup' stamp: 'Sof D 10/24/2023 02:25:25' prior: 50678033 overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: a1 to: a2 amount: 1! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:40' prior: 50677466!
test01TransferToLegHasReceivingAccount

	
	
		
	self assert: (t to) equals: a2 transactions first .
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:44' prior: 50678046!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: a2 transactions first .
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:52' prior: 50677540!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: a1 transactions first.
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:06' prior: 50677802!
test03FromLegCanAccessItsTransfer

		
	self assert: (t from) transfer equals: t.
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:15' prior: 50677823!
test04ToLegCanAccessItsTransfer
		
	self assert: (t to) transfer equals: t.
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:23' prior: 50677844!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (t to) from equals: (t from).
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:32' prior: 50677866!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (t from) to equals: (t to).
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:45' prior: 50677959!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: a1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:57' prior: 50677983!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: a1 to: a1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:40'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678058!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678039 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: a2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678088!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678097!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:40'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50678122 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50678129!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50678052!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: account2 transactions first .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:40'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678064!
test03FromLegCanAccessItsTransfer

		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678076!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678114!
test02TransferFromLegHasSendingAccount
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678082!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678070!
test04ToLegCanAccessItsTransfer
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678156 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678173!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:29:49'!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:31:40'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:30:00' prior: 50678238!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:36:12' prior: 50678262!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 02:36:23' prior: 50676975!
netTransfers
	| netTransfer |
	netTransfer := 'Neto de transferencias: 0'.
	^netTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:36:30'!
PASSED!

!classDefinition: #NetTransferReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:38:44'!
Object subclass: #NetTransferReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:38:34' prior: 50677509!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !
!NetTransferReport methodsFor: 'no messages' stamp: 'Sof D 10/24/2023 02:38:58'!
content
	^'Neto de transferencias: 0'! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:38:59'!
PASSED!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:38:59'!
ERROR!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:38:59'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:39:36'!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:39:36'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:39:41'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:39:41'!
ERROR!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:40:02'!
PASSED!

----SNAPSHOT----(24 October 2023 02:40:07) CuisUniversity-5981.image priorSource: 10669768!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:40:33'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:40:33'!
ERROR!

----STARTUP---- (24 October 2023 02:41:16) as C:\Users\sofia\Downloads\windows64 (1)\windows64\CuisUniversity-5981.image!


!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:41:35'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:41:35'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:41:47' prior: 50678367!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0',
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:41:47'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:42:11' prior: 50678432!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:42:12'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:42:12'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:42:12'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:43:11'!
test02NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 11'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:43:12' prior: 50678479!
test02NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 02:43:13'!
ERROR!

!classDefinition: 'NetTransferReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:43:54'!
NetTransferReport class
	instanceVariableNames: 'account'!
!NetTransferReport class methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:43:53'!
for: anAccountToReportOn

	account := anAccountToReportOn ! !
!NetTransferReport class methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:44:15' prior: 50678521!
for: anAccountToReportOn

	^NetTransferReport new with: anAccountToReportOn ! !

!classDefinition: #NetTransferReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:44:39'!
Object subclass: #NetTransferReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!NetTransferReport methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:44:38'!
with: anAccountToReportOn
	
	account := anAccountToReportOn ! !

NetTransferReport class
	instanceVariableNames: ''!

!classDefinition: 'NetTransferReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:44:45'!
NetTransferReport class
	instanceVariableNames: ''!
!NetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:45:23' prior: 50678352!
content
	
	| netTransferAmount |
	
	netTransferAmount := account netTransfers .
	
	^'Neto de transferencias: 0'! !
!NetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:45:34' prior: 50678553!
content
	
	| netTransferAmount |
	
	netTransferAmount := account netTransfers .
	
	^'Neto de transferencias: ' + netTransferAmount asString! !
!NetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:45:56' prior: 50678560!
content
	
	| netTransferAmount |
	
	netTransferAmount := account netTransfers .
	
	^'Neto de transferencias: ', netTransferAmount asString! !

----SNAPSHOT----(24 October 2023 02:46:14) CuisUniversity-5981.image priorSource: 11096268!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:15:43'!
test03NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:15:43'!
test02NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer!

----QUIT----(24 October 2023 14:16:20) CuisUniversity-5981.image priorSource: 11101581!

----STARTUP---- (24 October 2023 14:37:44) as C:\Users\sofia\Downloads\windows64 (1)\windows64\CuisUniversity-5981.image!


!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:37:50'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:37:50'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:03' prior: 50678285!
netTransfers
	| netTransfer |
	transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ]
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:20' prior: 50678627!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ].
	^netTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 14:39:21'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:39:25'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:39:48'!
test04NetTransferReportChangesForOutgoingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accounttoExtractFrom .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:39:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:41:28' prior: 50678635!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		].
	^netTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 14:41:29'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:41:32'!
FAILURE!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:41:32'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:41:32'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:41:32'!
FAILURE!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:41:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:41:39'!
FAILURE!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:41:52' prior: 50678274!
test01NetTransferForNewAccountIsZero
	| account report|
	account := ReceptiveAccount new.

	report := account netTransfers.
	self assert: report equals: 0! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:41:56'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:41:56'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:41:56'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:41:56'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:41:56'!
FAILURE!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:42:02'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:42:02'!
ERROR!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:42:24'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:42:24'!
FAILURE!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:42:29'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:42:29'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:42:50'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:44:02' prior: 50678452!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report account|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: account.
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:44:04'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:44:04'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:44:04'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:44:04'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:44:04'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:44:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:44:45' prior: 50678702!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:44:48'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:44:50'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:44:50'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:03' prior: 50678869!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 14:45:04'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:45:07'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:45:10'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:45:10'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:21' prior: 50678894!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ((aTransaction value) negated) ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:45:25'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:45:25'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:46:16' prior: 50678953!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:46:19'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:46:19'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:46:46'!
FAILURE!

----STARTUP---- (24 October 2023 14:47:04) as C:\Users\sofia\Downloads\windows64 (1)\windows64\CuisUniversity-5981.image!

!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:03' prior: 50678285!
netTransfers
	| netTransfer |
	transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ]
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:20' prior: 50679003!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:39:48'!
test04NetTransferReportChangesForOutgoingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accounttoExtractFrom .
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:41:28' prior: 50679011!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:41:52' prior: 50678274!
test01NetTransferForNewAccountIsZero
	| account report|
	account := ReceptiveAccount new.

	report := account netTransfers.
	self assert: report equals: 0! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:44:02' prior: 50678452!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report account|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: account.
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:44:45' prior: 50679036!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:03' prior: 50679074!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:21' prior: 50679087!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ((aTransaction value) negated) ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:46:16' prior: 50679100!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:47:10'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:47:10'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:47:50'!
FAILURE!

self transactions !

self balance!

self transactions first!

self transactions first value!

self transactions first value negated!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:49:03' prior: 50679113!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:49:11'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:49:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:49:26' prior: 50679142!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:49:28'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:49:31'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:49:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:50:02' prior: 50679163!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ^aTransaction value negated ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:50:05'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:50:06'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:50:09'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:50:09'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:50:09'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:50:09'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:51:01'!
test04NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:51:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:51:31' prior: 50679188!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ^aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ ^0 ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:51:34'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:51:38'!
test05NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:51:38'!
test04NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:51:51'!
test06NetTransferReportDoesntChangeForWithdraw
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 14:51:52'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:52:07' prior: 50679240!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ^aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ ^0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ ^0 ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:52:10'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:52:10'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:52:10'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:52:10'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:52:10'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 14:52:10'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:52:37'!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:53:14' prior: 50679339!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 2.
	report := NetTransferReport for: accounttoExtractFrom .
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: accountToDeposit .
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:53:30' prior: 50679352!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 accountToDeposit netTransfer report|
	account1 := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: accountToDeposit amount: 2.
	report := NetTransferReport for: account1 .
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: accountToDeposit .
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:53:37' prior: 50679375!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	report := NetTransferReport for: account1 .
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:54:31' prior: 50679397!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	report := NetTransferReport for: account1 .
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 14:54:38'!
FAILURE!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:54:52' prior: 50679417!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	report := NetTransferReport for: account2 .
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 14:54:53'!
FAILURE!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:55:08' prior: 50679442!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 14:55:16'!
FAILURE!

self transactions !

self transactions first value .!

self transactions second value  !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:56:26' prior: 50679300!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		] ifEmpty: [ 0 ].
	^netTransfer! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:56:28'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:56:28'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:56:28'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:56:28'!
FAILURE!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:56:28'!
FAILURE!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 14:56:29'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 14:56:29'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:57:15' prior: 50679493!
netTransfers
	| netTransfer |
	netTransfer := self inject: 0 into: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:58:14' prior: 50679537!
netTransfers
	^ self 
	inject: 0 
	into: [ : accumulatedValue : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		].
	! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:58:17'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:58:17'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:58:17'!
ERROR!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:58:17'!
ERROR!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:58:17'!
ERROR!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 14:58:17'!
ERROR!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 14:58:17'!
ERROR!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:58:22'!
ERROR!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:58:22'!
ERROR!

----STARTUP---- (24 October 2023 14:58:55) as C:\Users\sofia\Downloads\windows64 (1)\windows64\CuisUniversity-5981.image!

!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:03' prior: 50678285!
netTransfers
	| netTransfer |
	transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ]
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:20' prior: 50679606!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:39:48'!
test04NetTransferReportChangesForOutgoingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accounttoExtractFrom .
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:41:28' prior: 50679614!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:41:52' prior: 50678274!
test01NetTransferForNewAccountIsZero
	| account report|
	account := ReceptiveAccount new.

	report := account netTransfers.
	self assert: report equals: 0! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:44:02' prior: 50678452!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report account|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: account.
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:44:45' prior: 50679639!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:03' prior: 50679677!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:21' prior: 50679690!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ((aTransaction value) negated) ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:46:16' prior: 50679703!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:03' prior: 50679716!
netTransfers
	| netTransfer |
	transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ]
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:39:20' prior: 50679729!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction value ].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:39:48' prior: 50679622!
test04NetTransferReportChangesForOutgoingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accounttoExtractFrom .
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:41:28' prior: 50679737!
netTransfers
	| netTransfer |
	netTransfer := transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:41:52' prior: 50679652!
test01NetTransferForNewAccountIsZero
	| account report|
	account := ReceptiveAccount new.

	report := account netTransfers.
	self assert: report equals: 0! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:44:02' prior: 50679660!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report account|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: account.
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:44:45' prior: 50679762!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : accumulatedAmmount : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:03' prior: 50679800!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:45:21' prior: 50679813!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ((aTransaction value) negated) ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:46:16' prior: 50679826!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ (aTransaction value) negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:49:03' prior: 50679839!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:49:26' prior: 50679852!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:50:02' prior: 50679865!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ^aTransaction value negated ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:51:01'!
test04NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:51:31' prior: 50679878!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ^aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ ^0 ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:51:38'!
test05NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:59:04'!
test04NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:51:51'!
test06NetTransferReportDoesntChangeForWithdraw
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:52:07' prior: 50679902!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ^aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ ^0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ ^0 ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:52:37'!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account .
	report := NetTransferReport for: account .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:53:14' prior: 50679969!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 2.
	report := NetTransferReport for: accounttoExtractFrom .
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: accountToDeposit .
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:53:30' prior: 50679982!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 accountToDeposit netTransfer report|
	account1 := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: accountToDeposit amount: 2.
	report := NetTransferReport for: account1 .
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: accountToDeposit .
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:53:37' prior: 50680005!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	report := NetTransferReport for: account1 .
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:54:31' prior: 50680027!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	report := NetTransferReport for: account1 .
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:54:52' prior: 50680047!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	report := NetTransferReport for: account2 .
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:55:08' prior: 50680067!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := NetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:56:26' prior: 50679954!
netTransfers
	| netTransfer |
	netTransfer := transactions sum: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		] ifEmpty: [ 0 ].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:57:15' prior: 50680106!
netTransfers
	| netTransfer |
	netTransfer := self inject: 0 into: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ 	aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		].
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:58:14' prior: 50680122!
netTransfers
	^ self 
	inject: 0 
	into: [ : accumulatedValue : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		].
	! !

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:59:06'!
ERROR!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:59:06'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:59:34' prior: 50680137!
netTransfers
	^ transactions 
	inject: 0 
	into: [ : accumulatedValue : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		].
	! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 14:59:37'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 14:59:37'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:59:37'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 14:59:37'!
FAILURE!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 14:59:37'!
FAILURE!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 14:59:37'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 14:59:37'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:59:42'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:59:42'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 14:59:50' prior: 50680160!
netTransfers
	^ transactions 
	inject: 0 
	into: [ : accumulatedValue : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ ^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		].
	! !

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:59:52'!
PASSED!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 15:00:02' prior: 50680212!
netTransfers
	^ transactions 
	inject: 0 
	into: [ : accumulatedValue : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ ^aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ ^aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ ^0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ ^0 ].
		].
	! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:00:05'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 15:00:05'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:00:05'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 15:00:05'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:00:05'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 15:00:05'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 15:00:05'!
FAILURE!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 15:00:05'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 15:00:39' prior: 50680231!
netTransfers
	^ transactions 
	inject: 0 
	into: [ : accumulatedValue : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ 0 ].
		].
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 15:03:05' prior: 50680279!
netTransfers
	^ transactions 
	inject: 0 
	into: [ : accumulatedValue : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ accumulatedValue + aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ accumulatedValue + aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ accumulatedValue + 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ accumulatedValue + 0 ].
		].
	! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:03:08'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 15:03:08'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:03:08'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 15:03:08'!
FAILURE!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:03:08'!
FAILURE!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 15:03:08'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 15:03:08'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:03:15'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:03:15'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:04:37'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:04:37'!
FAILURE!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:05:05'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 15:05:05'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:05:05'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 15:05:05'!
FAILURE!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:05:05'!
FAILURE!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 15:05:05'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 15:05:05'!
ERROR!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 15:05:12'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:05:15'!
FAILURE!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:05:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 15:07:33' prior: 50680294!
netTransfers
	| accumulatedValue |
	accumulatedValue := 0.
	 transactions 
	do: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ accumulatedValue := accumulatedValue + aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ accumulatedValue := accumulatedValue + aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ accumulatedValue := accumulatedValue + 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ accumulatedValue := accumulatedValue + 0 ].
		].
	! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:07:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 15:07:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:07:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 15:07:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:07:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 15:07:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 15:07:39'!
FAILURE!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:07:42'!
FAILURE!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:07:42'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 15:07:53' prior: 50680397!
netTransfers
	| accumulatedValue |
	accumulatedValue := 0.
	transactions 
	do: [ : aTransaction | 
		
		(aTransaction isKindOf: IncomingLegTransfer) ifTrue: [ accumulatedValue := accumulatedValue + aTransaction value ].
		(aTransaction isKindOf: OutgoingLegTransfer) ifTrue: [ accumulatedValue := accumulatedValue + aTransaction value negated ].
		(aTransaction isKindOf: Deposit) ifTrue: [ accumulatedValue := accumulatedValue + 0 ].
		(aTransaction isKindOf: Withdraw ) ifTrue: [ accumulatedValue := accumulatedValue + 0 ].
		].
	
	^accumulatedValue 
	! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:07:58'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 15:07:58'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:07:58'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 15:07:58'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:07:58'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 15:07:58'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 15:07:58'!
PASSED!
!AccountTransaction methodsFor: 'nil' stamp: 'Sof D 10/24/2023 15:13:55'!
affectNetTransferAmount: anAmountToAddTo
	self subclassResponsibility ! !
!Deposit methodsFor: 'nil' stamp: 'Sof D 10/24/2023 15:14:12' overrides: 50680502!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo ! !
!Withdraw methodsFor: 'nil' stamp: 'Sof D 10/24/2023 15:14:20' overrides: 50680502!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo ! !
!IncomingLegTransfer methodsFor: 'nil' stamp: 'Sof D 10/24/2023 15:14:34' overrides: 50680502!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo + self value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 15:14:47' prior: 50680517 overrides: 50680502!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo + transfer value! !
!OutgoingLegTransfer methodsFor: 'nil' stamp: 'Sof D 10/24/2023 15:14:57' overrides: 50680502!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo - transfer value! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 15:15:39' prior: 50680453!
netTransfers
	^transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction affectNetTransferAmount: accumulatedAmmount ]
	! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 15:15:54'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 15:15:54'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 15:15:54'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/24/2023 15:15:54'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/24/2023 15:15:54'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/24/2023 15:15:54'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/24/2023 15:15:54'!
PASSED!

----QUIT----(24 October 2023 15:16:15) CuisUniversity-5981.image priorSource: 11102725!

----STARTUP---- (24 October 2023 15:25:33) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!


!classRemoval: #Transfer stamp: 'eaam 10/24/2023 15:27:48'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NetTransferReport stamp: 'eaam 10/24/2023 15:27:48'!
Object subclass: #NetTransferReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'eaam 10/24/2023 15:27:48'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingLegTransfer stamp: 'eaam 10/24/2023 15:27:48'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #IncomingLegTransfer stamp: 'eaam 10/24/2023 15:27:49'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'eaam 10/24/2023 15:27:49'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'eaam 10/24/2023 15:27:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryReport stamp: 'eaam 10/24/2023 15:27:50'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'eaam 10/24/2023 15:27:50'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'eaam 10/24/2023 15:27:50'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'eaam 10/24/2023 15:27:51'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'eaam 10/24/2023 15:27:51'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'eaam 10/24/2023 15:27:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'eaam 10/24/2023 15:27:52'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryTests stamp: 'eaam 10/24/2023 15:27:52'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountNetTransferTests stamp: 'eaam 10/24/2023 15:27:52'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/Portfolio-Solucion.st----!
!TransferTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:43:55'!
test09TransferChangesAccountsBalance

	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!TransferTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:44:40'!
test10transferIsRegistered

	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!methodRemoval: ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/24/2023 15:44:48'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
!

!methodRemoval: ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'eaam 10/24/2023 15:44:51'!
test08TransferChangesAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:46:38'!
test08AccountHasName

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:47:42' prior: 50674428!
test08AccountHasName

	| account1 |
	
	account1 := ReceptiveAccount named: 'Cuenta de leo'.
		
	self assert: account1 nombre equals: 'Cuenta de leo'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:47:49' prior: 50674439!
test08AccountHasName

	| account1 |
	
	account1 := ReceptiveAccount named: 'Cuenta de leo'.
		
	self assert: account1 name equals: 'Cuenta de leo'.! !

!testRun: #ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:47:52'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:48:18' prior: 50674447!
test08AccountHasName

	| account1 |
	
	account1 := ReceptiveAccount named: 'Cuenta de leo'.
		
	self assert: account1 accountName equals: 'Cuenta de leo'.! !

!testRun: #ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:51:27'!
ERROR!
!ReceptiveAccount class methodsFor: 'category-name' stamp: 'eaam 10/24/2023 15:51:42'!
named: aRenameMe1 
	self shouldBeImplemented.! !
!ReceptiveAccount class methodsFor: 'initialize' stamp: 'eaam 10/24/2023 15:52:43' prior: 50674469!
named: aAccountName
	self new initializeFor: aAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'eaam 10/24/2023 15:53:59'!
initializeFor: aAccountName

	| accountName |
	accountName := aAccountName
	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'eaam 10/24/2023 15:54:09' prior: 50674479!
initializeFor: aAccountName

	| accountName2 |
	accountName2 := aAccountName
	super initialize.
	transactions := OrderedCollection new.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'eaam 10/24/2023 15:54:17'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'eaam 10/24/2023 15:54:50' prior: 50674487!
initializeFor: aAccountName

	accountName := aAccountName
	super initialize.
	transactions := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/24/2023 15:54:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:54:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:54:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/24/2023 15:54:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/24/2023 15:54:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/24/2023 15:54:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/24/2023 15:54:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:54:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:54:52'!
ERROR!
!ReceptiveAccount class methodsFor: 'initialize' stamp: 'eaam 10/24/2023 15:55:15' prior: 50674474!
named: aAccountName
	^self new initializeFor: aAccountName.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/24/2023 15:55:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:55:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:55:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/24/2023 15:55:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/24/2023 15:55:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/24/2023 15:55:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/24/2023 15:55:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:55:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:55:16'!
ERROR!
!ReceptiveAccount methodsFor: 'category-name' stamp: 'eaam 10/24/2023 15:55:51'!
accountName
	self shouldBeImplemented.
	^accountName! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/24/2023 15:56:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:56:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:56:02'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'eaam 10/24/2023 15:56:23' prior: 50674587!
accountName
	^accountName! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:56:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:59:00'!
test16PortfolioCanBeInitializedWithName

	| portfolioToName |
	
	portfolioToName := Portfolio named: 'Porfolio de guilliman'.! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:59:11' prior: 50674638!
test16PortfolioCanBeInitializedWithName

	| portfolioToName |
	
	portfolioToName := Portfolio named: 'Porfolio de Guilliman'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 15:59:33'!
test08AccountCanInitializeWithName

	| account1 |
	
	account1 := ReceptiveAccount named: 'Cuenta de leo'.
		
	self assert: account1 accountName equals: 'Cuenta de leo'.! !

!methodRemoval: ReceptiveAccountTest #test08AccountHasName stamp: 'eaam 10/24/2023 15:59:33'!
test08AccountHasName

	| account1 |
	
	account1 := ReceptiveAccount named: 'Cuenta de leo'.
		
	self assert: account1 accountName equals: 'Cuenta de leo'.!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 16:10:17' prior: 50674645!
test16PortfolioCanBeInitializedWithName

	| portfolioToName |
	
	portfolioToName := Portfolio named: 'Porfolio de Robute'.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Robute'! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 16:10:24' prior: 50674668!
test16PortfolioCanBeInitializedWithName

	| portfolioToName |
	
	portfolioToName := Portfolio named: 'Porfolio de Robute'.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Robute'.! !

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 16:10:25'!
ERROR!
!Portfolio class methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:10:35'!
named: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:10:56' prior: 50674690!
named: aAccountName 
	self new initializeWith: aAccountName.! !

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 16:11:05'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'eaam 10/24/2023 16:11:15'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:11:15'!
initializeWith: aAccountName 
	self shouldBeImplemented.
	accountName := aAccountName.! !
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:11:26' prior: 50674711!
initializeWith: aAccountName 
	accountName := aAccountName.
	self initialize.! !

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 16:11:30'!
ERROR!
!Portfolio class methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:12:07' prior: 50674695!
named: aAccountName 
	^self new initializeWith: aAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'eaam 10/24/2023 16:24:29' prior: 50674509!
initializeFor: aAccountName

	accountName := aAccountName.
	super initialize.
	transactions := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'eaam 10/24/2023 16:24:32'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'eaam 10/24/2023 16:24:54'!
setName: aAccountName

	accountName := aAccountName.
	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'eaam 10/24/2023 16:24:54' prior: 50674549!
named: aAccountName
	^self new setName: aAccountName.! !

!methodRemoval: ReceptiveAccount #initializeFor: stamp: 'eaam 10/24/2023 16:24:54'!
initializeFor: aAccountName

	accountName := aAccountName.
	super initialize.
	transactions := OrderedCollection new.!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'eaam 10/24/2023 16:25:08' prior: 50674769!
setName: aAccountName
	accountName := aAccountName.! !
!Portfolio class methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:26:30'!
named: aAccountName with: anAccount with: anotherAccount
	^self new 
		setName: aAccountName;
		add: anAccount;
		add: anotherAccount;
		yourself! !
!Portfolio class methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:26:39' prior: 50674726!
named: aAccountName 
	^self new setName: aAccountName.! !
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:26:52'!
setName: aAccountName 
	accountName := aAccountName.
	self initialize.! !

!methodRemoval: Portfolio #initializeWith: stamp: 'eaam 10/24/2023 16:26:52'!
initializeWith: aAccountName 
	accountName := aAccountName.
	self initialize.!
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/24/2023 16:26:59' prior: 50674806!
setName: aAccountName 
	accountName := aAccountName.! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/24/2023 16:38:02'!
accountName
	^accountName ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 16:38:03'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 16:52:23'!
test16PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	portfolioToName := Portfolio named: 'Porfolio de Trazyn'.
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	self assert: portfolioToName accountName equals: 'Porfolio de Robute'.! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 16:52:34' prior: 50674886!
test16PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	portfolioToName := Portfolio named: 'Porfolio de Trazyn'.
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Robute'.! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 16:58:37'!
test17PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	portfolioToName := Portfolio named: 'Porfolio de Trazyn'.
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Robute'.! !

!methodRemoval: PortfolioTest #test16PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 16:58:37'!
test16PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	portfolioToName := Portfolio named: 'Porfolio de Trazyn'.
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Robute'.!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 16:59:11' prior: 50674915!
test17PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	portfolioToName := Portfolio named: 'Porfolio de Trazyn'.
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	
	self assert: ((portfolioToName isComposedBy: accountToAdd) and:(portfolioToName isComposedBy: anotherAccountToAdd)).! !

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 16:59:12'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 16:59:38' prior: 50674946!
test17PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	portfolioToName := Portfolio named: 'Porfolio de Trazyn'.
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	
	self assert: (portfolioToName isComposedBy: accountToAdd).! !

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 16:59:41'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 17:00:16' prior: 50674966!
test17PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	portfolioToName := Portfolio named: 'Porfolio de Trazyn' with: accountToAdd with: anotherAccountToAdd.
	
	self assert: (portfolioToName isComposedBy: accountToAdd).! !

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:00:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 17:00:25' prior: 50674985!
test17PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	portfolioToName := Portfolio named: 'Porfolio de Trazyn' with: accountToAdd with: anotherAccountToAdd.
	
	self assert: (portfolioToName isComposedBy: accountToAdd).
	self assert: (portfolioToName isComposedBy: anotherAccountToAdd).! !

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:00:26'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 17:01:11'!
test18PortfolioCanBeInitializedWithANameAndTwoAccounts

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	portfolioToName := Portfolio named: 'Porfolio de Trazyn' with: accountToAdd with: anotherAccountToAdd.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Trazyn'.! !

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:01:13'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 17:01:30'!
test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio

	| portfolioToName accountToAdd anotherAccountToAdd|
	
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	anotherAccountToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	portfolioToName := Portfolio named: 'Porfolio de Trazyn' with: accountToAdd with: anotherAccountToAdd.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Trazyn'.! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 17:01:46' prior: 50675248!
test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio

	| portfolioToName accountToAdd portfolioToAdd|
	
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	portfolioToAdd := ReceptiveAccount named: 'Cuenta de Krispekh'.
	portfolioToName := Portfolio named: 'Porfolio de Trazyn' with: accountToAdd with: portfolioToAdd.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Trazyn'.! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 17:02:04' prior: 50675265!
test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio

	| portfolioToName accountToAdd portfolioToAdd|
	
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	portfolioToAdd := Portfolio named: 'Portfolio de Krispekh'.
	portfolioToName := Portfolio named: 'Porfolio de Trazyn' with: accountToAdd with: portfolioToAdd.
	
	self assert: portfolioToName accountName equals: 'Porfolio de Trazyn'.! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/24/2023 17:02:16' prior: 50675281!
test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio

	| portfolioToName accountToAdd portfolioToAdd|
	
	accountToAdd := ReceptiveAccount named: 'Cuenta de Trazyn'.
	portfolioToAdd := Portfolio named: 'Portfolio de Krispekh'.
	portfolioToName := Portfolio named: 'Porfolio de Trazyn' with: accountToAdd with: portfolioToAdd.
	
	self assert: (portfolioToName isComposedBy: portfolioToAdd).! !

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'eaam 10/24/2023 17:02:17'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'eaam 10/24/2023 17:13:52'!
PASSED!

----QUIT----(24 October 2023 17:14:02) CuisUniversity-5981.image priorSource: 11165469!

----STARTUP---- (25 October 2023 01:22:46) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Documents\SmalltalkVM\windows64\Portfolio-Solucion.st----!

!methodRemoval: ReceptiveAccount #netTransfers stamp: 'Sof D 10/25/2023 01:23:45'!
netTransfers
	^transactions inject: 0 into: [ : accumulatedAmmount : aTransaction | aTransaction affectNetTransferAmount: accumulatedAmmount ]
	!
!AccountTransaction methodsFor: 'balance' stamp: 'Sof D 10/25/2023 01:24:18'!
sendToReport: aReport

	self subclassResponsibility! !
!Deposit methodsFor: 'print' stamp: 'Sof D 10/25/2023 01:24:18' overrides: 50677002!
sendToReport: aReport
	aReport printDepositWithValue: value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:24:18' overrides: 50677002!
sendToReport: aReport 
	aReport printIncomingTransferWithValue: self value! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:24:18' overrides: 50677002!
sendToReport: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!Withdraw methodsFor: 'print' stamp: 'Sof D 10/25/2023 01:24:18' overrides: 50677002!
sendToReport: aReport
	aReport printWithdrawWithValue: value! !
!Transfer methodsFor: 'category-name' stamp: 'Sof D 10/25/2023 01:24:18'!
sendToReport: aReport! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:24:19' prior: 50676497!
summary: aReport
	transactions do: [:aTransaction | aTransaction sendToReport: aReport]
	! !

!methodRemoval: AccountTransaction #dataPrintIn: stamp: 'Sof D 10/25/2023 01:24:19'!
dataPrintIn: aReport

	self subclassResponsibility!

!methodRemoval: Deposit #dataPrintIn: stamp: 'Sof D 10/25/2023 01:24:19'!
dataPrintIn: aReport
	aReport printDepositWithValue: value!

!methodRemoval: IncomingLegTransfer #dataPrintIn: stamp: 'Sof D 10/25/2023 01:24:19'!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value!

!methodRemoval: OutgoingLegTransfer #dataPrintIn: stamp: 'Sof D 10/25/2023 01:24:19'!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value!

!methodRemoval: Withdraw #dataPrintIn: stamp: 'Sof D 10/25/2023 01:24:19'!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value!

!methodRemoval: Transfer #dataPrintIn: stamp: 'Sof D 10/25/2023 01:24:19'!
dataPrintIn: aReport!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/25/2023 01:24:37'!
processTransactionsForReport: aReport
	transactions do: [:aTransaction | aTransaction sendToReport: aReport]
	! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:24:38' prior: 50676567!
summary
	account processTransactionsForReport: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!methodRemoval: ReceptiveAccount #summary: stamp: 'Sof D 10/25/2023 01:24:38'!
summary: aReport
	transactions do: [:aTransaction | aTransaction sendToReport: aReport]
	!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/25/2023 01:24:43' prior: 50677067!
processTransactionsForReport: aReportToGenerate
	transactions do: [:aTransaction | aTransaction sendToReport: aReportToGenerate]
	! !

Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/25/2023 01:24:59'!
Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #NetTransferReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #NetTransferReport category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/25/2023 01:25:42'!
AccountReport subclass: #NetTransferReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummaryReport category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/25/2023 01:25:52'!
AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classRenamed: #NetTransferReport as: #AccountNetTransferReport stamp: 'Sof D 10/25/2023 01:25:56'!
Smalltalk renameClassNamed: #NetTransferReport as: #AccountNetTransferReport!
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:25:56' prior: 50675569!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := AccountNetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !
!AccountNetTransferReport class methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:25:56' prior: 50676898!
for: anAccountToReportOn

	^AccountNetTransferReport new with: anAccountToReportOn ! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:25:56' prior: 50675529!
test04NetTransferReportChangesForOutgoingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: accounttoExtractFrom .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:25:56' prior: 50675557!
test06NetTransferReportDoesntChangeForWithdraw
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account .
	report := AccountNetTransferReport for: account .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:25:56' prior: 50675545!
test05NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := AccountNetTransferReport for: account .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:25:56' prior: 50675513!
test03NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:25:56' prior: 50675496!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report account|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: account.
	self assert: report content equals: netTransfer! !
!AccountReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:26:10'!
content
	self subclassResponsibility ! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:26:36'!
reportProcessesDeposit: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:26:36' prior: 50677007 overrides: 50677002!
sendToReport: aReport
	aReport reportProcessesDeposit: value! !

!methodRemoval: AccountSummaryReport #printDepositWithValue: stamp: 'Sof D 10/25/2023 01:26:36'!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:26:47' prior: 50677248!
reportProcessesDeposit: aDepositToReportOn 
	accountSummary add: ('Depósito por ', aDepositToReportOn value asString).! !
!AccountReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:26:55'!
reportProcessesDeposit: aDepositToReportOn 
	self subclassResponsibility ! !
!AccountNetTransferReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:27:05' overrides: 50677273!
reportProcessesDeposit: aDepositToReportOn 
	! !

!classDefinition: #AccountNetTransferReport category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/25/2023 01:27:15'!
AccountReport subclass: #AccountNetTransferReport
	instanceVariableNames: 'account amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:27:13' prior: 50676884!
with: anAccountToReportOn
	
	account := anAccountToReportOn .
	amount := 0! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:27:45' prior: 50676876 overrides: 50677244!
content
	
	account processTransactionsForReport: self.
	
	^'Neto de transferencias: ', amount asString! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:28:00'!
reportProcessesWithdraw: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:28:00' prior: 50677025 overrides: 50677002!
sendToReport: aReport
	aReport reportProcessesWithdraw: value! !

!methodRemoval: AccountSummaryReport #printWithdrawWithValue: stamp: 'Sof D 10/25/2023 01:28:00'!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:28:12' prior: 50677306!
reportProcessesWithdraw: aWithdrawToReportOn 
	accountSummary add: ('Extracción por ', aWithdrawToReportOn value asString).! !
!AccountNetTransferReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:28:16'!
reportProcessesWithdraw: aWithdrawToReportOn
! !
!AccountReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:28:23'!
reportProcessesWithdraw: aWithdrawToReportOn
	self subclassResponsibility ! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:28:42'!
reportProcessesOutgoingTransfer: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:28:42' prior: 50677019 overrides: 50677002!
sendToReport: aReport 
	aReport reportProcessesOutgoingTransfer: self value! !

!methodRemoval: AccountSummaryReport #printOutgoingTransferWithValue: stamp: 'Sof D 10/25/2023 01:28:42'!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:28:56' prior: 50677342!
reportProcessesOutgoingTransfer: anOutgoingTransferToReportOn 
	accountSummary add: ('Salida por transferencia de ', anOutgoingTransferToReportOn value asString).! !
!AccountReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:29:04'!
reportProcessesOutgoingTransfer: anOutgoingTransferToReportOn 
	self subclassResponsibility ! !
!AccountNetTransferReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:29:16' overrides: 50677371!
reportProcessesOutgoingTransfer: anOutgoingTransferToReportOn 
	amount := amount - anOutgoingTransferToReportOn value! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:29:31'!
reportProcessesIncomingTransfer: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:29:31' prior: 50677013 overrides: 50677002!
sendToReport: aReport 
	aReport reportProcessesIncomingTransfer: self value! !

!methodRemoval: AccountSummaryReport #printIncomingTransferWithValue: stamp: 'Sof D 10/25/2023 01:29:31'!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'Sof D 10/25/2023 01:29:44' prior: 50677385!
reportProcessesIncomingTransfer: anIncomingTransferToReportOn 
	accountSummary add: ('Entrada por transferencia de ', anIncomingTransferToReportOn value asString).! !
!AccountNetTransferReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:30:23'!
reportProcessesIncomingTransfer: anIncomingTransferToReportOn
	amount := amount + anIncomingTransferToReportOn value! !
!AccountReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:31:20'!
reportProcessesIncomingTransfer: anIncomingTransferToReportOn
	self subclassResponsibility ! !

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:32:00'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:32:00'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:32:00'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:32:00'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:32:00'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:32:00'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/25/2023 01:32:01'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/25/2023 01:32:01'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/25/2023 01:32:01'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/25/2023 01:32:01'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/25/2023 01:32:01'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/25/2023 01:32:01'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/25/2023 01:32:01'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/25/2023 01:32:02'!
ERROR!

!methodRemoval: AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/25/2023 01:32:06'!
test01NetTransferForNewAccountIsZero
	| account report|
	account := ReceptiveAccount new.

	report := account netTransfers.
	self assert: report equals: 0!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/25/2023 01:32:07'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/25/2023 01:32:07'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/25/2023 01:32:07'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/25/2023 01:32:07'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/25/2023 01:32:07'!
PASSED!

!testRun: #AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/25/2023 01:32:07'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:32:13'!
test01NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report account|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: account.
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/25/2023 01:32:13'!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report account|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: account.
	self assert: report content equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:32:17'!
test02NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test03NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/25/2023 01:32:17'!
test03NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:32:22'!
test03NetTransferReportChangesForOutgoingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: accounttoExtractFrom .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test04NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/25/2023 01:32:22'!
test04NetTransferReportChangesForOutgoingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountNetTransferReport for: accounttoExtractFrom .
	self assert: report content equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:32:26'!
test04NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := AccountNetTransferReport for: account .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test05NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/25/2023 01:32:26'!
test05NetTransferReportDoesntChangeForDeposit
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: account .
	report := AccountNetTransferReport for: account .
	self assert: report content equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:32:30'!
test05NetTransferReportDoesntChangeForWithdraw
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account .
	report := AccountNetTransferReport for: account .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test06NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/25/2023 01:32:31'!
test06NetTransferReportDoesntChangeForWithdraw
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Withdraw register: 1 on: account .
	report := AccountNetTransferReport for: account .
	self assert: report content equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:32:41'!
test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := AccountNetTransferReport for: account2 .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/25/2023 01:32:41'!
test07NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer report|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	report := AccountNetTransferReport for: account2 .
	self assert: report content equals: netTransfer!
!Deposit methodsFor: 'value' stamp: 'Sof D 10/25/2023 01:32:57' prior: 50676653 overrides: 50676600!
value

	^ value copy! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:33:02' prior: 50676728 overrides: 50676600!
value 

	^transfer value copy! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:33:08' prior: 50676796 overrides: 50676600!
value 

	^transfer value copy! !

!methodRemoval: Withdraw #affectNetTransferAmount: stamp: 'Sof D 10/25/2023 01:33:15'!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo !
!Withdraw methodsFor: 'value' stamp: 'Sof D 10/25/2023 01:33:20' prior: 50676831 overrides: 50676600!
value

	^ value copy! !

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/25/2023 01:33:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/25/2023 01:33:28'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:41:27' prior: 50675600!
test01SummaryOfNewAccountReportsZeroBalance
	| a summary report|
	a := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: a.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a s r'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'ac s r'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:41:55'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'ac s r'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:42:21' prior: 50677915!
test01SummaryOfNewAccountReportsZeroBalance
	
	ac := ReceptiveAccount new.
	s := OrderedCollection new.
	r := AccountSummaryReport sumaryOf: ac.
	s add: 'Balance = 0'.
	r summary.
	self assert: r content equals: s! !

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:42:31'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a s r'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:42:31' prior: 50677944!
test01SummaryOfNewAccountReportsZeroBalance
	
	a := ReceptiveAccount new.
	s := OrderedCollection new.
	r := AccountSummaryReport sumaryOf: a.
	s add: 'Balance = 0'.
	r summary.
	self assert: r content equals: s! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:42:48' prior: 50675612!
test02SummaryReportsDepositCorrectly
	
	a := ReceptiveAccount new.
	s := OrderedCollection new.
	Deposit register: 10 on: a.
	r := AccountSummaryReport sumaryOf: a. 
	s add: 'Depósito por 10'.
	s add: 'Balance = 10'.
	r summary.
	self assert: r content equals: s! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:45:30' prior: 50675626!
test03SummaryReportsWithdrawalCorrectly
	
	a := ReceptiveAccount new.
	s := OrderedCollection new.
	Withdraw register: 10 on: a. 
	r := AccountSummaryReport sumaryOf: a.
	s add: 'Extracción por 10'.
	s add: 'Balance = -10'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:45:50'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:45:50'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:45:50'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:45:50'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:45:51'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:45:51'!
PASSED!
!AccountSummaryTests methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:46:30' overrides: 16961394!
setUp 
	a := ReceptiveAccount new.
	s := OrderedCollection new.
	r := AccountSummaryReport sumaryOf: a.! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:46:38' prior: 50677963!
test01SummaryOfNewAccountReportsZeroBalance
	
	
	s add: 'Balance = 0'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:46:40'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:46:48' prior: 50677973!
test02SummaryReportsDepositCorrectly
	
	Deposit register: 10 on: a.
	s add: 'Depósito por 10'.
	s add: 'Balance = 10'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:46:52'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:47:00' prior: 50677985!
test03SummaryReportsWithdrawalCorrectly
	
	Withdraw register: 10 on: a. 
	s add: 'Extracción por 10'.
	s add: 'Balance = -10'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:47:01'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:47:01'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:47:01'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:47:01'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:47:01'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:47:01'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:47:01'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:47:28' prior: 50675677!
test06SummaryReportsMultipleTransactionsCorrectly
	
	Deposit register: 100 on: a.
	Withdraw register: 50 on: a. 
	s add: 'Depósito por 100'.
	s add: 'Extracción por 50'.
	s add: 'Balance = 50'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:47:29'!
PASSED!

TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a a2 a3 s r'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:49:22'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a a2 a3 s r'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:49:41' prior: 50678020 overrides: 16961394!
setUp 
	a := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	s := OrderedCollection new.
	r := AccountSummaryReport sumaryOf: a.! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:50:43' prior: 50675659!
test05SummaryReportsIncomingTransferCorrectly
	
	Transfer from: a2 to: a3 amount: 1.
	r := AccountSummaryReport sumaryOf: a2.
	s add: 'Entrada por transferencia de 1'.
	s add: 'Balance = 1'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:50:44'!
FAILURE!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:51:35' prior: 50675640!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: a2 to: a3 amount: 1.
	r := AccountSummaryReport sumaryOf: a2.
	s add: 'Salida por transferencia de 1'.
	s add: 'Balance = -1'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:51:44'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:51:44'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:51:44'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:51:44'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:51:44'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:51:44'!
FAILURE!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:51:44'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:51:44'!
FAILURE!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:51:50' prior: 50678138!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: a2 to: a3 amount: 1.
	r := AccountSummaryReport sumaryOf: a3.
	s add: 'Salida por transferencia de 1'.
	s add: 'Balance = -1'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:51:51'!
FAILURE!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:52:06' prior: 50678179!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: a2 to: a3 amount: 1.
	r := AccountSummaryReport sumaryOf: a2.
	s add: 'Salida por transferencia de 1'.
	s add: 'Balance = -1'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:52:07'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:52:07'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:52:07'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:52:07'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:52:07'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:52:07'!
FAILURE!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:52:07'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:52:07'!
FAILURE!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:52:31' prior: 50678123!
test05SummaryReportsIncomingTransferCorrectly
	
	Transfer from: a2 to: a3 amount: 1.
	r := AccountSummaryReport sumaryOf: a3.
	s add: 'Entrada por transferencia de 1'.
	s add: 'Balance = 1'.
	r summary.
	self assert: r content equals: s! !

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:52:34'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:52:34'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:52:34'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:52:34'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:52:34'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:52:34'!
PASSED!

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:52:46'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a a2 a3 s report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:46' prior: 50678027!
test01SummaryOfNewAccountReportsZeroBalance
	
	
	s add: 'Balance = 0'.
	report summary.
	self assert: report content equals: s! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:46' prior: 50678038!
test02SummaryReportsDepositCorrectly
	
	Deposit register: 10 on: a.
	s add: 'Depósito por 10'.
	s add: 'Balance = 10'.
	report summary.
	self assert: report content equals: s! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:46' prior: 50678235!
test05SummaryReportsIncomingTransferCorrectly
	
	Transfer from: a2 to: a3 amount: 1.
	report := AccountSummaryReport sumaryOf: a3.
	s add: 'Entrada por transferencia de 1'.
	s add: 'Balance = 1'.
	report summary.
	self assert: report content equals: s! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:46' prior: 50678114 overrides: 16961394!
setUp 
	a := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	s := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: a.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:46' prior: 50678050!
test03SummaryReportsWithdrawalCorrectly
	
	Withdraw register: 10 on: a. 
	s add: 'Extracción por 10'.
	s add: 'Balance = -10'.
	report summary.
	self assert: report content equals: s! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:46' prior: 50678194!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: a2 to: a3 amount: 1.
	report := AccountSummaryReport sumaryOf: a2.
	s add: 'Salida por transferencia de 1'.
	s add: 'Balance = -1'.
	report summary.
	self assert: report content equals: s! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:46' prior: 50678085!
test06SummaryReportsMultipleTransactionsCorrectly
	
	Deposit register: 100 on: a.
	Withdraw register: 50 on: a. 
	s add: 'Depósito por 100'.
	s add: 'Extracción por 50'.
	s add: 'Balance = 50'.
	report summary.
	self assert: report content equals: s! !

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:52:51'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a a2 a3 summary report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:51' prior: 50678277!
test01SummaryOfNewAccountReportsZeroBalance
	
	
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:51' prior: 50678285!
test02SummaryReportsDepositCorrectly
	
	Deposit register: 10 on: a.
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:51' prior: 50678294!
test05SummaryReportsIncomingTransferCorrectly
	
	Transfer from: a2 to: a3 amount: 1.
	report := AccountSummaryReport sumaryOf: a3.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:51' prior: 50678306 overrides: 16961394!
setUp 
	a := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: a.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:51' prior: 50678315!
test03SummaryReportsWithdrawalCorrectly
	
	Withdraw register: 10 on: a. 
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:51' prior: 50678325!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: a2 to: a3 amount: 1.
	report := AccountSummaryReport sumaryOf: a2.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:52:51' prior: 50678337!
test06SummaryReportsMultipleTransactionsCorrectly
	
	Deposit register: 100 on: a.
	Withdraw register: 50 on: a. 
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:53:00'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a a2 receivingAccount summary report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:00' prior: 50678388 overrides: 16961394!
setUp 
	a := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: a.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:00' prior: 50678407!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: a2 to: receivingAccount amount: 1.
	report := AccountSummaryReport sumaryOf: a2.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:00' prior: 50678375!
test05SummaryReportsIncomingTransferCorrectly
	
	Transfer from: a2 to: receivingAccount amount: 1.
	report := AccountSummaryReport sumaryOf: receivingAccount.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:53:09'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'a sendingAccount receivingAccount summary report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:09' prior: 50678441 overrides: 16961394!
setUp 
	a := ReceptiveAccount new.
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: a.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:09' prior: 50678451!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	report := AccountSummaryReport sumaryOf: sendingAccount.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:09' prior: 50678464!
test05SummaryReportsIncomingTransferCorrectly
	
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	report := AccountSummaryReport sumaryOf: receivingAccount.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #AccountSummaryTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:53:16'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: 'account sendingAccount receivingAccount summary report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:16' prior: 50678419!
test06SummaryReportsMultipleTransactionsCorrectly
	
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:16' prior: 50678397!
test03SummaryReportsWithdrawalCorrectly
	
	Withdraw register: 10 on: account. 
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:16' prior: 50678487 overrides: 16961394!
setUp 
	account := ReceptiveAccount new.
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:53:16' prior: 50678365!
test02SummaryReportsDepositCorrectly
	
	Deposit register: 10 on: account.
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/25/2023 01:53:18'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/25/2023 01:53:18'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/25/2023 01:53:18'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/25/2023 01:53:18'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/25/2023 01:53:18'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/25/2023 01:53:18'!
PASSED!

TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'n r a a2 a3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:54:16'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'n r a a2 a3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountNetTransferTests methodsFor: 'nil' stamp: 'Sof D 10/25/2023 01:54:57' overrides: 16961394!
setUp

	a := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:55:43' prior: 50677514!
test01NetTransferReportStartsReportingZero
	| netTransfer |
	netTransfer := 'Neto de transferencias: 0'.
	self assert: r content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:56:08' prior: 50678615 overrides: 16961394!
setUp

	a := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	r := AccountNetTransferReport for: a	! !

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/25/2023 01:56:11'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:56:36' prior: 50677617!
test04NetTransferReportDoesntChangeForDeposit
	| netTransfer |
	netTransfer := 'Neto de transferencias: 0'.
	Deposit register: 1 on: a .
	self assert: r content equals: netTransfer! !

TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'zeroNetTransferReport r a a2 a3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:56:53'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'zeroNetTransferReport r a a2 a3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:57:11' prior: 50678631 overrides: 16961394!
setUp

	a := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	r := AccountNetTransferReport for: a	.
	
	zeroNetTransferReport := 'Neto de transferencias: 0'.
! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:57:27' prior: 50678622!
test01NetTransferReportStartsReportingZero

	self assert: r content equals: zeroNetTransferReport ! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:57:37' prior: 50678643!
test04NetTransferReportDoesntChangeForDeposit

	Deposit register: 1 on: a .
	self assert: r content equals: zeroNetTransferReport ! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:57:51' prior: 50677642!
test05NetTransferReportDoesntChangeForWithdraw

	Withdraw register: 1 on: a .
	r := AccountNetTransferReport for: a .
	self assert: r content equals: zeroNetTransferReport ! !

!classDefinition: #AccountNetTransferTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:58:31'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'zeroNetTransferReport r account a2 a3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:58:31' prior: 50678668 overrides: 16961394!
setUp

	account := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	r := AccountNetTransferReport for: account	.
	
	zeroNetTransferReport := 'Neto de transferencias: 0'.
! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:58:31' prior: 50678693!
test05NetTransferReportDoesntChangeForWithdraw

	Withdraw register: 1 on: account .
	r := AccountNetTransferReport for: account .
	self assert: r content equals: zeroNetTransferReport ! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:58:31' prior: 50678685!
test04NetTransferReportDoesntChangeForDeposit

	Deposit register: 1 on: account .
	self assert: r content equals: zeroNetTransferReport ! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:59:01' prior: 50677549!
test02NetTransferReportChangesForIncomingTransfer
	| netTransfer report|
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: a2 to: a3 amount: 1.
	report := AccountNetTransferReport for: a3 .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/25/2023 01:59:05'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/25/2023 01:59:05'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/25/2023 01:59:05'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/25/2023 01:59:05'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/25/2023 01:59:05'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/25/2023 01:59:05'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/25/2023 01:59:05'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 01:59:22' prior: 50677583!
test03NetTransferReportChangesForOutgoingTransfer
	| netTransfer report|
	a2 := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: a2 to: a3 amount: 1.
	report := AccountNetTransferReport for: a2 .
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountNetTransferTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 01:59:53'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'zeroNetTransferReport r account sendingAccount a3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:59:53' prior: 50678712 overrides: 16961394!
setUp

	account := ReceptiveAccount new.
	sendingAccount := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	
	r := AccountNetTransferReport for: account	.
	
	zeroNetTransferReport := 'Neto de transferencias: 0'.
! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:59:53' prior: 50678740!
test02NetTransferReportChangesForIncomingTransfer
	| netTransfer report|
	sendingAccount := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: sendingAccount to: a3 amount: 1.
	report := AccountNetTransferReport for: a3 .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 01:59:53' prior: 50678782!
test03NetTransferReportChangesForOutgoingTransfer
	| netTransfer report|
	sendingAccount := ReceptiveAccount new.
	a3 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: sendingAccount to: a3 amount: 1.
	report := AccountNetTransferReport for: sendingAccount .
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountNetTransferTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:00:02'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'zeroNetTransferReport r account sendingAccount receivingAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:00:02' prior: 50678806 overrides: 16961394!
setUp

	account := ReceptiveAccount new.
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	r := AccountNetTransferReport for: account	.
	
	zeroNetTransferReport := 'Neto de transferencias: 0'.
! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:00:02' prior: 50678817!
test02NetTransferReportChangesForIncomingTransfer
	| netTransfer report|
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	report := AccountNetTransferReport for: receivingAccount .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:00:02' prior: 50678831!
test03NetTransferReportChangesForOutgoingTransfer
	| netTransfer report|
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	report := AccountNetTransferReport for: sendingAccount .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 02:00:23' prior: 50678867!
test02NetTransferReportChangesForIncomingTransfer
	| netTransfer reportForReceivingAccount|
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	reportForReceivingAccount := AccountNetTransferReport for: receivingAccount .
	self assert: reportForReceivingAccount content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 02:00:37' prior: 50678883!
test03NetTransferReportChangesForOutgoingTransfer
	| netTransfer reportForSendingAccount|
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: -1'.
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	reportForSendingAccount := AccountNetTransferReport for: sendingAccount .
	self assert: reportForSendingAccount content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/25/2023 02:01:13' prior: 50677667!
test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions
	| account1 account2 netTransfer reportForAccount2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: account1 to: account2 amount: 2.
	Transfer from: account2 to: account1 amount: 1.
	Withdraw register: 100 on: account2 .
	Deposit register: 500 on: account2 .
	reportForAccount2 := AccountNetTransferReport for: account2 .
	self assert: reportForAccount2 content equals: netTransfer! !

!classDefinition: #AccountNetTransferTests category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:01:19'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: 'zeroNetTransferReport report account sendingAccount receivingAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:01:19' prior: 50678732!
test04NetTransferReportDoesntChangeForDeposit

	Deposit register: 1 on: account .
	self assert: report content equals: zeroNetTransferReport ! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:01:19' prior: 50678678!
test01NetTransferReportStartsReportingZero

	self assert: report content equals: zeroNetTransferReport ! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:01:19' prior: 50678856 overrides: 16961394!
setUp

	account := ReceptiveAccount new.
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	report := AccountNetTransferReport for: account	.
	
	zeroNetTransferReport := 'Neto de transferencias: 0'.
! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:01:19' prior: 50678722!
test05NetTransferReportDoesntChangeForWithdraw

	Withdraw register: 1 on: account .
	report := AccountNetTransferReport for: account .
	self assert: report content equals: zeroNetTransferReport ! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:01:38'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'no messages' stamp: 'Sof D 10/25/2023 02:02:39'!
test01PortfolioReportPrintsPortfoliosName
	
	! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:02:46'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'nil' stamp: 'Sof D 10/25/2023 02:03:17' overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'! !

!classDefinition: #PortfolioReport category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/25/2023 02:03:52'!
Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:03:34' prior: 50679030 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	report := PortfolioReport for: portfolio ! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio expectedReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:04:23'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio expectedReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:04:35' prior: 50679044 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:05:27' prior: 50679012!
test01PortfolioReportPrintsPortfoliosName
	
	expectedReport add: 'Portfolio de Hernan'.
	
	self assert: report content equals: expectedReport ! !
!PortfolioReport class methodsFor: 'instance creation' stamp: 'Sof D 10/25/2023 02:05:40'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!PortfolioReport class methodsFor: 'instance creation' stamp: 'Sof D 10/25/2023 02:06:17' prior: 50679083!
for: aPortfolioToReportAbout 

	^self new with: aPortfolioToReportAbout ! !
!PortfolioReport methodsFor: 'initialization' stamp: 'Sof D 10/25/2023 02:06:35'!
with: aPortfolioToReportAbout 
	self shouldBeImplemented.! !
!PortfolioReport methodsFor: 'initialization' stamp: 'Sof D 10/25/2023 02:06:42' prior: 50679097!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout ! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:06:46'!
ERROR!
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:07:00'!
content
	self shouldBeImplemented.! !
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:07:44' prior: 50679111!
content
	| contenido |
	
	contenido := OrderedCollection new. 
	contenido add: portfolio name .
	^contenido! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:07:46'!
FAILURE!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'Sof D 10/25/2023 02:08:35'!
for: aAccount
	^self new initializeSumary: aAccount! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:08:35' prior: 50678558 overrides: 16961394!
setUp 
	account := ReceptiveAccount new.
	sendingAccount := ReceptiveAccount new.
	receivingAccount := ReceptiveAccount new.
	
	summary := OrderedCollection new.
	report := AccountSummaryReport for: account.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:08:35' prior: 50678511!
test05SummaryReportsIncomingTransferCorrectly
	
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	report := AccountSummaryReport for: receivingAccount.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:08:35' prior: 50678497!
test04SummaryReportsOutgoingTransferCorrectly
	
	
	Transfer from: sendingAccount to: receivingAccount amount: 1.
	report := AccountSummaryReport for: sendingAccount.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryReport class #sumaryOf: stamp: 'Sof D 10/25/2023 02:08:35'!
sumaryOf: aAccount
	^self new initializeSumary: aAccount!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'Sof D 10/25/2023 02:08:54'!
with: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport class methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:08:54' prior: 50679127!
for: aAccount
	^self new with: aAccount! !

!methodRemoval: AccountSummaryReport #initializeSumary: stamp: 'Sof D 10/25/2023 02:08:54'!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.!
!AccountNetTransferReport class methodsFor: 'instance creation' stamp: 'Sof D 10/25/2023 02:09:02' prior: 50677160!
for: anAccountToReportOn

	^self new with: anAccountToReportOn ! !
!Portfolio methodsFor: 'nil' stamp: 'Sof D 10/25/2023 02:10:19'!
processReport: aReportToGenerate
	^self name! !
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:10:40' prior: 50679116!
content
	| contenido |
	
	contenido := OrderedCollection new. 
	contenido add: (portfolio processReport: self).
	^contenido! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:10:46'!
FAILURE!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:10:46'!
FAILURE!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:11:18' prior: 50679066 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:11:20'!
FAILURE!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:11:20'!
FAILURE!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:11:31' prior: 50679217 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.! !

!methodRemoval: Portfolio #processReport: stamp: 'Sof D 10/25/2023 02:12:24'!
processReport: aReportToGenerate
	^self name!
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:12:37' prior: 50679201!
content
	| contenido |
	
	contenido := OrderedCollection new. 
	contenido add: (portfolio accountName ).
	^contenido! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:12:43'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:13:50'!
test01PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	
	
	self assert: report content equals: expectedReport ! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio expectedReport account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:13:55'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio expectedReport account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:14:04' prior: 50679234 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount new.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:14:09'!
test02PortfolioReportPrintsPortfoliosName
	
	expectedReport add: 'Portfolio de Hernan'.
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:14:09'!
test01PortfolioReportPrintsPortfoliosName
	
	expectedReport add: 'Portfolio de Hernan'.
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:14:15'!
test01PortfolioReportPrintsPortfoliosName
	
	expectedReport add: 'Portfolio de Hernan'.
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test02PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:14:15'!
test02PortfolioReportPrintsPortfoliosName
	
	expectedReport add: 'Portfolio de Hernan'.
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:14:19'!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test01PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:14:19'!
test01PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:14:38' prior: 50679323!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	
	portfolio add: account.
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:14:48'!
FAILURE!
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:15:24' prior: 50679246!
content
	| contenido |
	
	contenido := OrderedCollection new. 
	contenido add: (portfolio processReport ).
	^contenido! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:15:30'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:15:30'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:15:35'!
ERROR!
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:15:47'!
processReport
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:16:42' prior: 50679374!
processReport
	^accounts first accountName ! !
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:17:13' prior: 50679356!
content
	| contenido |
	
	contenido := OrderedCollection new. 
	contenido add: (portfolio accountName ).
	contenido add: ('   ', portfolio processReport).
	^contenido! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:17:14'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:17:14'!
ERROR!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:17:18'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:17:24'!
ERROR!
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:18:36'!
processReport: aReportToGenerate
	^accounts first accountName ! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:18:36' prior: 50679384!
content
	| contenido |
	
	contenido := OrderedCollection new. 
	contenido add: (portfolio accountName ).
	contenido add: ('   ', portfolio processReport: self).
	^contenido! !

!methodRemoval: Portfolio #processReport stamp: 'Sof D 10/25/2023 02:18:36'!
processReport
	^accounts first accountName !
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:19:29' prior: 50679407!
processReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	aReportToGenerate increaseIndentation.
	accounts first reportProcessAccount.! !

!classDefinition: #PortfolioReport category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/25/2023 02:20:26'!
Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!PortfolioReport methodsFor: 'nil' stamp: 'Sof D 10/25/2023 02:20:24'!
reportProcessPortfolio: aPortfolioToReportOn

	content add: aPortfolioToReportOn accountName ! !
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:20:43' prior: 50679413!
content
	
	^content ! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:20:58'!
reportProcessAccount: anAccountToReportOn

	content add: anAccountToReportOn accountName ! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:21:15' prior: 50679452!
reportProcessAccount: anAccountToReportOn

	content add: ('   ', anAccountToReportOn accountName )! !
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:21:30'!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	aReportToGenerate increaseIndentation.
	accounts first reportProcessAccount.! !

!methodRemoval: Portfolio #processReport: stamp: 'Sof D 10/25/2023 02:21:30'!
processReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	aReportToGenerate increaseIndentation.
	accounts first reportProcessAccount.!
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:21:41' prior: 50679465!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts first reportProcessAccount: self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/25/2023 02:21:42'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:21:50'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:21:50'!
FAILURE!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:21:51'!
FAILURE!
!PortfolioReport methodsFor: 'initialization' stamp: 'Sof D 10/25/2023 02:22:12' prior: 50679102!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/25/2023 02:22:15'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:22:17'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:22:17'!
FAILURE!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:22:19'!
FAILURE!
!PortfolioReport methodsFor: 'content' stamp: 'Sof D 10/25/2023 02:22:46' prior: 50679448!
content
	portfolio processAccountsForReport: self.
	^content ! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:22:49'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:22:49'!
ERROR!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:22:50'!
ERROR!
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:23:46' prior: 50679481!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts ifNotEmpty: [ accounts first reportProcessAccount: self. ]! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/25/2023 02:23:52'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:23:55'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:23:55'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:23:55'!
ERROR!
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:24:28' prior: 50679685!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts ifNotEmpty: [ aReportToGenerate reportProcessAccount: accounts first. ]! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/25/2023 02:24:32'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:24:35'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:24:35'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:24:35'!
ERROR!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:25:03' prior: 50679459!
reportProcessAccount: anAccountToReportOn

	content add: ('   ', (anAccountToReportOn accountName) asString )! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:25:06'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:25:06'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:25:06'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:25:27'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:25:27'!
FAILURE!

portfolio!

portfolio accountName !

account accountName !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:26:32' prior: 50679282 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.! !

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:26:34'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:26:48'!
test02PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	
	portfolio add: account.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:26:56'!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	
	portfolio add: account.
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test02PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/25/2023 02:26:56'!
test02PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	
	portfolio add: account.
	
	
	self assert: report content equals: expectedReport !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:27:22'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:27:21' prior: 50679903 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:27:45' prior: 50679927!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Cuenta de Nico'.
	expectedReport add: '   Cuenta de Chris'.
	
	portfolio add: account.
	portfolio add: anotherAccount .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/25/2023 02:27:45'!
FAILURE!
!Portfolio methodsFor: 'report generation' stamp: 'Sof D 10/25/2023 02:28:20' prior: 50679779!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ : anAccount | aReportToGenerate reportProcessAccount: anAccount ]! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:28:29'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:28:29'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/25/2023 02:28:29'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:29:09'!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Portfolio de Kent'.
	
	portfolio add: account.
	
	
	self assert: report content equals: expectedReport ! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio anotherPortfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/25/2023 02:29:16'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio anotherPortfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:29:36' prior: 50679959 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	anotherPortfolio := Portfolio named: 'Portfolio de Kent'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/25/2023 02:29:42' prior: 50680008!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Portfolio de Kent'.
	
	portfolio add: anotherPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/25/2023 02:29:43'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/25/2023 02:29:43'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/25/2023 02:29:43'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/25/2023 02:29:43'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/25/2023 02:29:43'!
PASSED!

----QUIT----(25 October 2023 02:30:08) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (25 October 2023 02:30:17) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


----QUIT----(25 October 2023 02:30:25) CuisUniversity-5981.image priorSource: 11149707!

----STARTUP---- (25 October 2023 14:26:17) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:26:56'!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Portfolio para ferrari'.
	expectedReport add: '      Cuenta de Nico'.
	expectedReport add: '      Cuenta de Chris'.
	anotherPortfolio add: anotherPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/25/2023 14:27:21'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:27:21' prior: 50680036 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Kent'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:27:21' prior: 50680093!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Portfolio para ferrari'.
	expectedReport add: '      Cuenta de Nico'.
	expectedReport add: '      Cuenta de Chris'.
	aChildPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:27:21' prior: 50680050!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Portfolio de Kent'.
	
	portfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/25/2023 14:27:41'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:28:26' prior: 50680118 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Kent'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari' with: account with: anotherAccount.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:28:38' prior: 50680132!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Portfolio para ferrari'.
	expectedReport add: '      Cuenta de Nico'.
	expectedReport add: '      Cuenta de Chris'.
	portfolio add: aComposedChildPotfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:28:39' prior: 50680193!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: '   Portfolio para ferrari'.
	expectedReport add: '      Cuenta de Nico'.
	expectedReport add: '      Cuenta de Chris'.
	portfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio content tabulation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReport category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/25/2023 14:29:22'!
Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio content tabulation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 14:32:42'!
tabulation
	tabulation ! !

!classDefinition: #PortfolioReport category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/25/2023 14:33:04'!
Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio content timesToTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

hola := 'h', String tab, 'o'.!

hola!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

 'h	o' .!

hola := String tab, 'o'.
hola.!

hola.!

 '	o' .!

 '	o' .!

hola := String tab, 'o'.!

 '	o' .!

hola := String tab, 'o\n'.!

hola := String tab, 'o', String cr, String tab, 'o'.!

hola := String tab, 'o', Character cr asString, String tab, 'o'.!

hola := String tab, 'o', Character cr asString, String tab, 'o'.!

hola := String tab, 'o', Character cr asString, String tab, 'o', Character cr asString, String tab, 'o'.!

hola := String tab, 'o', Character cr asString, String tab, 'o', Character cr asString, String tab, 'o'.!

hola!

 '	o	o	o' .!

 '	o	o	o' .!

hola.!

hola. '	o	o	o' .!

hola := Character cr, String tab, 'o', Character cr asString, String tab, 'o', Character cr asString, String tab, 'o'.!

hola := Character cr asString, String tab, 'o', Character cr asString, String tab, 'o', Character cr asString, String tab, 'o'.!

hola := Character cr asString, String tab, 'o', Character cr asString, String tab, 'o', Character cr asString, String tab, 'o'.!

hola := Character cr asString, String tab, 'o', Character cr asString, String tab, String tab, 'o', Character cr asString, String tab, 'o'.!

hola := Character cr asString, String tab, 'o', Character cr asString, String tab, String tab, 'o', Character cr asString, String tab, 'o'.!

hola := Character cr asString, String tab, 'o', Character cr asString, String tab, String tab, 'o', Character cr asString, String tab, 'o'.!

hola := Character enter asString, String tab, 'o', Character enter asString, String tab, String tab, 'o', Character enter asString, String tab, 'o'.!

hola := Character enter asString, String tab, 'o', Character enter asString, String tab, String tab, 'o', Character enter asString, String tab, 'o'.!

hola := Character enter asString, String tab, 'o', Character enter asString, String tab, String tab, 'o', Character enter asString, String tab, 'o'.!

hola!

hola := Character insert asString, String tab, 'o', Character insert asString, String tab, String tab, 'o', Character insert asString, String tab, 'o'.!

hola := Character insert asString, String tab, 'o', Character insert asString, String tab, String tab, 'o', Character insert asString, String tab, 'o'.!

hola := Character insert asString, String tab, 'o', Character insert asString, String tab, String tab, 'o', Character insert asString, String tab, 'o'.!

hola := Character newLineCharacter asString, String tab, 'o', Character newLineCharacter asString, String tab, String tab, 'o', Character newLineCharacter asString, String tab, 'o'.!

hola := Character newLineCharacter asString, String tab, 'o', Character newLineCharacter asString, String tab, String tab, 'o', Character newLineCharacter asString, String tab, 'o'.!

hola := Character newLineCharacter asString, String tab, 'o', Character newLineCharacter asString, String tab, String tab, 'o', Character newLineCharacter asString, String tab, 'o'.!

hola := Character newLineCharacter asString, String tab, 'o', Character newLineCharacter asString, String tab, String tab, 'o', Character newLineCharacter asString, String tab, 'o'.!

hola := Character newLineCharacter asString, String tab, 'o', Character newLineCharacter asString, String tab, String tab, 'o', Character newLineCharacter asString, String tab, 'o'.!

hola := String newLineString, String tab, 'o', String newLineString, String tab, String tab, 'o', String newLineString, String tab, 'o'.!

hola := String newLineString, String tab, 'o', String newLineString, String tab, String tab, 'o', String newLineString, String tab, 'o'.!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/25/2023 15:33:49' prior: 50680234!
tabulation
	| tabulation |
	tabulation := ''.
	timesToTab timesRepeat: [tabulation := tabulation, String tab].
	^tabulation! !

----QUIT----(25 October 2023 15:34:04) CuisUniversity-5981.image priorSource: 11149918!

----STARTUP---- (25 October 2023 23:40:53) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:05:14' prior: 50680207!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	portfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:05:28' prior: 50680146!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Kent').
	
	portfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:05:49' prior: 50679971!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	portfolio add: account.
	portfolio add: anotherAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:05:58' prior: 50679342!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	portfolio add: account.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:06:25' prior: 50679874!
reportProcessAccount: anAccountToReportOn

	content add: (String tab, (anAccountToReportOn accountName) asString )! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:06:29'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:06:29'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:06:29'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:06:29'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:06:29'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:06:29'!
FAILURE!
!PortfolioReport methodsFor: 'initialization' stamp: 'eaam 10/26/2023 00:09:30' prior: 50679575!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := -1.! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:10:37' prior: 50679442!
reportProcessPortfolio: aPortfolioToReportOn

	timesToTab :=  timesToTab + 1.
	content add: (self tabulation, aPortfolioToReportOn accountName) ! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:13:21' prior: 50680433!
reportProcessAccount: anAccountToReportOn

	content add: (String tab,, (anAccountToReportOn accountName) asString )! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:13:22' prior: 50680479!
reportProcessAccount: anAccountToReportOn

	content add: (String tab, (anAccountToReportOn accountName) asString )! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:13:23'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:13:23'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:13:23'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:13:23'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:13:23'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:13:23'!
FAILURE!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:13:55' prior: 50680176 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Kent'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:13:59' prior: 50680381!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	portfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!Portfolio methodsFor: 'report generation' stamp: 'eaam 10/26/2023 00:15:13' prior: 50679988!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ : anAccount | aReportToGenerate reportProcess: anAccount ]! !
!Portfolio methodsFor: 'report generation' stamp: 'eaam 10/26/2023 00:17:59' prior: 50680551!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ : anAccount | aReportToGenerate processAccountForReport: anAccount ]! !
!Portfolio methodsFor: 'report generation' stamp: 'eaam 10/26/2023 00:18:19'!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ : anAccount | aReportToGenerate processAccountForReport: anAccount ]! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:18:19' prior: 50679668!
content
	portfolio processAccountForReport: self.
	^content ! !

!methodRemoval: Portfolio #processAccountsForReport: stamp: 'eaam 10/26/2023 00:18:19'!
processAccountsForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ : anAccount | aReportToGenerate processAccountForReport: anAccount ]!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/26/2023 00:18:43'!
processAccountForReport: aReportToGenerate
	transactions do: [:aTransaction | aTransaction sendToReport: aReportToGenerate]
	! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:18:43' prior: 50677300 overrides: 50677244!
content
	
	account processAccountForReport: self.
	
	^'Neto de transferencias: ', amount asString! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:18:43' prior: 50677074!
summary
	account processAccountForReport: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!methodRemoval: ReceptiveAccount #processTransactionsForReport: stamp: 'eaam 10/26/2023 00:18:43'!
processTransactionsForReport: aReportToGenerate
	transactions do: [:aTransaction | aTransaction sendToReport: aReportToGenerate]
	!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/26/2023 00:19:22' prior: 50680591!
processAccountForReport: aReportToGenerate
	self .
	transactions do: [:aTransaction | aTransaction sendToReport: aReportToGenerate]
	! !
!AccountNetTransferReport methodsFor: 'transaction reporting' stamp: 'eaam 10/26/2023 00:19:47'!
reportProcessAccount: aReceptiveAccount
! !
!AccountNetTransferReport methodsFor: 'transaction reporting' stamp: 'eaam 10/26/2023 00:20:05'!
reportProcessReceptiveAccount: aReceptiveAccount
! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:20:05'!
reportProcessReceptiveAccount: anAccountToReportOn

	content add: (String tab, (anAccountToReportOn accountName) asString )! !

!methodRemoval: AccountNetTransferReport #reportProcessAccount: stamp: 'eaam 10/26/2023 00:20:05'!
reportProcessAccount: aReceptiveAccount
!

!methodRemoval: PortfolioReport #reportProcessAccount: stamp: 'eaam 10/26/2023 00:20:05'!
reportProcessAccount: anAccountToReportOn

	content add: (String tab, (anAccountToReportOn accountName) asString )!
!AccountSummaryReport methodsFor: 'transaction reporting' stamp: 'eaam 10/26/2023 00:20:25'!
reportProcessReceptiveAccount: aReceptiveAccount! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/26/2023 00:20:44' prior: 50680621!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessReceptiveAccount: self.
	transactions do: [:aTransaction | aTransaction sendToReport: aReportToGenerate]
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'eaam 10/26/2023 00:20:45'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:21:12'!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	portfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:22:24'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport account anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:23:57' prior: 50680517 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maxi'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de '! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:24:09' prior: 50680397!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maxi').
	
	portfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:24:20' prior: 50680759!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	
	portfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:24:23' prior: 50680739 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de '! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:25:38' prior: 50680782 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:25:59' prior: 50680803 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:30:49' prior: 50680824 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:31:57' prior: 50680845 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	"isw1Account := ReceptiveAccount named: 'cuenta de la materia'".
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:32:02' prior: 50680866 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	"isw1Account := ReceptiveAccount named: 'Cuenta de la materia'".
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport account anotherAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:32:10'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport account anotherAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:32:22' prior: 50680889 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: anotherAccount.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:32:28' prior: 50680933 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:32:38' prior: 50680702!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	portfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:35:41' prior: 50680956 overrides: 16961394!
 setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:04' prior: 50680995 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	anotherAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:36:12'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport account chrissAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:12' prior: 50681018 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	account := ReceptiveAccount named: 'Cuenta de Nico'.
	chrissAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: account with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:12' prior: 50680408!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	portfolio add: account.
	portfolio add: chrissAccount .
	
	
	self assert: report content equals: expectedReport ! !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:36:19'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report portfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport nicoAccount chrissAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:19' prior: 50681053 overrides: 16961394!
setUp
	portfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: portfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrissAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:19' prior: 50680422!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	portfolio add: nicoAccount.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:19' prior: 50681075!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	portfolio add: nicoAccount.
	portfolio add: chrissAccount .
	
	
	self assert: report content equals: expectedReport ! !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:36:30'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report hernanPortfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport nicoAccount chrissAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:30' prior: 50681134!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	hernanPortfolio add: nicoAccount.
	hernanPortfolio add: chrissAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:30' prior: 50680770!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	
	hernanPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:30' prior: 50681101 overrides: 16961394!
setUp
	hernanPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: hernanPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrissAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:30' prior: 50681123!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	hernanPortfolio add: nicoAccount.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:30' prior: 50680978!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	hernanPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:30' prior: 50680535!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	hernanPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:36:55'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report patentPortfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport nicoAccount chrissAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:55' prior: 50681160!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	patentPortfolio add: nicoAccount.
	patentPortfolio add: chrissAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:55' prior: 50681174!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	
	patentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:55' prior: 50681186 overrides: 16961394!
setUp
	patentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: patentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrissAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:55' prior: 50681209!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	patentPortfolio add: nicoAccount.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:55' prior: 50681220!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	patentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:36:55' prior: 50681237!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	patentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:37:13'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report patentPortfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport nicoAccount chrisAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:37:13' prior: 50681291 overrides: 16961394!
setUp
	patentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: patentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:37:13' prior: 50681265!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	patentPortfolio add: nicoAccount.
	patentPortfolio add: chrisAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:37:48' prior: 50681371 overrides: 16961394!
setUp
	patentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: patentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report patentPortfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport nicoAccount chrisAccount isw1Account deboraAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:38:03'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report patentPortfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport nicoAccount chrisAccount isw1Account deboraAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:39:21' prior: 50681409 overrides: 16961394!
setUp
	patentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: patentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	deboraAccount := ReceptiveAccount named: 'Cuenta de Debora'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Debora'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:39:30' prior: 50681454 overrides: 16961394!
setUp
	patentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: patentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	deboraAccount := ReceptiveAccount named: 'Cuenta de Debora'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Agustin'! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:39:58' prior: 50681479 overrides: 16961394!
setUp
	patentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: patentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	deboraAccount := ReceptiveAccount named: 'Cuenta de Debora'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Agustin' with: deboraAccount with: chrisAccount.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:40:24' prior: 50681325!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	
	patentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:40:43' prior: 50681530!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	
	patentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:40:58' prior: 50681553!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	patentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:41:01'!
ERROR!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:41:50'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:41:50'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:41:50'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:41:50'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:41:50'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:41:50'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:41:52'!
ERROR!
!Portfolio methodsFor: 'report generation' stamp: 'eaam 10/26/2023 00:43:02' prior: 50680569!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ :anAccount | aReportToGenerate processAccountForReport: anAccount ]! !
!Portfolio methodsFor: 'report generation' stamp: 'eaam 10/26/2023 00:43:31' prior: 50681629!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ :anAccount | anAccount processAccountForReport: aReportToGenerate ]! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'eaam 10/26/2023 00:43:32'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:43:45'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:43:45'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:43:45'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:43:45'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:43:45'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:43:45'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:43:49'!
FAILURE!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:47:29'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:47:29'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:47:29'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:47:29'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:47:29'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:47:29'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:47:42'!
PASSED!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/26/2023 00:48:02' prior: 50680662!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessReceptiveAccount: self.
	transactions do: [:aTransaction | aTransaction sendToReport: aReportToGenerate]
	! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:48:34'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:48:34'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:48:34'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:48:34'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:48:34'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:48:34'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:48:36'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:49:44'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 00:52:43' prior: 50681576!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	patentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:52:48'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:52:48'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:52:48'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:52:48'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:52:48'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:52:48'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:52:51'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 00:54:08' prior: 50681815!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	"parentPortfolio add:"
	patentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!classDefinition: #PortfolioReportTest category: 'Portfolio2-Tests' stamp: 'eaam 10/26/2023 00:54:12'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'report parentPortfolio aChildPortfolio aComposedChildPotfolio anotherComposedChildPortfolio expectedReport nicoAccount chrisAccount isw1Account deboraAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:54:12' prior: 50681394!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	parentPortfolio add: nicoAccount.
	parentPortfolio add: chrisAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:54:12' prior: 50681279!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:54:12' prior: 50681504 overrides: 16961394!
setUp
	parentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: parentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	deboraAccount := ReceptiveAccount named: 'Cuenta de Debora'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Agustin' with: deboraAccount with: chrisAccount.! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:54:12' prior: 50681314!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	parentPortfolio add: nicoAccount.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:54:12' prior: 50681864!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	"parentPortfolio add:"
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 00:54:12' prior: 50681342!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 00:54:23' prior: 50681963!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:54:24'!
FAILURE!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:54:33'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:54:33'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:54:33'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:54:33'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:54:33'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:54:33'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:54:35'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:56:07'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 00:57:10' prior: 50681986!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:57:11'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:57:22'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 00:58:13' prior: 50682061!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio para ferrari de Hernan').
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de la materia').
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:58:18'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:58:33'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 00:59:17' prior: 50682084!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de la materia').
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:59:17'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 00:59:17'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 00:59:18'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 00:59:18'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 00:59:18'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:59:18'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:59:18'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 00:59:18'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 00:59:43' prior: 50682107!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:59:53'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 00:59:53'!
FAILURE!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:01:10' prior: 50680639!
reportProcessReceptiveAccount: anAccountToReportOn

	content add: (self tabulation, (anAccountToReportOn accountName) asString )! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:01:11'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:01:11'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:01:11'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:01:11'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:01:11'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:01:11'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:01:14'!
FAILURE!
!PortfolioReport methodsFor: 'initialization' stamp: 'eaam 10/26/2023 01:02:48' prior: 50680463!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := 0.! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:02:49'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:02:49'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:02:49'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:02:49'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:02:49'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:02:49'!
FAILURE!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:03:13'!
FAILURE!
!PortfolioReport methodsFor: 'initialization' stamp: 'eaam 10/26/2023 01:03:46' prior: 50682211!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := -1.! !
!PortfolioReport methodsFor: 'initialization' stamp: 'eaam 10/26/2023 01:04:02' prior: 50682245!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := 0.! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:04:18' prior: 50680471!
reportProcessPortfolio: aPortfolioToReportOn

	content add: (self tabulation, aPortfolioToReportOn accountName).
	timesToTab :=  timesToTab + 1.! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:04:19'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:04:19'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:04:19'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:04:19'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:04:19'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:04:19'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:04:19'!
FAILURE!
!Portfolio methodsFor: 'report generation' stamp: 'eaam 10/26/2023 01:07:25' prior: 50681638!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ :anAccount | anAccount processAccountForReport: aReportToGenerate ].
	aReportToGenerate reportEnd.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'eaam 10/26/2023 01:07:28'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:07:42'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:07:42'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:07:42'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:07:42'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:07:42'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:07:42'!
ERROR!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:07:45'!
ERROR!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:07:50'!
reportEnd
	self shouldBeImplemented.! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:08:11' prior: 50682406!
reportEnd
	timesToTab := timesToTab - 1.! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:08:17'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:08:17'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:08:17'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:08:17'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:08:17'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:08:17'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:08:17'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 01:09:17' prior: 50682002!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:09:18'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:09:18'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:09:18'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:09:18'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:09:18'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:09:18'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:09:18'!
PASSED!

!classRenamed: #AccountReport as: #ReceptiveAccountReport stamp: 'eaam 10/26/2023 01:11:50'!
Smalltalk renameClassNamed: #AccountReport as: #ReceptiveAccountReport!

Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountReport category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/26/2023 01:12:04'!
Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

AccountReport subclass: #ReceptiveAccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #ReceptiveAccountReport category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/26/2023 01:12:14'!
AccountReport subclass: #ReceptiveAccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

AccountReport subclass: #PortfolioReport
	instanceVariableNames: 'portfolio content timesToTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReport category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/26/2023 01:12:21'!
AccountReport subclass: #PortfolioReport
	instanceVariableNames: 'portfolio content timesToTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountReport methodsFor: 'no messages' stamp: 'eaam 10/26/2023 01:12:41'!
reportProcessReceptiveAccount: aReceptiveAccount! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:12:51' prior: 50682538!
reportProcessReceptiveAccount: aReceptiveAccount
	self subclassResponsibility ! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:13:31'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:13:31'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:13:31'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:13:31'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:13:31'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:13:31'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 01:14:24' prior: 50682443!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: chrisAccount .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:14:25'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:14:25'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:14:25'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:14:25'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:14:25'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:14:25'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:14:25'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 01:14:33' prior: 50682572!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:14:34'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:14:42'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:14:51'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:15:55'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:16:00'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:16:00'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 01:16:50' prior: 50682618!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:16:57'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:16:57'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:16:57'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:16:57'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:16:57'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:16:57'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:16:57'!
PASSED!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:34:41' prior: 50682177 overrides: 50682543!
reportProcessReceptiveAccount: anAccountToReportOn

	content add: (self tabulation, (anAccountToReportOn accountName) )! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'eaam 10/26/2023 01:34:44'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'eaam 10/26/2023 01:34:45'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'eaam 10/26/2023 01:34:45'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'eaam 10/26/2023 01:34:45'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'eaam 10/26/2023 01:34:45'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'eaam 10/26/2023 01:34:45'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 01:41:11'!
test07PortfolioReportDoestPrintTransactions

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'eaam 10/26/2023 01:42:46' prior: 50682744!
test07PortfolioReportDoestPrintTransactions

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Withdraw register: 100000 on: nicoAccount.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'eaam 10/26/2023 01:42:48'!
ERROR!

Object subclass: #ReceptiveAccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #ReceptiveAccountReport category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/26/2023 01:44:37'!
Object subclass: #ReceptiveAccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Object subclass: #ReportsForPortfolios
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #ReportsForPortfolios category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/26/2023 01:44:57'!
Object subclass: #ReportsForPortfolios
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classRemoval: #ReportsForPortfolios stamp: 'eaam 10/26/2023 01:45:09'!
Object subclass: #ReportsForPortfolios
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!ReceptiveAccountReport methodsFor: 'transaction reporting' stamp: 'eaam 10/26/2023 01:46:09'!
reportProcessReceptiveAccount: aReceptiveAccount
! !
!ReceptiveAccountReport methodsFor: 'transaction reporting' stamp: 'eaam 10/26/2023 01:46:20' prior: 50682815!
reportProcessReceptiveAccount: aReceptiveAccount
	^self subclassResponsibility .! !

AccountReport subclass: #ReceptiveAccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #ReceptiveAccountReport category: 'Portfolio2-Ejercicio' stamp: 'eaam 10/26/2023 01:50:03'!
AccountReport subclass: #ReceptiveAccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:50:13'!
reportProcessesDeposit: aDepositToReportOn 
	self subclassResponsibility ! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:50:33'!
reportProcessesIncomingTransfer: anIncomingTransferToReportOn
	self subclassResponsibility ! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:50:40'!
reportProcessesOutgoingTransfer: anOutgoingTransferToReportOn 
	self subclassResponsibility ! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/26/2023 01:50:47'!
reportProcessesWithdraw: aWithdrawToReportOn
	self subclassResponsibility ! !

----QUIT----(26 October 2023 01:51:22) CuisUniversity-5981.image priorSource: 11159134!

----STARTUP---- (26 October 2023 02:27:02) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:27:35'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 02:27:35'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 02:27:35'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 02:27:35'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 02:27:35'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 02:27:35'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:27:35'!
ERROR!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:27:35'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 02:29:33'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:29:35'!
ERROR!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:29:35'!
ERROR!

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 02:29:45'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:29:46'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 02:29:46'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:29:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 02:29:56'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 02:29:58'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 02:30:00'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 02:30:00'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 02:30:00'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 02:30:00'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 02:30:00'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 02:30:00'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 02:30:02'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 02:30:02'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 02:30:02'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 02:30:02'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 02:30:02'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 02:30:02'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:31:04'!
ERROR!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:31:04'!
ERROR!
!PortfolioReport methodsFor: 'nil' stamp: 'Sof D 10/26/2023 02:31:43' overrides: 50682840!
reportProcessesDeposit: aDepositToReportOn 
! !
!PortfolioReport methodsFor: 'nil' stamp: 'Sof D 10/26/2023 02:31:54' overrides: 50682846!
reportProcessesIncomingTransfer: anIncomingTransferToReportOn
! !
!PortfolioReport methodsFor: 'nil' stamp: 'Sof D 10/26/2023 02:32:03' overrides: 50682852!
reportProcessesOutgoingTransfer: anOutgoingTransferToReportOn 
! !
!PortfolioReport methodsFor: 'nil' stamp: 'Sof D 10/26/2023 02:32:10' overrides: 50682858!
reportProcessesWithdraw: aWithdrawToReportOn
! !

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 02:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 02:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 02:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 02:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 02:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 02:32:26'!
PASSED!

PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio content timesToTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 02:36:14'!
PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!PortfolioReportWithSummaries methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 02:36:45' overrides: 50680578!
content
	portfolio processAccountForReport: self.
	^content ! !

!methodRemoval: PortfolioReportWithSummaries #content stamp: 'Sof D 10/26/2023 02:37:05'!
content
	portfolio processAccountForReport: self.
	^content !

TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:37:24'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:39:07'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:39:08'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportWithSummariesTest methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 02:39:05'!
test01ReportPrintsPortfoliosName
	
	expectedReport add: 'Portfolio de Hernan'.
	
	self assert: report content equals: expectedReport ! !
!PortfolioReport methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 02:50:01'!
reportEndForPortfolio
	timesToTab := timesToTab - 1.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 02:50:01' prior: 50682296!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ :anAccount | anAccount processAccountForReport: aReportToGenerate ].
	aReportToGenerate reportEndForPortfolio.! !

!methodRemoval: PortfolioReport #reportEnd stamp: 'Sof D 10/26/2023 02:50:01'!
reportEnd
	timesToTab := timesToTab - 1.!

Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 02:50:43'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 02:50:49'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:42'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:43'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio aChildPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:45'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio aChildPortfolio nicoAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:46'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio aChildPortfolio nicoAccount chrisAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:47'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio aChildPortfolio nicoAccount chrisAccount isw1Account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:49'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio aChildPortfolio nicoAccount chrisAccount isw1Account deboraAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:50'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio aChildPortfolio nicoAccount chrisAccount isw1Account deboraAccount aComposedChildPotfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!

!classDefinition: #PortfolioReportWithSummariesTest category: 'Portfolio2-Tests' stamp: 'Sof D 10/26/2023 02:51:51'!
TestCase subclass: #PortfolioReportWithSummariesTest
	instanceVariableNames: 'expectedReport report parentPortfolio aChildPortfolio nicoAccount chrisAccount isw1Account deboraAccount aComposedChildPotfolio anotherComposedChildPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Tests'!
!PortfolioReportWithSummariesTest methodsFor: 'nil' stamp: 'Sof D 10/26/2023 02:51:40' overrides: 16961394!
setUp
	parentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReport for: parentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	deboraAccount := ReceptiveAccount named: 'Cuenta de Debora'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Agustin' with: deboraAccount with: chrisAccount.! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:51:54'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'setup' stamp: 'Sof D 10/26/2023 02:52:04' prior: 50683502 overrides: 16961394!
setUp
	parentPortfolio := Portfolio named: 'Portfolio de Hernan'.
	aChildPortfolio := Portfolio named: 'Portfolio de Maximiliano'.
	
	report := PortfolioReportWithSummaries for: parentPortfolio .
	
	expectedReport := OrderedCollection new.
	
	nicoAccount := ReceptiveAccount named: 'Cuenta de Nico'.
	chrisAccount := ReceptiveAccount named: 'Cuenta de Chris'.
	isw1Account := ReceptiveAccount named: 'Cuenta de la materia'.
	deboraAccount := ReceptiveAccount named: 'Cuenta de Debora'.
	
	aComposedChildPotfolio := Portfolio named: 'Portfolio de ferrari de Hernan' with: nicoAccount with: isw1Account.
	anotherComposedChildPortfolio := Portfolio named: 'Portfolio de Agustin' with: deboraAccount with: chrisAccount.! !
!PortfolioReportWithSummaries class methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 02:52:46'!
for: aPortfolioToReportAbout 

	^self new with: aPortfolioToReportAbout ! !

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 02:53:08'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 02:53:09'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio content timesToTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!PortfolioReportWithSummaries methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 02:53:06'!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := 0.! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:53:15'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:53:15'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 02:53:51'!
content
	content add: portfolio accountName 
	^content ! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:53:55'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:53:55'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 02:54:01' prior: 50683597!
content
	content add: portfolio accountName .
	^content ! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 02:54:04'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 02:54:45'!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	parentPortfolio add: nicoAccount.
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 02:54:46'!
FAILURE!

!methodRemoval: PortfolioReportWithSummaries #content stamp: 'Sof D 10/26/2023 02:56:23'!
content
	content add: portfolio accountName .
	^content !

!methodRemoval: PortfolioReportWithSummaries #with: stamp: 'Sof D 10/26/2023 02:56:25'!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := 0.!

!methodRemoval: PortfolioReportWithSummaries class #for: stamp: 'Sof D 10/26/2023 02:56:28'!
for: aPortfolioToReportAbout 

	^self new with: aPortfolioToReportAbout !

PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 02:56:39'!
PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 04:11:31'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!PortfolioReportWithSummaries class methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 04:12:26'!
for: aPortfolioToReportAbout 

	^self new with: aPortfolioToReportAbout ! !

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 04:12:43'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 04:12:44'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 04:12:46'!
Object subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio content timesToTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!PortfolioReportWithSummaries methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 04:12:42'!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := 0.! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:13:11'!
content
	content add: portfolio accountName .
	^content! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:13:14'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:13:25'!
test02PortfolioReportPrintsItsAccountsNameAndTransactions
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	parentPortfolio add: nicoAccount.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:13:43' prior: 50683729!
test02PortfolioReportPrintsItsAccountsNameAndTransactions
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	parentPortfolio add: nicoAccount.
	
	Deposit register: 1 on: nicoAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:14:17' prior: 50683741!
test02PortfolioReportPrintsItsAccountsNameAndTransactions
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').
	
	parentPortfolio add: nicoAccount.
	
	Deposit register: 1 on: nicoAccount .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:14:23'!
test02PortfolioReportPrintsItsAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	
	parentPortfolio add: nicoAccount.
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:14:47'!
test01ReportPrintsPortfoliosNameAndBalance
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: 'Balance = 0'.	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:14:48'!
FAILURE!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:15:07' prior: 50683780!
test01ReportPrintsPortfoliosNameAndBalance
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Balance = 0').	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:15:27' prior: 50683720!
content
	content add: portfolio accountName .
	content add: (String tab, portfolio balance).
	^content! !

!methodRemoval: PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:15:31'!
test01ReportPrintsPortfoliosName
	
	expectedReport add: 'Portfolio de Hernan'.
	
	self assert: report content equals: expectedReport !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:15:32'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:15:32'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:15:42' prior: 50683804!
content
	content add: portfolio accountName .
	content add: (String tab, portfolio balance asString).
	^content! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:15:45'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:15:45'!
FAILURE!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:16:09' prior: 50683828!
content
	content add: portfolio accountName .
	content add: (String tab, 'Balance = ', portfolio balance asString).
	^content! !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:16:12'!
PASSED!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:17:01' prior: 50683844!
content
	portfolio processAccountForReport: self.
	^content! !
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:17:26'!
reportProcessPortfolio: aPortfolioToReportOn

	content add: (self tabulation, aPortfolioToReportOn accountName).
	timesToTab :=  timesToTab + 1.! !
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:19:51'!
reportEndForPortfolio
	content add: (self tabulation, 'Balance = ' aPortfolioToReportOn balance).
	timesToTab := timesToTab - 1.
	! !
!PortfolioReport methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 04:20:07'!
reportEndForPortfolio: aPortfolioToReportOn
	timesToTab := timesToTab - 1.! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:20:07'!
reportEndForPortfolio: aPortfolioToReportOn
	content add: (self tabulation, 'Balance = ' aPortfolioToReportOn balance).
	timesToTab := timesToTab - 1.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:20:08' prior: 50683369!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessPortfolio: self.
	accounts do: [ :anAccount | anAccount processAccountForReport: aReportToGenerate ].
	aReportToGenerate reportEndForPortfolio: self.! !

!methodRemoval: PortfolioReport #reportEndForPortfolio stamp: 'Sof D 10/26/2023 04:20:08'!
reportEndForPortfolio
	timesToTab := timesToTab - 1.!

!methodRemoval: PortfolioReportWithSummaries #reportEndForPortfolio stamp: 'Sof D 10/26/2023 04:20:08'!
reportEndForPortfolio
	content add: (self tabulation, 'Balance = ' aPortfolioToReportOn balance).
	timesToTab := timesToTab - 1.
	!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:20:20' prior: 50683882!
reportEndForPortfolio: aPortfolioToReportOn
	content add: (self tabulation, 'Balance = ', aPortfolioToReportOn balance asString).
	timesToTab := timesToTab - 1.
	! !
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:20:29'!
tabulation
	| tabulation |
	tabulation := ''.
	timesToTab timesRepeat: [tabulation := tabulation, String tab].
	^tabulation! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/26/2023 04:21:04' prior: 50681775!
processAccountForReport: aReportToGenerate
	aReportToGenerate reportProcessReceptiveAccount: self.
	transactions do: [:aTransaction | aTransaction sendToReport: aReportToGenerate].
	aReportToGenerate reportEndForReceptiveAccount: self.
	! !
!PortfolioReport methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:21:23'!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn! !
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:21:44'!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:22:22'!
reportProcessReceptiveAccount: anAccountToReportOn

	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1! !
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:23:09'!
reportProcessesDeposit: aDepositToReportOn 

	content add: (self tabulation, 'Deposito por ', aDepositToReportOn value)! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndTransactions stamp: 'Sof D 10/26/2023 04:23:15'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:23:23' prior: 50683957!
reportProcessesDeposit: aDepositToReportOn 

	content add: (self tabulation, 'Deposito por ', aDepositToReportOn value asString)! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndTransactions stamp: 'Sof D 10/26/2023 04:23:26'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndTransactions stamp: 'Sof D 10/26/2023 04:23:26'!
FAILURE!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:23:59' prior: 50683754!
test02PortfolioReportPrintsItsAccountsNameAndTransactions
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').
	expectedReport add: (String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	
	Deposit register: 1 on: nicoAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:24:13' prior: 50683987!
test02PortfolioReportPrintsItsAccountsNameAndTransactions
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').
	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	
	Deposit register: 1 on: nicoAccount .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:24:46' prior: 50683943!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	content add: (self tabulation, 'Balance = ', aReceptiveAccountToReportOn balance asString).
	timesToTab := timesToTab - 1.! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndTransactions stamp: 'Sof D 10/26/2023 04:24:53'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:25:04'!
test02PortfolioReportPrintsItsAccountsNameTransactionsAndBalance
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').
	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	
	Deposit register: 1 on: nicoAccount .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndTransactions stamp: 'Sof D 10/26/2023 04:25:04'!
test02PortfolioReportPrintsItsAccountsNameAndTransactions
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').
	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	
	Deposit register: 1 on: nicoAccount .
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:26:23'!
test03PortfolioReportPrintsItsPortfoliosNamesAndBalances
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	expectedReport add: (String tab, String tab, 'Balance = 0').
	expectedReport add: (String tab,'Balance = 0').
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:26:25'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:27:19'!
test04PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Balance = 0').
	
	
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:28:13'!
test03333PortfolioReportPrintsItsPortfoliosNamesAndBalances
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	expectedReport add: (String tab, String tab, 'Balance = 0').
	expectedReport add: (String tab,'Balance = 0').
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:28:13'!
test03PortfolioReportPrintsItsPortfoliosNamesAndBalances
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	expectedReport add: (String tab, String tab, 'Balance = 0').
	expectedReport add: (String tab,'Balance = 0').
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:28:31'!
test02PortfolioReportPrintsItsAccountsNameAndBalance
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Balance = 0').	
	expectedReport add: (String tab, 'Balance = 0').	

	
	parentPortfolio add: nicoAccount.
	
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:28:32'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:28:32'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:28:33'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameTransactionsAndBalance stamp: 'Sof D 10/26/2023 04:28:33'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03333PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:28:33'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:28:33'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:28:33'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:28:39'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:28:56'!
test03PortfolioReportPrintsItsAccountsNameAndDeposit
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsNameAndDeposit stamp: 'Sof D 10/26/2023 04:28:58'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsNameAndDeposit stamp: 'Sof D 10/26/2023 04:28:58'!
FAILURE!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:29:09' prior: 50684194!
test03PortfolioReportPrintsItsAccountsNameAndDeposit
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	Deposit register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsNameAndDeposit stamp: 'Sof D 10/26/2023 04:29:10'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:29:18'!
test04PortfolioReportPrintsItsAccountsNameAndWithdraw
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	Deposit register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test04PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:29:20'!
test04PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Balance = 0').
	
	
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport !

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:29:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:29:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:29:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameTransactionsAndBalance stamp: 'Sof D 10/26/2023 04:29:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03333PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:29:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsNameAndDeposit stamp: 'Sof D 10/26/2023 04:29:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:29:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:29:26'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:29:42' prior: 50684242!
test04PortfolioReportPrintsItsAccountsNameAndWithdraw
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Extraccion por 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	Withdraw register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:29:43'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:30:08'!
reportProcessesWithdraw: aWithdrawToReportOn 

	content add: (self tabulation, 'Extraccion por ', aWithdrawToReportOn value asString)! !

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:30:14'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:30:14'!
FAILURE!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:30:37' prior: 50684315!
test04PortfolioReportPrintsItsAccountsNameAndWithdraw
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Extraccion por 1').

	expectedReport add: (String tab, String tab, 'Balance = -1').	
	expectedReport add: (String tab, 'Balance = -1').	

	
	parentPortfolio add: nicoAccount.
	Withdraw register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:30:38'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:30:47'!
test04PortfolioReportPrintsItsAccountsWithdraw
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Extraccion por 1').

	expectedReport add: (String tab, String tab, 'Balance = -1').	
	expectedReport add: (String tab, 'Balance = -1').	

	
	parentPortfolio add: nicoAccount.
	Withdraw register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsNameAndWithdraw stamp: 'Sof D 10/26/2023 04:30:47'!
test04PortfolioReportPrintsItsAccountsNameAndWithdraw
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Extraccion por 1').

	expectedReport add: (String tab, String tab, 'Balance = -1').	
	expectedReport add: (String tab, 'Balance = -1').	

	
	parentPortfolio add: nicoAccount.
	Withdraw register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:30:53'!
test03PortfolioReportPrintsItsAccountsDeposit
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	Deposit register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsNameAndDeposit stamp: 'Sof D 10/26/2023 04:30:53'!
test03PortfolioReportPrintsItsAccountsNameAndDeposit
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	Deposit register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:31:40'!
test04PortfolioReportPrintsItsAccountsIncomingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Entrada por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = -1').	
	expectedReport add: (String tab, 'Balance = -1').	

	
	parentPortfolio add: nicoAccount.
	Withdraw register: 1 on: nicoAccount .
	
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:32:05' prior: 50684452!
test04PortfolioReportPrintsItsAccountsIncomingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Entrada por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.

	Transfer from: 	chrisAccount to: nicoAccount amount: 1.	
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:32:10'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:32:10'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:32:40'!
reportProcessesIncomingTransfer: anIncomingTransferToReportOn 

	content add: (self tabulation, 'Entrada por transferencia de ', anIncomingTransferToReportOn value asString)! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:32:49'!
test05PortfolioReportPrintsItsAccountsIncomingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Entrada por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.

	Transfer from: 	chrisAccount to: nicoAccount amount: 1.	
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:32:49'!
test04PortfolioReportPrintsItsAccountsIncomingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Entrada por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.

	Transfer from: 	chrisAccount to: nicoAccount amount: 1.	
	
	
	self assert: report content equals: expectedReport !

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:32:51'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:33:16'!
test05PortfolioReportPrintsItsAccountsOutgoingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Entrada por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.

	Transfer from: 	nicoAccount to: chrisAccount amount: 1.	
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:33:24' prior: 50684552!
test05PortfolioReportPrintsItsAccountsOutgoingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Salida por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = -1').	
	expectedReport add: (String tab, 'Balance = -1').	

	
	parentPortfolio add: nicoAccount.

	Transfer from: 	nicoAccount to: chrisAccount amount: 1.	
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:33:27'!
test06PortfolioReportPrintsItsAccountsOutgoingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Salida por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = -1').	
	expectedReport add: (String tab, 'Balance = -1').	

	
	parentPortfolio add: nicoAccount.

	Transfer from: 	nicoAccount to: chrisAccount amount: 1.	
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:33:27'!
test05PortfolioReportPrintsItsAccountsOutgoingTransfer
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Salida por transferencia de 1').

	expectedReport add: (String tab, String tab, 'Balance = -1').	
	expectedReport add: (String tab, 'Balance = -1').	

	
	parentPortfolio add: nicoAccount.

	Transfer from: 	nicoAccount to: chrisAccount amount: 1.	
	
	
	self assert: report content equals: expectedReport !

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:33:29'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:33:29'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 04:33:53'!
reportProcessesOutgoingTransfer: anOutgoingTransferToReportOn 

	content add: (self tabulation, 'Salida por transferencia de ', anOutgoingTransferToReportOn value asString)! !

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:33:59'!
PASSED!

!methodRemoval: PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameTransactionsAndBalance stamp: 'Sof D 10/26/2023 04:34:10'!
test02PortfolioReportPrintsItsAccountsNameTransactionsAndBalance
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, 'Deposito por 1').
	expectedReport add: (String tab, String tab, 'Balance = 1').	
	expectedReport add: (String tab, 'Balance = 1').	

	
	parentPortfolio add: nicoAccount.
	
	Deposit register: 1 on: nicoAccount .
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:34:23'!
test07PortfolioReportPrintsItsPortfoliosNamesAndBalances
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	expectedReport add: (String tab, String tab, 'Balance = 0').
	expectedReport add: (String tab,'Balance = 0').
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test03333PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:34:24'!
test03333PortfolioReportPrintsItsPortfoliosNamesAndBalances
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	expectedReport add: (String tab, String tab, 'Balance = 0').
	expectedReport add: (String tab,'Balance = 0').
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport !

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:34:26'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:37:07'!
test08PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, String tab, 'Entrada por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 1000000').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, String tab, String tab, 'Salida por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 0').

	expectedReport add: (String tab, 'Portfolio de Agustin').
	
	
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:38:39' prior: 50684709!
test08PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, String tab, 'Entrada por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 1000000').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, String tab, String tab, 'Salida por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -1000000').
	expectedReport add: (String tab, String tab, 'Balance = 0').

	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab, String tab, String tab, 'Deposito por 5000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 5000000').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	expectedReport add: (String tab, String tab, String tab, 'Extraccion por 9999').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -9999').
	expectedReport add: (String tab, String tab, 'Balance = 4000001').

	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:39:07' prior: 50684747!
test08PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, String tab, 'Entrada por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 1000000').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, String tab, String tab, 'Salida por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -1000000').
	expectedReport add: (String tab, String tab, 'Balance = 0').

	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab, String tab, String tab, 'Deposito por 5000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 5000000').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	expectedReport add: (String tab, String tab, String tab, 'Extraccion por 9999').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -9999').
	expectedReport add: (String tab, String tab, 'Balance = 4000001').
	expectedReport add: (String tab, 'Balance = 4000001').


	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:39:11'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:39:11'!
FAILURE!

expectedReport !

report !

report content!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:40:48' prior: 50684797!
test08PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, String tab, 'Entrada por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 1000000').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, String tab, String tab, 'Salida por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -1000000').
	expectedReport add: (String tab, String tab, 'Balance = 0').

	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab, String tab, String tab, 'Deposito por 5000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 5000000').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	expectedReport add: (String tab, String tab, String tab, 'Extraccion por 9999').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -9999').
	expectedReport add: (String tab, String tab, 'Balance = 4000001').
	expectedReport add: (String tab, 'Balance = 4000001').


	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	Transfer from: isw1Account to: nicoAccount amount: 1000000.
	Deposit register: 5000000 on: deboraAccount .
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:40:58' prior: 50684859!
test08PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, String tab, 'Entrada por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 1000000').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, String tab, String tab, 'Salida por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -1000000').
	expectedReport add: (String tab, String tab, 'Balance = 0').

	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab, String tab, String tab, 'Deposito por 5000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 5000000').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	expectedReport add: (String tab, String tab, String tab, 'Extraccion por 9999').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -9999').
	expectedReport add: (String tab, String tab, 'Balance = 4000001').
	expectedReport add: (String tab, 'Balance = 4000001').


	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	Transfer from: isw1Account to: nicoAccount amount: 1000000.
	Deposit register: 5000000 on: deboraAccount .
	Withdraw register: 9999 on: chrisAccount .
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:41:00'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:41:00'!
FAILURE!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:42:00' prior: 50684914!
test08PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab, String tab, String tab, 'Entrada por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 1000000').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, String tab, String tab, 'Salida por transferencia de 1000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -1000000').
	expectedReport add: (String tab, String tab, 'Balance = 0').

	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab, String tab, String tab, 'Deposito por 5000000').
	expectedReport add: (String tab, String tab, String tab, 'Balance = 5000000').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	expectedReport add: (String tab, String tab, String tab, 'Extraccion por 9999').
	expectedReport add: (String tab, String tab, String tab, 'Balance = -9999').
	expectedReport add: (String tab, String tab, 'Balance = 4990001').
	expectedReport add: (String tab, 'Balance = 4990001').


	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	Transfer from: isw1Account to: nicoAccount amount: 1000000.
	Deposit register: 5000000 on: deboraAccount .
	Withdraw register: 9999 on: chrisAccount .
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:42:03'!
PASSED!

PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: 'portfolio content timesToTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #PortfolioReportWithSummaries category: 'Portfolio2-Ejercicio' stamp: 'Sof D 10/26/2023 04:43:31'!
PortfolioReport subclass: #PortfolioReportWithSummaries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!methodRemoval: PortfolioReportWithSummaries #content stamp: 'Sof D 10/26/2023 04:44:18'!
content
	portfolio processAccountForReport: self.
	^content!

!methodRemoval: PortfolioReportWithSummaries #with: stamp: 'Sof D 10/26/2023 04:44:21'!
with: aPortfolioToReportAbout 
	portfolio := aPortfolioToReportAbout .
	content := OrderedCollection new.
	timesToTab := 0.!

!methodRemoval: PortfolioReportWithSummaries #tabulation stamp: 'Sof D 10/26/2023 04:44:23'!
tabulation
	| tabulation |
	tabulation := ''.
	timesToTab timesRepeat: [tabulation := tabulation, String tab].
	^tabulation!

!methodRemoval: PortfolioReportWithSummaries class #for: stamp: 'Sof D 10/26/2023 04:44:26'!
for: aPortfolioToReportAbout 

	^self new with: aPortfolioToReportAbout !

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:44:29'!
PASSED!

!methodRemoval: Transfer #affectBalance: stamp: 'Sof D 10/26/2023 04:45:44'!
affectBalance: aBalance
	^aBalance.	!

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 04:45:45'!
ERROR!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 04:45:46'!
ERROR!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 04:45:46'!
PASSED!
!Transfer methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:46:09'!
affectBalance: aBalanceToChange
	^aBalanceToChange ! !

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 04:46:11'!
ERROR!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 04:46:11'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:46:38'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:46:49'!
ERROR!
!AccountReport methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:47:21'!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	self subclassResponsibility ! !
!ReceptiveAccountReport methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:47:34' overrides: 50685629!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	! !

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 04:47:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 04:47:40'!
PASSED!

!methodRemoval: Transfer #affectBalance: stamp: 'Sof D 10/26/2023 04:47:45'!
affectBalance: aBalanceToChange
	^aBalanceToChange !

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:47:46'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 04:47:47'!
PASSED!

!methodRemoval: Transfer #value stamp: 'Sof D 10/26/2023 04:47:57'!
value

	^value!

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 04:47:59'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 04:47:59'!
ERROR!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:47:59'!
ERROR!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 04:48:00'!
ERROR!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 04:48:00'!
ERROR!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 04:48:00'!
ERROR!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:48:00'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:48:00'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:48:00'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 04:48:00'!
ERROR!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 04:48:00'!
PASSED!
!Transfer methodsFor: 'nil' stamp: 'Sof D 10/26/2023 04:48:13' overrides: 16902254!
value
	^value! !

!methodRemoval: Transfer #sendToReport: stamp: 'Sof D 10/26/2023 04:49:00'!
sendToReport: aReport!

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 04:49:02'!
PASSED!

!methodRemoval: OutgoingLegTransfer #affectNetTransferAmount: stamp: 'Sof D 10/26/2023 04:50:26'!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo - transfer value!

!methodRemoval: IncomingLegTransfer #affectNetTransferAmount: stamp: 'Sof D 10/26/2023 04:50:54'!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo + transfer value!

!methodRemoval: Deposit #affectNetTransferAmount: stamp: 'Sof D 10/26/2023 04:51:33'!
affectNetTransferAmount: anAmountToAddTo
	^anAmountToAddTo !

!methodRemoval: AccountTransaction #affectNetTransferAmount: stamp: 'Sof D 10/26/2023 04:51:40'!
affectNetTransferAmount: anAmountToAddTo
	self subclassResponsibility !

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 04:51:43'!
PASSED!
!PortfolioReportWithSummariesTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 04:53:02'!
test01PortfolioReportPrintsPortfoliosNameAndBalance
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Balance = 0').	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportWithSummariesTest #test01ReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 04:53:02'!
test01ReportPrintsPortfoliosNameAndBalance
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Balance = 0').	
	self assert: report content equals: expectedReport !

----QUIT----(26 October 2023 04:53:34) CuisUniversity-5981.image priorSource: 11238797!

----STARTUP---- (26 October 2023 14:27:23) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!

!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:28:09'!
test04PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	parentPortfolio add: nicoAccount.
	parentPortfolio add: chrisAccount .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test03PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 14:28:09'!
test03PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	parentPortfolio add: nicoAccount.
	parentPortfolio add: chrisAccount .
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:28:13'!
test07PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	parentPortfolio add: nicoAccount.
	parentPortfolio add: chrisAccount .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test04PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 14:28:13'!
test04PortfolioReportPrintsMultipleAccountsName
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	expectedReport add: (String tab,'Cuenta de Chris').
	
	parentPortfolio add: nicoAccount.
	parentPortfolio add: chrisAccount .
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:28:18'!
test08PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test04PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 14:28:18'!
test04PortfolioReportPrintsItsPortfoliosNames
	
	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Portfolio de Maximiliano').
	
	parentPortfolio add: aChildPortfolio .
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:28:27'!
test09PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test05PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 14:28:28'!
test05PortfolioReportPrintsAComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	parentPortfolio add: aComposedChildPotfolio.
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:28:42'!
test10PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test06PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:28:42'!
test06PortfolioReportPrintsMultipleComposedPortfolio

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab, 'Portfolio de ferrari de Hernan').
	expectedReport add: (String tab,String tab,'Cuenta de Nico').
	expectedReport add: (String tab,String tab,'Cuenta de la materia').
	expectedReport add: (String tab, 'Portfolio de Agustin').
	expectedReport add: (String tab,String tab,'Cuenta de Debora').
	expectedReport add: (String tab,String tab,'Cuenta de Chris').
	
	parentPortfolio add: aComposedChildPotfolio .
	parentPortfolio add: anotherComposedChildPortfolio .
	
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:28:59'!
test07PortfolioReportDoesNothingOnDeposit

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Withdraw register: 100000 on: nicoAccount.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test07PortfolioReportDoestPrintTransactions stamp: 'Sof D 10/26/2023 14:28:59'!
test07PortfolioReportDoestPrintTransactions

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Withdraw register: 100000 on: nicoAccount.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:29:03'!
test03PortfolioReportDoesNothingOnDeposit

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Withdraw register: 100000 on: nicoAccount.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport ! !

!methodRemoval: PortfolioReportTest #test07PortfolioReportDoesNothingOnDeposit stamp: 'Sof D 10/26/2023 14:29:03'!
test07PortfolioReportDoesNothingOnDeposit

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Withdraw register: 100000 on: nicoAccount.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:29:21'!
test04PortfolioReportDoesNothingOnWithdraw

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Withdraw register: 100000 on: nicoAccount.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test04PortfolioReportDoesNothingOnWithdraw stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportDoesNothingOnDeposit stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportDoesNothingOnWithdraw stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test09PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!

!testRun: #PortfolioReportTest #test10PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:29:22'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:29:31' prior: 50687120!
test03PortfolioReportDoesNothingOnDeposit

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Deposit register: 100000 on: nicoAccount.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport ! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:30:32'!
test05PortfolioReportDoesNothingOnIncomingTransaction

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Transfer from: chrisAccount to: nicoAccount amount: 10000.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport ! !

!testRun: #PortfolioReportTest #test05PortfolioReportDoesNothingOnIncomingTransaction stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportDoesNothingOnDeposit stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportDoesNothingOnWithdraw stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportDoesNothingOnIncomingTransaction stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test09PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!

!testRun: #PortfolioReportTest #test10PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:30:34'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'Sof D 10/26/2023 14:30:51'!
test06PortfolioReportDoesNothingOnOutgoingTransaction

	expectedReport add: 'Portfolio de Hernan'.
	expectedReport add: (String tab,'Cuenta de Nico').
	Transfer from: nicoAccount to: chrisAccount amount: 10000.
	
	parentPortfolio add: nicoAccount .
	
	self assert: report content equals: expectedReport ! !

----QUIT----(26 October 2023 14:31:12) CuisUniversity-5981.image priorSource: 11369072!

----STARTUP---- (26 October 2023 14:41:46) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!

!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 14:42:34' prior: 50683949 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	timesToTab := timesToTab + 1! !

----End fileIn of C:\Users\sofia\Documents\SmalltalkVM\windows64\Packages\TerseGuide.pck.st----!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 14:45:59' prior: 50687274 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	| accountSummary accountSummaryWithTabulation |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	accountSummaryWithTabulation := accountSummary inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ].
	content addAll: accountSummaryWithTabulation .
! !
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 14:46:06' prior: 50684024 overrides: 50683938!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	"content add: (self tabulation, 'Balance = ', aReceptiveAccountToReportOn balance asString).
	timesToTab := timesToTab - 1."! !

!testRun: #AccountNetTransferTests #test01NetTransferReportStartsReportingZero stamp: 'Sof D 10/26/2023 14:46:08'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/26/2023 14:46:08'!
PASSED!

!testRun: #AccountNetTransferTests #test03NetTransferReportChangesForOutgoingTransfer stamp: 'Sof D 10/26/2023 14:46:08'!
PASSED!

!testRun: #AccountNetTransferTests #test04NetTransferReportDoesntChangeForDeposit stamp: 'Sof D 10/26/2023 14:46:08'!
PASSED!

!testRun: #AccountNetTransferTests #test05NetTransferReportDoesntChangeForWithdraw stamp: 'Sof D 10/26/2023 14:46:08'!
PASSED!

!testRun: #AccountNetTransferTests #test06NetTransferReportIsCorrectOnAccountWithMultipleTransactions stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #AccountSummaryTests #test01SummaryOfNewAccountReportsZeroBalance stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #AccountSummaryTests #test02SummaryReportsDepositCorrectly stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #AccountSummaryTests #test03SummaryReportsWithdrawalCorrectly stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #AccountSummaryTests #test04SummaryReportsOutgoingTransferCorrectly stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #AccountSummaryTests #test05SummaryReportsIncomingTransferCorrectly stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #AccountSummaryTests #test06SummaryReportsMultipleTransactionsCorrectly stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportDoesNothingOnDeposit stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportDoesNothingOnWithdraw stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportDoesNothingOnIncomingTransaction stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportDoesNothingOnOutgoingTransaction stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test09PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportTest #test10PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:46:09'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 14:46:09'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 14:46:09'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 14:46:09'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 14:46:09'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:46:09'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeInitializedWithName stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCanBeInitializedWithANameAndTwoAccounts stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCanBeInitializedWithANameAAccountAndAPortfolio stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanInitializeWithName stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test09TransferChangesAccountsBalance stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #TransferTest #test10transferIsRegistered stamp: 'Sof D 10/26/2023 14:46:09'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 14:46:21'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:46:23'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:46:23'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 14:46:39' prior: 50690206 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	| accountSummary accountSummaryWithTabulation |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	accountSummaryWithTabulation := accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ].
	content addAll: accountSummaryWithTabulation .
! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 14:46:43'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:46:43'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 14:46:43'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 14:46:43'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 14:46:43'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 14:46:43'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 14:46:43'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:46:43'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:46:45'!
FAILURE!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 14:50:38' prior: 50690511 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary accountSummaryWithTabulation |
	timesToTab := timesToTab + 1.
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	accountSummaryWithTabulation := accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ].
	content addAll: accountSummaryWithTabulation .
! !
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 14:50:47' prior: 50690572 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary accountSummaryWithTabulation |
	timesToTab := timesToTab + 1.
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	accountSummaryWithTabulation := accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ].
	content addAll: accountSummaryWithTabulation .
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 14:51:27'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:51:27'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 14:51:27'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 14:51:27'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 14:51:27'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 14:51:27'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 14:51:27'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:51:27'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:51:29'!
FAILURE!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 14:52:15' prior: 50690594 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary accountSummaryWithTabulation |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	accountSummaryWithTabulation := accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ].
	content addAll: accountSummaryWithTabulation .
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 14:52:18'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:52:18'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 14:52:18'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 14:52:18'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 14:52:18'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 14:52:18'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 14:52:18'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:52:18'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:52:50'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:52:50'!
FAILURE!

!methodRemoval: PortfolioReportWithSummaries #reportEndForReceptiveAccount: stamp: 'Sof D 10/26/2023 14:53:27'!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	"content add: (self tabulation, 'Balance = ', aReceptiveAccountToReportOn balance asString).
	timesToTab := timesToTab - 1."!

!methodRemoval: PortfolioReportWithSummaries #reportProcessesDeposit: stamp: 'Sof D 10/26/2023 14:53:31'!
reportProcessesDeposit: aDepositToReportOn 

	content add: (self tabulation, 'Deposito por ', aDepositToReportOn value asString)!

!methodRemoval: PortfolioReportWithSummaries #reportProcessesOutgoingTransfer: stamp: 'Sof D 10/26/2023 14:53:35'!
reportProcessesOutgoingTransfer: anOutgoingTransferToReportOn 

	content add: (self tabulation, 'Salida por transferencia de ', anOutgoingTransferToReportOn value asString)!

!methodRemoval: PortfolioReportWithSummaries #reportProcessesWithdraw: stamp: 'Sof D 10/26/2023 14:53:37'!
reportProcessesWithdraw: aWithdrawToReportOn 

	content add: (self tabulation, 'Extraccion por ', aWithdrawToReportOn value asString)!

!methodRemoval: PortfolioReportWithSummaries #reportProcessesIncomingTransfer: stamp: 'Sof D 10/26/2023 14:53:40'!
reportProcessesIncomingTransfer: anIncomingTransferToReportOn 

	content add: (self tabulation, 'Entrada por transferencia de ', anIncomingTransferToReportOn value asString)!

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 14:54:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:54:23'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 14:54:23'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 14:54:23'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 14:54:23'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 14:54:23'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 14:54:23'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 14:54:23'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:54:26'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:54:46'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:54:56'!
FAILURE!

report content !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:56:52'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 14:56:52'!
FAILURE!

report content!

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 15:00:35'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:00:35'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 15:00:35'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 15:00:35'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 15:00:35'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 15:00:35'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 15:00:35'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 15:00:35'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:02:46'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:02:46'!
FAILURE!

report content!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 15:04:15' prior: 50690657 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary accountSummaryWithTabulation |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	accountSummaryWithTabulation := accountSummary summary inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ].
	content addAll: accountSummaryWithTabulation .
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 15:04:20'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:04:20'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 15:04:20'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 15:04:20'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 15:04:20'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 15:04:20'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 15:04:20'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 15:04:20'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:06:05'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:06:05'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 15:06:27' prior: 50690872 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary accountSummaryWithTabulation |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	accountSummaryWithTabulation := accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ].
	content addAll: accountSummaryWithTabulation .
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:06:30'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:06:30'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:06:44'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:06:44'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:07:08'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 15:12:10'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 15:12:10'!
FAILURE!

report content!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 15:16:05' prior: 50690939 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) .
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 15:16:09'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:16:09'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 15:16:09'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 15:16:09'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 15:16:09'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 15:16:09'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 15:16:09'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 15:16:09'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:16:10'!
FAILURE!

report content!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 15:18:14' prior: 50690994 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	"content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) ."
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:18:21'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:18:21'!
FAILURE!

report content!

!methodRemoval: PortfolioReportWithSummaries #reportProcessPortfolio: stamp: 'Sof D 10/26/2023 15:19:24'!
reportProcessPortfolio: aPortfolioToReportOn

	content add: (self tabulation, aPortfolioToReportOn accountName).
	timesToTab :=  timesToTab + 1.!

!testRun: #PortfolioReportTest #test01PortfolioReportPrintsPortfoliosName stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioReportPrintsItsAccountsName stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioReportDoesNothingOnDeposit stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioReportDoesNothingOnWithdraw stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioReportDoesNothingOnIncomingTransaction stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioReportDoesNothingOnOutgoingTransaction stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioReportPrintsMultipleAccountsName stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioReportPrintsItsPortfoliosNames stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test09PortfolioReportPrintsAComposedPortfolio stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!

!testRun: #PortfolioReportTest #test10PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 15:21:13'!
PASSED!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 15:22:26' prior: 50691055 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	"content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) ."
	content addAll: accountSummary .
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 15:22:31'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:22:31'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 15:22:31'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 15:22:31'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 15:22:31'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 15:22:31'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 15:22:31'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 15:22:31'!
ERROR!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:22:32'!
ERROR!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 15:22:45' prior: 50691132 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	"content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) ."
	content addAll: accountSummary content.
	timesToTab := timesToTab - 1
! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 15:22:47'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:22:47'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test03PortfolioReportPrintsItsAccountsDeposit stamp: 'Sof D 10/26/2023 15:22:48'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test04PortfolioReportPrintsItsAccountsWithdraw stamp: 'Sof D 10/26/2023 15:22:48'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test05PortfolioReportPrintsItsAccountsIncomingTransfer stamp: 'Sof D 10/26/2023 15:22:48'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 15:22:48'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 15:22:48'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test08PortfolioReportPrintsMultipleComposedPortfolio stamp: 'Sof D 10/26/2023 15:22:48'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:22:49'!
FAILURE!

report content!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 15:23:33'!
PASSED!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 15:23:42'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 15:23:42'!
FAILURE!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 15:23:56' prior: 50691193 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:24:01'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:24:01'!
FAILURE!

report content!

!methodRemoval: PortfolioReportWithSummaries #reportProcessReceptiveAccount: stamp: 'Sof D 10/26/2023 15:26:02'!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:26:06'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:26:06'!
FAILURE!

report content!
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 15:26:24' overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	"content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) ."
	content addAll: accountSummary content.
	timesToTab := timesToTab - 1! !

!testRun: #PortfolioReportWithSummariesTest #test01PortfolioReportPrintsPortfoliosNameAndBalance stamp: 'Sof D 10/26/2023 15:26:56'!
PASSED!
!PortfolioReportWithSummaries methodsFor: 'nil' stamp: 'Sof D 10/26/2023 15:29:19' overrides: 50683938!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 15:29:26' prior: 50691330 overrides: 50683938!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	timesToTab := timesToTab - 1! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 15:30:11' prior: 50691305 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
	timesToTab := timesToTab + 1.

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) .
	content addAll: accountSummary content.
	timesToTab := timesToTab - 1! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:44:11'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:44:11'!
FAILURE!

expectedReport p!

expectedReport print!

expectedReport print!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:45:14'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:45:14'!
FAILURE!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

expectedReport := OrderedCollection new!

aPortfolioToReportOn accountName !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:47:27'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 15:47:27'!
FAILURE!

expectedReport := OrderedCollection new!

expectedReport := OrderedCollection new!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

report content !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 16:11:25' prior: 50691345 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	| accountSummary |
	

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) .
	content addAll: accountSummary content.
	timesToTab := timesToTab - 1! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 16:12:00'!
addAccountSummaryToReport: anAccountToReportOn

	| accountSummary |
	

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) .
	content addAll: accountSummary content! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 16:12:00' prior: 50691409 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	self addAccountSummaryToReport: anAccountToReportOn.
	timesToTab := timesToTab - 1! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 16:12:07' prior: 50691443 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
	timesToTab := timesToTab + 1.
	self addAccountSummaryToReport: anAccountToReportOn.
	timesToTab := timesToTab - 1! !
!PortfolioReportWithSummaries methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 16:12:15' prior: 50691452 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
	timesToTab := timesToTab + 1.
	"self addAccountSummaryToReport: anAccountToReportOn."
	timesToTab := timesToTab - 1! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:12:22'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:12:22'!
FAILURE!

report content!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 16:25:01'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test06PortfolioReportPrintsItsAccountsOutgoingTransfer stamp: 'Sof D 10/26/2023 16:25:01'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test07PortfolioReportPrintsItsPortfoliosNamesAndBalances stamp: 'Sof D 10/26/2023 16:25:11'!
PASSED!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 16:28:36' prior: 50691464 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
	timesToTab := timesToTab + 1.
	"self addAccountSummaryToReport: anAccountToReportOn."
	timesToTab := timesToTab - 1! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:29:49'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:29:49'!
FAILURE!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

parentPortfolio := Portfolio named: 'Portfolio de Hernan'!

expectedReport := OrderedCollection new!

report := PortfolioReportWithSummaries for: parentPortfolio !
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 16:33:00' prior: 50691337 overrides: 50683938!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	content add: (self tabulation , 'Balance = ', aReceptiveAccountToReportOn balance asString).
	timesToTab := timesToTab - 1! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:33:03'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:33:03'!
FAILURE!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 16:33:24' prior: 50691500 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
	timesToTab := timesToTab + 1.
	"self addAccountSummaryToReport: anAccountToReportOn."
	! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:33:27'!
PASSED!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 16:33:45' prior: 50691553 overrides: 50682714!
reportProcessReceptiveAccount: anAccountToReportOn
	
	content add: (self tabulation, (anAccountToReportOn accountName) ).
	
	timesToTab := timesToTab + 1.
	self addAccountSummaryToReport: anAccountToReportOn.
	timesToTab := timesToTab - 1.
	! !
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 16:33:52' prior: 50691534 overrides: 50683938!
reportEndForReceptiveAccount: aReceptiveAccountToReportOn
	content add: (self tabulation , 'Balance = ', aReceptiveAccountToReportOn balance asString).
! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:33:55'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:33:55'!
FAILURE!
!PortfolioReportWithSummaries methodsFor: 'report generation' stamp: 'Sof D 10/26/2023 16:34:35' prior: 50691426!
addAccountSummaryToReport: anAccountToReportOn

	| accountSummary |
	

	accountSummary := AccountSummaryReport for: anAccountToReportOn .
	content addAll: (accountSummary content inject: OrderedCollection new into: [ : anAccountSummaryWithTabulation : anAccountSummaryTextLine | anAccountSummaryWithTabulation add:(self tabulation, anAccountSummaryTextLine) ]) .
! !

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:34:38'!
FAILURE!

!testRun: #PortfolioReportWithSummariesTest #test02PortfolioReportPrintsItsAccountsNameAndBalance stamp: 'Sof D 10/26/2023 16:34:39'!
FAILURE!

----STARTUP---- (26 October 2023 20:09:00) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Documents\GitHub\2023-2c-IngSoft\08-MarsRover-ElRegreso\MarsRover-WithHeading.st----!

TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLogTest category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:11:23'!
TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:13:14'!
Object subclass: #MarsRoverLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogTest methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 20:13:07'!
test01LogStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:13:47' prior: 50692137!
test01LogStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log contents.! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:13:48'!
ERROR!
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/26/2023 20:13:56'!
contents
	self shouldBeImplemented.! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/26/2023 20:14:01' prior: 50692157!
contents
	^OrderedCollection new.! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:14:05'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:16:46'!
test01LogContentsStartOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log contents.! !

!methodRemoval: MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:16:46'!
test01LogStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log contents.!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:17:06'!
test02LogDirectionHistoryStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log directionChanges.! !

!testRun: #MarsRoverLogTest #test02LogDirectionHistoryStartsOutEmpty stamp: 'Sof D 10/26/2023 20:17:46'!
ERROR!
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/26/2023 20:18:39'!
directionChanges
	self shouldBeImplemented.! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/26/2023 20:18:45' prior: 50692198!
directionChanges
	^OrderedCollection new.! !

!testRun: #MarsRoverLogTest #test02LogDirectionHistoryStartsOutEmpty stamp: 'Sof D 10/26/2023 20:18:48'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:18:58'!
test02MovementHistoryStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log directionChanges.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:19:04'!
test03MovementHistoryStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log directionChanges.! !

!methodRemoval: MarsRoverLogTest #test02MovementHistoryStartsOutEmpty stamp: 'Sof D 10/26/2023 20:19:04'!
test02MovementHistoryStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log directionChanges.!

!methodRemoval: MarsRoverLogTest #test02LogDirectionHistoryStartsOutEmpty stamp: 'Sof D 10/26/2023 20:19:47'!
test02LogDirectionHistoryStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log directionChanges.!

!methodRemoval: MarsRoverLogTest #test03MovementHistoryStartsOutEmpty stamp: 'Sof D 10/26/2023 20:19:48'!
test03MovementHistoryStartsOutEmpty
	| log expectedLog |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log directionChanges.!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:21:54'!
test01LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	log := MarsRoverLog new.
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log contents.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:22:17' prior: 50692256!
test01LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	log := MarsRoverLog at: 0@0 heading: MarsRoverHeadingNorth .
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log contents.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:22:46' prior: 50692266!
test01LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: log contents.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:23:09' prior: 50692277!
test01LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 0@1 asString .
	
	self assert: expectedLog equals: log contents.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:23:22' prior: 50692289!
test01LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 0@1 asString .
	
	
	
	self assert: expectedLog equals: log contents.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:23:59'!
test02LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 0@1 asString .
	
	
	
	self assert: expectedLog equals: log contents.! !

!methodRemoval: MarsRoverLogTest #test01LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:23:59'!
test01LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 0@1 asString .
	
	
	
	self assert: expectedLog equals: log contents.!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:24:25' prior: 50692315!
test02LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 0@1 asString .
	
	rover process: OrderedCollection with: $f.
	
	self assert: expectedLog equals: log contents.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:25:13' prior: 50692342!
test02LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 0@1 asString .
	
	rover process: 'f'.
	
	self assert: expectedLog equals: log contents.! !

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:25:37'!
ERROR!
!MarsRoverLog class methodsFor: 'instance creation' stamp: 'Sof D 10/26/2023 20:25:45'!
for: rover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: rover ! !
!MarsRoverLog class methodsFor: 'instance creation' stamp: 'Sof D 10/26/2023 20:25:54' prior: 50692374!
for: rover 
	^self new initializeFor: rover ! !

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:26:00'!
ERROR!

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:26:00'!
ERROR!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:26:05'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'rover_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'initialization' stamp: 'Sof D 10/26/2023 20:26:05'!
initializeFor: rover 
	self shouldBeImplemented.
	rover_CHANGE_ME := rover.! !

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:26:15'!
ERROR!

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:26:15'!
ERROR!

Object subclass: #MarsRoverLog
	instanceVariableNames: 'rover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverLog
	instanceVariableNames: 'rover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog class methodsFor: 'instance creation' stamp: 'Sof D 10/26/2023 20:27:25' prior: 50692382!
for: aRoverToLogTheActionsOf 
	^self new initializeFor: aRoverToLogTheActionsOf ! !
!MarsRoverLog methodsFor: 'initialization' stamp: 'Sof D 10/26/2023 20:27:57' prior: 50692402!
initializeFor: aRoverToLogTheActionsOf 
	rover_CHANGE_ME := aRoverToLogTheActionsOf.! !

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:28:05'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'rover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:28:05' prior: 50692431!
initializeFor: aRoverToLogTheActionsOf 
	rover := aRoverToLogTheActionsOf.! !

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:28:15'!
ERROR!

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:28:15'!
ERROR!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:28:34' prior: 50692357!
test02LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: (0@1 asString) .
	
	rover process: 'f'.
	
	self assert: expectedLog equals: log contents.! !

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:28:35'!
ERROR!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:28:48' prior: 50692459!
test02LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: ((0@1) asString) .
	
	rover process: 'f'.
	
	self assert: expectedLog equals: log contents.! !

!testRun: #MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:28:49'!
FAILURE!
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/26/2023 20:29:13' prior: 50692162!
contents
	! !

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:29:32'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'rover content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'initialization' stamp: 'Sof D 10/26/2023 20:29:30' prior: 50692445!
initializeFor: aRoverToLogTheActionsOf 
	rover := aRoverToLogTheActionsOf.
	content := OrderedCollection new! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/26/2023 20:30:49' prior: 50692495!
contents
	
	! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head observer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:32:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:36:31' prior: 50692169!
test01LogContentsStartOutEmpty
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test01LogContentsStartOutEmpty stamp: 'Sof D 10/26/2023 20:36:33'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'Sof D 10/26/2023 20:36:48'!
log
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'category-name' stamp: 'Sof D 10/26/2023 20:36:55' prior: 50692543!
log
	^OrderedCollection new! !

!testRun: #MarsRoverLogTest #test01LogContentsStartOutEmpty stamp: 'Sof D 10/26/2023 20:36:59'!
PASSED!

!methodRemoval: MarsRoverLogTest #test02LogRegistersPositionChangeAfterForwardMovement stamp: 'Sof D 10/26/2023 20:37:03'!
test02LogRegistersPositionChangeAfterForwardMovement
	| log expectedLog rover |
	
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	
	expectedLog := OrderedCollection new.
	expectedLog add: ((0@1) asString) .
	
	rover process: 'f'.
	
	self assert: expectedLog equals: log contents.!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:37:43' prior: 50692531!
test01LogContentsStartOutEmpty
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@1) asString).
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test01LogContentsStartOutEmpty stamp: 'Sof D 10/26/2023 20:37:46'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:38:10'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observer log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'category-name' stamp: 'Sof D 10/26/2023 20:38:09' prior: 50692547!
log
	^log! !
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/26/2023 20:38:26' prior: 50691818!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	log := OrderedCollection new.! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 20:39:17' prior: 50691882!
moveNorth
	
	position := position + (0@1).
	
	log add: (position asString ).! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:39:37'!
test02LogRegisterNorthwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@1) asString).
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:39:40'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:40:02'!
test01LogStartsOutEmpty
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	expectedLog := OrderedCollection new.
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:40:03'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogContentsStartOutEmpty stamp: 'Sof D 10/26/2023 20:40:03'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:40:03'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:40:03'!
PASSED!

!methodRemoval: MarsRoverLogTest #test01LogContentsStartOutEmpty stamp: 'Sof D 10/26/2023 20:40:08'!
test01LogContentsStartOutEmpty
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@1) asString).
	
	self assert: expectedLog equals: rover log.!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:40:29'!
test02LogRegisterEastwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((1@0) asString).
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test02LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:40:30'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 20:40:52' prior: 50691874!
moveEast
	
	position := position + (1@0).
	
	log add: (position asString)! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:41:03'!
test03LogRegisterEastwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((1@0) asString).
	
	self assert: expectedLog equals: rover log.! !

!methodRemoval: MarsRoverLogTest #test02LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:41:03'!
test02LogRegisterEastwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((1@0) asString).
	
	self assert: expectedLog equals: rover log.!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:41:05'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:41:15'!
test03LogRegisterWestwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((-1@0) asString).
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test03LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:41:15'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 20:41:25' prior: 50691890!
moveWest
	
	position := position + (-1@0).
	
	log add: (position asString)! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:41:31'!
test04LogRegisterWestwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((-1@0) asString).
	
	self assert: expectedLog equals: rover log.! !

!methodRemoval: MarsRoverLogTest #test03LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:41:31'!
test03LogRegisterWestwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((-1@0) asString).
	
	self assert: expectedLog equals: rover log.!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:41:32'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:41:46'!
test05LogRegisterSouthwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((-1@0) asString).
	
	self assert: expectedLog equals: rover log.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:41:51' prior: 50692746!
test05LogRegisterSouthwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@-1) asString).
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:41:53'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 20:42:03' prior: 50691886!
moveSouth
	
	position := position + (0@-1).
	
	log add: (position asString)! !

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:42:06'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:46:24'!
test06LogRegisterEastwardRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test06LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:46:25'!
FAILURE!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:46:52'!
test06LogRegisterWestwardRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	expectedLog := OrderedCollection with: ('West').
	
	self assert: expectedLog equals: rover log.! !

!methodRemoval: MarsRoverLogTest #test06LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:46:54'!
test06LogRegisterEastwardRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: rover log.!
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 20:47:09' prior: 50691836!
headWest
	
	head := MarsRoverHeadingWest for: self .
	
	log add: 'West'! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:47:11'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:47:11'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:47:11'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:47:11'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:47:11'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 20:47:11'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:47:26'!
test07LogRegisterEastwardRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'l'.
	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:47:28'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 20:47:50' prior: 50691824!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	log add: 'east'! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'Sof D 10/26/2023 20:47:50'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:47:54'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:47:54'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:47:54'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:47:54'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:47:54'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 20:47:54'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:47:54'!
FAILURE!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:47:54'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 20:48:02' prior: 50692855!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	log add: 'East'! !

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:48:05'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:48:23'!
test08LogRegisterNorthwardRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'l'.
	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: rover log.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:48:26' prior: 50692952!
test08LogRegisterNorthwardRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'l'.
	expectedLog := OrderedCollection with: ('North').
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 20:48:27'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 20:48:46' prior: 50691828!
headNorth
	
	head := MarsRoverHeadingNorth for: self .
	
	log add: 'North'! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 20:48:49'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:49:26'!
test09LogRegisterSouthwardRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	expectedLog := OrderedCollection with: ('South').
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 20:49:27'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 20:49:47' prior: 50691832!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	
	log add: 'South'! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 20:49:49'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 20:50:22'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:57:49'!
test09LogRegistersMultipleRotations
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	rover process: 'r'.

	expectedLog := OrderedCollection with: ('South') with: 'West'.
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test09LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 20:57:51'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:57:59'!
test10LogRegistersMultipleRotations
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	rover process: 'r'.

	expectedLog := OrderedCollection with: ('South') with: 'West'.
	
	self assert: expectedLog equals: rover log.! !

!methodRemoval: MarsRoverLogTest #test09LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 20:57:59'!
test09LogRegistersMultipleRotations
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	rover process: 'r'.

	expectedLog := OrderedCollection with: ('South') with: 'West'.
	
	self assert: expectedLog equals: rover log.!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:58:57'!
test11LogRegistersMultipleMovements
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fb'.

	expectedLog := OrderedCollection with: ((1@0) asString) with: ((0@0) asString).
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/26/2023 20:58:59'!
FAILURE!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:59:14' prior: 50693146!
test11LogRegistersMultipleMovements
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fb'.

	expectedLog := OrderedCollection with: ((0@1) asString) with: ((0@0) asString).
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/26/2023 20:59:15'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 20:59:37'!
test12LogRegistersMovementAndRotation
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) with: ('East').
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/26/2023 20:59:38'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 21:03:11'!
test13LogCanReturnJustTheDirections
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: rover log.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 21:03:24' prior: 50693270!
test13LogCanReturnJustTheDirections
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: rover directionLog.! !

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/26/2023 21:03:26'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'Sof D 10/26/2023 21:03:31'!
directionLog
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 21:05:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log directionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'category-name' stamp: 'Sof D 10/26/2023 21:05:03' prior: 50693295!
directionLog
	^directionLog! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 21:05:38' prior: 50692943!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	log add: 'East'. directionLog add: 'East'.! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 21:05:44' prior: 50692977!
headNorth
	
	head := MarsRoverHeadingNorth for: self .
	
	log add: 'North'. 	directionLog add: 'North'! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 21:05:50' prior: 50693024!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	
	log add: 'South'. 	directionLog add: 'South'! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/26/2023 21:05:57' prior: 50692815!
headWest
	
	head := MarsRoverHeadingWest for: self .
	
	log add: 'West'. 	directionLog add: 'West'! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 21:06:14'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 21:06:15'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 21:06:15'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 21:06:15'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 21:06:15'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 21:06:15'!
ERROR!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 21:06:15'!
ERROR!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 21:06:15'!
ERROR!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 21:06:15'!
ERROR!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 21:06:15'!
ERROR!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/26/2023 21:06:15'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/26/2023 21:06:15'!
ERROR!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/26/2023 21:06:15'!
ERROR!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 21:06:18'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/26/2023 21:06:35' prior: 50692595!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	log := OrderedCollection new.
	
	directionLog := OrderedCollection new.! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/26/2023 21:06:37'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 21:08:14'!
test14LogCanReturnJustThePositoins
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) .
	
	self assert: expectedLog equals: rover log.! !

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'Sof D 10/26/2023 21:08:16'!
FAILURE!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 21:08:24' prior: 50693438!
test14LogCanReturnJustThePositoins
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) .
	
	self assert: expectedLog equals: rover positionLog.! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/26/2023 21:08:28' prior: 50693453!
test14LogCanReturnJustThePositoins
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) .
	
	self assert: expectedLog equals: rover positionLog.! !

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'Sof D 10/26/2023 21:08:28'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'Sof D 10/26/2023 21:08:34'!
positionLog
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 21:08:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log directionLog positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'category-name' stamp: 'Sof D 10/26/2023 21:08:39' prior: 50693479!
positionLog
	^positionLog! !
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/26/2023 21:09:27' prior: 50693385!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	log := OrderedCollection new.
	
	directionLog := OrderedCollection new.
	
	positionLog := OrderedCollection new.! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 21:09:38' prior: 50692670!
moveEast
	
	position := position + (1@0).
	
	log add: (position asString). 	positionLog add: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 21:09:48' prior: 50692603!
moveNorth
	
	position := position + (0@1).
	
	log add: (position asString ). 	positionLog add: (position asString ).! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 21:10:00' prior: 50692771!
moveSouth
	
	position := position + (0@-1).
	
	log add: (position asString). 	positionLog add: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/26/2023 21:10:03' prior: 50692715!
moveWest
	
	position := position + (-1@0).
	
	log add: (position asString). 	positionLog add: (position asString)! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'Sof D 10/26/2023 21:10:05'!
PASSED!

TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindowTest category: 'MarsRover-WithHeading' stamp: 'Sof D 10/26/2023 21:11:21'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindowTest methodsFor: 'no messages' stamp: 'Sof D 10/26/2023 21:12:06'!
test01WindowStartsOutShowingRoverPositionAndDirection

	| expectedWindow rover |! !

----QUIT----(26 October 2023 23:55:51) CuisUniversity-5981.image priorSource: 11379666!

----STARTUP---- (26 October 2023 23:55:57) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


----QUIT----(26 October 2023 23:56:07) CuisUniversity-5981.image priorSource: 11582355!

----STARTUP---- (27 October 2023 00:25:58) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 00:49:35' prior: 50693506!
moveEast
	
	position := position + (1@0).
	
	log add: (position asString). 
	positionLog add: (position asString)! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'eaam 10/27/2023 00:49:46'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head generalLog directionLog positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693513!
moveNorth
	
	position := position + (0@1).
	
	generalLog add: (position asString ). 	positionLog add: (position asString ).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693331!
headWest
	
	head := MarsRoverHeadingWest for: self .
	
	generalLog add: 'West'. 	directionLog add: 'West'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693312!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	generalLog add: 'East'. directionLog add: 'East'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693325!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	
	generalLog add: 'South'. 	directionLog add: 'South'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693613!
moveEast
	
	position := position + (1@0).
	
	generalLog add: (position asString). 
	positionLog add: (position asString)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693527!
moveWest
	
	position := position + (-1@0).
	
	generalLog add: (position asString). 	positionLog add: (position asString)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693318!
headNorth
	
	head := MarsRoverHeadingNorth for: self .
	
	generalLog add: 'North'. 	directionLog add: 'North'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693496!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := OrderedCollection new.
	
	directionLog := OrderedCollection new.
	
	positionLog := OrderedCollection new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50693520!
moveSouth
	
	position := position + (0@-1).
	
	generalLog add: (position asString). 	positionLog add: (position asString)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 00:49:46' prior: 50692591!
log
	^generalLog! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'eaam 10/27/2023 00:55:40'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'eaam 10/27/2023 00:55:40'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'eaam 10/27/2023 00:55:40'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'eaam 10/27/2023 00:55:40'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'eaam 10/27/2023 00:55:40'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'eaam 10/27/2023 00:55:41'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'eaam 10/27/2023 00:55:49'!
PASSED!

Object subclass: #MarsRoverLog
	instanceVariableNames: 'content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'eaam 10/27/2023 01:03:57'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'initialization' stamp: 'eaam 10/27/2023 01:04:11' overrides: 16920235!
initialize
	content := OrderedCollection new! !
!MarsRoverLog class methodsFor: 'instance creation' stamp: 'eaam 10/27/2023 01:05:08'!
asdsafasdasfas: aRoverToLogTheActionsOf 
	^self new initializeFor: aRoverToLogTheActionsOf ! !

!methodRemoval: MarsRoverLog class #for: stamp: 'eaam 10/27/2023 01:05:08'!
for: aRoverToLogTheActionsOf 
	^self new initializeFor: aRoverToLogTheActionsOf !

!methodRemoval: MarsRoverLog class #asdsafasdasfas: stamp: 'eaam 10/27/2023 01:05:13'!
asdsafasdasfas: aRoverToLogTheActionsOf 
	^self new initializeFor: aRoverToLogTheActionsOf !
!MarsRoverLog methodsFor: 'initialization' stamp: 'eaam 10/27/2023 01:05:28'!
asdsadsadinitializeFor: aRoverToLogTheActionsOf 
	rover := aRoverToLogTheActionsOf.
	content := OrderedCollection new! !

!methodRemoval: MarsRoverLog #initializeFor: stamp: 'eaam 10/27/2023 01:05:28'!
initializeFor: aRoverToLogTheActionsOf 
	rover := aRoverToLogTheActionsOf.
	content := OrderedCollection new!

!methodRemoval: MarsRoverLog #asdsadsadinitializeFor: stamp: 'eaam 10/27/2023 01:05:32'!
asdsadsadinitializeFor: aRoverToLogTheActionsOf 
	rover := aRoverToLogTheActionsOf.
	content := OrderedCollection new!
!MarsRoverLog methodsFor: 'accessing' stamp: 'eaam 10/27/2023 01:05:43' prior: 50692514!
contents
	^content 
	! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'eaam 10/27/2023 01:06:50'!
directionChanges: objectToAdd
	^OrderedCollection new.! !

!methodRemoval: MarsRoverLog #directionChanges stamp: 'eaam 10/27/2023 01:06:50'!
directionChanges
	^OrderedCollection new.!
!MarsRoverLog methodsFor: 'accessing' stamp: 'eaam 10/27/2023 01:07:16'!
registerToLog: objectToAdd
	^OrderedCollection new.! !

!methodRemoval: MarsRoverLog #directionChanges: stamp: 'eaam 10/27/2023 01:07:16'!
directionChanges: objectToAdd
	^OrderedCollection new.!
!MarsRoverLog methodsFor: 'accessing' stamp: 'eaam 10/27/2023 01:07:27' prior: 50693874!
registerToLog: objectToAdd
	content add: objectToAdd ! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:10:30' prior: 50693665!
moveWest
	
	position := position + (-1@0).
	
	generalLog refisterOnLog: (position asString). 	positionLog add: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:10:43' prior: 50693888!
moveWest
	
	position := position + (-1@0).
	
	generalLog reisterOnLog: (position asString). 	positionLog add: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:10:56' prior: 50693895!
moveWest
	
	position := position + (-1@0).
	
	generalLog registerToLog: (position asString). 	positionLog add: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:02' prior: 50693902!
moveWest
	
	position := position + (-1@0).
	
	generalLog registerToLog: (position asString). 	positionLog registerToLog: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:07' prior: 50693690!
moveSouth
	
	position := position + (0@-1).
	
	generalLog registerToLog: (position asString). 	positionLog registerToLog: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:14' prior: 50693629!
moveNorth
	
	position := position + (0@1).
	
	generalLog registerToLog: (position asString ). 	positionLog registerToLog: (position asString ).! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:24' prior: 50693658!
moveEast
	
	position := position + (1@0).
	
	generalLog registerToLog: (position asString). 
	positionLog registerToLog: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:28' prior: 50693925!
moveNorth
	
	position := position + (0@1).
	
	generalLog registerToLog: (position asString ). 
	positionLog registerToLog: (position asString ).! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:36' prior: 50693917!
moveSouth
	
	position := position + (0@-1).
	
	generalLog registerToLog: (position asString).
	positionLog registerToLog: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:40' prior: 50693909!
moveWest
	
	position := position + (-1@0).
	
	generalLog registerToLog: (position asString).
		positionLog registerToLog: (position asString)! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:11:42' prior: 50693957!
moveWest
	
	position := position + (-1@0).
	
	generalLog registerToLog: (position asString).
	positionLog registerToLog: (position asString)! !
!MarsRover methodsFor: 'initialization' stamp: 'eaam 10/27/2023 01:36:34' prior: 50693679!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.! !
!MarsRover methodsFor: 'category-name' stamp: 'eaam 10/27/2023 01:36:58' prior: 50693697!
log
	^generalLog contents ! !
!MarsRover methodsFor: 'category-name' stamp: 'eaam 10/27/2023 01:37:01' prior: 50693492!
positionLog
	^positionLog contents! !
!MarsRover methodsFor: 'category-name' stamp: 'eaam 10/27/2023 01:37:04' prior: 50693308!
directionLog
	^directionLog contents! !

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'eaam 10/27/2023 01:37:09'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'eaam 10/27/2023 01:37:09'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'eaam 10/27/2023 01:37:09'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'eaam 10/27/2023 01:37:09'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'eaam 10/27/2023 01:37:09'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'eaam 10/27/2023 01:37:09'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'eaam 10/27/2023 01:37:09'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'eaam 10/27/2023 01:37:09'!
ERROR!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'eaam 10/27/2023 01:37:15'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'eaam 10/27/2023 01:37:15'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'eaam 10/27/2023 01:37:15'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'eaam 10/27/2023 01:37:15'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'eaam 10/27/2023 01:37:15'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'eaam 10/27/2023 01:37:15'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'eaam 10/27/2023 01:37:15'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'eaam 10/27/2023 01:37:15'!
ERROR!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 01:37:16'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:37:39' prior: 50693644!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	generalLog registerToLog: 'East'. directionLog registerToLog: 'East'.! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:37:46' prior: 50693672!
headNorth
	
	head := MarsRoverHeadingNorth for: self .
	
	generalLog registerToLog: 'North'. 	directionLog registerToLog: 'North'! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:37:49' prior: 50693651!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	
	generalLog registerToLog: 'South'. 	directionLog add: 'South'! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:37:50' prior: 50694113!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	
	generalLog registerToLog: 'South'. 	directionLog registerToLog: 'South'! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:37:53' prior: 50693637!
headWest
	
	head := MarsRoverHeadingWest for: self .
	
	generalLog registerToLog: 'West'. 	directionLog add: 'West'! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:37:55' prior: 50694127!
headWest
	
	head := MarsRoverHeadingWest for: self .
	
	generalLog registerToLog: 'West'. 	directionLog registerToLog: 'West'! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'eaam 10/27/2023 01:40:55'!
attachToRover: aRover
	"Cada tipo de log debe tener su attach correspondiente, este es un log genérico y por ahora no lo tiene, pero seguramente los tres sean polimorficos"! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 01:41:37' prior: 50693594!
test01WindowStartsOutShowingRoverPositionAndDirection

	
	! !

!classDefinition: #RoverWindow category: 'MarsRover-WithHeading' stamp: 'eaam 10/27/2023 01:45:21'!
Object subclass: #RoverWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 01:45:06' prior: 50694150!
test01WindowStartsOutShowingRoverPositionAndDirection

	| rover expectedWindow |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	expectedWindow := RoverWindow new.
	
	self assert: expectedWindow equals: rover log.
	! !

Object subclass: #RoverWindow
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #RoverWindow category: 'MarsRover-WithHeading' stamp: 'eaam 10/27/2023 01:47:09'!
Object subclass: #RoverWindow
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!RoverWindow methodsFor: 'no messages' stamp: 'eaam 10/27/2023 01:47:46'!
actualizePosition: aPosition
	position := aPosition .! !
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 01:48:11'!
actualizeDirection: aDirection
	direction := aDirection .! !
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 01:48:23'!
Direction
	^direction! !
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 01:48:36'!
direction
	^direction! !

!methodRemoval: RoverWindow #Direction stamp: 'eaam 10/27/2023 01:48:36'!
Direction
	^direction!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 01:48:46'!
position
	^position! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head generalLog directionLog positionLog window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'eaam 10/27/2023 01:49:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head generalLog directionLog positionLog window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'category-name' stamp: 'eaam 10/27/2023 01:49:20'!
window
	^window! !
!MarsRover methodsFor: 'initialization' stamp: 'eaam 10/27/2023 01:49:44' prior: 50693973!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.
	
	window := RoverWindow new.! !
!MarsRover methodsFor: 'initialization' stamp: 'eaam 10/27/2023 01:50:40' prior: 50694230!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.
	
	window := RoverWindow new.
	window actualizePosition: position asString.! !
!MarsRover methodsFor: 'initialization' stamp: 'eaam 10/27/2023 01:51:02' prior: 50694241!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.
	
	window := RoverWindow new.
	window actualizePosition: position asString.
	window actuali! !
!MarsRover methodsFor: 'initialization' stamp: 'eaam 10/27/2023 01:51:41' prior: 50694254!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.
	
	window := RoverWindow new.
	window actualizePosition: position asString.
	window actualizeDirection: ''.! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:53:39' prior: 50693965!
moveWest
	
	position := position + (-1@0).
	
	generalLog registerToLog: (position asString).
	positionLog registerToLog: (position asString).
	window actualizePosition: (position asString).! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:53:45' prior: 50693949!
moveSouth
	
	position := position + (0@-1).
	
	generalLog registerToLog: (position asString).
	positionLog registerToLog: (position asString).
	window actualizePosition: (position asString).! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:53:48' prior: 50693941!
moveNorth
	
	position := position + (0@1).
	
	generalLog registerToLog: (position asString ). 
	positionLog registerToLog: (position asString ).
	window actualizePosition: (position asString).! !
!MarsRover methodsFor: 'moving' stamp: 'eaam 10/27/2023 01:53:52' prior: 50693933!
moveEast
	
	position := position + (1@0).
	
	generalLog registerToLog: (position asString). 
	positionLog registerToLog: (position asString).
	window actualizePosition: (position asString).! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:54:10' prior: 50694099!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	generalLog registerToLog: 'East'. directionLog registerToLog: 'East'.
	window actualizeDirection: 'East'.! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:54:28' prior: 50694106!
headNorth
	
	head := MarsRoverHeadingNorth for: self .
	
	generalLog registerToLog: 'North'. 	directionLog registerToLog: 'North'.
	window actualizeDirection: 'North'.! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:54:44' prior: 50694120!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	
	generalLog registerToLog: 'South'. 	directionLog registerToLog: 'South'.
	window actualizeDirection: 'South'.! !
!MarsRover methodsFor: 'heading' stamp: 'eaam 10/27/2023 01:54:59' prior: 50694134!
headWest
	
	head := MarsRoverHeadingWest for: self .
	
	generalLog registerToLog: 'West'. 	directionLog registerToLog: 'West'.
	window actualizeDirection: 'West'.! !
!MarsRover methodsFor: 'initialization' stamp: 'eaam 10/27/2023 02:04:08' prior: 50694267!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.
	
	window := RoverWindow new.
	window actualizePosition: position asString.
	window actualizeDirection: head name.! !
!MarsRoverHeadingEast methodsFor: 'category-name' stamp: 'eaam 10/27/2023 02:04:37' overrides: 16903442!
name
	^'East'! !
!MarsRoverHeadingNorth methodsFor: 'category-name' stamp: 'eaam 10/27/2023 02:04:57' overrides: 16903442!
name
	^'North'! !
!MarsRoverHeadingSouth methodsFor: 'category-name' stamp: 'eaam 10/27/2023 02:05:26' overrides: 16903442!
name
	^'South'! !
!MarsRoverHeadingWest methodsFor: 'category-name' stamp: 'eaam 10/27/2023 02:05:52' overrides: 16903442!
name
	^'west'! !
!MarsRoverHeadingWest methodsFor: 'category-name' stamp: 'eaam 10/27/2023 02:05:54' prior: 50694376 overrides: 16903442!
name
	^'West'! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:06:38' prior: 50694163!
test01WindowStartsOutShowingRoverPositionAndDirection

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) equals: rover log.
	! !

(0@0) asString!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:07:35' prior: 50694385!
test01WindowStartsOutShowingRoverPositionAndDirection

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) equals: 0@0 asString.
	! !

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirection stamp: 'eaam 10/27/2023 02:07:36'!
ERROR!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:07:46' prior: 50694395!
test01WindowStartsOutShowingRoverPositionAndDirection

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) equals: (0@0) asString.
	! !

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirection stamp: 'eaam 10/27/2023 02:07:47'!
FAILURE!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:07:55' prior: 50694409!
test01WindowStartsOutShowingRoverPositionAndDirection

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) position equals: (0@0) asString.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:08:16' prior: 50694423!
test01WindowStartsOutShowingRoverPositionAndDirection

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) position equals: (0@0) asString.
	self assert: (rover window) direction equals: 'North'.
	! !

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirection stamp: 'eaam 10/27/2023 02:08:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirection stamp: 'eaam 10/27/2023 02:08:17'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:08:38'!
test02WindowStartsOutShowingRoverPositionAndDirectionSouth

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) position equals: (0@0) asString.
	self assert: (rover window) direction equals: 'North'.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:08:43'!
test01WindowStartsOutShowingRoverPositionAndDirectionNorth

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) position equals: (0@0) asString.
	self assert: (rover window) direction equals: 'North'.
	! !

!methodRemoval: MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirection stamp: 'eaam 10/27/2023 02:08:43'!
test01WindowStartsOutShowingRoverPositionAndDirection

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	
	self assert: (rover window) position equals: (0@0) asString.
	self assert: (rover window) direction equals: 'North'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:09:27' prior: 50694452!
test02WindowStartsOutShowingRoverPositionAndDirectionSouth

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	
	self assert: (rover window) position equals: (0@0) asString.
	self assert: (rover window) direction equals: 'North'.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:09:34' prior: 50694487!
test02WindowStartsOutShowingRoverPositionAndDirectionSouth

	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	
	self assert: (rover window) position equals: (0@0) asString.
	self assert: (rover window) direction equals: 'South'.
	! !

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:09:35'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:09:35'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:09:35'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:09:52'!
test03WindowStartsOutShowingRoverPositionAndDirectionWest

	| rover  |
	rover := MarsRover at: 1@0 heading: MarsRoverHeadingSouth .
	
	self assert: (rover window) position equals: (1@0) asString.
	self assert: (rover window) direction equals: 'West'.
	! !

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:09:53'!
FAILURE!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:10:01' prior: 50694523!
test03WindowStartsOutShowingRoverPositionAndDirectionWest

	| rover  |
	rover := MarsRover at: 1@0 heading: MarsRoverHeadingWest .
	
	self assert: (rover window) position equals: (1@0) asString.
	self assert: (rover window) direction equals: 'West'.
	! !

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:10:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:10:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:10:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:10:02'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:10:10' prior: 50694499!
test02WindowStartsOutShowingRoverPositionAndDirectionSouth

	| rover  |
	rover := MarsRover at: 0@1heading: MarsRoverHeadingSouth .
	
	self assert: (rover window) position equals: (0@1) asString.
	self assert: (rover window) direction equals: 'South'.
	! !

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:10:11'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:10:11'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:10:11'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:10:11'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:10:24'!
test03WindowStartsOutShowingRoverPositionAndDirectionEast

	| rover  |
	rover := MarsRover at: 1@0 heading: MarsRoverHeadingEast .
	
	self assert: (rover window) position equals: (1@0) asString.
	self assert: (rover window) direction equals: 'East'.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:10:30' prior: 50694596!
test03WindowStartsOutShowingRoverPositionAndDirectionEast

	| rover  |
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	
	self assert: (rover window) position equals: (1@1) asString.
	self assert: (rover window) direction equals: 'East'.
	! !

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:10:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:10:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:10:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:10:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:10:31'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:10:42'!
test04WindowStartsOutShowingRoverPositionAndDirectionEast

	| rover  |
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	
	self assert: (rover window) position equals: (1@1) asString.
	self assert: (rover window) direction equals: 'East'.
	! !

!methodRemoval: MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:10:42'!
test03WindowStartsOutShowingRoverPositionAndDirectionEast

	| rover  |
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	
	self assert: (rover window) position equals: (1@1) asString.
	self assert: (rover window) direction equals: 'East'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:11:59'!
test05WindowChangesWestwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((-1@0) asString).
	
	self assert: expectedLog equals: rover log.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:12:20' prior: 50694663!
test05WindowChangesWestwardMovement
	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	
	self assert: rover window position equals: rover log.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:12:46' prior: 50694675!
test05WindowChangesWestwardMovement
	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	
	self assert: rover window position equals: (0@1) asString.
	! !

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:12:47'!
FAILURE!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:13:24' prior: 50694685!
test05WindowChangesWestwardMovement
	| rover  |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	
	self assert: rover window position equals: (-1@0) asString.
	! !

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:13:25'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:13:25'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:13:25'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:13:25'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:13:25'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:13:25'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:14:27'!
test02LogRegisterNorthwardMovement
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	
	self assert: expectedLog equals: (0@1) asString.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:14:43' prior: 50694731!
test02LogRegisterNorthwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	
	self assert: rover window position equals: (0@1) asString.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:15:23'!
test06WindowChangesNorthwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	
	self assert: rover window position equals: (0@1) asString.
	! !

!methodRemoval: MarsRoverWindowTest #test02LogRegisterNorthwardMovement stamp: 'eaam 10/27/2023 02:15:23'!
test02LogRegisterNorthwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	
	self assert: rover window position equals: (0@1) asString.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:16:12'!
test07WindowChangesEastwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	
	self assert: rover window position equals: (1@0) asString.
	! !

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:16:16'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:16:27'!
test08WindowChangesEastwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	
	self assert: rover window position equals: (1@0) asString.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:16:42'!
test08WindowChangesSouthwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	
	self assert: rover window position equals: (1@0) asString.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:17:01' prior: 50694818!
test08WindowChangesSouthwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	rover process: 'f'.
	
	self assert: rover window position equals: (0@-1) asString.
	! !

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:17:02'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:17:09'!
test09WindowChangesSouthwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	rover process: 'f'.
	
	self assert: rover window position equals: (0@-1) asString.
	! !

!methodRemoval: MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:17:09'!
test08WindowChangesSouthwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	rover process: 'f'.
	
	self assert: rover window position equals: (0@-1) asString.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:17:58'!
test10LogRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'West'.
	! !

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:18:03'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:18:55' prior: 50694894!
test10LogRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'North'.
	! !

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:18:56'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:19:01' prior: 50694945!
test10LogRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'West'.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:19:15'!
test11LogRegisterNorthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'North'.
	! !

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:19:17'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:19:35'!
test12LogRegisterEastwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'East'.
	! !

!testRun: #MarsRoverWindowTest #test12LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!

!testRun: #MarsRoverWindowTest #test12LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:19:36'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:19:54'!
test11LogRegisterSouthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	! !

!testRun: #MarsRoverWindowTest #test11LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!

!testRun: #MarsRoverWindowTest #test12LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:19:55'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:20:41'!
test13LogRegisterEastwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'East'.
	! !

!methodRemoval: MarsRoverWindowTest #test12LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:20:41'!
test12LogRegisterEastwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'East'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:20:46'!
test12LogRegisterSouthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	! !

!methodRemoval: MarsRoverWindowTest #test11LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 02:20:46'!
test11LogRegisterSouthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:21:22'!
test14LogRegisterMultipleRotations
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	! !

!testRun: #MarsRoverWindowTest #test14LogRegisterMultipleRotations stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test12LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test13LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!

!testRun: #MarsRoverWindowTest #test14LogRegisterMultipleRotations stamp: 'eaam 10/27/2023 02:21:23'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:21:45' prior: 50695213!
test14LogRegisterMultipleRotations
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'rr'.
	
	self assert: rover window direction equals: 'South'.
	! !

!testRun: #MarsRoverWindowTest #test14LogRegisterMultipleRotations stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test12LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test13LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test14LogRegisterMultipleRotations stamp: 'eaam 10/27/2023 02:21:46'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:22:19'!
test15LogRegisterMultipleMovements
	| rover |
	rover := MarsRover at: 1@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	self assert: rover window position equals: (1@0) asString .
	! !

!testRun: #MarsRoverWindowTest #test15LogRegisterMultipleMovements stamp: 'eaam 10/27/2023 02:22:21'!
FAILURE!

!testRun: #MarsRoverWindowTest #test15LogRegisterMultipleMovements stamp: 'eaam 10/27/2023 02:22:38'!
FAILURE!

!testRun: #MarsRoverWindowTest #test15LogRegisterMultipleMovements stamp: 'eaam 10/27/2023 02:23:04'!
FAILURE!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:23:50' prior: 50695342!
test15LogRegisterMultipleMovements
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	self assert: rover window position equals: (1@0) asString .
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:23:57' prior: 50695362!
test15LogRegisterMultipleMovements
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	self assert: rover window position equals: (0@1) asString .
	! !

!testRun: #MarsRoverWindowTest #test15LogRegisterMultipleMovements stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test12LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test13LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test14LogRegisterMultipleRotations stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test15LogRegisterMultipleMovements stamp: 'eaam 10/27/2023 02:23:58'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 02:25:41'!
test16LogRegistersMovementAndRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	self assert: rover window direction equals: 'East'.
	self assert: rover window position equals: (0@1) asString .
! !

!testRun: #MarsRoverWindowTest #test16LogRegistersMovementAndRotation stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test12LogRegisterSouthwardRotation stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test13LogRegisterEastwardRotation stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test14LogRegisterMultipleRotations stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test15LogRegisterMultipleMovements stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test16LogRegistersMovementAndRotation stamp: 'eaam 10/27/2023 02:25:44'!
PASSED!

----QUIT----(27 October 2023 02:25:48) CuisUniversity-5981.image priorSource: 11582566!

----STARTUP---- (27 October 2023 13:38:58) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/27/2023 13:54:31'!
generalActualize: aProxy
	"mi idea de actualizador general para que el proxy sea genérico"
	
	aProxy execute: [:x | "genericProxyVariable" ]! !

----QUIT----(27 October 2023 13:55:05) CuisUniversity-5981.image priorSource: 11643585!

----STARTUP---- (29 October 2023 00:17:47) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!


Object subclass: #ObserverProxy
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverProxy category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 00:32:45'!
Object subclass: #ObserverProxy
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserverProxy class methodsFor: 'no messages' stamp: 'eaam 10/29/2023 00:33:07'!
with: aVariable
	self new initializeWith: aVariable.! !

TestCase subclass: #ObserverProxyTest
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverProxyTest category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 00:33:24'!
TestCase subclass: #ObserverProxyTest
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

TestCase subclass: #ObserverProxyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverProxyTest category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 00:33:32'!
TestCase subclass: #ObserverProxyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #ObserverProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverProxy category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 00:33:37'!
Object subclass: #ObserverProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserverProxyTest methodsFor: 'no messages' stamp: 'eaam 10/29/2023 00:33:44'!
tests! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 00:34:18'!
test01AProxyInitializesWithAVariable! !

!methodRemoval: ObserverProxyTest #tests stamp: 'eaam 10/29/2023 00:34:18'!
tests!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 00:39:43' prior: 50695593!
test01AProxyInitializesWithAVariable
	| observer |
	observer := ObserverProxy with: 1.
	self assert: observer value aqueals: 1.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 00:40:01' prior: 50695600!
test01AProxyInitializesWithAVariable
	| observer |
	observer := ObserverProxy with: 1.
	self assert: observer value equeals: 1.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 00:40:06' prior: 50695607!
test01AProxyInitializesWithAVariable
	| observer |
	observer := ObserverProxy with: 1.
	self assert: observer value equals: 1.! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 00:40:08'!
ERROR!

!classDefinition: #ObserverProxy category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 00:40:19'!
Object subclass: #ObserverProxy
	instanceVariableNames: 'variable'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserverProxy methodsFor: 'initialization' stamp: 'eaam 10/29/2023 00:40:19'!
initializeWith: aVariable 
	self shouldBeImplemented.
	variable := aVariable.! !
!ObserverProxy methodsFor: 'initialization' stamp: 'eaam 10/29/2023 00:42:42' prior: 50695632!
initializeWith: aVariableToStore 
	variable := aVariableToStore .! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 00:42:47'!
FAILURE!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 00:43:15' prior: 50695614!
test01AProxyInitializesWithAVariable
	| observer |
	observer := ObserverProxy with: 1.
	self assert: observer variableValue equals: 1.! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 00:43:17'!
ERROR!
!ObserverProxy class methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 00:43:32' prior: 50695547!
with: aVariable
	^self new initializeWith: aVariable.! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 00:43:34'!
ERROR!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 00:43:34'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 00:43:52'!
variableValue
	self shouldBeImplemented.! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 00:43:59' prior: 50695670!
variableValue
	^variable .! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 00:44:02'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:25:52'!
test02ACanAttachAObserver
	| observer |
	observer := ObserverProxy with: 1.
	self assert: observer variableValue equals: 1.! !

!methodRemoval: RoverWindow #generalActualize: stamp: 'eaam 10/29/2023 01:26:03'!
generalActualize: aProxy
	"mi idea de actualizador general para que el proxy sea genérico"
	
	aProxy execute: [:x | "genericProxyVariable" ]!
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:28:36'!
attach: noSeComoLlamarloPorAhora
	^1.! !

Object subclass: #ObserverProxy
	instanceVariableNames: 'variable observer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverProxy category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 01:30:48'!
Object subclass: #ObserverProxy
	instanceVariableNames: 'variable observer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:31:14' prior: 50695696!
attach: noSeComoLlamarloPorAhora
	^observer := noSeComoLlamarloPorAhora.! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:31:56'!
actualize: aVariable
	variable := aVariable .
	^observer actualize: variable 
	! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:34:15' prior: 50695682!
test02ACanAttachAObserver
	| observer aLog|
	observer := ObserverProxy with: 1.
	aLog := MarsRoverLog new.
	observer attach: aLog.
	self assert: observer variableValue equals: 1.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:37:02' prior: 50695725!
test02ACanAttachAObserver
	| observer aWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	observer attach: aWindow.
	self assert: observer variableValue equals: 1.! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:38:56' prior: 50694539!
test03WindowStartsOutShowingRoverPositionAndDirectionWest

	| rover |
	rover := MarsRover at: 1@0 heading: MarsRoverHeadingWest .
	
	self assert: (rover window) position equals: (1@0) asString.
	self assert: (rover window) direction equals: 'West'.
	! !

Object subclass: #RoverWindowPosition
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #RoverWindowPosition category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 01:39:59'!
Object subclass: #RoverWindowPosition
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #RoverWindowPosition
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #RoverWindowPosition category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 01:40:07'!
Object subclass: #RoverWindowPosition
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!RoverWindowPosition methodsFor: 'no messages' stamp: 'eaam 10/29/2023 01:40:09'!
aWindow! !
!RoverWindowPosition methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:40:17'!
position
	^position! !
!RoverWindowPosition methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:40:46'!
actualize: aNewPosition
	position := aNewPosition ! !

Object subclass: #RoverWindow
	instanceVariableNames: 'positionWindow directionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #RoverWindow category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 01:41:12'!
Object subclass: #RoverWindow
	instanceVariableNames: 'positionWindow directionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:41:23' prior: 50694207!
position
	^positionWindow position.! !
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:41:40' prior: 50694186!
actualizePosition: aPosition
	positionWindow actualize: aPosition .! !
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:42:03' overrides: 16920235!
initialize
	positionWindow := RoverWindowPosition new.! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 01:42:04'!
PASSED!

!testRun: #ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 01:42:04'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:42:28'!
test10WindowRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'West'.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:42:35' prior: 50695832!
test10WindowRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'West'.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:42:40'!
test11WindowRegisterNorthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'North'.
	! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:42:48' prior: 50695851!
test11WindowRegisterNorthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'North'.
	! !

!methodRemoval: MarsRoverWindowTest #test11LogRegisterNorthwardRotation stamp: 'eaam 10/29/2023 01:42:56'!
test11LogRegisterNorthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'North'.
	!

!methodRemoval: MarsRoverWindowTest #test10LogRegisterWestwardRotation stamp: 'eaam 10/29/2023 01:43:01'!
test10LogRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'West'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:43:07'!
test12WindowRegisterSouthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	! !

!methodRemoval: MarsRoverWindowTest #test12LogRegisterSouthwardRotation stamp: 'eaam 10/29/2023 01:43:07'!
test12LogRegisterSouthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:43:14'!
test13WindowRegisterEastwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'East'.
	! !

!methodRemoval: MarsRoverWindowTest #test13LogRegisterEastwardRotation stamp: 'eaam 10/29/2023 01:43:14'!
test13LogRegisterEastwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'East'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:43:20'!
test14WindowRegisterMultipleRotations
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'rr'.
	
	self assert: rover window direction equals: 'South'.
	! !

!methodRemoval: MarsRoverWindowTest #test14LogRegisterMultipleRotations stamp: 'eaam 10/29/2023 01:43:20'!
test14LogRegisterMultipleRotations
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'rr'.
	
	self assert: rover window direction equals: 'South'.
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:43:25'!
test15WindowRegisterMultipleMovements
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	self assert: rover window position equals: (0@1) asString .
	! !

!methodRemoval: MarsRoverWindowTest #test15LogRegisterMultipleMovements stamp: 'eaam 10/29/2023 01:43:25'!
test15LogRegisterMultipleMovements
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	self assert: rover window position equals: (0@1) asString .
	!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 01:43:32'!
test16WindowRegistersMovementAndRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	self assert: rover window direction equals: 'East'.
	self assert: rover window position equals: (0@1) asString .
! !

!methodRemoval: MarsRoverWindowTest #test16LogRegistersMovementAndRotation stamp: 'eaam 10/29/2023 01:43:32'!
test16LogRegistersMovementAndRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	self assert: rover window direction equals: 'East'.
	self assert: rover window position equals: (0@1) asString .
!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test10WindowRegisterWestwardRotation stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test11WindowRegisterNorthwardRotation stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test12WindowRegisterSouthwardRotation stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test13WindowRegisterEastwardRotation stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleRotations stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegisterMultipleMovements stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!

!testRun: #MarsRoverWindowTest #test16WindowRegistersMovementAndRotation stamp: 'eaam 10/29/2023 01:43:45'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:44:36' prior: 50695734!
test02ACanAttachAObserver
	| observer aWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	self assert: observer variableValue equals: 1.! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:49:15'!
attachedComplements
	^observer .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:49:28' prior: 50696047!
test02ACanAttachAObserver
	| observer aWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	self assert: observer attachedComplements equals: aWindow.! !

!testRun: #ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 01:49:29'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 01:49:29'!
PASSED!

!testRun: #ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 01:49:29'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:50:37'!
test02ACanAttachMultipleObservers
	| observer aWindow aLog|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	self assert: observer attachedComplements equals: aWindow.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:51:47' prior: 50696079!
test02ACanAttachMultipleObservers
	| observer aWindow aLog attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow. attachedCollection add: aLog.
	self assert: observer attachedComplements equals: aWindow.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:51:51' prior: 50696091!
test02ACanAttachMultipleObservers
	| observer aWindow aLog attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow. attachedCollection add: aLog.
	self assert: observer attachedComplements equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test02ACanAttachMultipleObservers stamp: 'eaam 10/29/2023 01:51:52'!
FAILURE!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:52:10' prior: 50696060!
test02ACanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	attachedCollection add: aWindow .
	self assert: observer attachedComplements equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:52:23'!
test03ACanAttachMultipleObservers
	| observer aWindow aLog attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow. attachedCollection add: aLog.
	self assert: observer attachedComplements equals: attachedCollection.! !

!methodRemoval: ObserverProxyTest #test02ACanAttachMultipleObservers stamp: 'eaam 10/29/2023 01:52:23'!
test02ACanAttachMultipleObservers
	| observer aWindow aLog attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow. attachedCollection add: aLog.
	self assert: observer attachedComplements equals: attachedCollection.!
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:53:21' prior: 50695714!
attach: aComplementToAttach
	^observer := aComplementToAttach.! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:53:27' prior: 50696170!
attach: aComplementToAttach
	^observer add: aComplementToAttach.! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:54:02' overrides: 16920235!
initialize
	.! !
!ObserverProxy methodsFor: 'initialization' stamp: 'eaam 10/29/2023 01:54:26' prior: 50695638!
initializeWith: aVariableToStore 
	variable := aVariableToStore.
	observer := OrderedCollection new.! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 01:54:44'!
asdasdasdinitialize
	.! !

!methodRemoval: ObserverProxy #initialize stamp: 'eaam 10/29/2023 01:54:44'!
initialize
	.!

!methodRemoval: ObserverProxy #asdasdasdinitialize stamp: 'eaam 10/29/2023 01:54:50'!
asdasdasdinitialize
	.!

!testRun: #ObserverProxyTest #test03ACanAttachMultipleObservers stamp: 'eaam 10/29/2023 01:55:14'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 01:55:14'!
PASSED!

!testRun: #ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 01:55:14'!
ERROR!

!testRun: #ObserverProxyTest #test03ACanAttachMultipleObservers stamp: 'eaam 10/29/2023 01:55:14'!
PASSED!

!testRun: #ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 01:55:14'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:55:33' prior: 50696127!
test02ACanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow .
	self assert: observer attachedComplements equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 01:55:35'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 01:55:35'!
PASSED!

!testRun: #ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 01:55:35'!
PASSED!

!testRun: #ObserverProxyTest #test03ACanAttachMultipleObservers stamp: 'eaam 10/29/2023 01:55:35'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:56:26'!
test03ACanActualizeAObservers
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	attachedCollection := OrderedCollection new.
	
	self assert: observer attachedComplements equals: aWindow .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:56:37' prior: 50696244!
test03ACanActualizeAObservers
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	
	self assert: observer attachedComplements equals: aWindow .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 01:57:53'!
test04ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	
	self assert: observer attachedComplements equals: aWindow .! !

!methodRemoval: ObserverProxyTest #test03ACanActualizeAObservers stamp: 'eaam 10/29/2023 01:57:53'!
test03ACanActualizeAObservers
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	
	self assert: observer attachedComplements equals: aWindow .!

!classDefinition: #RoverWindow category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 01:59:21'!
Object subclass: #RoverWindow
	instanceVariableNames: 'positionWindow direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:05:04' prior: 50696266!
test04ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: observer attachedComplements equals: aWindow .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:05:26' prior: 50696294!
test04ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: observer attachedComplements equals: aWindow .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:06:20' prior: 50696305!
test04ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: observer attachedComplements equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:06:28' prior: 50696317!
test04ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: observer equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:06:40' prior: 50696328!
test04ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:06:52'!
test05ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: aWindow position equals: 0@1 .! !

!methodRemoval: ObserverProxyTest #test04ACanActualizeAObserver stamp: 'eaam 10/29/2023 02:06:53'!
test04ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: aWindow position equals: 0@1 .!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:07:41'!
test04AProxyCanActualizeItsVariable
	| observer |
	observer := ObserverProxy with: 1.
	observer actualize: 0@1.
	self assert: observer equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:07:47' prior: 50696371!
test04AProxyCanActualizeItsVariable
	| observer |
	observer := ObserverProxy with: 1.
	observer actualize: 0@1.
	self assert: observer variableValue equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:07:56'!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow. attachedCollection add: aLog.
	self assert: observer attachedComplements equals: attachedCollection.! !

!methodRemoval: ObserverProxyTest #test03ACanAttachMultipleObservers stamp: 'eaam 10/29/2023 02:07:56'!
test03ACanAttachMultipleObservers
	| observer aWindow aLog attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow. attachedCollection add: aLog.
	self assert: observer attachedComplements equals: attachedCollection.!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:08:02'!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow .
	self assert: observer attachedComplements equals: attachedCollection.! !

!methodRemoval: ObserverProxyTest #test02ACanAttachAObserver stamp: 'eaam 10/29/2023 02:08:02'!
test02ACanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow .
	self assert: observer attachedComplements equals: attachedCollection.!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:09:05' prior: 50696379!
test04AProxyCanActualizeItsVariable
	| observer |
	observer := ObserverProxy with: 0@0.
	observer actualize: 0@1.
	self assert: observer variableValue equals: 0@1 .! !

!testRun: #ObserverProxyTest #test04AProxyCanActualizeItsVariable stamp: 'eaam 10/29/2023 02:09:06'!
ERROR!

!testRun: #ObserverProxyTest #test05ACanActualizeAObserver stamp: 'eaam 10/29/2023 02:09:25'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 02:09:48' prior: 50695719!
actualize: aVariable
	variable := aVariable .
	^observer first actualize: variable 
	! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 02:09:54' prior: 50696460!
actualize: aVariable
	variable := aVariable .
	observer first actualize: variable 
	! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 02:10:19' prior: 50696466!
actualize: aVariable
	variable := aVariable .
	(observer notEmpty ) ifTrue:
	[observer first actualize: variable] 
	! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 02:10:20'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'eaam 10/29/2023 02:10:20'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'eaam 10/29/2023 02:10:20'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanActualizeItsVariable stamp: 'eaam 10/29/2023 02:10:20'!
PASSED!

!testRun: #ObserverProxyTest #test05ACanActualizeAObserver stamp: 'eaam 10/29/2023 02:10:20'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:10:39'!
test05AProxyCanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: aWindow position equals: 0@1 .! !

!methodRemoval: ObserverProxyTest #test05ACanActualizeAObserver stamp: 'eaam 10/29/2023 02:10:39'!
test05ACanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	observer attach: aWindow.
	observer actualize: 0@1.
	self assert: aWindow position equals: 0@1 .!
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:19:46'!
test06AProxyCanActualizeMultipleObservers
	| observer aWindow anotherWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	anotherWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	anotherWindow actualize: 10@10.
	observer attach: aWindow.
	observer attach: anotherWindow.
	observer actualize: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'eaam 10/29/2023 02:20:02' prior: 50696517!
test06AProxyCanActualizeMultipleObservers
	| observer aWindow anotherWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	anotherWindow := RoverWindowPosition new.
	aWindow actualize: 0@0.
	anotherWindow actualize: 10@10.
	observer attach: aWindow.
	observer attach: anotherWindow.
	observer actualize: 0@1.
	self assert: aWindow position equals: 0@1 .
	self assert: anotherWindow position equals: 0@1 .! !
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 02:20:36' prior: 50696472!
actualize: aVariable
	variable := aVariable .
	observer do:[:aConcreteObserver | aConcreteObserver actualize: variable]
	! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 02:20:37'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'eaam 10/29/2023 02:20:37'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'eaam 10/29/2023 02:20:37'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanActualizeItsVariable stamp: 'eaam 10/29/2023 02:20:37'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanActualizeAObserver stamp: 'eaam 10/29/2023 02:20:37'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanActualizeMultipleObservers stamp: 'eaam 10/29/2023 02:20:37'!
PASSED!
!ObserverProxy methodsFor: 'observer' stamp: 'eaam 10/29/2023 02:20:45' prior: 50696549!
actualize: aVariable
	variable := aVariable .
	observer do: [:aConcreteObserver | aConcreteObserver actualize: variable]
	! !

!classDefinition: #ObserverProxy category: 'MarsRover-WithHeading' stamp: 'eaam 10/29/2023 02:20:53'!
Object subclass: #ObserverProxy
	instanceVariableNames: 'variable attachedObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserverProxy methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 02:20:53' prior: 50696577!
actualize: aVariable
	variable := aVariable .
	attachedObservers do: [:aConcreteObserver | aConcreteObserver actualize: variable]
	! !
!ObserverProxy methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 02:20:53' prior: 50696175!
attach: aComplementToAttach
	^attachedObservers add: aComplementToAttach.! !
!ObserverProxy methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 02:20:53' prior: 50696056!
attachedComplements
	^attachedObservers .! !
!ObserverProxy methodsFor: 'as yet unclassified' stamp: 'eaam 10/29/2023 02:20:53' prior: 50696185!
initializeWith: aVariableToStore 
	variable := aVariableToStore.
	attachedObservers := OrderedCollection new.! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'eaam 10/29/2023 02:20:56'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'eaam 10/29/2023 02:20:56'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'eaam 10/29/2023 02:20:56'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanActualizeItsVariable stamp: 'eaam 10/29/2023 02:20:56'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanActualizeAObserver stamp: 'eaam 10/29/2023 02:20:56'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanActualizeMultipleObservers stamp: 'eaam 10/29/2023 02:20:56'!
PASSED!

----QUIT----(29 October 2023 02:21:07) CuisUniversity-5981.image priorSource: 11644049!

----STARTUP---- (30 October 2023 01:18:23) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Documents\SmalltalkVM\windows64\MarsRover-WithHeading.st----!

!classRemoval: #RoverWindowPosition stamp: 'Sof D 10/30/2023 01:18:40'!
Object subclass: #RoverWindowPosition
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #RoverWindow stamp: 'Sof D 10/30/2023 01:18:40'!
Object subclass: #RoverWindow
	instanceVariableNames: 'positionWindow direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #ObserverProxy stamp: 'Sof D 10/30/2023 01:18:40'!
Object subclass: #ObserverProxy
	instanceVariableNames: 'variable attachedObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLog stamp: 'Sof D 10/30/2023 01:18:40'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'Sof D 10/30/2023 01:18:40'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'Sof D 10/30/2023 01:18:40'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'Sof D 10/30/2023 01:18:40'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'Sof D 10/30/2023 01:18:40'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'Sof D 10/30/2023 01:18:40'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'Sof D 10/30/2023 01:18:41'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head generalLog directionLog positionLog window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #ObserverProxyTest stamp: 'Sof D 10/30/2023 01:18:41'!
TestCase subclass: #ObserverProxyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverWindowTest stamp: 'Sof D 10/30/2023 01:18:41'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'Sof D 10/30/2023 01:18:41'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverLogTest stamp: 'Sof D 10/30/2023 01:18:41'!
TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of C:\Users\sofia\Documents\SmalltalkVM\windows64\MarsRover-WithHeading.st----!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:27:48'!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [:aConcreteObserver | aConcreteObserver actualize: variable]
	! !
!RoverWindowPosition methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:27:48'!
updateVariable: aNewPosition
	position := aNewPosition ! !
!ObserverProxyTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:27:48' prior: 50698475!
test06AProxyCanActualizeMultipleObservers
	| observer aWindow anotherWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	anotherWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	anotherWindow updateVariable: 10@10.
	observer attach: aWindow.
	observer attach: anotherWindow.
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .
	self assert: anotherWindow position equals: 0@1 .! !
!ObserverProxy methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:27:48' prior: 50698939!
actualize: aVariable
	variable := aVariable .
	attachedObservers do: [:aConcreteObserver | aConcreteObserver updateVariable: variable]
	! !
!ObserverProxyTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:27:48' prior: 50698464!
test05AProxyCanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow.
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:27:48' prior: 50698991!
actualizePosition: aPosition
	positionWindow updateVariable: aPosition .! !
!ObserverProxyTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:27:48' prior: 50698456!
test04AProxyCanActualizeItsVariable
	| observer |
	observer := ObserverProxy with: 0@0.
	observer updateVariable: 0@1.
	self assert: observer variableValue equals: 0@1 .! !
!ObserverProxy methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:27:48' prior: 50699039!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [:aConcreteObserver | aConcreteObserver updateVariable: variable]
	! !

!methodRemoval: ObserverProxy #actualize: stamp: 'Sof D 10/30/2023 01:27:48'!
actualize: aVariable
	variable := aVariable .
	attachedObservers do: [:aConcreteObserver | aConcreteObserver updateVariable: variable]
	!

!methodRemoval: RoverWindowPosition #actualize: stamp: 'Sof D 10/30/2023 01:27:48'!
actualize: aNewPosition
	position := aNewPosition !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:27:56'!
test04AProxyCanUpdateItsVariable
	| observer |
	observer := ObserverProxy with: 0@0.
	observer updateVariable: 0@1.
	self assert: observer variableValue equals: 0@1 .! !

!methodRemoval: ObserverProxyTest #test04AProxyCanActualizeItsVariable stamp: 'Sof D 10/30/2023 01:27:56'!
test04AProxyCanActualizeItsVariable
	| observer |
	observer := ObserverProxy with: 0@0.
	observer updateVariable: 0@1.
	self assert: observer variableValue equals: 0@1 .!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:28:05'!
test05AProxyCanUpdateAnObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow.
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !

!methodRemoval: ObserverProxyTest #test05AProxyCanActualizeAObserver stamp: 'Sof D 10/30/2023 01:28:05'!
test05AProxyCanActualizeAObserver
	| observer aWindow |
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow.
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:28:12'!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	anotherWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	anotherWindow updateVariable: 10@10.
	observer attach: aWindow.
	observer attach: anotherWindow.
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .
	self assert: anotherWindow position equals: 0@1 .! !

!methodRemoval: ObserverProxyTest #test06AProxyCanActualizeMultipleObservers stamp: 'Sof D 10/30/2023 01:28:12'!
test06AProxyCanActualizeMultipleObservers
	| observer aWindow anotherWindow|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	anotherWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	anotherWindow updateVariable: 10@10.
	observer attach: aWindow.
	observer attach: anotherWindow.
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .
	self assert: anotherWindow position equals: 0@1 .!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:23'!
updateDirection: aDirection
	direction := aDirection .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:23' prior: 50698536!
headNorth
	
	head := MarsRoverHeadingNorth for: self .
	
	generalLog registerToLog: 'North'. 	directionLog registerToLog: 'North'.
	window updateDirection: 'North'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:23' prior: 50698515!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.
	
	window := RoverWindow new.
	window actualizePosition: position asString.
	window updateDirection: head name.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:24' prior: 50698544!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	
	generalLog registerToLog: 'South'. 	directionLog registerToLog: 'South'.
	window updateDirection: 'South'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:24' prior: 50698528!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	generalLog registerToLog: 'East'. directionLog registerToLog: 'East'.
	window updateDirection: 'East'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:24' prior: 50698552!
headWest
	
	head := MarsRoverHeadingWest for: self .
	
	generalLog registerToLog: 'West'. 	directionLog registerToLog: 'West'.
	window updateDirection: 'West'.! !

!methodRemoval: RoverWindow #actualizeDirection: stamp: 'Sof D 10/30/2023 01:28:24'!
actualizeDirection: aDirection
	direction := aDirection .!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:31'!
updatePosition: aPosition
	positionWindow updateVariable: aPosition .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:32' prior: 50698625!
moveWest
	
	position := position + (-1@0).
	
	generalLog registerToLog: (position asString).
	positionLog registerToLog: (position asString).
	window updatePosition: (position asString).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:32' prior: 50698594!
moveEast
	
	position := position + (1@0).
	
	generalLog registerToLog: (position asString). 
	positionLog registerToLog: (position asString).
	window updatePosition: (position asString).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:32' prior: 50698607!
moveNorth
	
	position := position + (0@1).
	
	generalLog registerToLog: (position asString ). 
	positionLog registerToLog: (position asString ).
	window updatePosition: (position asString).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:32' prior: 50699213!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	generalLog := MarsRoverLog new.
	
	directionLog := MarsRoverLog new.
	
	positionLog := MarsRoverLog new.
	
	window := RoverWindow new.
	window updatePosition: position asString.
	window updateDirection: head name.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 01:28:32' prior: 50698616!
moveSouth
	
	position := position + (0@-1).
	
	generalLog registerToLog: (position asString).
	positionLog registerToLog: (position asString).
	window updatePosition: (position asString).! !

!methodRemoval: RoverWindow #actualizePosition: stamp: 'Sof D 10/30/2023 01:28:32'!
actualizePosition: aPosition
	positionWindow updateVariable: aPosition .!
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 01:29:19' prior: 50699294!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	
	
	window := RoverWindow new.
	window updatePosition: position asString.
	window updateDirection: head name.! !
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:31:31'!
attach: aComplementToAttach onUpdateDo: aClosureWithActionToDoOnVariableUpdate 
	^attachedObservers add: aComplementToAttach.! !

!methodRemoval: ObserverProxy #attach: stamp: 'Sof D 10/30/2023 01:31:31'!
attach: aComplementToAttach
	^attachedObservers add: aComplementToAttach.!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:31:46' prior: 50699332!
attach: aComplementToAttach onUpdateDo: aClosureWithActionToDoOnVariableUpdate 
	^attachedObservers add: aComplementToAttach@aClosureWithActionToDoOnVariableUpdate .! !
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:32:46' prior: 50699106!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserverClosurePair | anObserverClosurePair second value: anObserverClosurePair first ]
	! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:33:17' prior: 50698427!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow onUpdateDo: [].
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow .
	self assert: observer attachedComplements equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:33:24' prior: 50699362!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow onUpdateDo: [].
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow@[] .
	self assert: observer attachedComplements equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:33:26'!
ERROR!

----End fileIn of C:\Users\sofia\Documents\SmalltalkVM\windows64\Packages\TerseGuide.pck.st----!
!ObserverProxy methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 01:40:15' prior: 50698933!
initializeWith: aVariableToStore 
	variable := aVariableToStore.
	attachedObservers := Dictionary  new.! !
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:40:26' prior: 50699344!
attach: aComplementToAttach onUpdateDo: aClosureWithActionToDoOnVariableUpdate 
	^attachedObservers at: aComplementToAttach put: aClosureWithActionToDoOnVariableUpdate .! !
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:40:54' prior: 50699353!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | aClosure value: anObserver ]
	! !

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:41:01'!
ERROR!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:41:01'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:41:32' prior: 50699376!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow onUpdateDo: [].
	attachedCollection := Dictionary new.
	attachedCollection at: 	aWindow put: [].
	self assert: observer attachedComplements equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:41:32'!
FAILURE!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:42:21'!
FAILURE!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:42:21'!
FAILURE!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:43:06' prior: 50702344!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection|
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow onUpdateDo: [].
	attachedCollection := Dictionary new.
	attachedCollection at: 	aWindow put: [].
	self assert: (observer attachedComplements) equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:43:08'!
FAILURE!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:43:31' prior: 50702368!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection aClosure |
	aClosure := [].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow onUpdateDo: [].
	attachedCollection := Dictionary new.
	attachedCollection at: 	aWindow put: [].
	self assert: (observer attachedComplements) equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:43:41' prior: 50702385!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection aClosure |
	aClosure := [].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	observer attach: aWindow onUpdateDo: aClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: 	aWindow put: aClosure .
	self assert: (observer attachedComplements) equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:43:42'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 01:43:42'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:43:42'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 01:43:42'!
ERROR!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 01:43:42'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:43:42'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 01:43:42'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:44:19' prior: 50698440!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection aClosure anotherClosure |
	aClosure := []. anotherClosure := [''].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow.
	observer attach: aLog.
	attachedCollection := OrderedCollection new.
	attachedCollection add: aWindow. attachedCollection add: aLog.
	self assert: observer attachedComplements equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:45:13' prior: 50702439!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection aClosure anotherClosure |
	aClosure := []. anotherClosure := [''].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aLog := MarsRoverLog new.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: aLog onUpdateDo: anotherClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: aWindow put: aClosure ; at: aLog put: anotherClosure .
	self assert: observer attachedComplements equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 01:45:14'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 01:45:14'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:45:14'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 01:45:14'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 01:45:14'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:45:14'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 01:45:14'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:45:37' prior: 50699141!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow.
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:45:52' prior: 50702501!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:46:23' prior: 50702513!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 01:46:54' prior: 50702526!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updateVariable: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:47:13' prior: 50702330!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | aClosure value: anObserver, aVariable ]
	! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:47:20'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:47:20'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:49:02' prior: 50702556!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | aClosure value: anObserver value: aVariable ]
	! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:49:08'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:49:08'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:53:05' prior: 50702570!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | aClosure value: anObserver value: variable ]
	! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 01:53:06'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:53:06'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 01:53:06'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 01:53:06'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:53:06'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 01:53:06'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:53:08'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:54:16' prior: 50702585!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | (aClosure value: anObserver value: variable) ]
	! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 01:54:18'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:54:18'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 01:54:18'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 01:54:18'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:54:18'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 01:54:18'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:55:18'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:55:57'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:56:08' prior: 50702617!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: aClosure : anObserver | (aClosure value: anObserver value: variable) ]
	! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:56:11'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 01:57:29' prior: 50702652!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | (aClosure value: anObserver value: variable) ]
	! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:57:32'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:57:32'!
ERROR!

closure value: 1 value: 2!

closure value: 1 value: 2!

[ : a : b | a+b ]  value: 1 value: 2!

----QUIT----(30 October 2023 01:59:17) CuisUniversity-5981.image priorSource: 11582566!

----STARTUP---- (30 October 2023 01:59:28) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 01:59:31'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 01:59:31'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 01:59:31'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 01:59:31'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 01:59:31'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 01:59:31'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:00:26' prior: 50702541!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow | | aPosition | aMarsRoverWindow updateVariable: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:00:29'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:00:38'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 02:00:54' prior: 50702663!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | (aClosure value: anObserver) ]
	! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:00:57'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:00:57'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 02:01:12' prior: 50702730!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: anObserver : aClosure | (aClosure value: anObserver value: aVariable) ]
	! !

self attachedComplements !

self attachedComplements first!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:03:33'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:03:33'!
ERROR!
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 02:03:41' prior: 50702744!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers keysAndValuesDo: [: anObserver : aClosure | (aClosure value: anObserver value: aVariable) ]
	! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:03:44'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:03:44'!
ERROR!

self attachedComplements values!

self attachedComplements values first!

self attachedComplements keys first!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:04:36' prior: 50702708!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updateVariable: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:04:37'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:04:37'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:04:37'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:04:37'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:04:37'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:04:37'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:04:37'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:04:37'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:05:11'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:05:11'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:05:11'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:05:11'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:05:11'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:05:11'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:05:11'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:05:11'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:06:03' prior: 50699164!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updateVariable: aPosition ].
	anotherClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updateVariable: aPosition ].

	observer := ObserverProxy with: 1.
	aWindow := RoverWindowPosition new.
	anotherWindow := RoverWindowPosition new.
	aWindow updateVariable: 0@0.
	anotherWindow updateVariable: 10@10.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: anotherWindow onUpdateDo: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .
	self assert: anotherWindow position equals: 0@1 .! !

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:06:09'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:06:09'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:06:09'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:06:09'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:06:09'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:06:09'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:06:09'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/30/2023 02:08:28' prior: 50699236!
headEast
	
	head updateVariable: ( MarsRoverHeadingEast for: self).
	! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/30/2023 02:08:50' prior: 50699204!
headNorth
	
	head updateVariable: (MarsRoverHeadingNorth for: self ).
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/30/2023 02:09:12' prior: 50699227!
headSouth
	
	head updateVariable: (MarsRoverHeadingSouth for: self).
	! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/30/2023 02:09:24' prior: 50699245!
headWest
	
	head updateVariable: (MarsRoverHeadingWest for: self).
	! !
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 02:10:23' prior: 50699322!
initializeAt: aPosition heading: aHeadingType

	position := ObserverProxy new for: aPosition.
	head := aHeadingType for: self .
	
	
	window := RoverWindow new.
	window updatePosition: position asString.
	window updateDirection: head name.! !
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 02:10:40' prior: 50702923!
initializeAt: aPosition heading: aHeadingType

	position := ObserverProxy with: aPosition.
	head := aHeadingType for: self .
	
	
	window := RoverWindow new.
	window updatePosition: position asString.
	window updateDirection: head name.! !
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 02:11:01' prior: 50702934!
initializeAt: aPosition heading: aHeadingType

	position := ObserverProxy with: aPosition.
	head := ObserverProxy with: (aHeadingType for: self) .
	
	
	window := RoverWindow new.
	window updatePosition: position asString.
	window updateDirection: head name.! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/30/2023 02:13:10' prior: 50699274!
moveEast
	
	position updateVariable: (position value+ (1@0)).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/30/2023 02:13:25' prior: 50702956!
moveEast
	
	position updateVariable: (position variableValue + (1@0)).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/30/2023 02:13:44' prior: 50699284!
moveNorth
	
	position updateVariable: (position variableValue + (0@1))
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/30/2023 02:14:00' prior: 50699308!
moveSouth
	
	position updateVariable: (position variableValue + (0@-1))
	! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/30/2023 02:14:15' prior: 50699264!
moveWest
	
	position updateVariable: (position variableValue + (-1@0)).
	! !

!methodRemoval: MarsRover #directionLog stamp: 'Sof D 10/30/2023 02:14:22'!
directionLog
	^directionLog contents!
!MarsRover methodsFor: 'testing' stamp: 'Sof D 10/30/2023 02:14:44' prior: 50698568!
isAt: aPosition heading: aHeadingType

	^position variableValue = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'testing' stamp: 'Sof D 10/30/2023 02:14:48' prior: 50702988!
isAt: aPosition heading: aHeadingType

	^position variableValue = aPosition and: [ head variableValue isHeading: aHeadingType ]! !

!methodRemoval: MarsRover #window stamp: 'Sof D 10/30/2023 02:14:55'!
window
	^window!
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/30/2023 02:15:10' prior: 50698564!
rotateRight
	
	head variableValue rotateRight! !
!MarsRover methodsFor: 'heading' stamp: 'Sof D 10/30/2023 02:15:19' prior: 50698560!
rotateLeft
	
	head variableValue rotateLeft! !

!methodRemoval: MarsRover #positionLog stamp: 'Sof D 10/30/2023 02:15:37'!
positionLog
	^positionLog contents!
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/30/2023 02:15:54' prior: 50698603!
moveForward
	
	head variableValue moveForward! !
!MarsRover methodsFor: 'moving' stamp: 'Sof D 10/30/2023 02:16:00' prior: 50698590!
moveBackward
	
	head variableValue moveBackward! !
!MarsRover methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 02:16:09' prior: 50702945!
initializeAt: aPosition heading: aHeadingType

	position := ObserverProxy with: aPosition.
	head := ObserverProxy with: (aHeadingType for: self) .
	
	! !

!methodRemoval: MarsRover #log stamp: 'Sof D 10/30/2023 02:16:23'!
log
	^generalLog contents !

Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!

!classDefinition: #MarsRover category: 'TheReturnOfMarsRover-Ejercicio' stamp: 'Sof D 10/30/2023 02:16:33'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'Sof D 10/30/2023 02:16:39'!
PASSED!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:18:39' prior: 50699199!
updateDirection: aDirection
	direction := aDirection directionName.! !
!MarsRoverHeading methodsFor: 'nil' stamp: 'Sof D 10/30/2023 02:18:58'!
directionName
	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:21:08' overrides: 16903442!
name
	self subclassResponsibility ! !

!methodRemoval: MarsRoverHeading #directionName stamp: 'Sof D 10/30/2023 02:21:09'!
directionName
	self subclassResponsibility !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:21:39'!
directionName
	self subclassResponsibility ! !
!MarsRoverHeadingEast methodsFor: 'category-name' stamp: 'Sof D 10/30/2023 02:21:39' overrides: 50703127!
directionName
	^'East'! !
!MarsRoverHeadingNorth methodsFor: 'category-name' stamp: 'Sof D 10/30/2023 02:21:39' overrides: 50703127!
directionName
	^'North'! !
!MarsRoverHeadingSouth methodsFor: 'category-name' stamp: 'Sof D 10/30/2023 02:21:39' overrides: 50703127!
directionName
	^'South'! !
!MarsRoverHeadingWest methodsFor: 'category-name' stamp: 'Sof D 10/30/2023 02:21:40' overrides: 50703127!
directionName
	^'West'! !

!methodRemoval: MarsRoverHeading #name stamp: 'Sof D 10/30/2023 02:21:40'!
name
	self subclassResponsibility !

!methodRemoval: MarsRoverHeadingEast #name stamp: 'Sof D 10/30/2023 02:21:40'!
name
	^'East'!

!methodRemoval: MarsRoverHeadingNorth #name stamp: 'Sof D 10/30/2023 02:21:40'!
name
	^'North'!

!methodRemoval: MarsRoverHeadingSouth #name stamp: 'Sof D 10/30/2023 02:21:40'!
name
	^'South'!

!methodRemoval: MarsRoverHeadingWest #name stamp: 'Sof D 10/30/2023 02:21:40'!
name
	^'West'!

Object subclass: #RoverWindow
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!

!classDefinition: #RoverWindow category: 'TheReturnOfMarsRover-Ejercicio' stamp: 'Sof D 10/30/2023 02:22:08'!
Object subclass: #RoverWindow
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:22:18' prior: 50699258!
updatePosition: aPosition
	position := aPosition asString .! !

!methodRemoval: RoverWindow #initialize stamp: 'Sof D 10/30/2023 02:22:24'!
initialize
	positionWindow := RoverWindowPosition new.!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:22:50'!
positionAndDirection
	^position, ' ', direction! !
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:22:55' prior: 50703190!
positionAndDirection
	^position, ', ', direction! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:23:12' prior: 50702400!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection aClosure |
	aClosure := [].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	observer attach: aWindow onUpdateDo: aClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: 	aWindow put: aClosure .
	self assert: (observer attachedComplements) equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:23:18' prior: 50702457!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection aClosure anotherClosure |
	aClosure := []. anotherClosure := [''].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	aLog := MarsRoverLog new.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: aLog onUpdateDo: anotherClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: aWindow put: aClosure ; at: aLog put: anotherClosure .
	self assert: observer attachedComplements equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:23:31' prior: 50702780!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	aWindow updateVariable: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:23:47' prior: 50702850!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	anotherClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].

	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	anotherWindow := RoverWindow new.
	aWindow updateVariable: 0@0.
	anotherWindow updateVariable: 10@10.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: anotherWindow onUpdateDo: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .
	self assert: anotherWindow position equals: 0@1 .! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:23:49'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:23:49'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:23:49'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:23:49'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:23:49'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:23:49'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:23:51'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:24:12' prior: 50703235!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	aWindow updatePosition: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updatePosition: 0@1.
	self assert: aWindow position equals: 0@1 .! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:13'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:13'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:24:19' prior: 50703299!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	aWindow updatePosition: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 .! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:20'!
ERROR!
!RoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:24:28' prior: 50699005!
position
	^position.! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:31'!
FAILURE!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:24:39' prior: 50703321!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	aWindow updatePosition: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: 0@1 asString .! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:40'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:24:46' prior: 50703347!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	aWindow updatePosition: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:47'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:24:47'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:24:47'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:24:47'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:24:47'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:47'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:24:47'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:24:47'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:24:58'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:25:14' prior: 50703250!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	anotherClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].

	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	anotherWindow := RoverWindow new.
	aWindow updatePosition: 0@0.
	anotherWindow updateVariable: 10@10.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: anotherWindow onUpdateDo: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .
	self assert: anotherWindow position equals: (0@1) asString .! !

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:25:14'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:25:27' prior: 50703412!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	anotherClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].

	observer := ObserverProxy with: 1.
	aWindow := RoverWindow new.
	anotherWindow := RoverWindow new.
	aWindow updatePosition: 0@0.
	anotherWindow updatePosition: 10@10.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: anotherWindow onUpdateDo: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .
	self assert: anotherWindow position equals: (0@1) asString .! !

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:25:27'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:25:27'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:25:27'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:25:27'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:25:27'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:25:27'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:25:27'!
PASSED!
!RoverWindow class methodsFor: 'no messages' stamp: 'Sof D 10/30/2023 02:27:12'!
for: aRoverToObserve
	^self new initializeWith: aRoverToObserve ! !
!RoverWindow methodsFor: 'nil' stamp: 'Sof D 10/30/2023 02:28:40'!
initializeWith: aRoverToObserve

	aRoverToObserve position attach: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToObserve direction attach: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:29:07'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:29:07'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:29:07'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:29:07'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:29:07'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:29:07'!
PASSED!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:29:42' prior: 50698254!
test01WindowStartsOutShowingRoverPositionAndDirectionNorth

	| rover  window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	window := RoverWindow for: rover.
	
	self assert: window position equals: (0@0) asString.
	self assert: window direction equals: 'North'.
	! !

!classRenamed: #RoverWindow as: #MarsRoverWindow stamp: 'Sof D 10/30/2023 02:29:50'!
Smalltalk renameClassNamed: #RoverWindow as: #MarsRoverWindow!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:29:50' prior: 50703529!
test01WindowStartsOutShowingRoverPositionAndDirectionNorth

	| rover  window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	window := MarsRoverWindow for: rover.
	
	self assert: window position equals: (0@0) asString.
	self assert: window direction equals: 'North'.
	! !
!ObserverProxyTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:29:50' prior: 50703215!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection aClosure anotherClosure |
	aClosure := []. anotherClosure := [''].
	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	aLog := MarsRoverLog new.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: aLog onUpdateDo: anotherClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: aWindow put: aClosure ; at: aLog put: anotherClosure .
	self assert: observer attachedComplements equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:29:50' prior: 50703441!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	anotherClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].

	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	anotherWindow := MarsRoverWindow new.
	aWindow updatePosition: 0@0.
	anotherWindow updatePosition: 10@10.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: anotherWindow onUpdateDo: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .
	self assert: anotherWindow position equals: (0@1) asString .! !
!ObserverProxyTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:29:50' prior: 50703366!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	aWindow updatePosition: 0@0.
	observer attach: aWindow onUpdateDo: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .! !
!ObserverProxyTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:29:50' prior: 50703200!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection aClosure |
	aClosure := [].
	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	observer attach: aWindow onUpdateDo: aClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: 	aWindow put: aClosure .
	self assert: (observer attachedComplements) equals: attachedCollection.! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:30:55' prior: 50703496!
initializeWith: aRoverToObserve

	aRoverToObserve position attach: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToObserve direction attach: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	position := aRoverToObserve position variableValue asString.
	direction := aRoverToObserve direction variableValue directionName.! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:31:31' prior: 50703639!
initializeWith: aRoverToObserve

	aRoverToObserve position attach: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToObserve direction attach: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:31:54' prior: 50703656!
initializeWith: aRoverToObserve

	aRoverToObserve attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToObserve attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	! !
!MarsRover methodsFor: 'nil' stamp: 'Sof D 10/30/2023 02:32:35'!
attachToPosition: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate
	position attach: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 02:32:54'!
attachToDirection: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate
	head attach: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate .! !
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 02:34:29' prior: 50702321!
attach: aComplementToAttach onUpdateDo: aClosureWithActionToDoOnVariableUpdate 
	attachedObservers at: aComplementToAttach put: aClosureWithActionToDoOnVariableUpdate .
	aClosureWithActionToDoOnVariableUpdate value: aComplementToAttach value: variable .! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:34:41'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:34:41'!
ERROR!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:34:41'!
ERROR!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:34:41'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:34:41'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:34:41'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:34:44'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:35:02' prior: 50703623!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection aClosure |
	aClosure := [ : test : test2 |].
	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	observer attach: aWindow onUpdateDo: aClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: 	aWindow put: aClosure .
	self assert: (observer attachedComplements) equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:35:20' prior: 50703559!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection aClosure anotherClosure |
	aClosure := [ : test : test2 |]. 	anotherClosure := [ : test : test2 |].

	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	aLog := MarsRoverLog new.
	observer attach: aWindow onUpdateDo: aClosure .
	observer attach: aLog onUpdateDo: anotherClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: aWindow put: aClosure ; at: aLog put: anotherClosure .
	self assert: observer attachedComplements equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 02:35:22'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 02:35:22'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 02:35:22'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 02:35:22'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 02:35:22'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 02:35:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 02:35:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 02:35:30'!
ERROR!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 02:35:30'!
ERROR!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:35:59' prior: 50698265!
test02WindowStartsOutShowingRoverPositionAndDirectionSouth

	| rover window |
	rover := MarsRover at: 0@1heading: MarsRoverHeadingSouth .
	
	window := MarsRoverWindow for: rover.
	
	self assert: window position equals: (0@1) asString.
	self assert: window direction equals: 'South'.
	
	! !

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 02:36:00'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 02:36:00'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 02:36:00'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test10WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test11WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test12WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test13WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test15WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!

!testRun: #MarsRoverWindowTest #test16WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 02:36:00'!
ERROR!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:37:34' prior: 50698276!
test03WindowStartsOutShowingRoverPositionAndDirectionWest

	| rover window |
	rover := MarsRover at: 1@0 heading: MarsRoverHeadingWest .
	
	window := MarsRoverWindow for: rover.
	
	self assert: window position equals: (1@0) asString.
	self assert: window direction equals: 'West'.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:37:48' prior: 50698287!
test04WindowStartsOutShowingRoverPositionAndDirectionEast

	| rover window |
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	
	window := MarsRoverWindow for: rover.
	
	self assert: window position equals: (1@1) asString.
	self assert: window direction equals: 'East'.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:38:05' prior: 50698298!
test05WindowChangesWestwardMovement
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	
	self assert: window position equals: (-1@0) asString.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:38:21' prior: 50703902!
test05WindowChangesWestwardMovement
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	rover process: 'f'.
	
	window := MarsRoverWindow for: rover.

	
	self assert: window position equals: (-1@0) asString.
	! !

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 02:38:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 02:38:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 02:38:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 02:38:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 02:38:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 02:38:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test10WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test11WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test12WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test13WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test15WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!

!testRun: #MarsRoverWindowTest #test16WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 02:38:22'!
ERROR!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:38:34' prior: 50698307!
test06WindowChangesNorthwardMovement
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	window := MarsRoverWindow for: rover.

	
	self assert: window position equals: (0@1) asString.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:39:46' prior: 50698316!
test07WindowChangesEastwardMovement
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	
	window := MarsRoverWindow for: rover.

	
	self assert: window position equals: (1@0) asString.
	! !

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 02:39:48'!
PASSED!

!methodRemoval: MarsRoverWindowTest #test08WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 02:40:03'!
test08WindowChangesEastwardMovement
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	rover process: 'f'.
	
	self assert: rover window position equals: (1@0) asString.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:40:17' prior: 50698334!
test09WindowChangesSouthwardMovement
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	rover process: 'f'.
	
 	window := MarsRoverWindow for: rover.

	
	self assert: window position equals: (0@-1) asString.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:40:27'!
test08WindowChangesSouthwardMovement
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	rover process: 'f'.
	
 	window := MarsRoverWindow for: rover.

	
	self assert: window position equals: (0@-1) asString.
	! !

!methodRemoval: MarsRoverWindowTest #test09WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 02:40:27'!
test09WindowChangesSouthwardMovement
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth .
	rover process: 'f'.
	
 	window := MarsRoverWindow for: rover.

	
	self assert: window position equals: (0@-1) asString.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:40:33'!
test90WindowRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'West'.
	! !

!methodRemoval: MarsRoverWindowTest #test10WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 02:40:33'!
test10WindowRegisterWestwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'West'.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:40:39' prior: 50704052!
test90WindowRegisterWestwardRotation
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	window := MarsRoverWindow for: rover.

	
	self assert: window direction equals: 'West'.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:40:47'!
test09WindowRegisterWestwardRotation
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	window := MarsRoverWindow for: rover.

	
	self assert: window direction equals: 'West'.
	! !

!methodRemoval: MarsRoverWindowTest #test90WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 02:40:47'!
test90WindowRegisterWestwardRotation
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	rover process: 'r'.
	
	window := MarsRoverWindow for: rover.

	
	self assert: window direction equals: 'West'.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:41:04'!
test10WindowRegisterNorthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'North'.
	! !

!methodRemoval: MarsRoverWindowTest #test11WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 02:41:04'!
test11WindowRegisterNorthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'North'.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:41:10' prior: 50704102!
test10WindowRegisterNorthwardRotation
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest.
	rover process: 'r'.
	window := MarsRoverWindow for: rover.

	
	self assert: window direction equals: 'North'.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:41:15'!
test11WindowRegisterSouthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	! !

!methodRemoval: MarsRoverWindowTest #test12WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 02:41:16'!
test12WindowRegisterSouthwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'South'.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:41:21' prior: 50704131!
test11WindowRegisterSouthwardRotation
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	rover process: 'r'.
	window := MarsRoverWindow for: rover.

	
	self assert:  window direction equals: 'South'.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:41:27'!
test12WindowRegisterEastwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'East'.
	! !

!methodRemoval: MarsRoverWindowTest #test13WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 02:41:27'!
test13WindowRegisterEastwardRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	
	self assert: rover window direction equals: 'East'.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:41:36' prior: 50704160!
test12WindowRegisterEastwardRotation
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'r'.
	window := MarsRoverWindow for: rover.

	
	self assert: window direction equals: 'East'.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:42:19'!
test13WindowRegisterMultipleRotations
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'rr'.
	
	self assert: rover window direction equals: 'South'.
	! !

!methodRemoval: MarsRoverWindowTest #test14WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 02:42:19'!
test14WindowRegisterMultipleRotations
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'rr'.
	
	self assert: rover window direction equals: 'South'.
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:42:31' prior: 50704189!
test13WindowRegisterMultipleRotations
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'rr'.
	
	window := MarsRoverWindow for: rover.

	
	self assert: window direction equals: 'South'.
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:42:36'!
test14WindowRegisterMultipleMovements
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	self assert: rover window position equals: (0@1) asString .
	! !

!methodRemoval: MarsRoverWindowTest #test15WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 02:42:36'!
test15WindowRegisterMultipleMovements
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	self assert: rover window position equals: (0@1) asString .
	!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:42:43' prior: 50704218!
test14WindowRegisterMultipleMovements
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fbf'.
	
	window := MarsRoverWindow for: rover.

	
	self assert: window position equals: (0@1) asString .
	! !
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:42:50'!
test15WindowRegistersMovementAndRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	self assert: rover window direction equals: 'East'.
	self assert: rover window position equals: (0@1) asString .
! !

!methodRemoval: MarsRoverWindowTest #test16WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 02:42:50'!
test16WindowRegistersMovementAndRotation
	| rover |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	self assert: rover window direction equals: 'East'.
	self assert: rover window position equals: (0@1) asString .
!
!MarsRoverWindowTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 02:43:00' prior: 50704247!
test15WindowRegistersMovementAndRotation
	| rover window |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.
	window := MarsRoverWindow for: rover.


	self assert: window direction equals: 'East'.
	self assert: window position equals: (0@1) asString .
! !

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 02:43:03'!
PASSED!

----QUIT----(30 October 2023 02:44:46) CuisUniversity-5981.image priorSource: 11872939!

----STARTUP---- (30 October 2023 02:53:20) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!

!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:16:55' prior: 50697924!
test01LogStartsOutEmpty
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	expectedLog := OrderedCollection new.
	log := MarsRoverLog for: rover.
	
	self assert: expectedLog equals: rover log.! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:17:22' prior: 50704345!
test01LogStartsOutEmpty
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	expectedLog := OrderedCollection new.
	log := MarsRoverLog for: rover.
	
	self assert: expectedLog equals: log positionsAndDirections.! !
!MarsRoverLog class methodsFor: 'no messages' stamp: 'Sof D 10/30/2023 14:18:02'!
for: aRoverToLogTheActionsOf
	^self new initializeWith: aRoverToLogTheActionsOf ! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 14:18:28' prior: 50698898!
attachToRover: aRover
	! !

!classRemoval: #RoverWindowPosition stamp: 'Sof D 10/30/2023 14:18:35'!
Object subclass: #RoverWindowPosition
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 14:19:14' prior: 50704373!
attachToRover: aRoverToLogTheActionsOf
	aRoverToLogTheActionsOf attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToLogTheActionsOf attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].! !

!classDefinition: #MarsRoverLog category: 'TheReturnOfMarsRover-Ejercicio' stamp: 'Sof D 10/30/2023 14:19:36'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'positionsAndDirections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 14:19:36' prior: 50698910!
registerToLog: objectToAdd
	positionsAndDirections add: objectToAdd ! !
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 14:19:36' prior: 50698915 overrides: 16920235!
initialize
	positionsAndDirections := OrderedCollection new! !
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 14:19:36' prior: 50698906!
contents
	^positionsAndDirections 
	! !

Object subclass: #MarsRoverLog
	instanceVariableNames: 'positionsAndDirections positions directions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!

!classDefinition: #MarsRoverLog category: 'TheReturnOfMarsRover-Ejercicio' stamp: 'Sof D 10/30/2023 14:19:42'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'positionsAndDirections positions directions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TheReturnOfMarsRover-Ejercicio'!
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 14:20:01'!
positionsAndDirections
	^positionsAndDirections 
	! !

!methodRemoval: MarsRoverLog #contents stamp: 'Sof D 10/30/2023 14:20:01'!
contents
	^positionsAndDirections 
	!
!MarsRover methodsFor: 'nil' stamp: 'Sof D 10/30/2023 14:20:20'!
position
	^position variableValue ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 14:20:30'!
direction
	^head variableValue ! !
!ObserverProxy methodsFor: 'observer' stamp: 'Sof D 10/30/2023 14:21:05' prior: 50703696!
attach: aComplementToAttach onUpdateDo: aClosureWithActionToDoOnVariableUpdate 
	attachedObservers at: aComplementToAttach put: aClosureWithActionToDoOnVariableUpdate .
	! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 14:21:24' prior: 50703669!
initializeWith: aRoverToObserve

	aRoverToObserve attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToObserve attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	position := aRoverToObserve position .
	direction := aRoverToObserve direction .
	! !

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 14:21:27'!
FAILURE!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:21:33'!
FAILURE!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 14:21:53' prior: 50704464!
initializeWith: aRoverToObserve

	aRoverToObserve attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToObserve attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	position := aRoverToObserve position asString.
	direction := aRoverToObserve direction name.
	! !

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 14:21:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 14:21:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 14:21:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 14:21:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 14:21:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 14:21:56'!
FAILURE!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:22:00'!
FAILURE!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:23:54'!
FAILURE!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:23:54'!
FAILURE!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 14:24:26' prior: 50704540!
initializeWith: aRoverToObserve

	aRoverToObserve attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToObserve attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	position := aRoverToObserve position asString.
	direction := aRoverToObserve direction directionName .
	! !

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 14:24:29'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 14:24:33'!
ERROR!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 14:24:33'!
ERROR!
!MarsRoverLog methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 14:25:11'!
initializeWith: aRoverToLogTheActionsOf

	aRoverToLogTheActionsOf attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToLogTheActionsOf attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	positionsAndDirections := OrderedCollection new! !
!MarsRoverLog methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 14:25:48' prior: 50704702!
initializeWith: aRoverToLogTheActionsOf

	aRoverToLogTheActionsOf attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToLogTheActionsOf attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].
	positionsAndDirections := OrderedCollection new.
	positions := OrderedCollection new.
	directions := OrderedCollection new.! !

!methodRemoval: MarsRoverLog #initialize stamp: 'Sof D 10/30/2023 14:25:53'!
initialize
	positionsAndDirections := OrderedCollection new!

!methodRemoval: MarsRoverLog #attachToRover: stamp: 'Sof D 10/30/2023 14:27:24'!
attachToRover: aRoverToLogTheActionsOf
	aRoverToLogTheActionsOf attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver updatePosition: aPosition ].
	aRoverToLogTheActionsOf attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver updateDirection: aDirection ].!

!methodRemoval: MarsRoverLog #registerToLog: stamp: 'Sof D 10/30/2023 14:28:10'!
registerToLog: objectToAdd
	positionsAndDirections add: objectToAdd !
!MarsRoverLog methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 14:28:37' prior: 50704717!
initializeWith: aRoverToLogTheActionsOf

	aRoverToLogTheActionsOf attachToPosition: self onUpdateDo: [ : anObserver : aPosition | anObserver addPositionToLog: aPosition ].
	aRoverToLogTheActionsOf attachToDirection: self onUpdateDo: [ : anObserver : aDirection | anObserver addDirectionToLog: aDirection ].
	positionsAndDirections := OrderedCollection new.
	positions := OrderedCollection new.
	directions := OrderedCollection new.! !
!MarsRoverLog methodsFor: 'updating' stamp: 'Sof D 10/30/2023 14:29:31'!
addPositionToLog: aPositionOfTheRoverToLog
	| position |
	position := aPositionOfTheRoverToLog asString.
	positionsAndDirections add: position .
	positions add: position .! !
!MarsRoverLog methodsFor: 'updating' stamp: 'Sof D 10/30/2023 14:29:52'!
addDirectionToLog: aDirectionOfTheRoverToLog
	| Direction |
	Direction := aDirectionOfTheRoverToLog directionName .
	positionsAndDirections add: Direction .
	positions add: Direction .! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 14:29:59'!
PASSED!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:30:16' prior: 50697933!
test02LogRegisterNorthwardMovement
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@1) asString).
	
	log := MarsRoverLog for: rover.
	
	self assert: expectedLog equals: log positionsAndDirections.! !

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:30:19'!
FAILURE!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:30:19'!
FAILURE!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:30:23'!
FAILURE!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:30:23'!
FAILURE!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 14:31:34'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 14:31:37'!
PASSED!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:31:58' prior: 50704791!
test02LogRegisterNorthwardMovement
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@1) asString).
	
	log := MarsRoverLog for: rover.
	
	self assert: expectedLog equals: log positionsAndDirections.! !

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:32:01'!
FAILURE!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:32:01'!
FAILURE!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:32:16'!
FAILURE!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:32:16'!
FAILURE!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:33:36' prior: 50704877!
test02LogRegisterNorthwardMovement
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	log := MarsRoverLog for: rover.
	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@1) asString).
	
	
	self assert: expectedLog equals: log positionsAndDirections.! !

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:33:37'!
PASSED!

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 14:33:37'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:33:37'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'Sof D 10/30/2023 14:33:37'!
ERROR!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:33:54' prior: 50697944!
test03LogRegisterEastwardMovement
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast .
	log := MarsRoverLog for: rover.

	rover process: 'f'.
	expectedLog := OrderedCollection with: ((1@0) asString).
	
	self assert: expectedLog equals: log positionsAndDirections .! !

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/30/2023 14:33:57'!
PASSED!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:34:06' prior: 50697954!
test04LogRegisterWestwardMovement
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingWest .
	log := MarsRoverLog for: rover.

	rover process: 'f'.
	expectedLog := OrderedCollection with: ((-1@0) asString).
	
	self assert: expectedLog equals: log positionsAndDirections .! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:34:16' prior: 50697965!
test05LogRegisterSouthwardMovement
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	log := MarsRoverLog for: rover.

	rover process: 'f'.
	expectedLog := OrderedCollection with: ((0@-1) asString).
	
	self assert: expectedLog equals:  log positionsAndDirections .! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:34:26' prior: 50697976!
test06LogRegisterWestwardRotation
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	log := MarsRoverLog for: rover.

	rover process: 'r'.
	expectedLog := OrderedCollection with: ('West').
	
	self assert: expectedLog equals: log positionsAndDirections .! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:34:38' prior: 50697986!
test07LogRegisterEastwardRotation
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingSouth.
	log := MarsRoverLog for: rover.

	rover process: 'l'.
	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: log positionsAndDirections .! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:34:53' prior: 50697996!
test08LogRegisterNorthwardRotation
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	log := MarsRoverLog for: rover.

	rover process: 'l'.
	expectedLog := OrderedCollection with: ('North').
	
	self assert: expectedLog equals: log positionsAndDirections .! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:35:12' prior: 50698006!
test09LogRegisterSouthwardRotation
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	log := MarsRoverLog for: rover.

	rover process: 'r'.
	expectedLog := OrderedCollection with: ('South').
	
	self assert: expectedLog equals: log positionsAndDirections .! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 14:35:19'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/30/2023 14:35:19'!
ERROR!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/30/2023 14:35:19'!
ERROR!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 14:35:19'!
ERROR!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/30/2023 14:35:19'!
ERROR!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'Sof D 10/30/2023 14:35:19'!
ERROR!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:35:39' prior: 50698016!
test10LogRegistersMultipleRotations
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	log := MarsRoverLog for: rover.

	rover process: 'r'.
	rover process: 'r'.

	expectedLog := OrderedCollection with: ('South') with: 'West'.
	
	self assert: expectedLog equals: log.! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:35:48' prior: 50705107!
test10LogRegistersMultipleRotations
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingEast.
	log := MarsRoverLog for: rover.

	rover process: 'r'.
	rover process: 'r'.

	expectedLog := OrderedCollection with: ('South') with: 'West'.
	
	self assert: expectedLog equals: log positionsAndDirections .! !

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/30/2023 14:35:51'!
PASSED!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:36:02' prior: 50698027!
test11LogRegistersMultipleMovements
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	log := MarsRoverLog for: rover.

	rover process: 'fb'.

	expectedLog := OrderedCollection with: ((0@1) asString) with: ((0@0) asString).
	
	self assert: expectedLog equals: log positionsAndDirections .! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:36:12' prior: 50698038!
test12LogRegistersMovementAndRotation
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	log := MarsRoverLog for: rover.

	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) with: ('East').
	
	self assert: expectedLog equals: log positionsAndDirections .! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:36:32' prior: 50698049!
test13LogCanReturnJustTheDirections
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	log := MarsRoverLog for: rover.

	rover process: 'fr'.

	expectedLog := OrderedCollection with: ('East').
	
	self assert: expectedLog equals: log directions.! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 14:36:52'!
directions
	^directions! !
!MarsRoverLog methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 14:36:58'!
positions
	^positions! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:37:08'!
test14LogCanReturnJustThePositions
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) .
	
	self assert: expectedLog equals: rover positionLog.! !

!methodRemoval: MarsRoverLogTest #test14LogCanReturnJustThePositoins stamp: 'Sof D 10/30/2023 14:37:08'!
test14LogCanReturnJustThePositoins
	| rover expectedLog |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) .
	
	self assert: expectedLog equals: rover positionLog.!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 14:37:26' prior: 50705184!
test14LogCanReturnJustThePositions
	| rover expectedLog log |
	rover := MarsRover at: 0@0 heading: MarsRoverHeadingNorth.
	log := MarsRoverLog for: rover.
	rover process: 'fr'.

	expectedLog := OrderedCollection with: ((0@1) asString) .
	
	self assert: expectedLog equals: log positions.! !

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositions stamp: 'Sof D 10/30/2023 14:37:28'!
FAILURE!
!MarsRoverLog methodsFor: 'updating' stamp: 'Sof D 10/30/2023 14:37:55' prior: 50704779!
addDirectionToLog: aDirectionOfTheRoverToLog
	| direction |
	direction := aDirectionOfTheRoverToLog directionName .
	positionsAndDirections add: direction .
	directions add: direction .! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositions stamp: 'Sof D 10/30/2023 14:37:57'!
PASSED!
!ObserverProxy methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 14:40:26' prior: 50702314!
initializeWith: aVariableToStore 
	variable := aVariableToStore.
	attachedObservers := OrderedCollection  new.! !
!ObserverProxy methodsFor: 'observer actions' stamp: 'Sof D 10/30/2023 14:43:50'!
attach: aComplementToAttach 
	attachedObservers add: aComplementToAttach 
	! !

!methodRemoval: ObserverProxy #attach:onUpdateDo: stamp: 'Sof D 10/30/2023 14:43:53'!
attach: aComplementToAttach onUpdateDo: aClosureWithActionToDoOnVariableUpdate 
	attachedObservers at: aComplementToAttach put: aClosureWithActionToDoOnVariableUpdate .
	!
!ObserverProxy methodsFor: 'observer actions' stamp: 'Sof D 10/30/2023 14:44:14' prior: 50702761!
updateVariable: aVariable
	variable := aVariable .
	attachedObservers do: [: aClosure | (aClosure value: aVariable) ]
	! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 14:44:20'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:17:05' prior: 50703731!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection aClosure |
	aClosure := [ : test |].
	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	observer attach: aClosure .
	attachedCollection := OrderedCollection new.
	attachedCollection add: aClosure .
	self assert: (observer attachedComplements) equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:17:59' prior: 50705312!
test02AProxyCanAttachAObserver
	| observer aWindow attachedCollection aClosure |
	aWindow := MarsRoverWindow new.

	aClosure := [ : test | aWindow updatePosition: test ].
	observer := ObserverProxy with: 1.
	observer attach: aClosure .
	attachedCollection := OrderedCollection new.
	attachedCollection add: aClosure .
	self assert: (observer attachedComplements) equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:18:02'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 15:18:02'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:18:02'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:18:02'!
ERROR!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 15:18:02'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:18:02'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:18:02'!
ERROR!
!MarsRoverWindow methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 15:18:33' prior: 50704625!
initializeWith: aRoverToObserve

	aRoverToObserve attachToPosition: [ : aPosition | self updatePosition: aPosition ].
	aRoverToObserve attachToDirection: [ : aDirection | self updateDirection: aDirection ].
	position := aRoverToObserve position asString.
	direction := aRoverToObserve direction directionName .
	! !
!MarsRover methodsFor: 'add observers' stamp: 'Sof D 10/30/2023 15:18:52'!
attachToDirection: anObserverToAttach 
	head attach: anObserverToAttach ! !

!methodRemoval: MarsRover #attachToDirection:onUpdateDo: stamp: 'Sof D 10/30/2023 15:18:55'!
attachToDirection: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate
	head attach: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate .!
!MarsRover methodsFor: 'add observers' stamp: 'Sof D 10/30/2023 15:19:08'!
attachToPosition: aClosureWithAnObserverToAttach 
	position attach: aClosureWithAnObserverToAttach ! !

!methodRemoval: MarsRover #attachToPosition:onUpdateDo: stamp: 'Sof D 10/30/2023 15:19:11'!
attachToPosition: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate
	position attach: anObserverToAttach onUpdateDo: aClosureToValueOnUpdate .!
!MarsRover methodsFor: 'add observers' stamp: 'Sof D 10/30/2023 15:19:14' prior: 50705380!
attachToDirection: aClosureWithAnObserverToAttach 
	head attach: aClosureWithAnObserverToAttach ! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 15:19:24'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:19:24'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:19:24'!
ERROR!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 15:19:24'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:19:24'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:19:24'!
ERROR!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 15:19:27'!
PASSED!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 15:19:28'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 15:19:28'!
PASSED!
!ObserverProxy methodsFor: 'observer actions' stamp: 'Sof D 10/30/2023 15:20:01' prior: 50705287!
attach: aClosureWithAComplementToAttach 
	attachedObservers add: aClosureWithAComplementToAttach 
	! !
!MarsRoverLog methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 15:20:27' prior: 50704755!
initializeWith: aRoverToLogTheActionsOf

	aRoverToLogTheActionsOf attachToPosition: [ : aPosition | self addPositionToLog: aPosition ].
	aRoverToLogTheActionsOf attachToDirection: [ : aDirection | self addDirectionToLog: aDirection ].
	positionsAndDirections := OrderedCollection new.
	positions := OrderedCollection new.
	directions := OrderedCollection new.! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositions stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:20:34'!
ERROR!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 15:20:34'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:20:34'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:20:34'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:21:24' prior: 50703747!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection aClosure anotherClosure |
	

	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	aLog := MarsRoverLog new.
	aClosure := [ : test | aWindow updateDirection: test ]. 	anotherClosure := [ : test2 | aLog addPositionToLog: test2].
	observer attach: aClosure .
	observer attach: anotherClosure .
	attachedCollection := Dictionary new.
	attachedCollection at: aWindow put: aClosure ; at: aLog put: anotherClosure .
	self assert: observer attachedComplements equals: attachedCollection.! !
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:21:56' prior: 50705693!
test03AProxyCanAttachMultipleObservers
	| observer aWindow aLog attachedCollection aClosure anotherClosure |
	

	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	aLog := MarsRoverLog new.
	aClosure := [ : test | aWindow updateDirection: test ]. 	anotherClosure := [ : test2 | aLog addPositionToLog: test2].
	observer attach: aClosure .
	observer attach: anotherClosure .
	attachedCollection := OrderedCollection new.
	attachedCollection add: aClosure ; add: anotherClosure .
	self assert: observer attachedComplements equals: attachedCollection.! !

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:21:58'!
PASSED!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:25:20' prior: 50703607!
test05AProxyCanUpdateAnObserver
	| observer aWindow aClosure |
	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	aClosure := [ : aPosition | aWindow updatePosition: aPosition ].

	aWindow updatePosition: 0@0.
	observer attach: aClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .! !

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:25:21'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 15:25:21'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:25:21'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:25:21'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 15:25:21'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:25:21'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:25:21'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:25:21'!
ERROR!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:25:41'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 15:25:41'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:25:41'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:25:41'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 15:25:41'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:25:41'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:25:41'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:25:41'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:26:07' prior: 50703580!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	

	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	anotherWindow := MarsRoverWindow new.
	aClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updatePosition: aPosition ].
	anotherClosure := [ : aMarsRoverWindow : aPosition | aMarsRoverWindow updateDirection: aPosition ].
	aWindow updatePosition: 0@0.
	anotherWindow updatePosition: 10@10.
	observer attach: aClosure .
	observer attach: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .
	self assert: anotherWindow position equals: (0@1) asString .! !

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:26:08'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:26:28' prior: 50705809!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	

	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	anotherWindow := MarsRoverWindow new.
	aClosure := [ : aPosition | aWindow updatePosition: aPosition ].
	anotherClosure := [ : aPosition | anotherWindow updateDirection: aPosition ].
	aWindow updatePosition: 0@0.
	anotherWindow updatePosition: 10@10.
	observer attach: aClosure .
	observer attach: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .
	self assert: anotherWindow position equals: (0@1) asString .! !

!testRun: #MarsRoverLogTest #test01LogStartsOutEmpty stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test02LogRegisterNorthwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test03LogRegisterEastwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test04LogRegisterWestwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test05LogRegisterSouthwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test06LogRegisterWestwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test07LogRegisterEastwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test08LogRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test09LogRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test10LogRegistersMultipleRotations stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test11LogRegistersMultipleMovements stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test12LogRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test13LogCanReturnJustTheDirections stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverLogTest #test14LogCanReturnJustThePositions stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowStartsOutShowingRoverPositionAndDirectionNorth stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowStartsOutShowingRoverPositionAndDirectionSouth stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowStartsOutShowingRoverPositionAndDirectionWest stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowStartsOutShowingRoverPositionAndDirectionEast stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowChangesWestwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowChangesNorthwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test07WindowChangesEastwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test08WindowChangesSouthwardMovement stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test09WindowRegisterWestwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test10WindowRegisterNorthwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test11WindowRegisterSouthwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test12WindowRegisterEastwardRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test13WindowRegisterMultipleRotations stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test14WindowRegisterMultipleMovements stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #MarsRoverWindowTest #test15WindowRegistersMovementAndRotation stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 15:26:33'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:26:34'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:26:34'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 15:26:34'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:26:34'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:26:34'!
ERROR!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:26:34'!
ERROR!
!ObserverProxyTest methodsFor: 'tests' stamp: 'Sof D 10/30/2023 15:26:48' prior: 50705837!
test06AProxyCanUpdateMultipleObservers
	| observer aWindow anotherWindow aClosure anotherClosure |
	

	observer := ObserverProxy with: 1.
	aWindow := MarsRoverWindow new.
	anotherWindow := MarsRoverWindow new.
	aClosure := [ : aPosition | aWindow updatePosition: aPosition ].
	anotherClosure := [ : aPosition | anotherWindow updatePosition: aPosition ].
	aWindow updatePosition: 0@0.
	anotherWindow updatePosition: 10@10.
	observer attach: aClosure .
	observer attach: anotherClosure .
	observer updateVariable: 0@1.
	self assert: aWindow position equals: (0@1) asString .
	self assert: anotherWindow position equals: (0@1) asString .! !

!testRun: #ObserverProxyTest #test01AProxyInitializesWithAVariable stamp: 'Sof D 10/30/2023 15:26:49'!
PASSED!

!testRun: #ObserverProxyTest #test02AProxyCanAttachAObserver stamp: 'Sof D 10/30/2023 15:26:49'!
PASSED!

!testRun: #ObserverProxyTest #test03AProxyCanAttachMultipleObservers stamp: 'Sof D 10/30/2023 15:26:49'!
PASSED!

!testRun: #ObserverProxyTest #test04AProxyCanUpdateItsVariable stamp: 'Sof D 10/30/2023 15:26:49'!
PASSED!

!testRun: #ObserverProxyTest #test05AProxyCanUpdateAnObserver stamp: 'Sof D 10/30/2023 15:26:49'!
PASSED!

!testRun: #ObserverProxyTest #test06AProxyCanUpdateMultipleObservers stamp: 'Sof D 10/30/2023 15:26:50'!
PASSED!

----QUIT----(30 October 2023 15:27:35) CuisUniversity-5981.image priorSource: 11925993!

----STARTUP---- (30 October 2023 19:02:27) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!


Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classDefinition: #Cart category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 19:03:07'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classRemoval: #Cart stamp: 'Sof D 10/30/2023 19:03:12'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classDefinition: #CartTests category: 'TusLibrosDotCom-Tests' stamp: 'Sof D 10/30/2023 19:19:34'!
TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Tests'!

!classDefinition: #Cart category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 19:20:35'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!
!CartTests methodsFor: 'no messages' stamp: 'Sof D 10/30/2023 19:20:25'!
test01CartStartsOutEmpty
	| cart expectedContents |
	cart := Cart new.
	expectedContents := OrderedCollection new.
	
	self assert: expectedContents equals: cart contents.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:21:10' prior: 50706131!
test01CartStartsOutEmpty
	| cart expectedContents |
	cart := Cart new.
	expectedContents := OrderedCollection new.
	
	self assert: cart isEmpty.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:21:20' prior: 50706140!
test01CartStartsOutEmpty
	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 19:21:20'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 19:21:29'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 19:21:32' prior: 50706156!
isEmpty
	^true! !

!classDefinition: #ISBN category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 19:23:18'!
Object subclass: #ISBN
	instanceVariableNames: 'code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:23:10'!
test02CartCanAddItem
	| cart item |
	cart := Cart new.
	item := ISBN for: '0321146530'.
	
	self assert: cart isEmpty.! !
!ISBN methodsFor: 'no messages' stamp: 'Sof D 10/30/2023 19:23:54' overrides: 16901772!
= anISBNToCompare
	^code = anISBNToCompare ! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:24:14' prior: 50706171!
test02CartCanAddItem
	| cart item |
	cart := Cart new.
	item := ISBN for: '0321146530'.
	
	self assert: cart contents includes: item.! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:24:15'!
ERROR!
!ISBN class methodsFor: 'instance creation' stamp: 'Sof D 10/30/2023 19:24:19'!
for: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aRenameMe1 ! !
!ISBN class methodsFor: 'instance creation' stamp: 'Sof D 10/30/2023 19:24:34' prior: 50706193!
for: anISBNCodeToUse 

	^self new initializeFor: anISBNCodeToUse ! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:24:38'!
ERROR!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:24:38'!
ERROR!

!classDefinition: #ISBN category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 19:24:50'!
Object subclass: #ISBN
	instanceVariableNames: 'code iSBNCodeToUse'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!
!ISBN methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 19:24:50'!
initializeFor: anISBNCodeToUse 
	self shouldBeImplemented.
	iSBNCodeToUse := anISBNCodeToUse.! !
!ISBN methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 19:24:55' prior: 50706219!
initializeFor: anISBNCodeToUse 
	
	code := anISBNCodeToUse.! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:24:58'!
ERROR!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:24:58'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 19:25:03'!
contents
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 19:25:09' prior: 50706235!
contents
	^self contents! !

!classDefinition: #Cart category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 19:25:20'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!
!Cart methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 19:25:18' prior: 50706239!
contents
	^contents! !
!Cart methodsFor: 'nil' stamp: 'Sof D 10/30/2023 19:25:39' overrides: 16920235!
initialize
	contents := OrderedCollection new.! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:25:41'!
FAILURE!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:25:41'!
FAILURE!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:25:56' prior: 50706183!
test02CartCanAddItem
	| cart item |
	cart := Cart new.
	item := ISBN for: '0321146530'.
	cart addItem: item.
	
	self assert: cart contents includes: item.! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:25:58'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:26:08'!
addItem: item 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:26:26' prior: 50706276!
addItem: anItemToAddToCart 
	contents add: anItemToAddToCart
	! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:26:28'!
FAILURE!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:26:28'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:27:10' prior: 50706281!
addItem: anItemToAddToCart 
	contents := anItemToAddToCart
	! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:27:23' prior: 50706265!
test02CartCanAddItem
	| cart item |
	cart := Cart new.
	item := ISBN for: '0321146530'.
	cart addItem: item.
	
	self assert: cart contents equals: item.! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:27:24'!
FAILURE!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:28:09' prior: 50706297!
test02CartCanAddItem
	| cart item |
	cart := Cart new.
	item := ISBN for: '0321146530'.
	cart addItem: item.
	
	self assert: cart hasItem: item.! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:28:13'!
ERROR!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:28:26' prior: 50706308!
test02CartCanAddItem
	| cart item |
	cart := Cart new.
	item := ISBN for: '0321146530'.
	cart addItem: item.
	
	self assert: (cart hasItem: item).! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:28:28'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 19:28:35'!
hasItem: item 
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 19:28:48' prior: 50706328!
hasItem: anItemToCheck 
	contents = anItemToCheck! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:28:51'!
ERROR!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:28:55'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 19:29:15' prior: 50706332!
hasItem: anItemToCheck 
	^contents = anItemToCheck! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:29:19'!
FAILURE!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:29:19'!
FAILURE!
!ISBN methodsFor: 'comparing' stamp: 'Sof D 10/30/2023 19:30:43' prior: 50706178 overrides: 16901772!
= anISBNToCompare
	^code = anISBNToCompare code! !
!ISBN methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 19:32:14'!
code
	^code! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:32:18'!
PASSED!

!classRenamed: #Cart as: #TusLibrosCart stamp: 'Sof D 10/30/2023 19:32:32'!
Smalltalk renameClassNamed: #Cart as: #TusLibrosCart!
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:32:32' prior: 50706148!
test01CartStartsOutEmpty
	| cart |
	cart := TusLibrosCart new.
	
	self assert: cart isEmpty.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:32:32' prior: 50706318!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := ISBN for: '0321146530'.
	cart addItem: item.
	
	self assert: (cart hasItem: item).! !
!TusLibrosCart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 19:32:43'!
hasBook: anItemToCheck 
	^contents = anItemToCheck! !

!methodRemoval: TusLibrosCart #hasItem: stamp: 'Sof D 10/30/2023 19:32:43'!
hasItem: anItemToCheck 
	^contents = anItemToCheck!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:32:52' prior: 50706375!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := ISBN for: '0321146530'.
	cart addItem: item.
	
	self assert: (cart hasBook: item).! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 19:32:53'!
PASSED!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:32:53'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:33:39'!
test02CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := ISBN for: '0321146530'.
	anotherItem := ISBN for: '1933988274'.
	cart addItem: item.
	
	self assert: (cart hasBook: item).! !

Object subclass: #ISBN
	instanceVariableNames: 'code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classDefinition: #ISBN category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 19:33:48'!
Object subclass: #ISBN
	instanceVariableNames: 'code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!

!classDefinition: #ISBN category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 19:33:52'!
Object subclass: #ISBN
	instanceVariableNames: 'ISBNcode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!
!ISBN methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:33:52' prior: 50706353 overrides: 16901772!
= anISBNToCompare
	^ISBNcode = anISBNToCompare code! !
!ISBN methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:33:52' prior: 50706225!
initializeFor: anISBNCodeToUse 
	
	ISBNcode := anISBNCodeToUse.! !
!ISBN methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:33:52' prior: 50706357!
code
	^ISBNcode! !

!classRenamed: #ISBN as: #Book stamp: 'Sof D 10/30/2023 19:34:05'!
Smalltalk renameClassNamed: #ISBN as: #Book!
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:34:05' prior: 50706392!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	cart addItem: item.
	
	self assert: (cart hasBook: item).! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:34:05' prior: 50706405!
test02CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item.
	
	self assert: (cart hasBook: item).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:34:14'!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item.
	
	self assert: (cart hasBook: item).! !

!methodRemoval: CartTests #test02CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 19:34:14'!
test02CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item.
	
	self assert: (cart hasBook: item).!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:35:07' prior: 50706470!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:35:13' prior: 50706490!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !

!testRun: #CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 19:35:13'!
FAILURE!
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 19:35:30' prior: 50706292!
addItem: anItemToAddToCart 
	contents add: anItemToAddToCart
	! !

!testRun: #CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 19:36:03'!
FAILURE!

!testRun: #CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 19:36:03'!
FAILURE!
!TusLibrosCart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 19:36:20' prior: 50706383!
hasBook: anItemToCheck 
	^contents includes: anItemToCheck! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 19:36:23'!
PASSED!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:36:23'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 19:36:23'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:36:55'!
test04CartCanReturnItsContents
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	expectedItems := OrderedCollection new.
	expectedItems add: item; add: anotherItem .
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:37:14' prior: 50706541!
test04CartCanReturnItsContents
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := Book for: '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	expectedItems := OrderedCollection new.
	expectedItems add: item; add: anotherItem .
	
	self assert: cart contents equals: expectedItems .! !

!testRun: #CartTests #test04CartCanReturnItsContents stamp: 'Sof D 10/30/2023 19:37:15'!
PASSED!

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 19:37:15'!
PASSED!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 19:37:15'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 19:37:15'!
PASSED!

!testRun: #CartTests #test04CartCanReturnItsContents stamp: 'Sof D 10/30/2023 19:37:15'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:44:19'!
test02CartReturnsCodeAndCartID! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 19:44:45'!
test02CartReturnsErrorAndErrorDescriptionOnInvalidInput! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:00:50' prior: 50706453!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	cart addItem: item.
	
	self assert: (cart hasBook: item).! !

!methodRemoval: CartTests #test02CartReturnsCodeAndCartID stamp: 'Sof D 10/30/2023 20:00:54'!
test02CartReturnsCodeAndCartID!

!methodRemoval: CartTests #test02CartReturnsErrorAndErrorDescriptionOnInvalidInput stamp: 'Sof D 10/30/2023 20:00:55'!
test02CartReturnsErrorAndErrorDescriptionOnInvalidInput!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:01:01' prior: 50706501!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := Book for: '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:01:05' prior: 50706611!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:01:12' prior: 50706556!
test04CartCanReturnItsContents
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	expectedItems := OrderedCollection new.
	expectedItems add: item; add: anotherItem .
	
	self assert: cart contents equals: expectedItems .! !

!classRemoval: #Book stamp: 'Sof D 10/30/2023 20:01:17'!
Object subclass: #Book
	instanceVariableNames: 'ISBNcode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:01:53'!
xxx
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	expectedItems := OrderedCollection new.
	expectedItems add: item; add: anotherItem .
	
	self assert: cart contents equals: expectedItems .! !

!methodRemoval: CartTests #test04CartCanReturnItsContents stamp: 'Sof D 10/30/2023 20:01:53'!
test04CartCanReturnItsContents
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	expectedItems := OrderedCollection new.
	expectedItems add: item; add: anotherItem .
	
	self assert: cart contents equals: expectedItems .!
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:02:44'!
addItem: anItemToAddToCart quantity: theQuantityToBeAdded  
	contents add: anItemToAddToCart
	! !

!methodRemoval: TusLibrosCart #addItem: stamp: 'Sof D 10/30/2023 20:02:44'!
addItem: anItemToAddToCart 
	contents add: anItemToAddToCart
	!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:02:54' prior: 50706594!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	cart addItem: item quantity: 1.
	
	self assert: (cart hasBook: item).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:03:05' prior: 50706623!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item quantity: 1. 	cart addItem: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:04:33'!
test04CartCanAddMultipleOfTheSameItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	
	cart addItem: item quantity: 2. 
	
	self assert: (cart hasBook: item). 	! !
!TusLibrosCart methodsFor: 'nil' stamp: 'Sof D 10/30/2023 20:06:08'!
hasBook: aBookToCheckIfItsInCart inQuantity: aQuantityOfTheBook
	^contents at: aBookToCheckIfItsInCart = aQuantityOfTheBook 
! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:06:27' prior: 50706713!
test04CartCanAddMultipleOfTheSameItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	
	cart addItem: item quantity: 2. 
	
	self assert: (cart hasBook: item inQuantity: 2). 	! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:06:29'!
PASSED!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 20:06:30'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 20:06:32'!
PASSED!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:06:33'!
ERROR!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:06:33'!
ERROR!
!TusLibrosCart methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 20:06:46' prior: 50706255 overrides: 16920235!
initialize
	contents := Dictionary new.! !
!TusLibrosCart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 20:07:29' prior: 50706528!
hasBook: anItemToCheck 
	^contents includesKey: anItemToCheck! !
!TusLibrosCart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 20:07:37' prior: 50706758!
hasBook: aBookToCheckIfItsInCart 
	^contents includesKey: aBookToCheckIfItsInCart! !
!TusLibrosCart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 20:07:46' prior: 50706160!
isEmpty
	^contents isEmpty ! !
!TusLibrosCart methodsFor: 'accessing' stamp: 'Sof D 10/30/2023 20:07:55' prior: 50706251!
contents
	^contents copy! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:08:01'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:08:18' prior: 50706693!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	cart addItem: item quantity: 1.
	
	self assert: (cart hasBook: item). self deny: cart isEmpty ! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 20:08:19'!
ERROR!

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 20:08:19'!
ERROR!
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:08:34' prior: 50706682!
addItem: anItemToAddToCart quantity: theQuantityToBeAdded  
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !

!testRun: #CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 20:08:36'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 20:08:39'!
PASSED!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:08:41'!
ERROR!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:08:41'!
ERROR!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:08:54'!
ERROR!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:08:54'!
ERROR!
!TusLibrosCart methodsFor: 'testing' stamp: 'Sof D 10/30/2023 20:09:10' prior: 50706721!
hasBook: aBookToCheckIfItsInCart inQuantity: aQuantityOfTheBook
	^(contents at: aBookToCheckIfItsInCart) = aQuantityOfTheBook 
! !

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:09:17'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:10:41'!
test05CartCanAddMultipleOfTheMultipleItem
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	
	cart addItem: item quantity: 2. 
	
	self assert: (cart hasBook: item inQuantity: 2). 	! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:11:53' prior: 50706831!
test05CartCanAddMultipleOfTheMultipleItem
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '9780330258647'.
	
	cart addItem: item quantity: 2. 
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:12:09' prior: 50706842!
test05CartCanAddMultipleOfTheMultipleItem
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '9780330258647'.
	
	cart addItem: item quantity: 2. 
	cart addItem: anotherItem quantity: 42.
	
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).! !

!testRun: #CartTests #test05CartCanAddMultipleOfTheMultipleItem stamp: 'Sof D 10/30/2023 20:12:11'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:13:01'!
test06CartCanShowItsContents
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item quantity: 1. 	cart addItem: anotherItem quantity: 2.
	
	expectedItems := OrderedCollection new.
	expectedItems add: item; add: anotherItem .
	
	self assert: cart contents equals: expectedItems .! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:13:37' prior: 50706872!
test06CartCanShowItsContents
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item quantity: 1. 	cart addItem: anotherItem quantity: 2.
	
	expectedItems := Dictionary new.
	expectedItems at: item put: 1; at: anotherItem put: 2 .
	
	self assert: cart contents equals: expectedItems .! !

!methodRemoval: CartTests #xxx stamp: 'Sof D 10/30/2023 20:14:07'!
xxx
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addItem: item. 	cart addItem: anotherItem .
	
	expectedItems := OrderedCollection new.
	expectedItems add: item; add: anotherItem .
	
	self assert: cart contents equals: expectedItems .!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:14:15'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:17:55'!
test07CartCantAddBookWithinvalidISBN
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	
	self assert: cart contents equals: expectedItems .! !
!TusLibrosCart class methodsFor: 'no messages' stamp: 'Sof D 10/30/2023 20:18:56'!
withValidBooks: aListOfBooksThatCanBeAddedToCart
	^self new initializeWith: aListOfBooksThatCanBeAddedToCart ! !

!classDefinition: #TusLibrosCart category: 'TusLibrosDotCom-Ejercicio' stamp: 'Sof D 10/30/2023 20:19:32'!
Object subclass: #TusLibrosCart
	instanceVariableNames: 'contents availableBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosDotCom-Ejercicio'!
!TusLibrosCart methodsFor: 'initialization' stamp: 'Sof D 10/30/2023 20:19:31'!
initializeWith: aListOfBooksThatCanBeAddedToCart 
	contents := Dictionary new.
	availableBooks := aListOfBooksThatCanBeAddedToCart .! !

!methodRemoval: TusLibrosCart #initialize stamp: 'Sof D 10/30/2023 20:19:35'!
initialize
	contents := Dictionary new.!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:21:06' prior: 50706916!
test07CartCantAddBookWithinvalidISBN
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '43890217'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '0321146530'.
	
	self assert: cart contents equals:  True! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:25:47' prior: 50706952!
test07CartCantAddBookWithinvalidISBN
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '0321146530'.
	
	self should: [ cart addItem: item quantity: 1 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart bookNotAvailableErrorDescription.
		
		 ]! !
!TusLibrosCart class methodsFor: 'nil' stamp: 'Sof D 10/30/2023 20:26:13'!
bookNotAvailableErrorDescription
	^'The book selected is not available'! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:26:38'!
addBook: anItemToAddToCart quantity: theQuantityToBeAdded  
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 20:26:39' prior: 50706855!
test05CartCanAddMultipleOfTheMultipleItem
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '9780330258647'.
	
	cart addBook: item quantity: 2. 
	cart addBook: anotherItem quantity: 42.
	
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 20:26:39' prior: 50706701!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 20:26:39' prior: 50706728!
test04CartCanAddMultipleOfTheSameItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	
	cart addBook: item quantity: 2. 
	
	self assert: (cart hasBook: item inQuantity: 2). 	! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 20:26:39' prior: 50706964!
test07CartCantAddBookWithinvalidISBN
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '0321146530'.
	
	self should: [ cart addBook: item quantity: 1 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart bookNotAvailableErrorDescription.
		
		 ]! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 20:26:39' prior: 50706887!
test06CartCanShowItsContents
	| cart item anotherItem expectedItems |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 2.
	
	expectedItems := Dictionary new.
	expectedItems at: item put: 1; at: anotherItem put: 2 .
	
	self assert: cart contents equals: expectedItems .! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'Sof D 10/30/2023 20:26:39' prior: 50706780!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	cart addBook: item quantity: 1.
	
	self assert: (cart hasBook: item). self deny: cart isEmpty ! !

!methodRemoval: TusLibrosCart #addItem:quantity: stamp: 'Sof D 10/30/2023 20:26:39'!
addItem: anItemToAddToCart quantity: theQuantityToBeAdded  
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:26:51'!
test02CartCanAddBook
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	cart addBook: item quantity: 1.
	
	self assert: (cart hasBook: item). self deny: cart isEmpty ! !

!methodRemoval: CartTests #test02CartCanAddItem stamp: 'Sof D 10/30/2023 20:26:51'!
test02CartCanAddItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	cart addBook: item quantity: 1.
	
	self assert: (cart hasBook: item). self deny: cart isEmpty !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:26:54'!
test03CartCanAddMultipleBook
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !

!methodRemoval: CartTests #test03CartCanAddMultipleItems stamp: 'Sof D 10/30/2023 20:26:54'!
test03CartCanAddMultipleItems
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:26:59'!
test03CartCanAddMultipleBooks
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !

!methodRemoval: CartTests #test03CartCanAddMultipleBook stamp: 'Sof D 10/30/2023 20:26:59'!
test03CartCanAddMultipleBook
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:27:03'!
test04CartCanAddMultipleOfTheSameBook
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	
	cart addBook: item quantity: 2. 
	
	self assert: (cart hasBook: item inQuantity: 2). 	! !

!methodRemoval: CartTests #test04CartCanAddMultipleOfTheSameItem stamp: 'Sof D 10/30/2023 20:27:03'!
test04CartCanAddMultipleOfTheSameItem
	| cart item |
	cart := TusLibrosCart new.
	item := '0321146530'.
	
	cart addBook: item quantity: 2. 
	
	self assert: (cart hasBook: item inQuantity: 2). 	!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:27:09'!
test05CartCanAddMultipleOfMultipleBooks
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '9780330258647'.
	
	cart addBook: item quantity: 2. 
	cart addBook: anotherItem quantity: 42.
	
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).! !

!methodRemoval: CartTests #test05CartCanAddMultipleOfTheMultipleItem stamp: 'Sof D 10/30/2023 20:27:10'!
test05CartCanAddMultipleOfTheMultipleItem
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '9780330258647'.
	
	cart addBook: item quantity: 2. 
	cart addBook: anotherItem quantity: 42.
	
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:27:18'!
test05CartCanAddMultipleCopiesOfMultipleBooks
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '9780330258647'.
	
	cart addBook: item quantity: 2. 
	cart addBook: anotherItem quantity: 42.
	
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).! !

!methodRemoval: CartTests #test05CartCanAddMultipleOfMultipleBooks stamp: 'Sof D 10/30/2023 20:27:18'!
test05CartCanAddMultipleOfMultipleBooks
	| cart item anotherItem |
	cart := TusLibrosCart new.
	item := '0321146530'.
	anotherItem := '9780330258647'.
	
	cart addBook: item quantity: 2. 
	cart addBook: anotherItem quantity: 42.
	
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:27:22'!
FAILURE!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:27:22'!
FAILURE!
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:28:15' prior: 50706985!
addBook: anItemToAddToCart quantity: theQuantityToBeAdded  
	(availableBooks includes: anItemToAddToCart) ifFalse: [ self error: self class bookNotAvailableErrorDescription ].
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:28:22'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:29:01' prior: 50707029!
test07CartCantAddBookWithinvalidISBN
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '0321146530'.
	
	self should: [ cart addBook: item quantity: 1 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart bookNotAvailableErrorDescription.
		self deny: cart hasBook: item.
		 ]! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:29:07' prior: 50707235!
test07CartCantAddBookWithinvalidISBN
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '0321146530'.
	
	self should: [ cart addBook: item quantity: 1 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart bookNotAvailableErrorDescription.
		self deny: (cart hasBook: item).
		 ]! !

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:29:10'!
PASSED!

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:29:15'!
ERROR!

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:29:15'!
ERROR!

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:29:15'!
ERROR!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameBook stamp: 'Sof D 10/30/2023 20:29:15'!
ERROR!

!testRun: #CartTests #test05CartCanAddMultipleCopiesOfMultipleBooks stamp: 'Sof D 10/30/2023 20:29:15'!
ERROR!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:29:15'!
ERROR!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:29:15'!
PASSED!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:29:23'!
PASSED!

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:29:26'!
ERROR!

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:29:26'!
ERROR!

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:29:26'!
ERROR!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameBook stamp: 'Sof D 10/30/2023 20:29:26'!
ERROR!

!testRun: #CartTests #test05CartCanAddMultipleCopiesOfMultipleBooks stamp: 'Sof D 10/30/2023 20:29:26'!
ERROR!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:29:26'!
ERROR!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:29:26'!
PASSED!

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:29:39'!
ERROR!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:30:21' prior: 50706368!
test01CartStartsOutEmpty
	| cart |
	cart := TusLibrosCart withValidBooks: OrderedCollection new..
	
	self assert: cart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:30:22' prior: 50707322!
test01CartStartsOutEmpty
	| cart |
	cart := TusLibrosCart withValidBooks: OrderedCollection new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:30:23'!
PASSED!

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:30:23'!
PASSED!

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:30:23'!
ERROR!

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:30:23'!
ERROR!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameBook stamp: 'Sof D 10/30/2023 20:30:23'!
ERROR!

!testRun: #CartTests #test05CartCanAddMultipleCopiesOfMultipleBooks stamp: 'Sof D 10/30/2023 20:30:23'!
ERROR!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:30:23'!
ERROR!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:30:23'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:30:31' prior: 50707076!
test02CartCanAddBook
	| cart item |
	cart := TusLibrosCart withValidBooks: OrderedCollection new.
	item := '0321146530'.
	cart addBook: item quantity: 1.
	
	self assert: (cart hasBook: item). self deny: cart isEmpty ! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:30:37' prior: 50707117!
test03CartCanAddMultipleBooks
	| cart item anotherItem |
	cart := TusLibrosCart withValidBooks: OrderedCollection new.
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:30:53' prior: 50707361!
test02CartCanAddBook
	| cart item |
	item := '0321146530'.

	cart := TusLibrosCart withValidBooks: (OrderedCollection with: item).
	cart addBook: item quantity: 1.
	
	self assert: (cart hasBook: item). self deny: cart isEmpty ! !

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:30:54'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:31:08' prior: 50707371!
test03CartCanAddMultipleBooks
	| cart item anotherItem |
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart := TusLibrosCart withValidBooks: (OrderedCollection with: item with: anotherItem).

	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 1.
	
	self assert: (cart hasBook: item). 	self assert: (cart hasBook: anotherItem ).! !

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:31:10'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:31:28' prior: 50707141!
test04CartCanAddMultipleOfTheSameBook
	| cart item |
	item := '0321146530'.
	cart := TusLibrosCart withValidBooks: (OrderedCollection with: item).

	cart addBook: item quantity: 2. 
	
	self assert: (cart hasBook: item inQuantity: 2). 	! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:31:46' prior: 50707186!
test05CartCanAddMultipleCopiesOfMultipleBooks
	| cart item anotherItem |
	item := '0321146530'.
	anotherItem := '9780330258647'.
	cart := TusLibrosCart withValidBooks: (OrderedCollection with: item with: anotherItem ).

	cart addBook: item quantity: 2. 
	cart addBook: anotherItem quantity: 42.
	
	
	self assert: (cart hasBook: item inQuantity: 2). 	self assert: (cart hasBook: anotherItem inQuantity: 42).! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:32:09' prior: 50707046!
test06CartCanShowItsContents
	| cart item anotherItem expectedItems |
	item := '0321146530'.
	anotherItem := '1933988274'.
	cart := TusLibrosCart withValidBooks: (OrderedCollection with: item with: anotherItem ).

	cart addBook: item quantity: 1. 	cart addBook: anotherItem quantity: 2.

	expectedItems := Dictionary new.
	expectedItems at: item put: 1; at: anotherItem put: 2 .
	
	self assert: cart contents equals: expectedItems .! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:32:10'!
PASSED!

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:32:10'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:32:10'!
PASSED!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameBook stamp: 'Sof D 10/30/2023 20:32:10'!
PASSED!

!testRun: #CartTests #test05CartCanAddMultipleCopiesOfMultipleBooks stamp: 'Sof D 10/30/2023 20:32:10'!
PASSED!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:32:10'!
PASSED!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:32:10'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:33:49'!
test08CartCantAddZeroOrNegativeAmountOfBooks
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '0321146530'.
	
	self should: [ cart addBook: item quantity: -1 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart bookNotAvailableErrorDescription.
		self deny: (cart hasBook: item).
		 ]! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:34:01' prior: 50707479!
test08CartCantAddZeroOrNegativeAmountOfBooks
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '0321146530'.
	
	self should: [ cart addBook: item quantity: -1 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart invalidBookQuantityErrorDescription.
		self deny: (cart hasBook: item).
		 ]! !
!TusLibrosCart class methodsFor: 'error descriptions' stamp: 'Sof D 10/30/2023 20:34:22'!
invalidBookQuantityErrorDescription
	^'The amount of books has to be greater than zero'! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:36:25' prior: 50707221!
addBook: anItemToAddToCart quantity: theQuantityToBeAdded  
	(availableBooks includes: anItemToAddToCart) ifFalse: [ self error: self class bookNotAvailableErrorDescription ].
	(theQuantityToBeAdded > 0) ifFalse: [ self error: self class invalidBookQuantityErrorDescription ].
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:36:47'!
PASSED!

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:36:47'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:36:47'!
PASSED!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameBook stamp: 'Sof D 10/30/2023 20:36:47'!
PASSED!

!testRun: #CartTests #test05CartCanAddMultipleCopiesOfMultipleBooks stamp: 'Sof D 10/30/2023 20:36:47'!
PASSED!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:36:47'!
PASSED!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:36:47'!
PASSED!

!testRun: #CartTests #test08CartCantAddZeroOrNegativeAmountOfBooks stamp: 'Sof D 10/30/2023 20:36:47'!
FAILURE!

!testRun: #CartTests #test08CartCantAddZeroOrNegativeAmountOfBooks stamp: 'Sof D 10/30/2023 20:36:47'!
FAILURE!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:36:51'!
PASSED!

!testRun: #CartTests #test08CartCantAddZeroOrNegativeAmountOfBooks stamp: 'Sof D 10/30/2023 20:36:53'!
FAILURE!

!testRun: #CartTests #test08CartCantAddZeroOrNegativeAmountOfBooks stamp: 'Sof D 10/30/2023 20:36:53'!
FAILURE!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:37:19' prior: 50707497!
test08CartCantAddZeroOrNegativeAmountOfBooks
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '9780330258647'.
	
	self should: [ cart addBook: item quantity: -1 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart invalidBookQuantityErrorDescription.
		self deny: (cart hasBook: item).
		 ]! !

!testRun: #CartTests #test08CartCantAddZeroOrNegativeAmountOfBooks stamp: 'Sof D 10/30/2023 20:37:20'!
PASSED!

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameBook stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

!testRun: #CartTests #test05CartCanAddMultipleCopiesOfMultipleBooks stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

!testRun: #CartTests #test08CartCantAddZeroOrNegativeAmountOfBooks stamp: 'Sof D 10/30/2023 20:37:53'!
PASSED!

----QUIT----(30 October 2023 20:37:59) CuisUniversity-5981.image priorSource: 11981970!

----STARTUP---- (30 October 2023 20:38:19) as C:\Users\sofia\Documents\SmalltalkVM\windows64\CuisUniversity-5981.image!

!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:38:52' prior: 50707521!
addBook: anItemToAddToCart quantity: theQuantityToBeAdded  
	(availableBooks includes: anItemToAddToCart) ifFalse: [ self error: self class bookNotAvailableErrorDescription ].
	(theQuantityToBeAdded > 0 and: theQuantityToBeAdded isInteger) ifFalse: [ self error: self class invalidBookQuantityErrorDescription ].
	
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !
!TusLibrosCart class methodsFor: 'error descriptions' stamp: 'Sof D 10/30/2023 20:39:00' prior: 50707515!
invalidBookQuantityErrorDescription
	^'The amount of books has to be an integer greater than zero'! !
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:39:39'!
test09CartCantAddNonInteger
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '9780330258647'.
	
	self should: [ cart addBook: item quantity: 0.42 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart invalidBookQuantityErrorDescription.
		self deny: (cart hasBook: item).
		 ]! !

!testRun: #CartTests #test09CartCantAddNonInteger stamp: 'Sof D 10/30/2023 20:40:07'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'Sof D 10/30/2023 20:40:14'!
test09CartCantAddNonIntegerAmountOfBooks
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '9780330258647'.
	
	self should: [ cart addBook: item quantity: 0.42 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart invalidBookQuantityErrorDescription.
		self deny: (cart hasBook: item).
		 ]! !

!methodRemoval: CartTests #test09CartCantAddNonInteger stamp: 'Sof D 10/30/2023 20:40:14'!
test09CartCantAddNonInteger
	| cart item availableBooks |
	
	availableBooks := OrderedCollection new.
	availableBooks add: '9780330258647'.
	cart := TusLibrosCart withValidBooks: availableBooks .
	item := '9780330258647'.
	
	self should: [ cart addBook: item quantity: 0.42 ]
	raise: Error
	withExceptionDo: [ : anError | 
		self assert: anError messageText = TusLibrosCart invalidBookQuantityErrorDescription.
		self deny: (cart hasBook: item).
		 ]!
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:41:33'!
validateBookISBN: anItemToValidateTheISBN

	^ availableBooks includes: anItemToValidateTheISBN! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:41:33' prior: 50707627!
addBook: anItemToAddToCart quantity: theQuantityToBeAdded  
	(self validateBookISBN: anItemToAddToCart) ifFalse: [ self error: self class bookNotAvailableErrorDescription ].
	(theQuantityToBeAdded > 0 and: theQuantityToBeAdded isInteger) ifFalse: [ self error: self class invalidBookQuantityErrorDescription ].
	
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:41:51' prior: 50707711!
addBook: anItemToAddToCart quantity: theQuantityToBeAdded
	self validateBookISBN: anItemToAddToCart.
	(theQuantityToBeAdded > 0 and: theQuantityToBeAdded isInteger) ifFalse: [ self error: self class invalidBookQuantityErrorDescription ].
	
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:42:05' prior: 50707704!
validateBookISBN: anItemToValidateTheISBNOf

 (availableBooks includes: anItemToValidateTheISBNOf) ifFalse: [ self error: self class bookNotAvailableErrorDescription ].! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:42:06' prior: 50707739!
validateBookISBN: anItemToValidateTheISBNOf

	 (availableBooks includes: anItemToValidateTheISBNOf) ifFalse: [ self error: self class bookNotAvailableErrorDescription ].! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:42:31'!
validateQuantity: aQuantityToValidate

	^ (aQuantityToValidate > 0 and: aQuantityToValidate isInteger) ifFalse: [ self error: self class invalidBookQuantityErrorDescription ]! !
!TusLibrosCart methodsFor: 'cart management' stamp: 'Sof D 10/30/2023 20:42:31' prior: 50707726!
addBook: anItemToAddToCart quantity: theQuantityToBeAdded
	self validateBookISBN: anItemToAddToCart.
	self validateQuantity: theQuantityToBeAdded.
	
	contents at: anItemToAddToCart put: theQuantityToBeAdded 
	! !

!testRun: #CartTests #test01CartStartsOutEmpty stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test02CartCanAddBook stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test03CartCanAddMultipleBooks stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test04CartCanAddMultipleOfTheSameBook stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test05CartCanAddMultipleCopiesOfMultipleBooks stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test06CartCanShowItsContents stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test07CartCantAddBookWithinvalidISBN stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test08CartCantAddZeroOrNegativeAmountOfBooks stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

!testRun: #CartTests #test09CartCantAddNonIntegerAmountOfBooks stamp: 'Sof D 10/30/2023 20:42:50'!
PASSED!

----QUIT----(30 October 2023 20:43:07) CuisUniversity-5981.image priorSource: 12031019!