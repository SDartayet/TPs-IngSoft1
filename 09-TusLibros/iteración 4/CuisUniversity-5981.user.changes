

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (10 November 2023 02:15:33) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/WebClient.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibros-Tests Ejercicio it4.st----!

----QUIT----(10 November 2023 02:21:09) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (10 November 2023 02:21:12) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!

!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:25:31' prior: 50688555!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:25:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:25:41'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:28:08' prior: 50689874!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:28:27' prior: 50689900!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:28:41' prior: 50689919!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem. semaphore signal.] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:29:01' prior: 50689939!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem. semaphore signal.] fork.
	
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:29:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:29:20'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:29:22'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:31:15' prior: 50688596!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.] fork.
	[totalMoney := self totalMoneyRaised.] fork.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:34:31' prior: 50689994!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	[totalMoney := self totalMoneyRaised.semaphore signal.] fork.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:34:41' prior: 50690012!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	[totalMoney := self totalMoneyRaised.semaphore signal.] fork.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:34:49' prior: 50690031!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	[totalMoney := self totalMoneyRaised.semaphore signal.] fork.
	
	semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:34:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:34:54'!
PASSED!

----QUIT----(10 November 2023 02:35:13) CuisUniversity-5981.image priorSource: 11462889!

----STARTUP---- (12 November 2023 00:13:25) as C:\Users\sofia\Documents\smalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\TusLibros.st----!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:18:57' prior: 50690977!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:18:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:19:00'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:35:04' prior: 50691021!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:35:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:35:07'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:36:33' prior: 50692391!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	
	
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:38:38'!
generatePerformanceReportForSales: theSalesTotal money: theMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport |
	
	performanceReport := Dictionary new.
	
	performanceReport at: 'quantity' put: theSalesTotal.
	performanceReport at: 'total' put: theMoneyTotal.
	performanceReport at: 'summary' put: aSummaryTextForTheReport
	
	^performanceReport ! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:38:55' prior: 50692289!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:39:32' prior: 50692491!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: 'The store sold a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	semaphore wait.
	
	
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:39:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:39:38'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'S D 11/12/2023 00:39:44' prior: 50691575!
test20BookPerformanceShouldNotTakeTooLong

	| cartId bookPerformance quantity total |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	cartId := systemFacade createCartFor: self anotherValidUser authenticatedWith: self anotherValidUserPassword.
	systemFacade add: 5 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	self should: [bookPerformance := systemFacade bookPerformance: self validBook ] 
		notTakeMoreThanMilliseconds: 1100.	

	quantity := bookPerformance at: 'quantity'.
	total := bookPerformance at: 'total'.
	self assert: 7 equals: quantity.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 7) equals: total.
	self assert: 
		self validBook,' was sold ',quantity asString, ' times and raised a total amount of money equal to: ', total asString
		equals: (bookPerformance at: 'summary')
	! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:39:51'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:02' prior: 50692503!
generatePerformanceReportForSales: theSalesTotal money: theMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport |
	
	performanceReport := Dictionary new.
	
	performanceReport at: 'quantity' put: theSalesTotal.
	performanceReport at: 'total' put: theMoneyTotal.
	performanceReport at: 'summary' put: aSummaryTextForTheReport.
	
	^performanceReport ! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:39' prior: 50692518!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance := self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:44' prior: 50692703!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance := self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: anItem,' was sold ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:58' prior: 50692538!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
		
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	performance := self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: 'The store sold a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	semaphore wait.
	
	
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:02'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:03'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'S D 11/12/2023 00:41:14' prior: 50691622!
test21StorePerformanceShouldNotTakeTooLong

	| cartId storePerformance quantity total |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
	
	cartId := systemFacade createCartFor: self anotherValidUser authenticatedWith: self anotherValidUserPassword.
	systemFacade add: 5 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 10 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
			
	self should: [storePerformance := systemFacade storePerformance] 
		notTakeMoreThanMilliseconds: 1100.	

	quantity := storePerformance at: 'quantity'.
	total := storePerformance at: 'total'.

	self assert: 18 equals: quantity.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 7) + (testObjectsFactory anotherItemSellByTheStorePrice * 11) equals: total.
	self assert:
		'The store sold a total of ',quantity asString, ' books and raised a total amount of money equal to: ', total asString
		equals: (storePerformance at: 'summary')
		! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:18'!
PASSED!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Compression.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Sound.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Cryptography-DigitalSignatures.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Identities-UUID.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\System\Network-Kernel.pck.st----!

----End fileIn of C:\Users\sofia\Documents\GitHub\2023-2c-IngSoft\09-TusLibros\Iteracion 4\TusLibros4 Ejercicio\WebClient.pck.st----!

----End fileIn of C:\Users\sofia\Documents\GitHub\2023-2c-IngSoft\09-TusLibros\Iteracion 4\TusLibros4 Ejercicio\TusLibrosREST Ejercicio it4.st----!

TusLibrosServerRestInterface installForDefaultSystem !

TusLibrosClientRestInterface open!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:18:38' prior: 50729965!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	[ resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content] ] fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:18:46' prior: 50729994!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	[ resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content] ] fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:19:43' prior: 50730416!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content] ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:19:51' prior: 50730400!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content] ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:20:19' prior: 50730093!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ] fork
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:20:28' prior: 50730115!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[ currentSelectedCartContent := restInterface listCart: cartId. ] fork
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:20:42' prior: 50730474!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[ currentSelectedCartContent := restInterface listCart: cartId. ] fork.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:21:01' prior: 50730460!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ] fork.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:21:54' prior: 50730486!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[ currentSelectedCartContent := restInterface listCart: cartId. 
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ] fork ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:22:04' prior: 50730498!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. 
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ] fork]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:22:15' prior: 50730106!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	[ cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived ] fork! !

TusLibrosClientRestInterface add: 1 of: 'a' toCartIdentifiedAs: 1!

TusLibrosClientRestInterface new add: 1 of: 'a' toCartIdentifiedAs: 1!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:32:47' prior: 50730444!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self inform: resp content] ! !

TusLibrosClientRestInterface new add: 1 of: 'a' toCartIdentifiedAs: 1!

Object subclass: #AsyncRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncRequest category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:35:10'!
Object subclass: #AsyncRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

TestCase subclass: #AsyncRequestTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncRequestTest category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:36:02'!
TestCase subclass: #AsyncRequestTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncRequestTest methodsFor: 'no messages' stamp: 'S D 11/12/2023 01:37:13'!
test01AsyncHTTPRequestHandlerCanDoActionOnSuccess
	| asyncRequest |! !

!classRenamed: #AsyncRequest as: #AsyncHTTPRequestHandler stamp: 'S D 11/12/2023 01:37:24'!
Smalltalk renameClassNamed: #AsyncRequest as: #AsyncHTTPRequestHandler!

!classDefinition: #AsyncRequestTest category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:38:55'!
TestCase subclass: #AsyncRequestTest
	instanceVariableNames: 'success'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncRequestTest methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:38:52' prior: 50730592!
test01AsyncHTTPRequestHandlerCanDoActionOnSuccess
	| asyncRequest |
	asyncRequest := AsyncHTTPRequestHandler forSuccessDo: [ self simulateRequestSuccess ].
	self assert: success equals: true! !

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:39:00'!
ERROR!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:39:06'!
forSuccessDo: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForSuccessDo: aRenameMe1 ! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:39:34' prior: 50730624!
forSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new onSuccessDo: aClosureToExecuteOnSuccessfulRequest! !

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:39:37'!
ERROR!

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:39:37'!
ERROR!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:39:45'!
onSuccessDo: aClosureToExecuteOnSuccessfulRequest 
	self shouldBeImplemented.! !

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:39:57'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:39:56' prior: 50730647!
onSuccessDo: aClosureToExecuteOnSuccessfulRequest 
	successCallback := aClosureToExecuteOnSuccessfulRequest ! !

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:40:00'!
FAILURE!

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:40:00'!
FAILURE!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:42:31'!
forRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest! !

!methodRemoval: AsyncHTTPRequestHandler class #forSuccessDo: stamp: 'S D 11/12/2023 01:42:34'!
forSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new onSuccessDo: aClosureToExecuteOnSuccessfulRequest!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:43:18'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:43:21'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:43:17'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .! !

!methodRemoval: AsyncHTTPRequestHandler #onSuccessDo: stamp: 'S D 11/12/2023 01:43:24'!
onSuccessDo: aClosureToExecuteOnSuccessfulRequest 
	successCallback := aClosureToExecuteOnSuccessfulRequest !

!classRemoval: #AsyncRequestTest stamp: 'S D 11/12/2023 01:44:00'!
TestCase subclass: #AsyncRequestTest
	instanceVariableNames: 'success'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:44:44'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .! !
!AsyncHTTPRequestHandler class methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:44:44' prior: 50730676!
forRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: a! !

!methodRemoval: AsyncHTTPRequestHandler #withRequest:onSuccessDo: stamp: 'S D 11/12/2023 01:44:44'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:44:57'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:44:56' prior: 50730731!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .
	failure := aClosureToExecuteOnFailedRequest.! !
!AsyncHTTPRequestHandler methodsFor: 'nil' stamp: 'S D 11/12/2023 01:45:13'!
executeRequest
	! !

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:47:03'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure fieldDict'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:47:01' prior: 50730783!
executeRequest
	
	| response |
	
	WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:47:21' prior: 50730797!
executeRequest
	
	| response |
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !

!methodRemoval: AsyncHTTPRequestHandler class #forRequest:onSuccessDo: stamp: 'S D 11/12/2023 01:47:59'!
forRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: a!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:48:33'!
forRequest: theURLOfTheRequestToHandle ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:49:23' prior: 50730524!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. 
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:49:30' prior: 50730538!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:49:38' prior: 50730512!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId. 
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:53:39'!
withRequest: aClosureWithARequestToAServer 

	request := aClosureWithARequestToAServer .
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:53:54' prior: 50730808!
executeRequest
	
	| response |
	
	response := WebClient htmlSubmit: (self request) fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:54:05' prior: 50730874!
executeRequest
	
	| response |
	
	response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:55:00'!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  ! !

!methodRemoval: AsyncHTTPRequestHandler class #forRequest: stamp: 'S D 11/12/2023 01:55:00'!
forRequest: theURLOfTheRequestToHandle !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:55:20' prior: 50730896!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest ! !
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:55:38'!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest 

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest 
	! !

!methodRemoval: AsyncHTTPRequestHandler #withRequest:onSuccessDo:onFailureDo: stamp: 'S D 11/12/2023 01:55:40'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .
	failure := aClosureToExecuteOnFailedRequest.!

!methodRemoval: AsyncHTTPRequestHandler #withRequest: stamp: 'S D 11/12/2023 01:55:41'!
withRequest: aClosureWithARequestToAServer 

	request := aClosureWithARequestToAServer .
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:56:42' prior: 50730552!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:56:52' prior: 50730943!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict.
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:57:14' prior: 50730430!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict.
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:58:30' prior: 50729980!
createCartFor: aUser password: aPassword

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict.
	
	request executeRequest ! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:58:56' prior: 50730885!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] ] fork
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:59:09' prior: 50730994!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: success
		ifFalse:[^self inform: response content] ] fork
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:59:42' prior: 50730956!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:05' prior: 50730970!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream))]
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:10' prior: 50731031!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:16' prior: 50731045!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream asOrderedCollection ))].
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:37' prior: 50730981!
createCartFor: aUser password: aPassword

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 02:01:15'!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess  

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest 
	! !
!AsyncHTTPRequestHandler class methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 02:01:15' prior: 50730907!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: [^(WebUtils jsonDecode: ((response content) readStream))] ! !

!methodRemoval: AsyncHTTPRequestHandler #withRequest:andParameters: stamp: 'S D 11/12/2023 02:01:15'!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest 

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest 
	!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 02:01:23' prior: 50731088!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess  

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest .
	success := aClosureToExecuteOnRequestSuccess 
	! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 02:01:38' prior: 50731099!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: self! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 02:02:13'!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess   
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: self! !

!methodRemoval: AsyncHTTPRequestHandler class #forRequest:withParameters: stamp: 'S D 11/12/2023 02:02:13'!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: self!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 02:02:17' prior: 50731141!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess   
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess ! !

TusLibrosServerRestInterface reset!

TusLibrosClientRestInterface reset!

TusLibrosClientTestWindow open!

WebServer reset!

WebServer reset!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 02:05:50' prior: 50731005!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: (success value: response)
		ifFalse:[^self inform: response content] ] fork
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 02:05:54' prior: 50731182!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ success value: response ]
		ifFalse:[^self inform: response content] ] fork
	! !

----QUIT----(12 November 2023 03:36:25) CuisUniversity-5981.image priorSource: 10197503!

----STARTUP---- (12 November 2023 03:36:42) as C:\Users\sofia\Documents\smalltalkVM\windows64\CuisUniversity-5981.image!


----QUIT----(12 November 2023 03:37:22) CuisUniversity-5981.image priorSource: 12785653!

----STARTUP---- (12 November 2023 14:57:52) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!


TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 15:12:48' prior: 50731059!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream asOrderedCollection ))].
	
	^request executeRequest ! !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 15:14:12' prior: 50731193!
executeRequest
	
	| response |
	
	^[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ success value: response ]
		ifFalse:[^self inform: response content] ] fork
	! !

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 15:45:26' prior: 50731015!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	^request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 15:45:31' prior: 50731073!
createCartFor: aUser password: aPassword

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	^request executeRequest ! !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 15:46:04' prior: 50731236!
executeRequest
	
	| response |
	
	^[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^success value: response ]
		ifFalse:[^self inform: response content] ] fork
	! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:18:14' prior: 50731265!
createCartFor: aUser password: aPassword

	| fieldDict request response|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork
	^request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:18:42' prior: 50731294!
createCartFor: aUser password: aPassword

	| fieldDict request response|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork
	^request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:18:51' prior: 50731316!
createCartFor: aUser password: aPassword

	| fieldDict request response|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork
	^request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:19:06' prior: 50731341!
createCartFor: aUser password: aPassword

	| fieldDict request response|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:19:24' prior: 50731366!
createCartFor: aUser password: aPassword

	| fieldDict response|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" ! !

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:22:38' prior: 50731391!
createCartFor: aUser password: aPassword

	| fieldDict response cart|
	
	cart := Cart new.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:22:59' prior: 50731418!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	cartId := 0.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:23:03' prior: 50731444!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	cartId := -1.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:23:16' prior: 50731470!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	cartId := -1.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:23:24' prior: 50731496!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	cartId := -1.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" 
	^cartId.! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:24:25' prior: 50731522!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	cartId := -1.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" 
	^cartId.! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:25:23' prior: 50731549!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	cartId := '-1'.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" 
	^cartId.! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:27:34' prior: 50731576!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	cartId := '-1'.
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" 
	^cartId.! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:28:46' prior: 50731603!
createCartFor: aUser password: aPassword

	| fieldDict response cartId|
	
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" 
	^cartId.! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:32:23' prior: 50731630!
createCartFor: aUser password: aPassword

	| fieldDict response cartId semaphore|
	
	semaphore := Semaphore new.
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" 
	
	^cartId.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:32:36' prior: 50731657!
createCartFor: aUser password: aPassword

	| fieldDict response cartId semaphore|
	
	semaphore := Semaphore new.
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[^self inform: response content] ] fork.
	"request executeRequest" 
	semaphore wait.
	^cartId.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:32:54' prior: 50731684!
createCartFor: aUser password: aPassword

	| fieldDict response cartId semaphore|
	
	semaphore := Semaphore new.
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)) ]
		ifFalse:[semaphore signal. self inform: response content] ] fork.
	"request executeRequest" 
	semaphore wait.
	^cartId.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:33:05' prior: 50731711!
createCartFor: aUser password: aPassword

	| fieldDict response cartId semaphore|
	
	semaphore := Semaphore new.
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	"request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))]."
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	[ response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ cartId := (WebUtils jsonDecode: ((response content) readStream)). semaphore signal ]
		ifFalse:[semaphore signal. self inform: response content] ] fork.
	"request executeRequest" 
	semaphore wait.
	^cartId.! !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:47:41' prior: 50731282!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^success value: response ]
		ifFalse:[^self inform: response content] ] fork.
	^response! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:48:50' prior: 50731769!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ ^success value: response ]
		ifFalse:[^self inform: response content] ] fork.
	^response! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:49:01' prior: 50731780!
executeRequest
	
	| response XXXX|
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ XXXX := success value: response ]
		ifFalse:[^self inform: response content] ] fork.
	^XXXX! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:49:57' prior: 50731739!
createCartFor: aUser password: aPassword

	| fieldDict cartId request|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	

	cartId := request executeRequest.

	^cartId.! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:50:10' prior: 50731802!
createCartFor: aUser password: aPassword

	| fieldDict cartId request|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | (WebUtils jsonDecode: ((response content) readStream))].
	

	cartId := request executeRequest.

	^cartId.! !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:50:36' prior: 50731791!
executeRequest
	
	| response XXXX semaphore|
	semaphore := Semaphore new.
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ XXXX := success value: response ]
		ifFalse:[^self inform: response content] ] fork.
	^XXXX! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:50:43' prior: 50731836!
executeRequest
	
	| response XXXX semaphore|
	semaphore := Semaphore new.
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ XXXX := success value: response ]
		ifFalse:[^self inform: response content] ] fork.
	semaphore wait.
	^XXXX! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:50:50' prior: 50731848!
executeRequest
	
	| response XXXX semaphore|
	semaphore := Semaphore new.
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [semaphore signal. XXXX := success value: response ]
		ifFalse:[^self inform: response content] ] fork.
	semaphore wait.
	^XXXX! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:51:12' prior: 50731861!
executeRequest
	
	| response XXXX semaphore|
	semaphore := Semaphore new.
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ XXXX := success value: response. semaphore signal. ]
		ifFalse:[semaphore signal. self inform: response content] ] fork.
	semaphore wait.
	^XXXX! !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:52:22' prior: 50731874!
executeRequest
	
	| response semaphore|
	semaphore := Semaphore new.
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ XXXX := success value: response. semaphore signal. ]
		ifFalse:[semaphore signal. self inform: response content] ] fork.
	semaphore wait.
	^XXXX! !

Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure fieldDict XXXX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'eaam 11/12/2023 16:52:35'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure fieldDict XXXX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:52:43' prior: 50731889!
executeRequest
	
	| response semaphore|
	semaphore := Semaphore new.
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ XXXX := success value: response. semaphore signal. ]
		ifFalse:[semaphore signal. self inform: response content] ] fork.
	semaphore wait.! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:52:56'!
responseValue
	
	^XXXX! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'eaam 11/12/2023 16:53:18' prior: 50731819!
createCartFor: aUser password: aPassword

	| fieldDict cartId request|
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | (WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest.
	cartId := request responseValue .

	^cartId.! !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'eaam 11/12/2023 16:53:50' prior: 50731919!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ XXXX := success value: response. ]
		ifFalse:[self inform: response content] ] fork.! !

TusLibrosClientTestWindow open!

----QUIT----(12 November 2023 16:54:39) CuisUniversity-5981.image priorSource: 12785866!