

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (10 November 2023 02:15:33) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/WebClient.pck.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/TusLibros-Tests Ejercicio it4.st----!

----QUIT----(10 November 2023 02:21:09) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (10 November 2023 02:21:12) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!

!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:25:31' prior: 50688555!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:25:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:25:41'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:28:08' prior: 50689874!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:28:27' prior: 50689900!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:28:41' prior: 50689919!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem. semaphore signal.] fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:29:01' prior: 50689939!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem. semaphore signal.] fork.
	
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:29:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:29:20'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:29:22'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:31:15' prior: 50688596!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.] fork.
	[totalMoney := self totalMoneyRaised.] fork.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:34:31' prior: 50689994!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	[totalMoney := self totalMoneyRaised.semaphore signal.] fork.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:34:41' prior: 50690012!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	[totalMoney := self totalMoneyRaised.semaphore signal.] fork.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/10/2023 02:34:49' prior: 50690031!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	[totalMoney := self totalMoneyRaised.semaphore signal.] fork.
	
	semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'eaam 11/10/2023 02:34:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:34:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'eaam 11/10/2023 02:34:54'!
PASSED!

----QUIT----(10 November 2023 02:35:13) CuisUniversity-5981.image priorSource: 11462889!

----STARTUP---- (12 November 2023 00:13:25) as C:\Users\sofia\Documents\smalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\TusLibros.st----!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:18:57' prior: 50690977!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:18:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:18:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:19:00'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:35:04' prior: 50691021!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:35:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:35:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:35:07'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:36:33' prior: 50692391!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	semaphore wait.
	
	
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:38:38'!
generatePerformanceReportForSales: theSalesTotal money: theMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport |
	
	performanceReport := Dictionary new.
	
	performanceReport at: 'quantity' put: theSalesTotal.
	performanceReport at: 'total' put: theMoneyTotal.
	performanceReport at: 'summary' put: aSummaryTextForTheReport
	
	^performanceReport ! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:38:55' prior: 50692289!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:39:32' prior: 50692491!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
	
	performance := Dictionary new.
	
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: 'The store sold a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	semaphore wait.
	
	
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:39:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:39:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:39:38'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'S D 11/12/2023 00:39:44' prior: 50691575!
test20BookPerformanceShouldNotTakeTooLong

	| cartId bookPerformance quantity total |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	cartId := systemFacade createCartFor: self anotherValidUser authenticatedWith: self anotherValidUserPassword.
	systemFacade add: 5 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
		
	self should: [bookPerformance := systemFacade bookPerformance: self validBook ] 
		notTakeMoreThanMilliseconds: 1100.	

	quantity := bookPerformance at: 'quantity'.
	total := bookPerformance at: 'total'.
	self assert: 7 equals: quantity.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 7) equals: total.
	self assert: 
		self validBook,' was sold ',quantity asString, ' times and raised a total amount of money equal to: ', total asString
		equals: (bookPerformance at: 'summary')
	! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:39:51'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:02' prior: 50692503!
generatePerformanceReportForSales: theSalesTotal money: theMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport |
	
	performanceReport := Dictionary new.
	
	performanceReport at: 'quantity' put: theSalesTotal.
	performanceReport at: 'total' put: theMoneyTotal.
	performanceReport at: 'summary' put: aSummaryTextForTheReport.
	
	^performanceReport ! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:39' prior: 50692518!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance := self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:44' prior: 50692703!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	
	[totalSales := self totalSalesOf: anItem. semaphore signal.] fork.
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphore wait.
	
	bookPerformance := self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: anItem,' was sold ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/12/2023 00:40:58' prior: 50692538!
storePerformance

	| totalMoney totalSales performance semaphore|
	
	semaphore := Semaphore new.
		
	[totalSales := self totalSales.semaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	
	performance := self generatePerformanceReportForSales: totalSales money: totalMoney withSummary: 'The store sold a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	semaphore wait.
	
	
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:40:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:02'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:03'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'S D 11/12/2023 00:41:14' prior: 50691622!
test21StorePerformanceShouldNotTakeTooLong

	| cartId storePerformance quantity total |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
	
	cartId := systemFacade createCartFor: self anotherValidUser authenticatedWith: self anotherValidUserPassword.
	systemFacade add: 5 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 10 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade 
		checkOutCartIdentifiedAs: cartId 
		withCreditCardNumbered: testObjectsFactory validCreditCardNumber 
		ownedBy: testObjectsFactory validOwnerName 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
			
	self should: [storePerformance := systemFacade storePerformance] 
		notTakeMoreThanMilliseconds: 1100.	

	quantity := storePerformance at: 'quantity'.
	total := storePerformance at: 'total'.

	self assert: 18 equals: quantity.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 7) + (testObjectsFactory anotherItemSellByTheStorePrice * 11) equals: total.
	self assert:
		'The store sold a total of ',quantity asString, ' books and raised a total amount of money equal to: ', total asString
		equals: (storePerformance at: 'summary')
		! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/12/2023 00:41:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/12/2023 00:41:18'!
PASSED!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Compression.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Sound.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Cryptography-DigitalSignatures.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\Features\Identities-UUID.pck.st----!

----End fileIn of C:\Users\sofia\Documents\smalltalkVM\windows64\Packages\System\Network-Kernel.pck.st----!

----End fileIn of C:\Users\sofia\Documents\GitHub\2023-2c-IngSoft\09-TusLibros\Iteracion 4\TusLibros4 Ejercicio\WebClient.pck.st----!

----End fileIn of C:\Users\sofia\Documents\GitHub\2023-2c-IngSoft\09-TusLibros\Iteracion 4\TusLibros4 Ejercicio\TusLibrosREST Ejercicio it4.st----!

TusLibrosServerRestInterface installForDefaultSystem !

TusLibrosClientRestInterface open!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:18:38' prior: 50729965!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	[ resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content] ] fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:18:46' prior: 50729994!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	[ resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content] ] fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:19:43' prior: 50730416!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content] ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:19:51' prior: 50730400!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content] ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:20:19' prior: 50730093!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ] fork
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:20:28' prior: 50730115!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[ currentSelectedCartContent := restInterface listCart: cartId. ] fork
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:20:42' prior: 50730474!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[ currentSelectedCartContent := restInterface listCart: cartId. ] fork.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:21:01' prior: 50730460!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ] fork.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:21:54' prior: 50730486!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[ currentSelectedCartContent := restInterface listCart: cartId. 
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ] fork ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:22:04' prior: 50730498!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. 
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ] fork]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:22:15' prior: 50730106!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	[ cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived ] fork! !

TusLibrosClientRestInterface add: 1 of: 'a' toCartIdentifiedAs: 1!

TusLibrosClientRestInterface new add: 1 of: 'a' toCartIdentifiedAs: 1!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:32:47' prior: 50730444!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self inform: resp content] ! !

TusLibrosClientRestInterface new add: 1 of: 'a' toCartIdentifiedAs: 1!

Object subclass: #AsyncRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncRequest category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:35:10'!
Object subclass: #AsyncRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

TestCase subclass: #AsyncRequestTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncRequestTest category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:36:02'!
TestCase subclass: #AsyncRequestTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncRequestTest methodsFor: 'no messages' stamp: 'S D 11/12/2023 01:37:13'!
test01AsyncHTTPRequestHandlerCanDoActionOnSuccess
	| asyncRequest |! !

!classRenamed: #AsyncRequest as: #AsyncHTTPRequestHandler stamp: 'S D 11/12/2023 01:37:24'!
Smalltalk renameClassNamed: #AsyncRequest as: #AsyncHTTPRequestHandler!

!classDefinition: #AsyncRequestTest category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:38:55'!
TestCase subclass: #AsyncRequestTest
	instanceVariableNames: 'success'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncRequestTest methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:38:52' prior: 50730592!
test01AsyncHTTPRequestHandlerCanDoActionOnSuccess
	| asyncRequest |
	asyncRequest := AsyncHTTPRequestHandler forSuccessDo: [ self simulateRequestSuccess ].
	self assert: success equals: true! !

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:39:00'!
ERROR!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:39:06'!
forSuccessDo: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForSuccessDo: aRenameMe1 ! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:39:34' prior: 50730624!
forSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new onSuccessDo: aClosureToExecuteOnSuccessfulRequest! !

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:39:37'!
ERROR!

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:39:37'!
ERROR!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:39:45'!
onSuccessDo: aClosureToExecuteOnSuccessfulRequest 
	self shouldBeImplemented.! !

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:39:57'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:39:56' prior: 50730647!
onSuccessDo: aClosureToExecuteOnSuccessfulRequest 
	successCallback := aClosureToExecuteOnSuccessfulRequest ! !

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:40:00'!
FAILURE!

!testRun: #AsyncRequestTest #test01AsyncHTTPRequestHandlerCanDoActionOnSuccess stamp: 'S D 11/12/2023 01:40:00'!
FAILURE!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:42:31'!
forRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest! !

!methodRemoval: AsyncHTTPRequestHandler class #forSuccessDo: stamp: 'S D 11/12/2023 01:42:34'!
forSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new onSuccessDo: aClosureToExecuteOnSuccessfulRequest!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:43:18'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:43:21'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:43:17'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .! !

!methodRemoval: AsyncHTTPRequestHandler #onSuccessDo: stamp: 'S D 11/12/2023 01:43:24'!
onSuccessDo: aClosureToExecuteOnSuccessfulRequest 
	successCallback := aClosureToExecuteOnSuccessfulRequest !

!classRemoval: #AsyncRequestTest stamp: 'S D 11/12/2023 01:44:00'!
TestCase subclass: #AsyncRequestTest
	instanceVariableNames: 'success'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:44:44'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .! !
!AsyncHTTPRequestHandler class methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:44:44' prior: 50730676!
forRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: a! !

!methodRemoval: AsyncHTTPRequestHandler #withRequest:onSuccessDo: stamp: 'S D 11/12/2023 01:44:44'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:44:57'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:44:56' prior: 50730731!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .
	failure := aClosureToExecuteOnFailedRequest.! !
!AsyncHTTPRequestHandler methodsFor: 'nil' stamp: 'S D 11/12/2023 01:45:13'!
executeRequest
	! !

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/12/2023 01:47:03'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure fieldDict'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:47:01' prior: 50730783!
executeRequest
	
	| response |
	
	WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:47:21' prior: 50730797!
executeRequest
	
	| response |
	
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !

!methodRemoval: AsyncHTTPRequestHandler class #forRequest:onSuccessDo: stamp: 'S D 11/12/2023 01:47:59'!
forRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest
	^self new withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: a!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:48:33'!
forRequest: theURLOfTheRequestToHandle ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:49:23' prior: 50730524!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. 
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:49:30' prior: 50730538!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/12/2023 01:49:38' prior: 50730512!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId. 
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:53:39'!
withRequest: aClosureWithARequestToAServer 

	request := aClosureWithARequestToAServer .
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:53:54' prior: 50730808!
executeRequest
	
	| response |
	
	response := WebClient htmlSubmit: (self request) fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:54:05' prior: 50730874!
executeRequest
	
	| response |
	
	response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] 
	! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:55:00'!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  ! !

!methodRemoval: AsyncHTTPRequestHandler class #forRequest: stamp: 'S D 11/12/2023 01:55:00'!
forRequest: theURLOfTheRequestToHandle !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 01:55:20' prior: 50730896!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest ! !
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 01:55:38'!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest 

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest 
	! !

!methodRemoval: AsyncHTTPRequestHandler #withRequest:onSuccessDo:onFailureDo: stamp: 'S D 11/12/2023 01:55:40'!
withRequest: aClosureWithARequestToAServer onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 

	request := aClosureWithARequestToAServer .
	success := aClosureToExecuteOnSuccessfulRequest .
	failure := aClosureToExecuteOnFailedRequest.!

!methodRemoval: AsyncHTTPRequestHandler #withRequest: stamp: 'S D 11/12/2023 01:55:41'!
withRequest: aClosureWithARequestToAServer 

	request := aClosureWithARequestToAServer .
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:56:42' prior: 50730552!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:56:52' prior: 50730943!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict.
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:57:14' prior: 50730430!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict.
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:58:30' prior: 50729980!
createCartFor: aUser password: aPassword

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict.
	
	request executeRequest ! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:58:56' prior: 50730885!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream))]
		ifFalse:[^self inform: response content] ] fork
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 01:59:09' prior: 50730994!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: success
		ifFalse:[^self inform: response content] ] fork
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 01:59:42' prior: 50730956!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:05' prior: 50730970!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream))]
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:10' prior: 50731031!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:16' prior: 50731045!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream asOrderedCollection ))].
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 02:00:37' prior: 50730981!
createCartFor: aUser password: aPassword

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 02:01:15'!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess  

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest 
	! !
!AsyncHTTPRequestHandler class methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 02:01:15' prior: 50730907!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: [^(WebUtils jsonDecode: ((response content) readStream))] ! !

!methodRemoval: AsyncHTTPRequestHandler #withRequest:andParameters: stamp: 'S D 11/12/2023 02:01:15'!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest 

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest 
	!
!AsyncHTTPRequestHandler methodsFor: 'initialization' stamp: 'S D 11/12/2023 02:01:23' prior: 50731088!
withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess  

	request := theURLOfTheRequestToHandle .
	fieldDict := theParametersOfTheRequest .
	success := aClosureToExecuteOnRequestSuccess 
	! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 02:01:38' prior: 50731099!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: self! !
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 02:02:13'!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess   
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: self! !

!methodRemoval: AsyncHTTPRequestHandler class #forRequest:withParameters: stamp: 'S D 11/12/2023 02:02:13'!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest  
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: self!
!AsyncHTTPRequestHandler class methodsFor: 'instance creation' stamp: 'S D 11/12/2023 02:02:17' prior: 50731141!
forRequest: theURLOfTheRequestToHandle withParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess   
	^self new withRequest: theURLOfTheRequestToHandle andParameters: theParametersOfTheRequest onSuccessDo: aClosureToExecuteOnRequestSuccess ! !

TusLibrosServerRestInterface reset!

TusLibrosClientRestInterface reset!

TusLibrosClientTestWindow open!

WebServer reset!

WebServer reset!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem !

TusLibrosClientTestWindow open!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 02:05:50' prior: 50731005!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: (success value: response)
		ifFalse:[^self inform: response content] ] fork
	! !
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 02:05:54' prior: 50731182!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
		
	response isSuccess 
		ifTrue: [ success value: response ]
		ifFalse:[^self inform: response content] ] fork
	! !

----QUIT----(12 November 2023 03:36:25) CuisUniversity-5981.image priorSource: 10197503!

----STARTUP---- (12 November 2023 03:36:42) as C:\Users\sofia\Documents\smalltalkVM\windows64\CuisUniversity-5981.image!


----QUIT----(12 November 2023 03:37:22) CuisUniversity-5981.image priorSource: 12785653!

----STARTUP---- (12 November 2023 23:08:41) as C:\Users\sofia\Documents\smalltalkVM\windows64\CuisUniversity-5981.image!

!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 23:42:25'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId withRequestCallback: aClosureToUseForRequestCallback 

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosServerRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:42:25' prior: 50730212!
addToCart: aRequest

	| bookIsbn cartId quantity |

	(Delay forSeconds: 3) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId withRequestCallback: self.
			'OK' ]
		to: aRequest 
	! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:42:25' prior: 50730834!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId withRequestCallback: self. 
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs: stamp: 'S D 11/12/2023 23:42:25'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 23:42:52'!
createCartFor: aUser password: aPassword onRequestCallbackDo: aClosureToUseForRequestCallback 

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:42:52' prior: 50730847!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' onRequestCallbackDo: self.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived ! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password: stamp: 'S D 11/12/2023 23:42:52'!
createCartFor: aUser password: aPassword

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 23:43:19'!
listCart: cartId onRequestCallbackDo: aClosureToUseForRequestCallback 

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream asOrderedCollection ))].
	
	request executeRequest ! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'S D 11/12/2023 23:43:19'!
listCart: aRequest onRequestCallbackDo: aClosureToUseForRequestCallback 

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
! !
!TusLibrosServerRestInterface class methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:43:19' prior: 50730361!
installForDefaultSystem

	"self installForDefaultSystem"
	
	| server port interface |
	
	interface := self on: self defaultSystem.
	
	"Esto es para poder acceder a la interface de manera global - Hernan"
	Smalltalk at: #CurrentTusLibrosRestInterface put: interface.
	
	port := 9999.
	server := WebServer reset default.
	server listenOn: port.
	server 
		addService: '/createCart' 
		action: [:request | interface createCart: request ].
	server 
		addService: '/addToCart' 
		action: [:request | interface addToCart: request ].
	server
		addService: '/listCart' 
		action: [:request | interface listCart: request onRequestCallbackDo: self ].
	server
		addService: '/checkOutCart' 
		action: [:request | interface checkOutCart: request ].
	server
		addService: '/listPurchases' 
		action: [:request | interface listPurchases: request ].
	server useDebugErrorHandler ! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:43:19' prior: 50730856!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId onRequestCallbackDo: self. 
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !

!methodRemoval: TusLibrosClientRestInterface #listCart: stamp: 'S D 11/12/2023 23:43:19'!
listCart: cartId

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream asOrderedCollection ))].
	
	request executeRequest !

!methodRemoval: TusLibrosServerRestInterface #listCart: stamp: 'S D 11/12/2023 23:43:19'!
listCart: aRequest

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 23:47:05'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId  

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:47:05' prior: 50731252!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId . 
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]! !
!TusLibrosServerRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:47:05' prior: 50731234!
addToCart: aRequest

	| bookIsbn cartId quantity |

	(Delay forSeconds: 3) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId .
			'OK' ]
		to: aRequest 
	! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs:withRequestCallback: stamp: 'S D 11/12/2023 23:47:05'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId withRequestCallback: aClosureToUseForRequestCallback 

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 23:47:30'!
createCartFor: aUser password: aPassword  

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest ! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:47:30' prior: 50731298!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk' .
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived ! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password:onRequestCallbackDo: stamp: 'S D 11/12/2023 23:47:30'!
createCartFor: aUser password: aPassword onRequestCallbackDo: aClosureToUseForRequestCallback 

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/createCart') withParameters: fieldDict onSuccessDo: [ : response | ^(WebUtils jsonDecode: ((response content) readStream))].
	
	request executeRequest !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 23:47:41'!
listCart: cartId  

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream asOrderedCollection ))].
	
	request executeRequest ! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'S D 11/12/2023 23:47:41'!
listCart: aRequest  

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
! !
!TusLibrosServerRestInterface class methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:47:41' prior: 50731352!
installForDefaultSystem

	"self installForDefaultSystem"
	
	| server port interface |
	
	interface := self on: self defaultSystem.
	
	"Esto es para poder acceder a la interface de manera global - Hernan"
	Smalltalk at: #CurrentTusLibrosRestInterface put: interface.
	
	port := 9999.
	server := WebServer reset default.
	server listenOn: port.
	server 
		addService: '/createCart' 
		action: [:request | interface createCart: request ].
	server 
		addService: '/addToCart' 
		action: [:request | interface addToCart: request ].
	server
		addService: '/listCart' 
		action: [:request | interface listCart: request ].
	server
		addService: '/checkOutCart' 
		action: [:request | interface checkOutCart: request ].
	server
		addService: '/listPurchases' 
		action: [:request | interface listPurchases: request ].
	server useDebugErrorHandler ! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'S D 11/12/2023 23:47:41' prior: 50731383!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId . 
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !

!methodRemoval: TusLibrosClientRestInterface #listCart:onRequestCallbackDo: stamp: 'S D 11/12/2023 23:47:41'!
listCart: cartId onRequestCallbackDo: aClosureToUseForRequestCallback 

	| fieldDict request |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
	request := AsyncHTTPRequestHandler forRequest: (self url,'/listCart') withParameters: fieldDict onSuccessDo: [: response | ^(WebUtils jsonDecode: ((response content) readStream asOrderedCollection ))].
	
	request executeRequest !

!methodRemoval: TusLibrosServerRestInterface #listCart:onRequestCallbackDo: stamp: 'S D 11/12/2023 23:47:41'!
listCart: aRequest onRequestCallbackDo: aClosureToUseForRequestCallback 

	| cartId |

	(Delay forSeconds: 10) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields ].
	
	self 
		answer: [(systemFacade listCartIdentifiedAs: cartId) asArray]
		to: aRequest 
!
!TusLibrosClientRestInterface class methodsFor: 'no messages' stamp: 'S D 11/12/2023 23:48:15'!
for: aTestWindowModelToSendUpdatesTo
	^self new with: aTestWindowModelToSendUpdatesTo ! !

!classDefinition: #TusLibrosClientRestInterface category: 'TusLibrosREST' stamp: 'S D 11/12/2023 23:48:34'!
Object subclass: #TusLibrosClientRestInterface
	instanceVariableNames: 'port model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosClientRestInterface methodsFor: 'nil' stamp: 'S D 11/12/2023 23:48:33'!
with: aTestWindowModelToSendUpdatesTo 
	model := aTestWindowModelToSendUpdatesTo ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/12/2023 23:49:39' prior: 50731419!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId  

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ self addToCartAsyncCompleted ].
	
	request executeRequest ! !
!TusLibrosClientRestInterface methodsFor: 'nil' stamp: 'S D 11/12/2023 23:50:46'!
addToCartAsyncCompleted 
	! !

TusLibrosClientRestInterface add: 1 of: 1 toCartIdentifiedAs: 1!

TusLibrosClientRestInterface new add: 1 of: 1 toCartIdentifiedAs: 1!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/13/2023 00:04:14'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure fieldDict responseStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #AsyncHTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/13/2023 00:04:15'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure fieldDict responseStatus responseContent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!AsyncHTTPRequestHandler methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 00:04:13' prior: 50731193!
executeRequest
	
	| response |
	
	[ response := WebClient htmlSubmit: request fields: fieldDict.
	  
	  responseStatus := response isSuccess.
	  responseContent := response content ] fork
	! !
!AsyncHTTPRequestHandler methodsFor: 'nil' stamp: 'S D 11/13/2023 00:06:43'!
status
	^responseStatus ! !
!AsyncHTTPRequestHandler methodsFor: 'nil' stamp: 'S D 11/13/2023 00:06:58'!
content
	^responseContent ! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 00:08:50'!
addToCartAsyncCompleted: theRequestThatWasCompleted 
	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 00:08:50' prior: 50731641!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId  

	| fieldDict request |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	request := AsyncHTTPRequestHandler forRequest: (self url,'/addToCart') withParameters: fieldDict onSuccessDo: [ self addToCartAsyncCompleted: self ].
	
	request executeRequest ! !

!methodRemoval: TusLibrosClientRestInterface #addToCartAsyncCompleted stamp: 'S D 11/13/2023 00:08:50'!
addToCartAsyncCompleted 
	!
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 00:09:09' prior: 50731702!
addToCartAsyncCompleted: theRequestThatWasCompleted 
	self assertRequestIsntFailure: theRequestThatWasCompleted 
	! !
!TusLibrosClientRestInterface methodsFor: 'nil' stamp: 'S D 11/13/2023 00:10:47'!
assertRequestIsntFailure: theRequestThatWasCompleted 
	theRequestThatWasCompleted ifFalse: [ model informFailure: theRequestThatWasCompleted content ]! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 00:10:59' prior: 50731735!
assertRequestIsntFailure: theRequestThatWasCompleted 
	theRequestThatWasCompleted status ifFalse: [ model informFailure: theRequestThatWasCompleted content ]! !
!TusLibrosClientTestWindowModel methodsFor: 'nil' stamp: 'S D 11/13/2023 00:11:22'!
informFailure: theErrorToInform
	self inform: theErrorToInform ! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 00:12:04' prior: 50731728!
addToCartAsyncCompleted: theRequestThatWasCompleted 
	self assertRequestIsntFailure: theRequestThatWasCompleted .
	model updateCartListAddingID: theRequestThatWasCompleted content
	! !
!TusLibrosClientTestWindowModel methodsFor: 'updating' stamp: 'S D 11/13/2023 00:12:42'!
updateCartListAddingID: theIDToAddToTheList
	! !

!classRemoval: #TusLibrosServerRestInterface stamp: 'S D 11/13/2023 00:16:26'!
Object subclass: #TusLibrosServerRestInterface
	instanceVariableNames: 'systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classRemoval: #TusLibrosClientTestWindowModel stamp: 'S D 11/13/2023 00:16:26'!
Object subclass: #TusLibrosClientTestWindowModel
	instanceVariableNames: 'cartIds selectedCartIdsIndex selectedBookCatalogIndex currentSelectedCartContent restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classRemoval: #TusLibrosClientRestInterface stamp: 'S D 11/13/2023 00:16:26'!
Object subclass: #TusLibrosClientRestInterface
	instanceVariableNames: 'port model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classRemoval: #AsyncHTTPRequestHandler stamp: 'S D 11/13/2023 00:16:27'!
Object subclass: #AsyncHTTPRequestHandler
	instanceVariableNames: 'successCallback request success failure fieldDict responseStatus responseContent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classRemoval: #DefaultMerchantProcessor stamp: 'S D 11/13/2023 00:16:27'!
MerchantProcessor subclass: #DefaultMerchantProcessor
	instanceVariableNames: 'transactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classRemoval: #RealTimeClock stamp: 'S D 11/13/2023 00:16:27'!
Clock subclass: #RealTimeClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classRemoval: #TusLibrosClientTestWindow stamp: 'S D 11/13/2023 00:16:27'!
SystemWindow subclass: #TusLibrosClientTestWindow
	instanceVariableNames: 'cartIdsListMorph booksCatalogListMorph cartContentListMorph addToCartButtonMorph listCartButtonMorph selectedCartLabelMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

----End fileIn of C:\Users\sofia\Documents\GitHub\2023-2c-IngSoft\09-TusLibros\Iteracion 4\TusLibros4 Ejercicio\TusLibrosREST Ejercicio it4.st----!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 00:16:45' prior: 50732241!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ] fork ]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 00:16:55' prior: 50732254!
createCart

	| newCartId |
	
	[ newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived ] fork! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 00:17:05' prior: 50732263!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[ currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ] fork ].! !

TusLibrosClientTestWindow open!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface class methodsFor: 'no messages' stamp: 'S D 11/13/2023 00:22:14'!
for: aModelToNotifyUpdatesTo
	^self new with: 	aModelToNotifyUpdatesTo ! !

!classDefinition: #TusLibrosClientRestInterface category: 'TusLibrosREST' stamp: 'S D 11/13/2023 00:22:29'!
Object subclass: #TusLibrosClientRestInterface
	instanceVariableNames: 'port model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosClientRestInterface methodsFor: 'nil' stamp: 'S D 11/13/2023 00:22:28'!
with: 	aModelToNotifyUpdatesTo 
	model := aModelToNotifyUpdatesTo ! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 00:24:10'!
informError: theTextOfTheErrorToInform
	self inform: theTextOfTheErrorToInform ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 00:24:31' prior: 50732113!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[ model informError: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 00:24:38' prior: 50732128!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[ model informError: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 00:24:42' prior: 50732142!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[ model informError: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 00:25:37' prior: 50732640!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[ model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[ model informError: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 00:25:51'!
updateCartList: theItemsOfTheList! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 00:26:42' prior: 50732668!
updateCartList: theIDOfTheNewCart! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 00:26:57' prior: 50732558!
createCart

	
	
	[ restInterface createCartFor: 'hernan' password: 'smalltalk'. ] fork! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 00:27:08' prior: 50732673!
updateCartList: theIDOfTheNewCart

	cartIds add: theIDOfTheNewCart.
	self triggerEvent: #newCartIdArrived ! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 00:28:12' prior: 50732625!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[ model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) ] 
		ifFalse:[ model informError: resp content]! !

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'initialization' stamp: 'S D 11/13/2023 00:28:37' prior: 50732283 overrides: 16920235!
initialize

	cartIds := OrderedCollection new.
	currentSelectedCartContent := OrderedCollection new.
	selectedCartIdsIndex := 0.
	selectedBookCatalogIndex := 0.
	restInterface := TusLibrosClientRestInterface for: self.! !

TusLibrosClientTestWindow open!

Object subclass: #HTTPRequestHandler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #HTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/13/2023 00:40:58'!
Object subclass: #HTTPRequestHandler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!HTTPRequestHandler class methodsFor: 'no messages' stamp: 'S D 11/13/2023 00:42:04'!
forURL: theURLOfTheRequest parameters: theListOfRequestParameters! !
!HTTPRequestHandler class methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 00:42:25' prior: 50732734!
forURL: theURLOfTheRequest parameters: theListOfRequestParameters
	^self new withURL: theURLOfTheRequest parameters: theListOfRequestParameters ! !

!classDefinition: #HTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/13/2023 00:43:01'!
Object subclass: #HTTPRequestHandler
	instanceVariableNames: 'url'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #HTTPRequestHandler category: 'TusLibrosREST' stamp: 'S D 11/13/2023 00:43:01'!
Object subclass: #HTTPRequestHandler
	instanceVariableNames: 'url params'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!HTTPRequestHandler methodsFor: 'nil' stamp: 'S D 11/13/2023 00:42:59'!
withURL: theURLOfTheRequest parameters: theListOfRequestParameters 
	url := theURLOfTheRequest .
	params := theListOfRequestParameters ! !

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. 8. 'bookIsbn'. 'GreenBook'. 'bookQuantity'. 1}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: 1.
	
	resp fields!

| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. 8. 'bookIsbn'. 'GreenBook'. 'bookQuantity'. 1}.		
		
	resp := WebClient htmlSubmit: ('http://localhost:9999/addToCart') fields: 1.
	
	resp fields!


	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. 8. 'bookIsbn'. 'GreenBook'. 'bookQuantity'. 1}.		
		
	resp := WebClient htmlSubmit: ('http://localhost:9999/addToCart') fields: fieldDict.
	
	resp fields!
!TusLibrosClientRestInterface methodsFor: 'nil' stamp: 'S D 11/13/2023 01:09:23'!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:09:47' prior: 50732609!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self doAsyncAPIRequest: '/addToCart' withParameters: fieldDict onSuccessReturn: 1.
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[ model informError: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:09:54' prior: 50732799!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self doAsyncAPIRequest: '/addToCart' withParameters: fieldDict onSuccessReturn: 1.
		
	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 01:10:22' prior: 50732791!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

	| resp |

	resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[ model informError: resp content]
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:11:02' prior: 50732693!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	self doAsyncAPIRequest: '/createCart' withParameters: fieldDict onSuccessReturn: 		[ model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) ] 
		! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:11:37' prior: 50732654!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	self doAsyncAPIRequest: '/listCart' withParameters: fieldDict onSuccessReturn: 		[ model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:11:56' prior: 50732860!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	^self doAsyncAPIRequest: '/listCart' withParameters: fieldDict onSuccessReturn: 		[ model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:12:10' prior: 50732873!
listCart: cartId

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	^self doAsyncAPIRequest: '/listCart' withParameters: fieldDict onSuccessReturn: 		[ : resp | model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:12:20' prior: 50732846!
createCartFor: aUser password: aPassword

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	^self doAsyncAPIRequest: '/createCart' withParameters: fieldDict onSuccessReturn: 		[ : resp | model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) ] 
		! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:12:37' prior: 50732818!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self doAsyncAPIRequest: '/addToCart' withParameters: fieldDict onSuccessReturn: [ : resp | model updateCartList: (WebUtils jsonDecode: ((resp content) readStream)) ] .
		
	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 01:13:14' prior: 50732831!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

	| resp |

	resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
		
	resp isSuccess 
		ifTrue: [ ^(aClosureWithTheValueToReturn value: resp) ]
		ifFalse:[ model informError: resp content]
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:14:03' prior: 50732886!
listCart: cartId

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	^self doAsyncAPIRequest: '/listCart' withParameters: fieldDict onSuccessReturn: 		[ : resp | ^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:15:50' prior: 50692722!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	semaphore := Semaphore new.

	
	
	
		
	bookPerformance := self generatePerformanceReportForSales: [ totalSales := self totalSalesOf: anItem ] money: [ totalMoney := self totalMoneyRaisedBy: anItem. ] withSummary: anItem,' was sold ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:16:00' prior: 50732955!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |
	
		
	bookPerformance := self generatePerformanceReportForSales: [ totalSales := self totalSalesOf: anItem ] money: [ totalMoney := self totalMoneyRaisedBy: anItem. ] withSummary: anItem,' was sold ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:16:37' prior: 50692741!
storePerformance

	| totalMoney totalSales performance |
	
	performance := self generatePerformanceReportForSales: [ totalSales := self totalSales ]  money: [ totalMoney := self totalMoneyRaised ] withSummary: 'The store sold a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	
	
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:18:03' prior: 50732988!
storePerformance
	
	^self generatePerformanceReportForSales: [ self totalSales ]  money: [ self totalMoneyRaised ] withSummary:  [ : totalSales : totalMoney | 'The store sold a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString ].
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:19:00' prior: 50732972!
bookPerformance: anItem
		
	^self generatePerformanceReportForSales: [ self totalSalesOf: anItem ] money: [ self totalMoneyRaisedBy: anItem. ] withSummary: [ : totalSales : totalMoney | anItem,' was sold ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString ].
	
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:19:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:19:05'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:19:05'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:19:07'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:21:18' prior: 50692688!
generatePerformanceReportForSales: aClosureToUseToObtainSalesTotal money: aClosureToUseToObtainMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport totalSales totalMoney semaphor |
	
	performanceReport := Dictionary new.
	
	semaphor := Semaphore new.
	
	[ totalSales := aClosureToUseToObtainSalesTotal value. semaphor signal ] fork.
	totalMoney := aClosureToUseToObtainMoneyTotal. semaphor wait.
	
	
	
	
	performanceReport at: 'quantity' put: totalSales.
	performanceReport at: 'total' put: totalMoney.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSales value: totalMoney).
	
	^performanceReport ! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:21:21' prior: 50733114!
generatePerformanceReportForSales: aClosureToUseToObtainSalesTotal money: aClosureToUseToObtainMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport totalSales totalMoney semaphore |
	
	performanceReport := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ totalSales := aClosureToUseToObtainSalesTotal value. semaphore signal ] fork.
	totalMoney := aClosureToUseToObtainMoneyTotal. semaphore wait.
	
	
	
	
	performanceReport at: 'quantity' put: totalSales.
	performanceReport at: 'total' put: totalMoney.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSales value: totalMoney).
	
	^performanceReport ! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:21:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:21:28'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:21:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:21:32'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:21:57' prior: 50733138!
generatePerformanceReportForSales: aClosureToUseToObtainSalesTotal money: aClosureToUseToObtainMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport totalSales totalMoney semaphore |
	
	performanceReport := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ totalSales := aClosureToUseToObtainSalesTotal value. semaphore signal ] fork.
	totalMoney := aClosureToUseToObtainMoneyTotal value. semaphore wait.
	
	
	
	
	performanceReport at: 'quantity' put: totalSales.
	performanceReport at: 'total' put: totalMoney.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSales value: totalMoney).
	
	^performanceReport ! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'S D 11/13/2023 01:21:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:21:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'S D 11/13/2023 01:22:00'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'S D 11/13/2023 01:29:40' prior: 50733247!
generatePerformanceReportForSales: aClosureToUseToObtainSalesTotal money: aClosureToUseToObtainMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport totalSales totalMoney semaphore |
	
	performanceReport := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ totalSales := aClosureToUseToObtainSalesTotal value. semaphore signal ] fork.
	totalMoney := aClosureToUseToObtainMoneyTotal value. semaphore wait.
	
	performanceReport at: 'quantity' put: totalSales.
	performanceReport at: 'total' put: totalMoney.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSales value: totalMoney).
	
	^performanceReport ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:35:13' prior: 50732913!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self doAsyncAPIRequest: '/addToCart' withParameters: fieldDict onSuccessReturn: [ : responseContent | model updateCartList: (WebUtils jsonDecode: ((responseContent content) readStream)) ] .
		
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:35:29' prior: 50733376!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self doAsyncAPIRequest: '/addToCart' withParameters: fieldDict onSuccessReturn: [ : responseContent | model updateCartList: 1 ] .
		
	! !
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 01:35:50' prior: 50732928!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

	| resp content |

	resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ ^(aClosureWithTheValueToReturn value: resp) ]
		ifFalse:[ model informError: resp content]
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:36:43' prior: 50732943!
listCart: cartId

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	^self doAsyncAPIRequest: '/listCart' withParameters: fieldDict onSuccessReturn: 		[ : resp | model listCartWithID: cartId whichHasBooks: resp ] 
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:36:48' prior: 50733423!
listCart: cartId

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	^self doAsyncAPIRequest: '/listCart' withParameters: fieldDict onSuccessReturn: 		[ : responseContent | model listCartWithID: cartId whichHasBooks: responseContent ] 
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:42:43' prior: 50733392!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	self doAsyncAPIRequest: '/addToCart' withParameters: fieldDict onSuccessReturn: [ : responseContent | model updateBookListOfCartWithID: cartId addingBook: bookIsbn ] .
		
	! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 01:42:55'!
updateBookListOfCartWithID: cartId addingBook: bookIsbn 
! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 01:43:10' prior: 50732544!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ]! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 01:43:32' prior: 50733462!
updateBookListOfCartWithID: theIDOfTheCartToUpdate addingBook: theISBNOfTheBookToAdd 
	
	self triggerEvent: #bookAddedToCart withArguments: (Array with: theISBNOfTheBookToAdd with: theIDOfTheCartToUpdate)! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:43:48' prior: 50732899!
createCartFor: aUser password: aPassword

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	^self doAsyncAPIRequest: '/createCart' withParameters: fieldDict onSuccessReturn: 		[ : responseContent | model updateCartList: (WebUtils jsonDecode: ((responseContent content) readStream)) ] 
		! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:43:58' prior: 50733488!
createCartFor: aUser password: aPassword

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	^self doAsyncAPIRequest: '/createCart' withParameters: fieldDict onSuccessReturn: 		[ : responseContent | model updateCartList: responseContent ] 
		! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 01:44:12' prior: 50733435!
listCart: cartId

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	^self doAsyncAPIRequest: '/listCart' withParameters: fieldDict onSuccessReturn: 		[ : responseContent | model listCartWithID: cartId whichHasBooks: (responseContent asOrderedCollection) ] 
! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 01:44:30'!
listCartWithID: cartId whichHasBooks: books
! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 01:44:44' prior: 50732568!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId. ]! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 01:44:55' prior: 50733529!
listCartWithID: cartId whichHasBooks: books

	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId 
! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 01:45:09' prior: 50733543!
listCartWithID: theIDOfTheCartToListTheContentsOf whichHasBooks: books

	self triggerEvent: #newCurrentSelectedCartContentArrived with: theIDOfTheCartToListTheContentsOf 
! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 01:45:23' prior: 50732678!
createCart

	
	
	restInterface createCartFor: 'hernan' password: 'smalltalk'! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 01:45:25' prior: 50733560!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk'! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'S D 11/13/2023 01:45:35' prior: 50733534!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface listCart: cartId. ]! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 01:45:48' prior: 50733551!
listCartWithID: theIDOfTheCartToListTheContentsOf whichHasBooks: books

	currentSelectedCartContent := books.
	self triggerEvent: #newCurrentSelectedCartContentArrived with: theIDOfTheCartToListTheContentsOf 
! !
!TusLibrosClientTestWindowModel methodsFor: 'view updating' stamp: 'S D 11/13/2023 01:45:55' prior: 50733580!
listCartWithID: theIDOfTheCartToListTheContentsOf whichHasBooks: theListOfBooksInTheCart

	currentSelectedCartContent := theListOfBooksInTheCart.
	self triggerEvent: #newCurrentSelectedCartContentArrived with: theIDOfTheCartToListTheContentsOf 
! !
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 01:46:43' prior: 50733406!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

	| resp content |

	[ resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ ^(aClosureWithTheValueToReturn value: resp) ]
		ifFalse:[ model informError: resp content] ] fork
! !
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 01:46:52' prior: 50733603!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

	| resp content |

	[ resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ ^(aClosureWithTheValueToReturn value: content) ]
		ifFalse:[ model informError: resp content] ] fork 
! !
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 01:46:57' prior: 50733621!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

	| resp content |

	[ resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ ^(aClosureWithTheValueToReturn value: content) ]
		ifFalse:[ model informError: content] ] fork 
! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 01:48:27' prior: 50733639!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureWithTheValueToReturn

	| resp content |

	[ resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ aClosureWithTheValueToReturn value: content ]
		ifFalse:[ model informError: content] ] fork 
! !

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 02:10:08' prior: 50733658!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureToExecuteOnSuccessfulRequest

	| resp content |

	[ resp := WebClient htmlSubmit: (self url, theKindOfRequest) fields: aDictionaryWithParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ aClosureToExecuteOnSuccessfulRequest value: content ]
		ifFalse:[ model informError: content] ] fork 
! !

!classDefinition: #HTTPAsyncRequest category: 'TusLibrosREST' stamp: 'S D 11/13/2023 02:33:01'!
Object subclass: #HTTPAsyncRequest
	instanceVariableNames: 'theURLOfRequest selff model aClosureToExecuteOnRequestSuccess theRequestParameters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!HTTPAsyncRequest class methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 02:33:01'!
forRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest self: aSelf model: aModel
	^self new initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest self: aSelf model: aModel! !
!HTTPAsyncRequest methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 02:33:01'!
initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest self: aSelf model: aModel
	theURLOfRequest := aTheKindOfRequest.
	selff := aSelf.
	model := aModel.
	aClosureToExecuteOnRequestSuccess := anAClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := anADictionaryWithParameters.! !
!HTTPAsyncRequest methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 02:33:02'!
dispatchRequest

	| resp content |

	[ resp := WebClient htmlSubmit: (selff url, theURLOfRequest) fields: theRequestParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ aClosureToExecuteOnRequestSuccess value: content ]
		ifFalse:[ model informError: content] ] fork 
! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 02:33:02' prior: 50733678!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureToExecuteOnSuccessfulRequest
	(HTTPAsyncRequest forRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest self: self model: model) dispatchRequest! !

Object subclass: #HTTPAsyncRequest
	instanceVariableNames: 'theURLOfRequest aClosureToExecuteOnRequestSuccess theRequestParameters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #HTTPAsyncRequest category: 'TusLibrosREST' stamp: 'S D 11/13/2023 02:33:09'!
Object subclass: #HTTPAsyncRequest
	instanceVariableNames: 'theURLOfRequest aClosureToExecuteOnRequestSuccess theRequestParameters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!HTTPAsyncRequest methodsFor: 'initialization' stamp: 'S D 11/13/2023 02:33:18'!
initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest 
	theURLOfRequest := aTheKindOfRequest.
	aClosureToExecuteOnRequestSuccess := anAClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := anADictionaryWithParameters.! !

!methodRemoval: HTTPAsyncRequest #initializeForRequest:andParameters:onSuccessDo:self:model: stamp: 'S D 11/13/2023 02:33:22'!
initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest self: aSelf model: aModel
	theURLOfRequest := aTheKindOfRequest.
	selff := aSelf.
	model := aModel.
	aClosureToExecuteOnRequestSuccess := anAClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := anADictionaryWithParameters.!
!HTTPAsyncRequest class methodsFor: 'instance creation' stamp: 'S D 11/13/2023 02:33:31'!
forRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest
	^self new initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest ! !

!methodRemoval: HTTPAsyncRequest class #forRequest:andParameters:onSuccessDo:self:model: stamp: 'S D 11/13/2023 02:33:34'!
forRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest self: aSelf model: aModel
	^self new initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest self: aSelf model: aModel!

!classDefinition: #HTTPAsyncRequest category: 'TusLibrosREST' stamp: 'S D 11/13/2023 02:34:38'!
Object subclass: #HTTPAsyncRequest
	instanceVariableNames: 'theURLOfRequest aClosureToExecuteOnRequestSuccess theRequestParameters aClosureToExecuteOnFailure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!HTTPAsyncRequest methodsFor: 'evaluating' stamp: 'S D 11/13/2023 02:34:36' prior: 50733733!
dispatchRequest

	| resp content |

	[ resp := WebClient htmlSubmit: (theURLOfRequest) fields: theRequestParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ aClosureToExecuteOnRequestSuccess value: content ]
		ifFalse: aClosureToExecuteOnFailure value: content ] fork 
! !
!HTTPAsyncRequest methodsFor: 'evaluating' stamp: 'S D 11/13/2023 02:34:47' prior: 50733840!
dispatchRequest

	| resp content |

	[ resp := WebClient htmlSubmit: (theURLOfRequest) fields: theRequestParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ aClosureToExecuteOnRequestSuccess value: content ]
		ifFalse: (aClosureToExecuteOnFailure value: content) ] fork 
! !

!classRemoval: #HTTPRequestHandler stamp: 'S D 11/13/2023 02:36:08'!
Object subclass: #HTTPRequestHandler
	instanceVariableNames: 'url params'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 02:36:19' prior: 50733747!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureToExecuteOnSuccessfulRequest
	(HTTPAsyncRequest forRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest) dispatchRequest! !
!HTTPAsyncRequest methodsFor: 'initialization' stamp: 'S D 11/13/2023 02:37:46'!
initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest  
	theURLOfRequest := aTheKindOfRequest.
	aClosureToExecuteOnRequestSuccess := anAClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := anADictionaryWithParameters.! !
!HTTPAsyncRequest class methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 02:37:46' prior: 50733804!
forRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest
	^self new initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: [ : responseContent | model informError: responseContent ] ! !

!methodRemoval: HTTPAsyncRequest #initializeForRequest:andParameters:onSuccessDo: stamp: 'S D 11/13/2023 02:37:46'!
initializeForRequest: aTheKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest 
	theURLOfRequest := aTheKindOfRequest.
	aClosureToExecuteOnRequestSuccess := anAClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := anADictionaryWithParameters.!
!HTTPAsyncRequest methodsFor: 'initialization' stamp: 'S D 11/13/2023 02:37:51' prior: 50733887!
initializeForRequest: aTheKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest  
	theURLOfRequest := aTheKindOfRequest.
	aClosureToExecuteOnRequestSuccess := anAClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := aDictionaryWithParameters.! !
!HTTPAsyncRequest methodsFor: 'initialization' stamp: 'S D 11/13/2023 02:37:55' prior: 50733930!
initializeForRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest  
	theURLOfRequest := theKindOfRequest.
	aClosureToExecuteOnRequestSuccess := anAClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := aDictionaryWithParameters.! !
!HTTPAsyncRequest methodsFor: 'initialization' stamp: 'S D 11/13/2023 02:37:59' prior: 50733945!
initializeForRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest  
	theURLOfRequest := theKindOfRequest.
	aClosureToExecuteOnRequestSuccess := aClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := aDictionaryWithParameters.! !
!HTTPAsyncRequest methodsFor: 'initialization' stamp: 'S D 11/13/2023 02:38:26' prior: 50733959!
initializeForRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest  
	theURLOfRequest := theKindOfRequest.
	aClosureToExecuteOnRequestSuccess := aClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := aDictionaryWithParameters.
	aClosureToExecuteOnFailure := aClosureToExecuteOnFailedRequest ! !

!classDefinition: #HTTPAsyncRequest category: 'TusLibrosREST' stamp: 'S D 11/13/2023 02:38:30'!
Object subclass: #HTTPAsyncRequest
	instanceVariableNames: 'theURLOfRequest aClosureToExecuteOnRequestSuccess theRequestParameters aClosureToExecuteOnRequestFailure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!HTTPAsyncRequest methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 02:38:30' prior: 50733854!
dispatchRequest

	| resp content |

	[ resp := WebClient htmlSubmit: (theURLOfRequest) fields: theRequestParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ aClosureToExecuteOnRequestSuccess value: content ]
		ifFalse: (aClosureToExecuteOnRequestFailure value: content) ] fork 
! !
!HTTPAsyncRequest methodsFor: 'as yet unclassified' stamp: 'S D 11/13/2023 02:38:30' prior: 50733973!
initializeForRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest  
	theURLOfRequest := theKindOfRequest.
	aClosureToExecuteOnRequestSuccess := aClosureToExecuteOnSuccessfulRequest.
	theRequestParameters := aDictionaryWithParameters.
	aClosureToExecuteOnRequestFailure := aClosureToExecuteOnFailedRequest ! !
!HTTPAsyncRequest class methodsFor: 'instance creation' stamp: 'S D 11/13/2023 02:40:16' prior: 50733902!
forRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest
	
	^self new initializeForRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: 1
	! !
!HTTPAsyncRequest class methodsFor: 'instance creation' stamp: 'S D 11/13/2023 02:40:38'!
forRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 
	
	^self new initializeForRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: 1
	! !

!methodRemoval: HTTPAsyncRequest class #forRequest:andParameters:onSuccessDo: stamp: 'S D 11/13/2023 02:40:38'!
forRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest
	
	^self new initializeForRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: 1
	!
!HTTPAsyncRequest class methodsFor: 'instance creation' stamp: 'S D 11/13/2023 02:40:44' prior: 50734043!
forRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 
	
	^self new initializeForRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: anAClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 
	! !
!HTTPAsyncRequest class methodsFor: 'instance creation' stamp: 'S D 11/13/2023 02:40:48' prior: 50734070!
forRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 
	
	^self new initializeForRequest: theKindOfRequest andParameters: anADictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 
	! !
!HTTPAsyncRequest class methodsFor: 'instance creation' stamp: 'S D 11/13/2023 02:40:51' prior: 50734085!
forRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 
	
	^self new initializeForRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo: aClosureToExecuteOnFailedRequest 
	! !
!TusLibrosClientRestInterface methodsFor: 'async requests' stamp: 'S D 11/13/2023 02:41:15' prior: 50733875!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureToExecuteOnSuccessfulRequest
	(HTTPAsyncRequest forRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo:  [ : responseContent | model informError: responseContent ] ) dispatchRequest! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 02:41:50' prior: 50733447!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
	
	
	(HTTPAsyncRequest forRequest: (self url, '/addToCart' ) andParameters: fieldDict onSuccessDo: [ : responseContent | model updateBookListOfCartWithID: cartId addingBook: bookIsbn ] onFailureDo:  [ : responseContent | model informError: responseContent ] ) dispatchRequest
		
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 02:42:27' prior: 50733503!
createCartFor: aUser password: aPassword

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	
		
	(HTTPAsyncRequest forRequest: (self url, '/createCart' ) andParameters: fieldDict onSuccessDo: 	[ : responseContent | model updateCartList: responseContent ]  onFailureDo:  [ : responseContent | model informError: responseContent ] ) dispatchRequest
		! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'S D 11/13/2023 02:42:55' prior: 50733516!
listCart: cartId

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	(HTTPAsyncRequest forRequest: (self url, '/listCart' ) andParameters: fieldDict onSuccessDo: 	[ : responseContent | model listCartWithID: cartId whichHasBooks: (responseContent asOrderedCollection) ]  onFailureDo:  [ : responseContent | model informError: responseContent ] ) dispatchRequest
		
! !

!methodRemoval: TusLibrosClientRestInterface #doAsyncAPIRequest:withParameters:onSuccessReturn: stamp: 'S D 11/13/2023 02:43:09'!
doAsyncAPIRequest: theKindOfRequest withParameters: aDictionaryWithParameters onSuccessReturn: aClosureToExecuteOnSuccessfulRequest
	(HTTPAsyncRequest forRequest: theKindOfRequest andParameters: aDictionaryWithParameters onSuccessDo: aClosureToExecuteOnSuccessfulRequest onFailureDo:  [ : responseContent | model informError: responseContent ] ) dispatchRequest!

TusLibrosClientTestWindow open!
!HTTPAsyncRequest methodsFor: 'evaluating' stamp: 'S D 11/13/2023 02:43:54' prior: 50734000!
dispatchRequest

	| resp content |

	[ resp := WebClient htmlSubmit: (theURLOfRequest) fields: theRequestParameters.
	content := (WebUtils jsonDecode: ((resp content) readStream)).
		
	resp isSuccess 
		ifTrue: [ aClosureToExecuteOnRequestSuccess value: content ]
		ifFalse: [ aClosureToExecuteOnRequestFailure value: content ] ] fork 
! !

TusLibrosClientTestWindow open!

----QUIT----(13 November 2023 02:45:00) CuisUniversity-5981.image priorSource: 12785866!

----STARTUP---- (13 November 2023 14:11:33) as /home/ezfloat/ing-software-1-c2-2023/linux64/linux64/CuisUniversity-5981.image!

!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:13:28' prior: 50733016!
bookPerformance: anItem
		
	^self generatePerformanceReportForSales: [ self totalSalesOf: anItem ] 
	money: [ self totalMoneyRaisedBy: anItem. ] 
	withSummary: [ : totalSales : totalMoney | anItem,' was sold ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString ].
	
	

! !

TusLibrosClientTestWindow new!

TusLibrosClientTestWindow new!

TusLibrosClientTestWindow new!

TusLibrosClientTestWindow open!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'eaam 11/13/2023 14:23:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'eaam 11/13/2023 14:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'eaam 11/13/2023 14:23:08'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:26:36'!
keyword1: aSummaryTextForTheReport keyword2: performanceReport keyword3: totalMoney keyword4: totalSales

	performanceReport at: 'quantity' put: totalSales.
	performanceReport at: 'total' put: totalMoney.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSales value: totalMoney)! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:26:37' prior: 50733352!
generatePerformanceReportForSales: aClosureToUseToObtainSalesTotal money: aClosureToUseToObtainMoneyTotal withSummary: aSummaryTextForTheReport
	
	| performanceReport totalSales totalMoney semaphore |
	
	performanceReport := Dictionary new.
	
	semaphore := Semaphore new.
	
	[ totalSales := aClosureToUseToObtainSalesTotal value. semaphore signal ] fork.
	totalMoney := aClosureToUseToObtainMoneyTotal value. semaphore wait.
	
	self keyword1: aSummaryTextForTheReport keyword2: performanceReport keyword3: totalMoney keyword4: totalSales.
	
	^performanceReport ! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:28:48'!
writeDownReportWithTotalMoney: totalMoneyToWriteDown totalSales: totalSalesToWriteDown andSummarytext: aSummaryTextForTheReport
	
	| performanceReport |

	performanceReport at: 'quantity' put: totalSalesToWriteDown.
	performanceReport at: 'total' put: totalMoneyToWriteDown.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSalesToWriteDown value: totalMoneyToWriteDown)
	
	^performanceReport! !

!methodRemoval: TusLibrosSystemFacade #keyword1:keyword2:keyword3:keyword4: stamp: 'eaam 11/13/2023 14:28:59'!
keyword1: aSummaryTextForTheReport keyword2: performanceReport keyword3: totalMoney keyword4: totalSales

	performanceReport at: 'quantity' put: totalSales.
	performanceReport at: 'total' put: totalMoney.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSales value: totalMoney)!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:29:20' prior: 50734329!
generatePerformanceReportForSales: aClosureToUseToObtainSalesTotal money: aClosureToUseToObtainMoneyTotal withSummary: aSummaryTextForTheReport
	
	|  totalSales totalMoney semaphore |
	
	
	semaphore := Semaphore new.
	
	[ totalSales := aClosureToUseToObtainSalesTotal value. semaphore signal ] fork.
	totalMoney := aClosureToUseToObtainMoneyTotal value. semaphore wait.
	
	self keyword1: aSummaryTextForTheReport keyword3: totalMoney keyword4: totalSales.
	! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:29:30' prior: 50734350!
writeDownReportWithTotalMoney: totalMoneyToWriteDown totalSales: totalSalesToWriteDown andSummarytext: aSummaryTextForTheReport
	
	| performanceReport |
	
	performanceReport := Dictionary new.
	
	performanceReport at: 'quantity' put: totalSalesToWriteDown.
	performanceReport at: 'total' put: totalMoneyToWriteDown.
	performanceReport at: 'summary' put: (aSummaryTextForTheReport value: totalSalesToWriteDown value: totalMoneyToWriteDown)
	
	^performanceReport! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:29:58' prior: 50734380!
generatePerformanceReportForSales: aClosureToUseToObtainSalesTotal money: aClosureToUseToObtainMoneyTotal withSummary: aSummaryTextForTheReport
	
	|  totalSales totalMoney semaphore |
	
	
	semaphore := Semaphore new.
	
	[ totalSales := aClosureToUseToObtainSalesTotal value. semaphore signal ] fork.
	totalMoney := aClosureToUseToObtainMoneyTotal value. semaphore wait.
	
	self writeDownReportWithTotalMoney: totalMoney totalSales: totalSales andSummarytext: aSummaryTextForTheReport
	! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'eaam 11/13/2023 14:40:46' prior: 50733003!
storePerformance
	
	^self generatePerformanceReportForSales: [ self totalSales ] 
	money: [ self totalMoneyRaised ] 
	withSummary:  [ : totalSales : totalMoney | 'The store sold a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString ].
	

! !

----QUIT----(13 November 2023 14:41:13) CuisUniversity-5981.image priorSource: 12881908!