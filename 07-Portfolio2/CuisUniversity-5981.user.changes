

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (19 October 2023 21:28:45) as /home/clinux01/Documents/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Documents/linux64/Portfolio-Solucion.st----!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 21:32:49'!
ProtoObject subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:32:35'!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	on: Error
	do: Transfer accountCantTransferToItself.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:34:01' prior: 50651050!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExeptionDo: [Transfer accountCantTransferToItself.]! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:34:26' prior: 50651060!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo: [Transfer accountCantTransferToItself.]! !

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:34:28'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:35:30' prior: 50651070!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo: [Transfer accountCantTransferToItself.]! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:36:08' prior: 50651084!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: Transfer accountCantTransferToItself equals: anError messageText.]! !

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:36:12'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:36:36'!
accountCantTransferToItself
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:36:53' prior: 50651109!
accountCantTransferToItself
	^'NO MAN QUE HACES'.! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 21:37:18'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:37:55'!
accountCantTransferToItselfErrorDescription
	^'NO MAN QUE HACES'.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 21:37:55' prior: 50651094!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: Transfer accountCantTransferToItselfErrorDescription equals: anError messageText.]! !

!methodRemoval: Transfer class #accountCantTransferToItself stamp: 'eaam 10/19/2023 21:37:55'!
accountCantTransferToItself
	^'NO MAN QUE HACES'.!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:38:13'!
FAILURE!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:39:35'!
 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmmountToTransfer
	! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:39:49' prior: 50651156!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmmountToTransfer
	self class ! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:39:59' prior: 50651162!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self class accountCantTransferToItselfErrorDescription! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:42:11' prior: 50651168!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self error: self class accountCantTransferToItselfErrorDescription! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:42:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:42:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:42:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:44:32'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:44:44' prior: 50651136!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]! !

!testRun: #ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:44:45'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:45:37'!
XXXX
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]! !

!methodRemoval: ReceptiveAccountTest #test08accountCantTransferToItself stamp: 'eaam 10/19/2023 21:45:37'!
test08accountCantTransferToItself
	| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:45:42' prior: 50651238!
XXXX
	"| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]"! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:45:59'!
test08TransferChangesBalance

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:46:22' prior: 50651273!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: account2).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:47:46' prior: 50651284!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: account2).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:48:53' prior: 50651295!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:48:54'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:49:11' prior: 50651176!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self error: self class accountCantTransferToItselfErrorDescription! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:12'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:12'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:49:57' prior: 50651323!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self error: self accountCantTransferToItselfErrorDescription! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:49:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:49:58'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:50:17' prior: 50651364!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit ! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:50:37' prior: 50651405!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit for: aAccountToTransferTo! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:51:00' prior: 50651411!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:51:20' prior: 50651418!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.
	Withdraw register: 1 on: aAccountToTransferFrom.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:51:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:21'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:21'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:39' prior: 50651308!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: 0 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:40'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:46' prior: 50651468!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:46'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:53' prior: 50651483!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: 0 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:51:54'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:51:59' prior: 50651498!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account1 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:52:24' prior: 50651425!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.
	Withdraw register: 1 on: aAccountToTransferFrom.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:52:29' prior: 50651525!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:52:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:52:30'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59' prior: 50651513!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:53:00'!
PASSED!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:53:11' prior: 50651534!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: 1 on: aAccountToTransferTo.
	Withdraw register: 1 on: aAccountToTransferFrom.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/19/2023 21:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/19/2023 21:53:12'!
PASSED!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 21:53:26' prior: 50651623!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:55:48'!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 21:56:25'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:58:34' prior: 50651672!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:59:27' prior: 50651695!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'eaam 10/19/2023 21:59:29'!
FAILURE!
!Transfer methodsFor: 'no messages' stamp: 'eaam 10/19/2023 22:00:29'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:00:33' prior: 50651721!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	
	! !

Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/19/2023 22:00:44'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50651727!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:02:23'!
affectBalance: argumento! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:02:33' prior: 50651753!
affectBalance: aBalance! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:02:38' prior: 50651757!
affectBalance: aBalance
	! !

----QUIT----(19 October 2023 22:07:33) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (19 October 2023 22:09:26) as /home/clinux01/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!


----QUIT----(19 October 2023 22:09:36) CuisUniversity-5981.image priorSource: 10243644!

----STARTUP---- (19 October 2023 23:47:53) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!Transfer class methodsFor: 'error' stamp: 'eaam 10/19/2023 23:49:21' prior: 50651662!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	
	self initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/19/2023 23:51:13' prior: 50651778!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	aAccountToTransferFrom register: transfer.
	self initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/19/2023 23:52:07' prior: 50651787!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	
	self initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	aAccountToTransferFrom register: self.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/19/2023 23:52:58' prior: 50651798!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	aAccountToTransferFrom register: transfer.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 00:23:04'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09 stamp: 'eaam 10/20/2023 00:23:04'!
test09

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:07:22' prior: 50651819!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33' prior: 50651843!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

Transfer subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 01:32:35'!
Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 01:32:47'!
Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:35:10' prior: 50651808!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	aAccountToTransferTo register: IncomingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer.
	aAccountToTransferFrom register: IncomingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:39:20' prior: 50651898!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:39:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:39:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:39:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:39:29'!
ERROR!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:39:43'!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self shouldBeImplemented.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:40:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:40:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:40:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:40:29'!
ERROR!
!IncomingTransfer class methodsFor: 'error handling' stamp: 'eaam 10/20/2023 01:40:35' overrides: 16902107!
error: aRenameMe1 
	self shouldBeImplemented.! !

!methodRemoval: IncomingTransfer class #error: stamp: 'eaam 10/20/2023 01:40:48'!
error: aRenameMe1 
	self shouldBeImplemented.!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:41:09' prior: 50651969!
forAccount: aAccountToTransferFrpm amount: aAmountToTransfer 
	self shouldBeImplemented.! !
!OutgoingTransfer class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 01:41:14'!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self shouldBeImplemented.! !
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:45:51' prior: 50652027!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self new initializeFor: aAccountToTransferTo with: aAmountToTransfer.! !
!OutgoingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 01:46:27'!
initializeFor: aAccountToTransferTo with: aAmountToTransfer
	value := aAmountToTransfer.
	to := aAccountToTransferTo.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:47:08' prior: 50651915!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer forAccount: aAccountToTransferTo amount: aAmountToTransfer).! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:47:25' prior: 50652048!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:47:50' overrides: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !

!methodRemoval: OutgoingTransfer class #forAccount:amount: stamp: 'eaam 10/20/2023 01:47:58'!
forAccount: aAccountToTransferTo amount: aAmountToTransfer 
	self new initializeFor: aAccountToTransferTo with: aAmountToTransfer.!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:48:09'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	to := aAccountToTransferTo.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:48:16' prior: 50652101!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !

!methodRemoval: OutgoingTransfer #initializeFor:with: stamp: 'eaam 10/20/2023 01:48:21'!
initializeFor: aAccountToTransferTo with: aAmountToTransfer
	value := aAmountToTransfer.
	to := aAccountToTransferTo.!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:49:31' overrides: 50651761!
affectBalance: aBalance

	^aBalance - value ! !
!IncomingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 01:49:39' overrides: 50651761!
affectBalance: aBalance

	^aBalance + value ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' overrides: 16902254!
value

	^value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:20'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:50:25'!
PASSED!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 01:50:52' overrides: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !

!methodRemoval: IncomingTransfer class #forAccount:amount: stamp: 'eaam 10/20/2023 01:50:55'!
forAccount: aAccountToTransferFrpm amount: aAmountToTransfer 
	self shouldBeImplemented.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 01:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:51:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:51:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 01:51:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 01:51:43'!
FAILURE!
!IncomingTransfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 02:26:21' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:26:27' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:26:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:26:31'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:26:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:26:34'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:27:37' prior: 50651761!
affectBalance: aBalance
	^self subclassResponsibility .	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:30:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:30:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:38'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:30:51'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:31:01'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:32:02' prior: 50652125 overrides: 50652276!
affectBalance: aBalance

	^aBalance - value ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:32:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:32:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:08'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:25'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:32:54'!
ERROR!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:35:16' prior: 50652130 overrides: 50652276!
affectBalance: aBalance

	^aBalance + value ! !

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:35:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:35:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:35:34'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:35:34'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:36:08'!
ERROR!

Transfer subclass: #IncomingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer2 category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 02:46:28'!
Transfer subclass: #IncomingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #OutgoingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer2 category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 02:46:32'!
Transfer subclass: #OutgoingTransfer2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer2 methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:46:40' overrides: 50652276!
affectBalance: aBalance

	^aBalance + value ! !
!IncomingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:46:47'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!IncomingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:46:54' prior: 50652432!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!IncomingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:47:04' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !
!IncomingTransfer2 class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:47:13' overrides: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 02:47:27' prior: 50652066!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer2 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer2 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!classRemoval: #IncomingTransfer stamp: 'eaam 10/20/2023 02:47:36'!
Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer2 methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:47:47'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !
!OutgoingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:48:03'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.
	value := aAmountToTransfer.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !

!methodRemoval: OutgoingTransfer2 #from:to:amount: stamp: 'eaam 10/20/2023 02:48:40'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.!
!OutgoingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:48:42' overrides: 50652276!
affectBalance: aBalance

	^aBalance - value ! !
!OutgoingTransfer2 class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 02:48:55' overrides: 50652465!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo using: aAmountToTransfer.! !
!OutgoingTransfer2 methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:49:03' overrides: 16901772!
= aTransfer
	^ super = aTransfer! !

!classRemoval: #OutgoingTransfer stamp: 'eaam 10/20/2023 02:49:09'!
Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #IncomingTransfer2 as: #IncomingTransfer stamp: 'eaam 10/20/2023 02:49:14'!
Smalltalk renameClassNamed: #IncomingTransfer2 as: #IncomingTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:49:14' prior: 50652465!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer2 from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!classRenamed: #OutgoingTransfer2 as: #OutgoingTransfer stamp: 'eaam 10/20/2023 02:49:27'!
Smalltalk renameClassNamed: #OutgoingTransfer2 as: #OutgoingTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 02:49:27' prior: 50652548!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (IncomingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (OutgoingTransfer from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:49:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:49:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:49:32'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:49:35'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 02:50:18' prior: 50652572!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer a |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	aAccountToTransferTo register: (a from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).
	aAccountToTransferFrom register: (a from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer).! !

!classRemoval: #IncomingTransfer stamp: 'eaam 10/20/2023 02:50:32'!
Transfer subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingTransfer stamp: 'eaam 10/20/2023 02:50:35'!
Transfer subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 02:50:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 02:50:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 02:50:40'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:07:57' prior: 50652627!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:07:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:07:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:07:59'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:10:45' prior: 50652691!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:10:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:10:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:10:46'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:13:02' prior: 50652276!
affectBalance: aBalance
	^0.	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:13:22' prior: 50652738!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	
	aAccountToTransferTo register: self.! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:13:27' prior: 50652789!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: self.
	aAccountToTransferTo register: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:13:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:28'!
ERROR!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 03:13:48'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:13:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:13:54'!
ERROR!

Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 03:14:34'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50652785!
affectBalance: aBalance
	^aBalance.	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:17:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:17:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:17:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:18:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:18:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:18:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:22:17'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:22:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:22:17'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:26:38' prior: 50652800!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: self new.
	aAccountToTransferTo register: self new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:26:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:26:45'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 03:28:08' prior: 50653026!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 03:28:09'!
PASSED!

----QUIT----(20 October 2023 03:55:21) CuisUniversity-5981.image priorSource: 10243854!

----STARTUP---- (20 October 2023 13:13:00) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:37:10'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (account2 hasRegistered: transfer) .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:46:58' prior: 50653128!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (transfer from) equals: account1.
! !

Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExtractionTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:47:47'!
Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:48:04'!
Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #DepositTransfer as: #IncomingTransfer stamp: 'eaam 10/20/2023 13:49:10'!
Smalltalk renameClassNamed: #DepositTransfer as: #IncomingTransfer!

!classRenamed: #ExtractionTransfer as: #OutgoingTransfer stamp: 'eaam 10/20/2023 13:49:23'!
Smalltalk renameClassNamed: #ExtractionTransfer as: #OutgoingTransfer!

Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:49:48'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:49:53'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:49:57'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/20/2023 13:50:05'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!OutgoingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:10' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!OutgoingTransfer class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50650938!
value 

	^transfer value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50650938!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50653250 overrides: 50650942!
affectBalance: aBalance

	^aBalance - transfer value ! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:53:24' prior: 50653075!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	Withdraw register: aAmountToTransfer on: yo.
	Deposit register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:53:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:53:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:53:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:53:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:53:57'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:54:28' prior: 50653291!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: aAmountToTransfer on: yo.
	IncomingTransfer register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:54:31'!
ERROR!

account1 := ReceptiveAccount new.
a := Transfer new.!

OutgoingTransfer register: 1 on: a .!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:57:23' prior: 50653342!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:57:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:57:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:57:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:57:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:58:10'!
ERROR!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:58:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:58:10'!
ERROR!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:59:56' prior: 50653397!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 13:59:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:59:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 13:59:57'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:19'!
from
	^from! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:33:59' prior: 50653142!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 14:34:00'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:34:48'!
a
	^from! !

!methodRemoval: Transfer #from stamp: 'eaam 10/20/2023 14:34:48'!
from
	^from!

!methodRemoval: Transfer #a stamp: 'eaam 10/20/2023 14:34:55'!
a
	^from!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:06'!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1.
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/20/2023 14:35:07'!
ERROR!
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:15'!
from
	self shouldBeImplemented.
	^from! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50653620!
from
	
	^from! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/20/2023 14:35:22'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:42' prior: 50653605!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 from) equals: account1.
! !

----STARTUP---- (21 October 2023 00:15:44) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:16:06' prior: 50653075!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new.
	Withdraw register: aAmountToTransfer on: aAccountToTransferFrom.
	Deposit register: aAmountToTransfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

----STARTUP---- (21 October 2023 00:16:21) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:37:10'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (account2 hasRegistered: transfer) .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 13:46:58' prior: 50653686!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
	self assert:  (transfer from) equals: account1.
! !

!classDefinition: #ExtractionTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExtractionTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #ExtractionTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #DepositTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #DepositTransfer as: #IncomingTransfer stamp: 'eaam 10/21/2023 00:16:25'!
Smalltalk renameClassNamed: #DepositTransfer as: #IncomingTransfer!

!classRenamed: #ExtractionTransfer as: #OutgoingTransfer stamp: 'eaam 10/21/2023 00:16:25'!
Smalltalk renameClassNamed: #ExtractionTransfer as: #OutgoingTransfer!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:25'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'eaam 10/21/2023 00:16:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!OutgoingTransfer methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:10' overrides: 50650942!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!OutgoingTransfer class methodsFor: 'no messages' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50650938!
value 

	^transfer value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50650938!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50653827 overrides: 50650942!
affectBalance: aBalance

	^aBalance - transfer value ! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:53:24' prior: 50653075!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	Withdraw register: aAmountToTransfer on: yo.
	Deposit register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:54:28' prior: 50653868!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: aAmountToTransfer on: yo.
	IncomingTransfer register: aAmountToTransfer on: yo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:57:23' prior: 50653880!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/20/2023 13:59:56' prior: 50653893!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| yo |
	yo := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	OutgoingTransfer register: yo on: aAccountToTransferFrom.
	IncomingTransfer register: yo on: aAccountToTransferTo.
	aAccountToTransferFrom register: yo.
	aAccountToTransferTo register: yo.
	^yo.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:19'!
from
	^from! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:33:59' prior: 50653700!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) equals: account2.
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:34:48'!
a
	^from! !

!methodRemoval: Transfer #from stamp: 'eaam 10/21/2023 00:16:26'!
from
	^from!

!methodRemoval: Transfer #a stamp: 'eaam 10/21/2023 00:16:26'!
a
	^from!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:06'!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1.
! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:15'!
from
	self shouldBeImplemented.
	^from! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50653960!
from
	
	^from! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 14:35:42' prior: 50653948!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 from) equals: account1.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:16:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:16:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:16:52'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:17:18' prior: 50653969!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1.
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:17:19'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:17:37'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: account1.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:17:42'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:17:52' prior: 50654077!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:17:53'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:42:11' prior: 50654093!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	"| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer."
! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:43:50' prior: 50653906!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer |
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	IncomingTransfer register: transfer on: aAccountToTransferTo.
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:45:57' prior: 50654122!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	transfer := self new initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmountToTransfer.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:46:08' prior: 50654139!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	transfer := self new initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:46:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:46:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:46:15'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 00:47:46' prior: 50654159!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:47:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:47:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:47:49'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:50:37' prior: 50653928!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account1 transactions first .
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:50:38'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:50:52' prior: 50654023!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:51:02' prior: 50654286!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:51:03'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:51:50' prior: 50654109!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:51:52'!
ERROR!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:04'!
transfer
	self shouldBeImplemented.
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13' prior: 50654389!
transfer
	^transfer! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:18'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:52:24' prior: 50654373!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:25'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:29'!
transfer
	self shouldBeImplemented.
	^transfer! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:32' prior: 50654458!
transfer
	^transfer! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 00:52:35'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 00:57:16'!
test13
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItself.! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:57:21'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:57:27'!
cantTransferToItself
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:58:13' prior: 50654525!
cantTransferToItself
	^'lol claramente no podes hacer esto'! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:58:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:58:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 00:58:59'!
FAILURE!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:59:49' prior: 50654511!
test13
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: Transfer class #cantTransferToItself stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItself
	^'lol claramente no podes hacer esto'!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:00:33' prior: 50654222!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItself].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:00:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:00:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:00:35'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:00:58' prior: 50654566!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self cantTransferToItself].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:01:14' prior: 50654636!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self aAccountToTransferTo].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:01:22' prior: 50654658!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self cantTransferToItselfErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:01:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:01:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:01:23'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:01:33' prior: 50654680!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:01:34'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 01:02:01'!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 01:02:09' prior: 50654817!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroDescription.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/21/2023 01:02:16' prior: 50654831!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroDescription.! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/21/2023 01:02:18'!
ERROR!
!Transfer class methodsFor: 'category-name' stamp: 'eaam 10/21/2023 01:02:24'!
cantTransferZeroDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:02:58'!
cantTransferZeroErrorDescription
	self shouldBeImplemented.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 01:02:58' prior: 50654844!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: Transfer class #cantTransferZeroDescription stamp: 'eaam 10/21/2023 01:02:58'!
cantTransferZeroDescription
	self shouldBeImplemented.!
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50654864!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !

!methodRemoval: Transfer class #accountCantTransferToItselfErrorDescription stamp: 'eaam 10/21/2023 01:03:20'!
accountCantTransferToItselfErrorDescription
	^'NO MAN QUE HACES'.!

!methodRemoval: ReceptiveAccountTest #XXXX stamp: 'eaam 10/21/2023 01:03:25'!
XXXX
	"| account1 |
	
	account1 := ReceptiveAccount new. 
	
	self should: [Transfer from: account1 to: account1 amount: 1.]
	raise: Error
	withExceptionDo:
	[:anError | self assert: (Transfer accountCantTransferToItselfErrorDescription) equals: anError messageText.]"!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/21/2023 01:03:28'!
FAILURE!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:03:50' prior: 50654750!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:04:08' prior: 50654913!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferZeroErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:04:25' prior: 50654940!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription].
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:02'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo for: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:02' prior: 50654967!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo for: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 01:05:28' prior: 50655004!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !

!methodRemoval: Transfer class #shouldTransfer:to:for: stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo for: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/21/2023 01:05:38'!
PASSED!

----QUIT----(21 October 2023 01:05:42) CuisUniversity-5981.image priorSource: 10287054!

----STARTUP---- (22 October 2023 16:24:15) as /home/ezfloat/ing-software-1-c2-2023/linux64/CuisUniversity-5981.image!


TestCase subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTests category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 20:16:25'!
TestCase subclass: #ReportTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 20:53:52'!
test01
	| account |
	account := ReceptiveAccount new.
	self assert: account! !

!classDefinition: #Rece category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 21:01:37'!
Object subclass: #Rece
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Rece stamp: 'eaam 10/22/2023 21:01:49'!
Object subclass: #Rece
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #ReportTests as: #AccountSumaryTests stamp: 'eaam 10/22/2023 21:02:17'!
Smalltalk renameClassNamed: #ReportTests as: #AccountSumaryTests!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:03:40' prior: 50655138!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Balance = 0'.
	self assert: account report equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:30:16' prior: 50655161!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:30:56'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:31:15'!
sumary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:31:29' prior: 50655181!
sumary
	^'Balance = 0'! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:31:43' prior: 50655170!
test01
	| account resumen|
	account := ReceptiveAccount new.
	"resumen := OrderedCollection new."
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:31:50' prior: 50655190!
test01
	| account resumen|
	account := ReceptiveAccount new.
	"resumen := OrderedCollection new."
	resumen := 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:31:51'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:31:51'!
PASSED!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:32:25'!
test02
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account. 
	resumen := 'Balance = 0'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:32:31' prior: 50655199!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen := 'Balance = 0'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:33:31' prior: 50655212!
test02
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:33:33'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:34:33' prior: 50655186!
sumary
	| sumary |
	sumary := OrderedCollection new.
	^'Balance = 0'! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:35:19' prior: 50655245!
sumary
	| sumary |
	sumary := OrderedCollection new.
	transactions do: 
	[: aTransaction
		
		]
	^'Balance = 0'! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:35:28' prior: 50655231!
test02
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:38:51' prior: 50655251!
sumary
	| sumary |
	sumary := OrderedCollection new.
	transactions do: 
	[: aTransaction |
		
		]
	^'Balance = 0'! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:57:19' prior: 50655269!
sumary
	| sumary |
	sumary := OrderedCollection new.
	sumary add: 'Depósito = 10'.
	sumary add: 'Balance = 0'.
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 21:57:20'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:57:32'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:57:32'!
FAILURE!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:57:35'!
FAILURE!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 21:58:00' prior: 50655222!
test01
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Balance = 0'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:58:05'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:58:44' prior: 50655276!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty) ifTrue: [sumary add: 'Depósito = 10'].
	sumary add: 'Balance = 0'.
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 21:58:45'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:58:50'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:58:50'!
FAILURE!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:59:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 21:59:28' prior: 50655349!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito = 10'].
	sumary add: 'Balance = 0'.
	^sumary! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 21:59:32'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:59:32'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 21:59:32'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:00:09' prior: 50655412!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito = 10'.sumary add: 'Balance = 10'].
	sumary add: 'Balance = 0'.
	^sumary! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:00:25' prior: 50655428!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito = 10'.sumary add: 'Balance = 10']
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 22:00:26'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:00:30'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:00:30'!
FAILURE!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:00:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:01:03' prior: 50655437!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: [sumary add: 'Depósito por 10'.sumary add: 'Balance = 10']
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 22:01:04'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:01:07'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:01:07'!
PASSED!
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 22:01:20'!
test03
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/22/2023 22:03:14' prior: 50655562!
test03
	| account resumen|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:03:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:05:22' prior: 50655501!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty) ifTrue: 
	[sumary add: transactions first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 22:05:28'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:05:34'!
ERROR!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:05:34'!
FAILURE!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:05:34'!
FAILURE!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:05:37'!
ERROR!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:06:04'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/22/2023 22:06:10' prior: 50655587!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(transactions isEmpty not) ifTrue: 
	[sumary add: transactions first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:06:16'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:06:16'!
ERROR!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:06:16'!
ERROR!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:06:18'!
ERROR!
!Deposit methodsFor: 'print' stamp: 'eaam 10/22/2023 22:06:37'!
dataPrint
	self shouldBeImplemented.! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/22/2023 22:08:40' prior: 50655676!
dataPrint
	^('Depósito por ', self value asString)! !

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:08:45'!
ERROR!
!Withdraw methodsFor: 'print' stamp: 'eaam 10/22/2023 22:08:52'!
dataPrint
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/22/2023 22:09:22' prior: 50655687!
dataPrint
	^('Extracción por ', self value asString).! !

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/22/2023 22:09:27'!
PASSED!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/22/2023 22:09:27'!
PASSED!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/22/2023 22:09:27'!
PASSED!

!classDefinition: #AccountSumaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 22:12:20'!
Object subclass: #AccountSumaryReport
	instanceVariableNames: 'miVariable'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSumaryReport class methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20'!
sumary: aTransactions
	^self new initializeSumary: aTransactions! !
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20'!
initializeSumary: aTransactions
	miVariable := aTransactions.! !
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20'!
suma
	| sumary |
	sumary := OrderedCollection new.
	(miVariable isEmpty not) ifTrue: 
	[sumary add: miVariable first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:12:20' prior: 50655657!
sumary
	^(AccountSumaryReport sumary: transactions) suma! !
!AccountSumaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/22/2023 22:13:07'!
sumaryOf: aTransactions
	^self new initializeSumary: aTransactions! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 22:13:07' prior: 50655732!
sumary
	^(AccountSumaryReport sumaryOf: transactions) suma! !

!methodRemoval: AccountSumaryReport class #sumary: stamp: 'eaam 10/22/2023 22:13:07'!
sumary: aTransactions
	^self new initializeSumary: aTransactions!

TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'eaam 10/22/2023 23:45:46'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'eaam 10/22/2023 23:46:20'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:46:31'!
test01
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: TransferTest #test10 stamp: 'eaam 10/22/2023 23:46:31'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:46:47'!
test02
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:46:57'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:03'!
test03
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test12 stamp: 'eaam 10/22/2023 23:47:04'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:20'!
test04
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:35'!
test07
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:43'!
test06
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test04 stamp: 'eaam 10/22/2023 23:47:43'!
test04
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:54' prior: 50655880!
test06

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50655867!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50655830!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50655804!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50655778!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'eaam 10/22/2023 23:49:41'!
test10
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!

!methodRemoval: ReceptiveAccountTest #test11 stamp: 'eaam 10/22/2023 23:49:43'!
test11
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!

!methodRemoval: ReceptiveAccountTest #test12 stamp: 'eaam 10/22/2023 23:49:45'!
test12
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!

!methodRemoval: ReceptiveAccountTest #test13 stamp: 'eaam 10/22/2023 23:49:46'!
test13
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!

!methodRemoval: ReceptiveAccountTest #test14 stamp: 'eaam 10/22/2023 23:49:47'!
test14
	"hay que sacar estos tests de transfer a un refacto de tests propios
	"
	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:50:03'!
PASSED!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:22' prior: 50654463!
transfer
	^self! !

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:50:32'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:50:32'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:50:32'!
FAILURE!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45' prior: 50656047!
transfer
	^transfer ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test06 stamp: 'eaam 10/22/2023 23:50:56'!
test06

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:51:30'!
ERROR!
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:44'!
from
	self shouldBeImplemented.! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55' prior: 50656106!
from
	^transfer from.! !

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!

!testRun: #TransferTest #test08 stamp: 'eaam 10/22/2023 23:52:00'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:52:16'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:24'!
to
	self shouldBeImplemented.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32' prior: 50656147!
to
	^transfer to.! !

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!

!testRun: #TransferTest #test08 stamp: 'eaam 10/22/2023 23:52:35'!
PASSED!
!AccountSumaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50655737!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !
!AccountSumaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 00:03:55' prior: 50655717!
initializeSumary: aAccount
	miVariable := aAccount.! !

!classDefinition: #AccountSumaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 00:04:05'!
Object subclass: #AccountSumaryReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 00:04:05' prior: 50656184!
initializeSumary: aAccount
	account := aAccount.! !
!AccountSumaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 00:04:05' prior: 50655722!
suma
	| sumary |
	sumary := OrderedCollection new.
	(account isEmpty not) ifTrue: 
	[sumary add: account first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:28:27' prior: 50655338!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSumaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	self assert: report content equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:28:51' prior: 50655258!
test02
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSumaryReport sumaryOf: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: report content equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:29:16' prior: 50655573!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSumaryReport sumaryOf: account .
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:29:22' prior: 50656237!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSumaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: account sumary equals: resumen! !
!AccountSumaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:29:43' prior: 50656250!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSumaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: report sumary equals: resumen! !
!AccountSumaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:30:18'!
sumary
	| sumary |
	sumary := OrderedCollection new.
	(account isEmpty not) ifTrue: 
	[sumary add: account first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary! !

!methodRemoval: AccountSumaryReport #suma stamp: 'eaam 10/23/2023 01:30:18'!
suma
	| sumary |
	sumary := OrderedCollection new.
	(account isEmpty not) ifTrue: 
	[sumary add: account first dataPrint. sumary add: 'Balance = 10']
	
	
	ifFalse: [sumary add: 'Balance = 0'].
	^sumary!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 01:44:53' prior: 50655743!
sumary
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 01:48:30'!
sumary: aReport
	(transactions isEmpty not) ifTrue: [transactions first dataPrintIn: aReport]
	! !

!methodRemoval: ReceptiveAccount #sumary stamp: 'eaam 10/23/2023 01:48:37'!
sumary
	!
!AccountSumaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:49:59' prior: 50656276!
sumary
	| sumary |
	sumary := OrderedCollection new.
	
	^sumary! !
!AccountSumaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:50:24' prior: 50656198!
initializeSumary: aAccount
	account := aAccount.
	AccountSumary := OrderedCollection new.! !

Object subclass: #AccountSumaryReport
	instanceVariableNames: 'account AccountSumary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSumaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 01:50:41'!
Object subclass: #AccountSumaryReport
	instanceVariableNames: 'account AccountSumary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSumaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:51:12' prior: 50656307!
sumary
	account sumary.! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:51:37'!
dataPrintIn
	^('Depósito por ', self value asString)! !

!methodRemoval: Deposit #dataPrint stamp: 'eaam 10/23/2023 01:51:37'!
dataPrint
	^('Depósito por ', self value asString)!
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:03'!
dataPrintIn: aReport
	^('Depósito por ', self value asString)! !

!methodRemoval: Deposit #dataPrintIn stamp: 'eaam 10/23/2023 01:52:03'!
dataPrintIn
	^('Depósito por ', self value asString)!
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:45' prior: 50656344!
dataPrintIn: aReport
	^aReport printDepositWithValue: value! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50656353!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:53:05'!
dataPrintIn
	^('Extracción por ', self value asString).! !

!methodRemoval: Withdraw #dataPrint stamp: 'eaam 10/23/2023 01:53:05'!
dataPrint
	^('Extracción por ', self value asString).!
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:53:30'!
dataPrintIn: aReport
	^('Extracción por ', self value asString).! !

!methodRemoval: Withdraw #dataPrintIn stamp: 'eaam 10/23/2023 01:53:30'!
dataPrintIn
	^('Extracción por ', self value asString).!
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:53:58' prior: 50656370!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50656379!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 01:54:10'!
PASSED!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/23/2023 01:54:10'!
ERROR!

!testRun: #AccountSumaryTests #test02 stamp: 'eaam 10/23/2023 01:54:10'!
ERROR!

!testRun: #AccountSumaryTests #test03 stamp: 'eaam 10/23/2023 01:54:10'!
ERROR!

!testRun: #AccountSumaryTests #test01 stamp: 'eaam 10/23/2023 01:54:12'!
ERROR!

!classRenamed: #AccountSumaryTests as: #AccountSummaryTests stamp: 'eaam 10/23/2023 01:55:06'!
Smalltalk renameClassNamed: #AccountSumaryTests as: #AccountSummaryTests!

!classRenamed: #AccountSumaryReport as: #AccountSummaryReport stamp: 'eaam 10/23/2023 01:55:11'!
Smalltalk renameClassNamed: #AccountSumaryReport as: #AccountSummaryReport!
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:11' prior: 50656224!
test02
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:11' prior: 50656263!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: report sumary equals: resumen! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:11' prior: 50656213!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	self assert: report content equals: resumen! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 01:55:24'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account AccountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:24' prior: 50656313!
initializeSumary: aAccount
	account := aAccount.
	AccountSummary := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 01:55:34'!
summary: aReport
	(transactions isEmpty not) ifTrue: [transactions first dataPrintIn: aReport]
	! !

!methodRemoval: ReceptiveAccount #sumary: stamp: 'eaam 10/23/2023 01:55:34'!
sumary: aReport
	(transactions isEmpty not) ifTrue: [transactions first dataPrintIn: aReport]
	!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:55:45'!
summary
	account sumary.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:45' prior: 50656333!
sumary
	account summary.! !
!AccountSummaryTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:45' prior: 50656516!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	self assert: report summary equals: resumen! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:55:45' prior: 50656567!
summary
	account summary.! !

!methodRemoval: AccountSummaryReport #sumary stamp: 'eaam 10/23/2023 01:55:46'!
sumary
	account summary.!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:30' prior: 50656503!
test02
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	resumen add: 'Depósito por 10'.
	resumen add: 'Balance = 10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:36' prior: 50656529!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:40' prior: 50656577!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	report summary.
	self assert: report summary equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 01:56:44' prior: 50656622!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = 10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:03'!
content
	^''! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:11' prior: 50656648!
content
	^AccountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:29' prior: 50656590!
summary
	account summary.! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 01:57:39'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:57:39' prior: 50656549!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:57:39' prior: 50656652!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:58:17' prior: 50656656!
summary
	account summary.
	accountSummary add: ('Balance =', account balance asString)! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:58:19' prior: 50656680!
summary
	account summary.
	accountSummary add: ('Balance =', account balance asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:58:20'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 01:58:20'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 01:58:20'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:58:25'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:16'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:16'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:34'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 01:59:34'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 01:59:34'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 01:59:35'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 01:59:50'!
summary
	self shouldBeImplemented.! !

!methodRemoval: ReceptiveAccount #summary stamp: 'eaam 10/23/2023 02:00:07'!
summary
	self shouldBeImplemented.!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:25'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:00:25'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:00:25'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:27'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:00:51' prior: 50656686!
summary
	account summary: self.
	accountSummary add: ('Balance =', account balance asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:52'!
FAILURE!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:00:52'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:00:52'!
ERROR!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:00:55'!
FAILURE!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50656737!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:01:16'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:01:16'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:01:16'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:01:20'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:29'!
printDepositWithValue: aValue 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:17' prior: 50656770!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:02:18'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:02:18'!
FAILURE!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:02:19'!
ERROR!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:02:29'!
FAILURE!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50656775!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:02:49'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:02:49'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:02:49'!
ERROR!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:02:49'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:56'!
printWithdrawWithValue: aValue 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50656808!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:03:32'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:03:32'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:03:32'!
FAILURE!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:03:32'!
FAILURE!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:04:49'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:04:49'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:04:49'!
FAILURE!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:04:49'!
FAILURE!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:06:35' prior: 50656635!
test03
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:06:36'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:08:06'!
test04
	| accounttoExtraxtFrom accountToDeposit resumen report|
	accounttoExtraxtFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer .
	report := AccountSummaryReport sumaryOf: accounttoExtraxtFrom.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 02:09:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:10:00'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:10:00'!
FAILURE!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:10:00'!
FAILURE!
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02'!
dataPrintIn: aReport! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:15:25' prior: 50656863!
test04
	| accounttoExtraxtFrom accountToDeposit resumen report|
	accounttoExtraxtFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtraxtFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtraxtFrom.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:15:31' prior: 50656987!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	resumen add: 'Extracción por 10'.
	resumen add: 'Balance = -10'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:16:06' prior: 50657005!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	resumen add: 'Salida por transferencia de 1'.
	resumen add: 'Balance = -1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:16:07'!
ERROR!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:16:19'!
dataPrintIn: aReport 
	self shouldBeImplemented.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' prior: 50657043!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:17:40'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:17:40'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:17:40'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:17:40'!
ERROR!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:17:40'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:17:50'!
printOutgoingTransferWithValue: aRenameMe1 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:14' prior: 50657066!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50657072!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:18:31'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:18:52' prior: 50657023!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:18:53'!
ERROR!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:19:08'!
dataPrintIn: aReport 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24'!
dataPrintIn: aReport

	self subclassResponsibility ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' prior: 50657116 overrides: 50657121!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:20:11'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:20:11'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:20:11'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:11'!
ERROR!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:11'!
ERROR!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:20:27' prior: 50657096!
test04
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	resumen add: 'Salida por transferencia de 1'.
	resumen add: 'Balance = -1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:20:28'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:20:48'!
test05
	| accounttoExtractFrom accountToDeposit resumen report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:20:49'!
ERROR!
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:20:58'!
printIncomingTransferWithValue: aRenameMe1 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50657196!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:21:32'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:22:20'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:25:36'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:27:10'!
test06
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:27:25' prior: 50657250!
test06
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: ''.
	resumen add: 'Entrada por transferencia de 1'.
	resumen add: 'Balance = 1'.
	report summary.
	self assert: report content equals: resumen! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 02:27:59' prior: 50657265!
test06
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Depósito por 100'.
	resumen add: 'Extracción por 50'.
	resumen add: 'Balance = 50'.
	report summary.
	self assert: report content equals: resumen! !

!testRun: #AccountSummaryTests #test06 stamp: 'eaam 10/23/2023 02:28:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50656555!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 02:29:35'!
PASSED!

!testRun: #AccountSummaryTests #test01 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test02 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

!testRun: #AccountSummaryTests #test06 stamp: 'eaam 10/23/2023 02:29:42'!
PASSED!

----QUIT----(23 October 2023 02:30:27) CuisUniversity-5981.image priorSource: 10351001!

----STARTUP---- (23 October 2023 20:00:29) as /home/clinux01/Documents/cuis/linux64(1)/linux64/CuisUniversity-5981.image!

!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:09' prior: 50657121!
dataPrintIn: aReport

	^self subclassResponsibility! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50657360!
dataPrintIn: aReport

	self subclassResponsibility! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:34:55' prior: 50651856!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02' prior: 50657370!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 21:37:03'!
PASSED!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:37:33' prior: 50655039!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !

TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'eaam 10/23/2023 21:38:42'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'no messages' stamp: 'eaam 10/23/2023 21:38:50'!
test01! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:40:15' prior: 50657466!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	report summary.
	self assert: report content equals: resumen! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:41:11' prior: 50657470!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Balance = 0'.
	report netTransfers.
	self assert: report content equals: resumen! !

!classRenamed: #IncomingTransfer as: #IncomingLegTransfer stamp: 'eaam 10/23/2023 21:45:00'!
Smalltalk renameClassNamed: #IncomingTransfer as: #IncomingLegTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:45:01' prior: 50657433!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !

!classRenamed: #OutgoingTransfer as: #OutgoingLegTransfer stamp: 'eaam 10/23/2023 21:45:25'!
Smalltalk renameClassNamed: #OutgoingTransfer as: #OutgoingLegTransfer!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:45:25' prior: 50657499!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58' prior: 50656611!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05' prior: 50656598!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15' prior: 50656840!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32' prior: 50657146!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43' prior: 50657176!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53' prior: 50657280!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:49:07' prior: 50657482!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	resumen add: 'Neto de transferencias: 0'.
	report netTransfers.
	self assert: report content equals: resumen! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:49:42' prior: 50657634!
test01
	| account resumen report|
	account := ReceptiveAccount new.
	resumen := OrderedCollection new.
	resumen add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report content equals: resumen! !
!AccountNetTransferTests methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 21:50:20' prior: 50657646!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:50:26'!
ERROR!
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:50:36'!
netTransfers
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:34' prior: 50657670!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: ''.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55' prior: 50657675!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'eaam 10/23/2023 21:52:56'!
PASSED!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:07'!
ERROR!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:07'!
ERROR!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:12'!
ERROR!

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:12'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20' prior: 50657657!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!testRun: #AccountNetTransferTests #test01 stamp: 'eaam 10/23/2023 21:53:37'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:48'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:54:34' prior: 50657747!
test02
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27' prior: 50657760!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

----QUIT----(23 October 2023 21:59:08) CuisUniversity-5981.image priorSource: 10422461!

----STARTUP---- (24 October 2023 02:12:42) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Downloads\smalltalkVM\windows64\Portfolio-Solucion.st----!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:14:51'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:14:51'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:14:51'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06'!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:15:06'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:15:06'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:15:06'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!

!testRun: #AccountNetTransferTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:15:29'!
PASSED!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:15:31'!
ERROR!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:15:31'!
ERROR!

!testRun: #AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!

!testRun: #AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:15:59'!
PASSED!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58'!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:17:58'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:18:13'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42'!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:18:42'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55'!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:18:55'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08'!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:19:08'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22'!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:19:22'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!

----STARTUP---- (24 October 2023 02:19:46) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:49'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:49'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:52'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:52'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:53'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:53'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50668508!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50668512!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50668517!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50668521!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50668500!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50668504!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:56'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:56'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:57'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:57'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50668512!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50668517!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50668508!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50668500!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50668504!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50668521!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33'!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39'!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39'!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40'!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31'!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30'!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31'!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15'!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:58'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51'!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24'!
dataPrintIn: aReport

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50668830!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50668834!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' overrides: 50668839!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:19:59'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50668834!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50668839!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50668830!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
IncomingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
IncomingTransfer class
	instanceVariableNames: ''!
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50668834!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50668839!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50668830!
value 

	^transfer value! !

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
OutgoingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:00'!
OutgoingTransfer class
	instanceVariableNames: ''!
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50668830!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50668834!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' overrides: 50668839!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23'!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02'!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18'!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:01'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16'!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:02'!
test08TransferChangesAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:20:02'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:09'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:20:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:02'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50667995!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50668001!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50668012!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50668034!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50668041!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50668052!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50668080!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50668086!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50668109!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50668142!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50668160!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50668181!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50668199!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50668218!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50668247!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50668285!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50668293!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50668302!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50668312!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50668322!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50668335!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50668347!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50668399!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50668410!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50668421!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50668432!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50668443!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50668454!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50668465!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50668476!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50668500!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50668504!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50668508!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50668512!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50668517!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50668521!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50668541!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50668546!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50668550!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50668554!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50668561!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50668568 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50668574 overrides: 50669900!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50668580 overrides: 50669904!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50668588 overrides: 50669910!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50668597 overrides: 50669915!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50668601!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50668608 overrides: 50669890!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50668615 overrides: 50669895!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50668624!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50668632!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50668639!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:03'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50668654!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50668660!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50668665!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50668688 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50668694 overrides: 50669904!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50668700!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50668706 overrides: 50669910!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50668711 overrides: 50669900!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50668718 overrides: 50669890!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50668724 overrides: 50669895!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50668729 overrides: 50669915!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55'!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50668733!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50668756!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50668762!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50668766!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50668772!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50668779!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50668786!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50668792!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50668809!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50668830 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50668834!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50668839!
dataPrintIn: aReport

	self subclassResponsibility! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50668854!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50668877!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50668882 overrides: 50670247!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50668886 overrides: 50670252!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50668891 overrides: 50670257!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50668905!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:04'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50670252!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50670257!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50670247!
value 

	^transfer value! !
!IncomingLegTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
IncomingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
IncomingLegTransfer class
	instanceVariableNames: ''!
!IncomingLegTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50670252!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50670257!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50670247!
value 

	^transfer value! !

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
OutgoingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
OutgoingLegTransfer class
	instanceVariableNames: ''!
!OutgoingLegTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50669049!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50669054 overrides: 50670247!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50669058 overrides: 50670252!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50669063 overrides: 50670257!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50669077!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:05'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50669097!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50669101!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50669109!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50669113 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50669116!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50669120!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:06'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:20:06'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:45:25' prior: 50669133!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50669156!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50669168!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50669173!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:20:06'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:20:06'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:20:06'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06'!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:20:06'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:20:06'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:20:06'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58'!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:20:06'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:20:06'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:20:06'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42'!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:20:06'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55'!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:20:07'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08'!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:20:07'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22'!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:20:07'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:30'!
test03FromLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test03 stamp: 'Sof D 10/24/2023 02:20:30'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:41'!
test04ToLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test04 stamp: 'Sof D 10/24/2023 02:20:41'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:58'!
test05ToLegCanAccessFromLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !

!methodRemoval: TransferTest #test05 stamp: 'Sof D 10/24/2023 02:20:59'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:21:11'!
test06FromLegCanAccessToLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !

!methodRemoval: TransferTest #test06 stamp: 'Sof D 10/24/2023 02:21:11'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
!

!testRun: #ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:21:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:21:34'!
FAILURE!

!methodRemoval: ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:21:43'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:21:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:21:46'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:21:58'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:21:58'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!

!methodRemoval: ReceptiveAccountTest #test09TransferChangesItsAccountsBalance stamp: 'Sof D 10/24/2023 02:22:15'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:38'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07 stamp: 'Sof D 10/24/2023 02:22:39'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:45'!
test07TransferOfAmountZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07TransferOfZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:22:45'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:23:02'!
test08TransferFromAccountToItselfIsntAllowed

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test08 stamp: 'Sof D 10/24/2023 02:23:02'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!

!classRemoval: #IncomingTransfer stamp: 'Sof D 10/24/2023 02:23:43'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingTransfer stamp: 'Sof D 10/24/2023 02:23:46'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:23:48'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:23:51'!
PASSED!

TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:24:25'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:24:50' overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	! !
!TransferTest methodsFor: 'setup' stamp: 'Sof D 10/24/2023 02:25:25' prior: 50671294 overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: a1 to: a2 amount: 1! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:40' prior: 50670626!
test01TransferToLegHasReceivingAccount

	
	
		
	self assert: (t to) equals: a2 transactions first .
! !

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:25:41'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:44' prior: 50671307!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: a2 transactions first .
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:52' prior: 50670698!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: a1 transactions first.
! !

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:25:53'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:06' prior: 50670957!
test03FromLegCanAccessItsTransfer

		
	self assert: (t from) transfer equals: t.
! !

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:07'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:15' prior: 50670978!
test04ToLegCanAccessItsTransfer
		
	self assert: (t to) transfer equals: t.
! !

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:15'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:16'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:23' prior: 50670999!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (t to) from equals: (t from).
! !

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:24'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:24'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:24'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:25'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:32' prior: 50671021!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (t from) to equals: (t to).
! !

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:33'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:45' prior: 50671162!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: a1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:46'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:57' prior: 50671186!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: a1 to: a1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test03FromLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test04ToLegCanAccessItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test05ToLegCanAccessFromLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test06FromLegCanAccessToLegOfItsTransfer stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test07TransferOfAmountZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!testRun: #TransferTest #test08TransferFromAccountToItselfIsntAllowed stamp: 'Sof D 10/24/2023 02:26:58'!
PASSED!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:27:06'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671350!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671300 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: a2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671533!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50671572!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:27:11'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50671628 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50671635!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50671344!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: account2 transactions first .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:27:18'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671387!
test03FromLegCanAccessItsTransfer

		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671459!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671620!
test02TransferFromLegHasSendingAccount
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671496!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671423!
test04ToLegCanAccessItsTransfer
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671662 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50671679!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:29:49'!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:29:49'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:30:00' prior: 50671744!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:30:34'!
ERROR!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:30:34'!
ERROR!

----STARTUP---- (24 October 2023 02:31:12) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:17'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:17'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:18'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:18'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:20'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50672318!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50672322!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50672327!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50672331!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50672310!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50672314!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:22'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:22'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:23'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:23'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50672322!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50672327!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50672318!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50672310!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50672314!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50672331!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33'!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:24'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:24'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39'!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39'!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40'!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31'!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30'!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31'!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15'!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51'!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24'!
dataPrintIn: aReport

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50672640!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50672644!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' overrides: 50672649!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:25'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50672644!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50672649!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50672640!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
IncomingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
IncomingTransfer class
	instanceVariableNames: ''!
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:26'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50672644!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50672649!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50672640!
value 

	^transfer value! !

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
OutgoingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
OutgoingTransfer class
	instanceVariableNames: ''!
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50672640!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50672644!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' overrides: 50672649!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:27'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23'!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17'!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10'!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02'!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18'!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28'!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49'!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16'!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:02'!
test08TransferChangesAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:31:28'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:09'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:31:28'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:28'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50671805!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50671811!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50671822!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50671844!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50671851!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50671862!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50671890!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50671896!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50671919!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50671952!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50671970!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50671991!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50672009!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50672028!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50672057!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50672095!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50672103!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50672112!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50672122!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50672132!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50672145!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50672157!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50672209!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50672220!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50672231!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50672242!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50672253!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50672264!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50672275!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50672286!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50672310!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50672314!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50672318!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50672322!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50672327!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50672331!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:29'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50672351!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50672356!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50672360!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50672364!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50672371!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50672378 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50672384 overrides: 50673710!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50672390 overrides: 50673714!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50672398 overrides: 50673720!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50672407 overrides: 50673725!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50672411!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50672418 overrides: 50673700!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50672425 overrides: 50673705!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50672434!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50672442!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50672449!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50672464!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50672470!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50672475!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50672498 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50672504 overrides: 50673714!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50672510!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50672516 overrides: 50673720!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50672521 overrides: 50673710!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50672528 overrides: 50673700!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50672534 overrides: 50673705!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50672539 overrides: 50673725!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55'!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50672543!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50672566!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50672572!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50672576!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50672582!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50672589!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50672596!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50672602!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50672619!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50672640 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50672644!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50672649!
dataPrintIn: aReport

	self subclassResponsibility! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50672664!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50672687!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50672692 overrides: 50674057!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50672696 overrides: 50674062!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50672701 overrides: 50674067!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50672715!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:30'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' overrides: 50674062!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' overrides: 50674067!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13'!
transfer
	^transfer! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' overrides: 50674057!
value 

	^transfer value! !
!IncomingLegTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55'!
from
	^transfer from.! !

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
IncomingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
IncomingLegTransfer class
	instanceVariableNames: ''!
!IncomingLegTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:31'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' overrides: 50674062!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' overrides: 50674067!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32'!
to
	^transfer to.! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45'!
transfer
	^transfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' overrides: 50674057!
value 

	^transfer value! !

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
OutgoingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
OutgoingLegTransfer class
	instanceVariableNames: ''!
!OutgoingLegTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50672859!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50672864 overrides: 50674057!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50672868 overrides: 50674062!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50672873 overrides: 50674067!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50672887!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50672907!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50672911!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50672919!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50672923 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50672926!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50672930!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:32'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:45:25' prior: 50672943!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50672966!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50672978!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50672983!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:31:32'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:31:32'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:31:32'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06'!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:31:32'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:31:32'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:31:32'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58'!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:31:33'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:31:33'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27'!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:31:33'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42'!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:31:33'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55'!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:31:33'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08'!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:31:33'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22'!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:31:33'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50673197!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50673203!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50673214!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50673236!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50673243!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50673254!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50673282!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50673288!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50673311!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50673344!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50673362!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50673383!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50673401!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50673420!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50673448!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50673486!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50673494!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50673503!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50673513!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50673523!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50673536!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50673548!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59' prior: 50673559!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/20/2023 01:29:33' prior: 50673570!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:33'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50673621!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50673632!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50673643!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50673654!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50673665!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50673676!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50673700!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50673705!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50673710!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50673714!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50673720!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50673725!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50673746!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50673751!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50673756!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50673760!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50673767!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50673774 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50673780 overrides: 50675309!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50673786 overrides: 50675314!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50673794 overrides: 50675320!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50673803 overrides: 50675325!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50673808!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50673816 overrides: 50675299!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50673823 overrides: 50675304!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50673833!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50673842!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50673849!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50673864!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50673870!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50673876!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50673900 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50673906 overrides: 50675314!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50673913!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50673919 overrides: 50675320!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50673924 overrides: 50675309!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50673932 overrides: 50675299!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50673938 overrides: 50675304!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50673944 overrides: 50675325!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50673956!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50673980!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50673986!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50673990!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50673996!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50674003!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50674010!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50674017!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50674035!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:34'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50674057 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50674062!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 02:19:24' prior: 50674067!
dataPrintIn: aReport

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50674083!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50674106!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50674111 overrides: 50675653!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50674115 overrides: 50675658!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50674120 overrides: 50675663!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50674135!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' prior: 50672737 overrides: 50675658!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' prior: 50672743 overrides: 50675663!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42' prior: 50672749!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13' prior: 50672754!
transfer
	^transfer! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' prior: 50672759 overrides: 50675653!
value 

	^transfer value! !
!IncomingTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55' prior: 50672763!
from
	^transfer from.! !

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
IncomingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
IncomingTransfer class
	instanceVariableNames: ''!
!IncomingTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41' prior: 50672777!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50672799 overrides: 50675658!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' prior: 50672805 overrides: 50675663!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46' prior: 50672811!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32' prior: 50672816!
to
	^transfer to.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45' prior: 50672820!
transfer
	^transfer ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' prior: 50672825 overrides: 50675653!
value 

	^transfer value! !

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
OutgoingTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
OutgoingTransfer class
	instanceVariableNames: ''!
!OutgoingTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45' prior: 50672839!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50674282!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50674287 overrides: 50675653!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50674291 overrides: 50675658!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50674296 overrides: 50675663!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50674311!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50674331!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50674336!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50674345!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50674349 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50674353!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50674357!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50674370!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.
	
	aAccountToTransferFrom register: transfer.
	aAccountToTransferTo register: transfer.
	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50674390!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50674402!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50674408!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:02' prior: 50672988!
test08TransferChangesAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:31:35'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/23/2023 20:22:09' prior: 50673012!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
! !

!methodRemoval: ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:31:35'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountNetTransferTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:53:20'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:58:27'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTests category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:35'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:46:58'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:05'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:15'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:32'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:43'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:47:53'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50674782!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04' prior: 50674788!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50674799!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50674822!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50674829!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50674840!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50674868!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50674874!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50674897!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50674931!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50674949!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50674971!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50674990!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50675010!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50675039!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50675078!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50675086!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50675095!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50675106!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50675116!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54' prior: 50675130!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24' prior: 50675143!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/19/2023 21:52:59'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'eaam 10/23/2023 21:37:02'!
test09transferIsRegistered

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer from).
	self assert:  (account2 hasRegistered: transfer to).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:08' prior: 50675196!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:05' prior: 50675207!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:48:01' prior: 50675219!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:02' prior: 50675230!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:51:29' prior: 50675241!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:15' prior: 50675252!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:47:58' prior: 50675263!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:56' prior: 50675275!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50675299!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50675304!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50675309!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50675314!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50675320!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50675325!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:36'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50675346!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50675351!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50675356!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50675361!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50675368!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50675376 overrides: 16920235!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50675382 overrides: 50676737!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50675388 overrides: 50676741!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50675396 overrides: 50676747!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50675405 overrides: 50676752!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50675410!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50675418 overrides: 50676727!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50675425 overrides: 50676732!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50675435!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50675444!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50675452!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55' prior: 50675467!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50675473!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50675479!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50675503 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' prior: 50675509 overrides: 50676741!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50675516!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50675522 overrides: 50676747!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50675527 overrides: 50676737!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50675535 overrides: 50676727!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50675541 overrides: 50676732!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50675547 overrides: 50676752!
addedTo: aPortfolio 
	
	! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 21:52:55' prior: 50673948!
netTransfers
	| netTransfer |
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	^netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'eaam 10/23/2023 02:29:33' prior: 50675551!
summary: aReport
	transactions do: [:aTransaction | aTransaction dataPrintIn: aReport]
	! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'eaam 10/23/2023 01:57:39' prior: 50675575!
initializeSumary: aAccount
	account := aAccount.
	accountSummary := OrderedCollection new.! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 01:57:39' prior: 50675582!
content
	^accountSummary! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:02:40' prior: 50675586!
printDepositWithValue: aValue 
	accountSummary add: ('Depósito por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:21:31' prior: 50675592!
printIncomingTransferWithValue: aValue 
	accountSummary add: ('Entrada por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:18:30' prior: 50675599!
printOutgoingTransferWithValue: aValue 
	accountSummary add: ('Salida por transferencia de ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:03:31' prior: 50675606!
printWithdrawWithValue: aValue 
	accountSummary add: ('Extracción por ', aValue asString).! !
!AccountSummaryReport methodsFor: 'evaluating' stamp: 'eaam 10/23/2023 02:01:15' prior: 50675613!
summary
	account summary: self.
	accountSummary add: ('Balance = ', account balance asString).! !

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountSummaryReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummaryReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountSummaryReport class
	instanceVariableNames: ''!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'eaam 10/23/2023 00:03:51' prior: 50675631!
sumaryOf: aAccount
	^self new initializeSumary: aAccount! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50675653 overrides: 16902254!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50675658!
affectBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'eaam 10/23/2023 21:31:23' prior: 50675663!
dataPrintIn: aReport

	self subclassResponsibility! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50675679!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50675702!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50675707 overrides: 50677084!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50675711 overrides: 50677089!
affectBalance: aBalance

	^aBalance + value ! !
!Deposit methodsFor: 'print' stamp: 'eaam 10/23/2023 01:52:51' prior: 50675716 overrides: 50677094!
dataPrintIn: aReport
	aReport printDepositWithValue: value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50675731!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:37'!
AccountTransaction subclass: #IncomingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:50:22' prior: 50674157 overrides: 50677089!
affectBalance: aBalance

	^aBalance + transfer value ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:20:03' prior: 50674163 overrides: 50677094!
dataPrintIn: aReport 
	aReport printIncomingTransferWithValue: self value! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:42' prior: 50674169!
initializeFor: aTransfer

	transfer := aTransfer ! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/21/2023 00:52:13' prior: 50674174!
transfer
	^transfer! !
!IncomingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:19' prior: 50674179 overrides: 50677084!
value 

	^transfer value! !
!IncomingLegTransfer methodsFor: 'category-name' stamp: 'eaam 10/22/2023 23:51:55' prior: 50674183!
from
	^transfer from.! !

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
IncomingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'IncomingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
IncomingLegTransfer class
	instanceVariableNames: ''!
!IncomingLegTransfer class methodsFor: 'nil' stamp: 'eaam 10/20/2023 13:51:41' prior: 50674197!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingLegTransfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #OutgoingLegTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:52' prior: 50674220 overrides: 50677089!
affectBalance: aBalance

	^aBalance - transfer value ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/23/2023 02:17:27' prior: 50674226 overrides: 50677094!
dataPrintIn: aReport 
	aReport printOutgoingTransferWithValue: self value! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:46' prior: 50674232!
initializeFor: aTransfer

	transfer := aTransfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:52:32' prior: 50674237!
to
	^transfer to.! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/22/2023 23:50:45' prior: 50674241!
transfer
	^transfer ! !
!OutgoingLegTransfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:52:26' prior: 50674246 overrides: 50677084!
value 

	^transfer value! !

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
OutgoingLegTransfer class
	instanceVariableNames: ''!

!classDefinition: 'OutgoingLegTransfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
OutgoingLegTransfer class
	instanceVariableNames: ''!
!OutgoingLegTransfer class methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 13:51:45' prior: 50674261!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50675879!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50675884 overrides: 50677084!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50675888 overrides: 50677089!
affectBalance: aBalance

	^aBalance - value! !
!Withdraw methodsFor: 'print' stamp: 'eaam 10/23/2023 01:54:06' prior: 50675893 overrides: 50677094!
dataPrintIn: aReport
	aReport printWithdrawWithValue: value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50675908!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Object subclass: #Transfer
	instanceVariableNames: 'value from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 03:17:23' prior: 50675928!
affectBalance: aBalance
	^aBalance.	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/19/2023 22:01:17' prior: 50675933!
initializeFrom: aAccountToTransferFrom to: aAccountToTransferTo forAmount: aAmmount
	value :=  aAmmount.
	from := aAccountToTransferFrom.
	to := aAccountToTransferTo.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 14:00:10' prior: 50675942!
to
	^to! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'eaam 10/20/2023 01:50:09' prior: 50675946 overrides: 16902254!
value

	^value! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/23/2023 02:11:02' prior: 50675950!
dataPrintIn: aReport! !
!Transfer methodsFor: 'category-name' stamp: 'eaam 10/20/2023 14:35:18' prior: 50675954!
from
	
	^from! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:38'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/23/2023 21:45:25' prior: 50675967!
from: aAccountToTransferFrom to: aAccountToTransferTo amount: aAmountToTransfer
	| transfer outgoingTransfer incomingTransfer |
	
	self shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom.
	
	transfer := self new.
	
	outgoingTransfer := OutgoingLegTransfer register: transfer on: aAccountToTransferFrom.
	incomingTransfer := IncomingLegTransfer register: transfer on: aAccountToTransferTo.
	
	transfer initializeFrom: outgoingTransfer to: incomingTransfer forAmount: aAmountToTransfer.

	^transfer.
	! !
!Transfer class methodsFor: 'initialize' stamp: 'eaam 10/21/2023 01:05:28' prior: 50675990!
shouldTransfer: aAmountToTransfer to: aAccountToTransferTo from: aAccountToTransferFrom

	(aAccountToTransferFrom = aAccountToTransferTo) ifTrue: [self error: self cantTransferToItselfErrorDescription].
	(aAmountToTransfer=0) ifTrue: [self error: self cantTransferZeroErrorDescription]! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 00:59:49' prior: 50676002!
cantTransferToItselfErrorDescription
	^'lol claramente no podes hacer esto'! !
!Transfer class methodsFor: 'error' stamp: 'eaam 10/21/2023 01:03:16' prior: 50676008!
cantTransferZeroErrorDescription
	^'no podes ser tan rata hermano'.! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51' prior: 50674413!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:14:51'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:14:51' prior: 50674436!
test01TransferToLegHasReceivingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !

!methodRemoval: AccountNetTransferTests #test01 stamp: 'Sof D 10/24/2023 02:31:38'!
test01
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!

!methodRemoval: AccountSummaryTests #test01 stamp: 'Sof D 10/24/2023 02:31:38'!
test01
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test01 stamp: 'Sof D 10/24/2023 02:31:38'!
test01

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
	
		
	self assert: (transfer to) equals: account2 transactions first .
!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05' prior: 50674478!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer! !
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:15:05'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:15:06' prior: 50674508!
test02TransferFromLegHasSendingAccount

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
! !

!methodRemoval: AccountNetTransferTests #test02 stamp: 'Sof D 10/24/2023 02:31:38'!
test02
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := netTransfer add: 'Neto de transferencias: 0'.
	self assert: report content equals: netTransfer!

!methodRemoval: AccountSummaryTests #test02 stamp: 'Sof D 10/24/2023 02:31:38'!
test02
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!

!methodRemoval: TransferTest #test02 stamp: 'Sof D 10/24/2023 02:31:38'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) equals: account1 transactions first.
!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:17:58' prior: 50674557!
test01SummaryOfNewAccountReportsZeroBalance
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:31:38'!
test01TransferToLegHasReceivingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Balance = 0'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:12'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:31:38'!
test02TransferFromLegHasSendingAccount
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:27' prior: 50674609!
test02SummaryReportsDepositCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test02SummaryReportsBalanceCorrectly stamp: 'Sof D 10/24/2023 02:31:38'!
test02SummaryReportsBalanceCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 10 on: account.
	report := AccountSummaryReport sumaryOf: account. 
	summary add: 'Depósito por 10'.
	summary add: 'Balance = 10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:42' prior: 50674637!
test03SummaryReportsWithdrawalCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test03 stamp: 'Sof D 10/24/2023 02:31:38'!
test03
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Withdraw register: 10 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Extracción por 10'.
	summary add: 'Balance = -10'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:18:55' prior: 50674664!
test04SummaryReportsOutgoingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test04 stamp: 'Sof D 10/24/2023 02:31:38'!
test04
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accounttoExtractFrom.
	summary add: 'Salida por transferencia de 1'.
	summary add: 'Balance = -1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:08' prior: 50674700!
test05SummaryReportsIncomingTransferCorrectly
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test05 stamp: 'Sof D 10/24/2023 02:31:38'!
test05
	| accounttoExtractFrom accountToDeposit summary report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	summary := OrderedCollection new.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := AccountSummaryReport sumaryOf: accountToDeposit.
	summary add: 'Entrada por transferencia de 1'.
	summary add: 'Balance = 1'.
	report summary.
	self assert: report content equals: summary!
!AccountSummaryTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:19:22' prior: 50674735!
test06SummaryReportsMultipleTransactionsCorrectly
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary! !

!methodRemoval: AccountSummaryTests #test06 stamp: 'Sof D 10/24/2023 02:31:38'!
test06
	| account summary report|
	account := ReceptiveAccount new.
	summary := OrderedCollection new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account. 
	report := AccountSummaryReport sumaryOf: account.
	summary add: 'Depósito por 100'.
	summary add: 'Extracción por 50'.
	summary add: 'Balance = 50'.
	report summary.
	self assert: report content equals: summary!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:30'!
test03FromLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test03 stamp: 'Sof D 10/24/2023 02:31:39'!
test03

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:41'!
test04ToLegCanAccessItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
! !

!methodRemoval: TransferTest #test04 stamp: 'Sof D 10/24/2023 02:31:39'!
test04

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) transfer equals: transfer.
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:20:58'!
test05ToLegCanAccessFromLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
! !

!methodRemoval: TransferTest #test05 stamp: 'Sof D 10/24/2023 02:31:39'!
test05

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer to) from equals: (transfer from).
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:21:11'!
test06FromLegCanAccessToLegOfItsTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
! !

!methodRemoval: TransferTest #test06 stamp: 'Sof D 10/24/2023 02:31:39'!
test06

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (transfer from) to equals: (transfer to).
!

!methodRemoval: ReceptiveAccountTest #test09transferIsRegisteredInAccounts stamp: 'Sof D 10/24/2023 02:31:39'!
test09transferIsRegisteredInAccounts

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1.
		
	self assert: (account1 hasRegistered: transfer).
	self assert:  (account2 hasRegistered: transfer) .
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:21:58'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
! !

!methodRemoval: ReceptiveAccountTest #test08TransferChangesBalance stamp: 'Sof D 10/24/2023 02:31:39'!
test08TransferChangesBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!

!methodRemoval: ReceptiveAccountTest #test09TransferChangesItsAccountsBalance stamp: 'Sof D 10/24/2023 02:31:39'!
test09TransferChangesItsAccountsBalance

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	
	account2 := ReceptiveAccount new..
	
	Transfer from: account1 to: account2 amount: 1.
		
	self assert: -1 equals: account1 balance .
	self assert: 1 equals: account2 balance .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:38'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07 stamp: 'Sof D 10/24/2023 02:31:39'!
test07

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:22:45'!
test07TransferOfAmountZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !

!methodRemoval: TransferTest #test07TransferOfZeroIsntAllowed stamp: 'Sof D 10/24/2023 02:31:39'!
test07TransferOfZeroIsntAllowed

	| account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:23:02'!
test08TransferFromAccountToItselfIsntAllowed

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!methodRemoval: TransferTest #test08 stamp: 'Sof D 10/24/2023 02:31:39'!
test08

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	
	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.!

!classRemoval: #IncomingTransfer stamp: 'Sof D 10/24/2023 02:31:39'!
AccountTransaction subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingTransfer stamp: 'Sof D 10/24/2023 02:31:39'!
AccountTransaction subclass: #OutgoingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:39'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:39'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'a1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:24:50' overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	! !
!TransferTest methodsFor: 'setup' stamp: 'Sof D 10/24/2023 02:25:25' prior: 50678033 overrides: 16961394!
setUp

	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: a1 to: a2 amount: 1! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:40' prior: 50677466!
test01TransferToLegHasReceivingAccount

	
	
		
	self assert: (t to) equals: a2 transactions first .
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:44' prior: 50678046!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: a2 transactions first .
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:25:52' prior: 50677540!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: a1 transactions first.
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:06' prior: 50677802!
test03FromLegCanAccessItsTransfer

		
	self assert: (t from) transfer equals: t.
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:15' prior: 50677823!
test04ToLegCanAccessItsTransfer
		
	self assert: (t to) transfer equals: t.
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:23' prior: 50677844!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (t to) from equals: (t from).
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:32' prior: 50677866!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (t from) to equals: (t to).
! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:45' prior: 50677959!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: a1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:26:57' prior: 50677983!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: a1 to: a1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:40'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 a2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678058!
test02TransferFromLegHasSendingAccount
		
	self assert: (t from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678039 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: a2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678088!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: a2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:06' prior: 50678097!
test08TransferFromAccountToItselfIsntAllowed

	self should: [Transfer from: account1 to: account1 amount: 1. . ]

	raise: Error

	withMessageText: Transfer cantTransferToItselfErrorDescription.! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:40'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50678122 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	t := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50678129!
test07TransferOfAmountZeroIsntAllowed
	
	self should: [Transfer from: account1 to: account2 amount: 0. ]

	raise: Error

	withMessageText: Transfer cantTransferZeroErrorDescription.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:11' prior: 50678052!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (t to) equals: account2 transactions first .
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:31:40'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678064!
test03FromLegCanAccessItsTransfer

		
	self assert: (transfer from) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678076!
test05ToLegCanAccessFromLegOfItsTransfer
		
	self assert: (transfer to) from equals: (transfer from).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678114!
test02TransferFromLegHasSendingAccount
		
	self assert: (transfer from) equals: account1 transactions first.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678082!
test06FromLegCanAccessToLegOfItsTransfer
		
	self assert: (transfer from) to equals: (transfer to).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678070!
test04ToLegCanAccessItsTransfer
		
	self assert: (transfer to) transfer equals: transfer.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678156 overrides: 16961394!
setUp

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer from: account1 to: account2 amount: 1! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:27:18' prior: 50678173!
test01TransferToLegHasReceivingAccount
	
		
	self assert: (transfer to) equals: account2 transactions first .
! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:29:49'!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test01TransferToLegHasReceivingAccount stamp: 'Sof D 10/24/2023 02:31:40'!
test01TransferToLegHasReceivingAccount
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := OrderedCollection new.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:30:00' prior: 50678238!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	netTransfer add: 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:36:12' prior: 50678262!
test01NetTransferForNewAccountIsZero
	| account netTransfer report|
	account := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	report := account netTransfers.
	self assert: report equals: netTransfer! !
!ReceptiveAccount methodsFor: 'sumaryReport' stamp: 'Sof D 10/24/2023 02:36:23' prior: 50676975!
netTransfers
	| netTransfer |
	netTransfer := 'Neto de transferencias: 0'.
	^netTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferChangesAccountsBalance stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09transferIsRegistered stamp: 'Sof D 10/24/2023 02:36:25'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:36:30'!
PASSED!

!classDefinition: #NetTransferReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:38:44'!
Object subclass: #NetTransferReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:38:34' prior: 50677509!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !
!NetTransferReport methodsFor: 'no messages' stamp: 'Sof D 10/24/2023 02:38:58'!
content
	^'Neto de transferencias: 0'! !

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:38:59'!
PASSED!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:38:59'!
ERROR!

!testRun: #AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:38:59'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:39:36'!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test02TransferFromLegHasSendingAccount stamp: 'Sof D 10/24/2023 02:39:36'!
test02TransferFromLegHasSendingAccount
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:39:41'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:39:41'!
ERROR!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:40:02'!
PASSED!

----SNAPSHOT----(24 October 2023 02:40:07) CuisUniversity-5981.image priorSource: 10669768!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:40:33'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:40:33'!
ERROR!

----STARTUP---- (24 October 2023 02:41:16) as C:\Users\sofia\Downloads\windows64 (1)\windows64\CuisUniversity-5981.image!


!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:41:35'!
ERROR!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:41:35'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:41:47' prior: 50678367!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0',
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:41:47'!
ERROR!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:42:11' prior: 50678432!
test02NetTransferReportStartsReportingZero
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 0'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport new.
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:42:12'!
PASSED!

!testRun: #AccountNetTransferTests #test01NetTransferForNewAccountIsZero stamp: 'Sof D 10/24/2023 02:42:12'!
PASSED!

!testRun: #AccountNetTransferTests #test02NetTransferReportStartsReportingZero stamp: 'Sof D 10/24/2023 02:42:12'!
PASSED!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:43:11'!
test02NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 11'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 02:43:12' prior: 50678479!
test02NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !

!testRun: #AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 02:43:13'!
ERROR!

!classDefinition: 'NetTransferReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:43:54'!
NetTransferReport class
	instanceVariableNames: 'account'!
!NetTransferReport class methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:43:53'!
for: anAccountToReportOn

	account := anAccountToReportOn ! !
!NetTransferReport class methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:44:15' prior: 50678521!
for: anAccountToReportOn

	^NetTransferReport new with: anAccountToReportOn ! !

!classDefinition: #NetTransferReport category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:44:39'!
Object subclass: #NetTransferReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!NetTransferReport methodsFor: 'nil' stamp: 'Sof D 10/24/2023 02:44:38'!
with: anAccountToReportOn
	
	account := anAccountToReportOn ! !

NetTransferReport class
	instanceVariableNames: ''!

!classDefinition: 'NetTransferReport class' category: 'Portfolio-Solucion' stamp: 'Sof D 10/24/2023 02:44:45'!
NetTransferReport class
	instanceVariableNames: ''!
!NetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:45:23' prior: 50678352!
content
	
	| netTransferAmount |
	
	netTransferAmount := account netTransfers .
	
	^'Neto de transferencias: 0'! !
!NetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:45:34' prior: 50678553!
content
	
	| netTransferAmount |
	
	netTransferAmount := account netTransfers .
	
	^'Neto de transferencias: ' + netTransferAmount asString! !
!NetTransferReport methodsFor: 'as yet unclassified' stamp: 'Sof D 10/24/2023 02:45:56' prior: 50678560!
content
	
	| netTransferAmount |
	
	netTransferAmount := account netTransfers .
	
	^'Neto de transferencias: ', netTransferAmount asString! !

----SNAPSHOT----(24 October 2023 02:46:14) CuisUniversity-5981.image priorSource: 11096268!
!AccountNetTransferTests methodsFor: 'tests' stamp: 'Sof D 10/24/2023 14:15:43'!
test03NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer! !

!methodRemoval: AccountNetTransferTests #test02NetTransferReportChangesForIncomingTransfer stamp: 'Sof D 10/24/2023 14:15:43'!
test02NetTransferReportChangesForIncomingTransfer
	| accounttoExtractFrom accountToDeposit netTransfer report|
	accounttoExtractFrom := ReceptiveAccount new.
	accountToDeposit := ReceptiveAccount new.
	netTransfer := 'Neto de transferencias: 1'.
	Transfer from: accounttoExtractFrom to: accountToDeposit amount: 1.
	report := NetTransferReport for: accountToDeposit .
	self assert: report content equals: netTransfer!

----QUIT----(24 October 2023 14:16:20) CuisUniversity-5981.image priorSource: 11101581!