

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (16 November 2023 18:04:08) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CustomerImporter.st----!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:09:16' prior: 50650400 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	inputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:09:19'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:20'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:20'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:21'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:22'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:09:56' prior: 50650804 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	inputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test01NewSelectorShouldNotBeEmpty stamp: 'eaam 11/16/2023 18:12:49'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test02NewSelectorShouldNotContainSeparators stamp: 'eaam 11/16/2023 18:12:49'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test03ExtractingToSelectorAlreadyDefinedInTheClassRaisesAWarning stamp: 'eaam 11/16/2023 18:12:49'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:50'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test04NewSelectorShouldNotStartWithANumber stamp: 'eaam 11/16/2023 18:12:50'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:50'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test05NewUnarySelectorShouldNotStartWithASymbol stamp: 'eaam 11/16/2023 18:12:50'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:51'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test06IntervalToExtractIsNotBeforeMethodSourceCodeBoundaries stamp: 'eaam 11/16/2023 18:12:51'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:51'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test07IntervalToExtractIsNotAfterMethodSourceCodeBoundaries stamp: 'eaam 11/16/2023 18:12:51'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:52'!
m1 ^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test08IntervalToExtractShouldNotContainAReturnExpression stamp: 'eaam 11/16/2023 18:12:52'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:52'!
m1 ^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:52'!
m2

	^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:52' prior: 50651074!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test09ExtractingALiteralCreatesANewMethodAndChangesExistingCodeToCallThatNewMethod stamp: 'eaam 11/16/2023 18:12:52'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:52'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test10IntervalToExtractDoesNotContainsPartOfTheOriginalSelector stamp: 'eaam 11/16/2023 18:12:52'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:53'!
m1 | localVar | ^ localVar + 3! !

!testRun: #ExtractMethodTest #test11IntervalToExtractDoesNotContainsPartOfLocalVariablesDefinition stamp: 'eaam 11/16/2023 18:12:53'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:53'!
m1 <annoyingPragma>! !

!testRun: #ExtractMethodTest #test12IntervalToExtractDoesNotContainsPartOfPragmasDefinition stamp: 'eaam 11/16/2023 18:12:53'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:54'!
m1 ^ 3 + ((4))! !

!testRun: #ExtractMethodTest #test13IntervalToExtractShouldBeAValidSmalltalkExpression stamp: 'eaam 11/16/2023 18:12:54'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:54'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test14ItIsNotPossibleToExtractTheLeftSideOfAnAssignment stamp: 'eaam 11/16/2023 18:12:54'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m1 self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55' prior: 50651236!
m1 self m2! !

!testRun: #ExtractMethodTest #test15ExtractingAListOfStatementsCreatesANewMethodWithoutReturn stamp: 'eaam 11/16/2023 18:12:55'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:55'!
m1 ^ 'hey true'! !

!testRun: #ExtractMethodTest #test16CanNotExtractPartOfALiteral stamp: 'eaam 11/16/2023 18:12:55'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m1 ^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m2

	^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56' prior: 50651291!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test17AStringContainingTheReturnCharacterCanBeExtracted stamp: 'eaam 11/16/2023 18:12:56'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m1
	
	self m3.
	self m4: 5.! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56' prior: 50651323!
m1
	
	self m2.! !

!testRun: #ExtractMethodTest #test18ExtractingAListOfStatementsIncludingDotsRemovesThemAndContinuesWithMethodExtraction stamp: 'eaam 11/16/2023 18:12:56'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m1 ^ ((42))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m2

	^ 42! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56' prior: 50651356!
m1 ^ ((self m2))! !

!testRun: #ExtractMethodTest #test19ASelectionContainingAdditionalParenthesesAtTheBeginningAndOrEndCanBeExtracted stamp: 'eaam 11/16/2023 18:12:56'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m1 | local | ^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m2: local

	^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57' prior: 50651388!
m1 | local | ^ self m2: local! !

!testRun: #ExtractMethodTest #test20ASelectionContainingALocalVariableIsParameterizedOnTheExtractedMessage stamp: 'eaam 11/16/2023 18:12:57'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m1 ^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m2

	^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57' prior: 50651421!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test21ASelectionContainingAdditionalParenthesesOnOneSideCanBeExtractedAndItIsNotTrimmed stamp: 'eaam 11/16/2023 18:12:57'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:58'!
m1 | localVar | ^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:58'!
m2: localVar

	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:58' prior: 50651453!
m1 | localVar | ^ self m2: localVar! !

!testRun: #ExtractMethodTest #test22ItIsPossibleToExtractTheLastExpressionOfAMethod stamp: 'eaam 11/16/2023 18:12:58'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:58'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test23CanNotExtractWithAnInvalidInterval stamp: 'eaam 11/16/2023 18:12:58'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:59'!
m1 | localVar | localVar _ 8! !

!testRun: #ExtractMethodTest #test24ItIsNotPossibleToExtractAnIntervalIncludingATemporaryAssignmentExpression stamp: 'eaam 11/16/2023 18:12:59'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:59'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test25NewUnarySelectorShouldNotContainInvalidCharacters stamp: 'eaam 11/16/2023 18:12:59'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:59'!
m1 ^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:59'!
m2

	^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:59' prior: 50651568!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test26ItIsPossibleToExtractAnEntireBlockIncludingALocalAssignment stamp: 'eaam 11/16/2023 18:12:59'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:00'!
m1 ^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:00'!
m2

	^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:00' prior: 50651601!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test27ItIsPossibleToExtractExpressionsWithOptimizedSelectors stamp: 'eaam 11/16/2023 18:13:00'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:00'!
m1 | localVar | ^ #foo! !

!testRun: #ExtractMethodTest #test28ItIsNotPossibleToExtractALocalVariableInsideOfItsDeclaration stamp: 'eaam 11/16/2023 18:13:00'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m1: arg ^ 2 + arg * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m2: arg

	^ 2 + arg! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01' prior: 50651659!
m1: arg ^ (self m2: arg) * 3! !

!testRun: #ExtractMethodTest #test29ExtractingABinaryExpressionToAKeywordMessageIntroducesParenthesesToNotBreakOriginalPrecedence stamp: 'eaam 11/16/2023 18:13:01'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m1 ^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m2

	^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01' prior: 50651693!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test30ItIsPossibleToExtractAQuotedExpression stamp: 'eaam 11/16/2023 18:13:01'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m1 ^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m2

	^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01' prior: 50651724!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test31ItIsPossibleToExtractExpressionsWithOptimizedSelectorsWhereTheReceiverIsNotASimpleLiteral stamp: 'eaam 11/16/2023 18:13:01'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m1 ^ [ | a | a _ 3 factorial ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02' prior: 50651758!
m1 ^ [ self m2 ]! !

!testRun: #ExtractMethodTest #test32ItIsPossibleToExtractATemporaryDeclarationOfABlockIfItIsNotUsedOutsideOfSelectionInterval stamp: 'eaam 11/16/2023 18:13:02'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m1 | a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02' prior: 50651791!
m1 self m2! !

!testRun: #ExtractMethodTest #test33ItIsPossibleToExtractATemporaryDeclarationIfItIsNotUsedOutsideOfSelectionInterval stamp: 'eaam 11/16/2023 18:13:02'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:03'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test34TryingToExtractAMethodWithLessArgumentsThanNeededFails stamp: 'eaam 11/16/2023 18:13:03'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:03'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test35TryingToExtractAMethodWithMoreArgumentsThanNeededFails stamp: 'eaam 11/16/2023 18:13:03'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m1 ^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m2

	^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04' prior: 50651875!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test36ItIsPossibleToExtractACascadeExpression stamp: 'eaam 11/16/2023 18:13:04'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m1 | temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m2

	| temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04' prior: 50651908!
m1 self m2! !

!testRun: #ExtractMethodTest #test37ItIsPossibleATempDeclarationAlongWithABlock stamp: 'eaam 11/16/2023 18:13:04'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:05'!
m1 ^ (  (3 + 4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:05'!
m2

	^ 3 + 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:05' prior: 50651940!
m1 ^ (  (self m2))! !

!testRun: #ExtractMethodTest #test38ItIsPossibleToExtractCodeThatContainsMultipleParenthesisWithSpacesBetweenThem stamp: 'eaam 11/16/2023 18:13:05'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:05'!
m1 ^ 42! !

!testRun: #ExtractMethodTest #test39TryingToExtractToAMethodThatExistsInASuperclassRaisesAWarning stamp: 'eaam 11/16/2023 18:13:05'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06'!
m1 |var| var _ 42. ^ var! !

!testRun: #ExtractMethodTest #test40CanNotExtractTemporaryAssignmentWithDeclarationIfTheVariableIsUsedOutsideOfSelectionInterval stamp: 'eaam 11/16/2023 18:13:06'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06'!
m1: arg ^ self! !

!testRun: #ExtractMethodTest #test41CannotExtractPartOfMethodSignature stamp: 'eaam 11/16/2023 18:13:06'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06'!
m1 10. 10! !
!ClassToExtractMethod methodsFor: 'something' stamp: 'eaam 11/16/2023 18:13:06'!
m2

	^ 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06' prior: 50652047!
m1 self m2. 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06' prior: 50652054!
m1 self m2. self m2! !

!testRun: #ExtractMethodTest #test42ExtractsManyRepetitionsOnSameMethod stamp: 'eaam 11/16/2023 18:13:06'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07'!
m1 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07'!
m1b 100+10! !
!ClassToExtractMethod methodsFor: 'something' stamp: 'eaam 11/16/2023 18:13:07'!
m2

	^ 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07' prior: 50652086!
m1b 100+self m2! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07' prior: 50652082!
m1 self m2! !

!testRun: #ExtractMethodTest #test43ExtractsRepetitionsOnMoreThanOneMethod stamp: 'eaam 11/16/2023 18:13:07'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:07'!
m1 true ifTrue: [self m1.
	self m2]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:07'!
m2

	self m1.
	self m2! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:07' prior: 50652121!
m1 true ifTrue: [self m2]! !

!testRun: #ExtractMethodTest #test44CanExtractManyStatementsInsideABlock stamp: 'eaam 11/16/2023 18:13:07'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m1 [true] whileTrue: [ true ifTrue: [ self m1 ].
	true ifTrue: [ self m2 ].
	self m3]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m4

	true ifTrue: [ self m1 ].
	true ifTrue: [ self m2 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08' prior: 50652153!
m1 [true] whileTrue: [ self m4.
	self m3]! !

!testRun: #ExtractMethodTest #test45CanExtractCodeWithMoreThanOneBlockAndABlockAtTheEndInsideAnotherBlock stamp: 'eaam 11/16/2023 18:13:08'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m1: arg
	[true] whileTrue: [ true ifTrue: [ arg ].]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m3: argModified

	^ true ifTrue: [ argModified ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08' prior: 50652189!
m1: arg
	[true] whileTrue: [ self m3: arg.]! !

!testRun: #ExtractMethodTest #test46CanModifyArgumentsNamesInExtractedMethod stamp: 'eaam 11/16/2023 18:13:08'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:09'!
m1: arg1 m2: arg2
	[true] whileTrue: [ arg1 ifTrue: [ arg2 ].]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:09'!
m3: arg1Modified m4: arg2

	^ arg1Modified ifTrue: [ arg2 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:09' prior: 50652224!
m1: arg1 m2: arg2
	[true] whileTrue: [ self m3: arg1 m4: arg2.]! !

!testRun: #ExtractMethodTest #test47OnlyModifiedArgumentsNamesAreModifiedInExtractedMethod stamp: 'eaam 11/16/2023 18:13:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:09'!
m1 10! !

!testRun: #ExtractMethodTest #test48NewSelectorMustBeUnaryWhenNoArguments stamp: 'eaam 11/16/2023 18:13:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:10'!
m1 1 to: 2 do: [ :x | x + 1]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:10'!
m2: x

	^ x + 1! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:10' prior: 50652283!
m1 1 to: 2 do: [ :x | self m2: x]! !

!testRun: #ExtractMethodTest #test49CanExtractFromOptimizedMessageSends stamp: 'eaam 11/16/2023 18:13:10'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:24:03' prior: 50650498!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'CABA' ifNone: [self fail].
	
	self assert: listOfCustomerAddresses size equals: 1.
	
	self doesAddress: listOfCustomerAddresses first haveAttributes: expectedAddressAttributes .
! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:24:07'!
ERROR!
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:24:23'!
addressAt: aRenameMe1 ifNone: aRenameMe2 
	self shouldBeImplemented.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:24:43' prior: 50652331!
addressAt: aRenameMe1 ifNone: aBlockIfNone 
	self shouldBeImplemented.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:24:59' prior: 50652336!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	self shouldBeImplemented.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:26:12' prior: 50652341!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	^addresses select: [addresses isInDirection: aAddressDirection ].! !
!Address methodsFor: 'province' stamp: 'eaam 11/16/2023 18:28:52'!
isInDirection: aAddressDirection
	^aAddressDirection = streetName .! !
!Address methodsFor: 'street' stamp: 'eaam 11/16/2023 18:29:11'!
isInStreet: aAddressDirection
	^aAddressDirection = streetName .! !
!Customer methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:29:11' prior: 50652347!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	^addresses select: [addresses isInStreet: aAddressDirection ].! !

!methodRemoval: Address #isInDirection: stamp: 'eaam 11/16/2023 18:29:11'!
isInDirection: aAddressDirection
	^aAddressDirection = streetName .!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/Packages/TerseGuide.pck.st----!
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:30:21' prior: 50652364!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aAddressDirection ] ifNone: aBlockIfNone value.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:30:30' prior: 50655296!
addressAt: aStreetDirection ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetDirection ] ifNone: aBlockIfNone value.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:30:46' prior: 50655304!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetToSearchFor ] ifNone: aBlockIfNone value.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:31:03' prior: 50655312!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetToSearchFor ] ifNone: [aBlockIfNone value].! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:31:08' prior: 50655320!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetToSearchFor ] ifNone: aBlockIfNone.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:32:12'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:12'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:13'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:14'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:14'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:15'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:33:29' prior: 50652306!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail].
	
	self assert: listOfCustomerAddresses size equals: 1.
	
	self doesAddress: listOfCustomerAddresses first haveAttributes: expectedAddressAttributes .
! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:33:31'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:33:32'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:33:43' prior: 50655355!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self assert: listOfCustomerAddresses size equals: 1.
	
	self doesAddress: listOfCustomerAddresses first haveAttributes: expectedAddressAttributes .
! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:34:13' prior: 50655328!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [:anAddress | anAddress isInStreet: aStreetToSearchFor ] ifNone: aBlockIfNone.! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:34:17'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:34:18'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:34:55' prior: 50655384!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:34:57'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:35:07' prior: 50655420!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:35:30' prior: 50650468!
test04PepeSanchezDataIsImportedCorrectly

	| customer listOfCustomerAddresses firstAddressExpectedAttributes secondAddressExpectedAttributes|
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	listOfCustomerAddresses := customer addressAt: 'San Martin' ifNone: [self fail.].

	self doesAddress: listOfCustomerAddresses first haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: listOfCustomerAddresses second haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:35:43' prior: 50655464!
test04PepeSanchezDataIsImportedCorrectly

	| customer listOfCustomerAddresses firstAddressExpectedAttributes secondAddressExpectedAttributes|
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	listOfCustomerAddresses := customer addressAt: 'San Martin' ifNone: [self fail.].	listOfCustomerAddresses := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: listOfCustomerAddresses first haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: listOfCustomerAddresses second haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:36:33' prior: 50655494!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes|
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	firstAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: firstAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:37:08' prior: 50655526!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:38:02' prior: 50650652!
importCustomers 
	
	|newCustomer   |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:38:02'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:38:06' prior: 50655591!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:38:16'!
isCustomerRecond

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:38:16' prior: 50655632!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:38:28'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream inAddressRecord'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:38:28' prior: 50655669!
importCustomers 
	
	|newCustomer  |

	inAddressRecord := inputStream nextLine.
	[ inAddressRecord notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := inAddressRecord findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(inAddressRecord beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := inAddressRecord findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			inAddressRecord := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:38:28' prior: 50655664!
isCustomerRecond

	^ inAddressRecord beginsWith: 'C'! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:40:10'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:40:10' prior: 50655711!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:40:10' prior: 50655746!
isCustomerRecond

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:40:38'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:40:38' prior: 50655760!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:40:44' prior: 50655802!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[line := inputStream nextLine.. line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:26' prior: 50655835!
importCustomers 
	
	|newCustomer  |

	[line := inputStream nextLine.. line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:34'!
hasLineToImport

	line := inputStream nextLine.. line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:34' prior: 50655869!
importCustomers 
	
	|newCustomer  |

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:52' prior: 50655905!
importCustomers 
	
	| newCustomer  |

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:54' prior: 50655936!
importCustomers 
	
	| newCustomer |

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:41:58' prior: 50655967!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:41:58'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:42:07' prior: 50655998!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData  |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:42:07'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:43:46' prior: 50656037!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [  
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData  |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:43:46'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer newAddress customerData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:43:58'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:43:58' prior: 50656076!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [  
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData  |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:44:51' prior: 50656125!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [  
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:45:08' prior: 50656154!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		record := line findTokens: $,.

		(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:45:30'!
keyword

	(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:45:30' prior: 50656180!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		record := line findTokens: $,.

		self keyword.].
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:45:34'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:12' prior: 50655900!
hasLineToImport

	line := inputStream nextLine. 
	^line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:32'!
importRecord

	(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:46:32' prior: 50656229!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		record := line findTokens: $,.

		self importRecord.].
	! !

!methodRemoval: CustomerImporter #keyword stamp: 'eaam 11/16/2023 18:46:32'!
keyword

	(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:50'!
createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:50' prior: 50656285!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		self createRecord.

		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:55' prior: 50656319!
importCustomers 
	[self hasLineToImport ] whileTrue: [		self createRecord.

		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:58' prior: 50656326!
importCustomers 
	[self hasLineToImport ] whileTrue: [		self createRecord.

		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:13' prior: 50656333!
importCustomers 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:15' prior: 50656340!
importCustomers 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:47:28'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:29'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:30'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:30'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:31'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:46'!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:46' prior: 50656261!
importRecord

	(self isCustomerRecond) ifTrue: [  
			self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:50' prior: 50656382!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:01'!
importAddress

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:01' prior: 50656398!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:06' prior: 50656427!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:12' prior: 50656435!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].
		(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:51:26'!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| customer importer|
	importer := CustomerImporter from: [ReadStream].
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:53:13' prior: 50656450!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| customer importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,1,x').
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:56:04' prior: 50656462!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,1,x').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 18:56:35'!
invalidCustomerRecord
	^'invalid customer record'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:57:01' prior: 50656443!
importRecord


	(self isCustomerRecond) ifTrue: [  		self importCustomer ].
		(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:57:45' prior: 50656498!
importRecord


	(self isCustomerRecond) ifTrue: [  		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:17:04' prior: 50656477!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:17:13'!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !

!methodRemoval: ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFive stamp: 'eaam 11/16/2023 19:17:13'!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:19:41' prior: 50650418!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: inputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:19:47' prior: 50656563!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: inputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:24:38'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:38'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:39'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:40'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:40'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:24:40'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:24:40'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:25:14'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:25:14'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:25:36'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:29:03'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:29:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:07'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:07'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:49'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:49'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:30:10' prior: 50656529!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:30:11'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:30:11'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:31:42' prior: 50656506!
importRecord


	(self isCustomerRecond) ifTrue: [  
		
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:33:17' prior: 50656687!
importRecord


	(self isCustomerRecond) ifTrue: [  
		(record size < 5) ifTrue: [self error: self invalidCustomerRecord ].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:33:18' prior: 50656695!
importRecord


	(self isCustomerRecond) ifTrue: [  
		(record size < 5) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:33:23'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:23'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:24'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:25'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:25'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:33:25'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:34:32'!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:34:41' prior: 50656735!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:35:33' prior: 50656662!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerIsNotImported: 'Hernan'.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:35:45' prior: 50656769!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self customerIsNotImported: 'Hernan').
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:36:27' prior: 50656787!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self customerIsNotImported: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:36:36'!
FAILURE!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:36:36'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:37:55' prior: 50656705!
importRecord


	(self isCustomerRecond) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:38:02'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:02'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:03'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:03'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:38:04'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:38:04'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:39:47' prior: 50656805!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:41:40'!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:42:25' prior: 50656884!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:43:03' prior: 50656902!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Maipu,888,Florida,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:44:53' prior: 50656921!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Maipu,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:04' prior: 50656939!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:17' prior: 50656957!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:23'!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:29' prior: 50656993!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:46:14' prior: 50656975!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:46:37' prior: 50656831!
importRecord


	(self isCustomerRecond) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:40'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:46:54' prior: 50657050!
importRecord


	(self isCustomerRecond) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:46:59'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:00'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:00'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:01'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:48:12'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 19:48:12' prior: 50657095!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importAddress.]! !

!methodRemoval: CustomerImporter #isCustomerRecond stamp: 'eaam 11/16/2023 19:48:12'!
isCustomerRecond

	^ line beginsWith: 'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:49:07' prior: 50657145!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:49:10'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:11'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:12'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:12'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:13'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:49:16'!
ERROR!
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 19:49:19'!
invalidAddressRecord
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 19:50:09' prior: 50657211!
invalidAddressRecord
	^'an address must have 6 parameters'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:50:13'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:14'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:15'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:15'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:16'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:50:28'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:29'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:29'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:30'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:30'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:33'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:50:45' prior: 50657031!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:50'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:50:54' prior: 50657012!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:50:57'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:57'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:58'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

----QUIT----(16 November 2023 19:51:32) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (16 November 2023 19:51:41) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


ProtoObject new.!

----STARTUP---- (16 November 2023 19:53:07) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


CustomerImporter superclass.!

CustomerImporter superclass. Object superclass.!

CustomerImporter superclass. Object superclass. ProtoObject superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass. Class superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass. Class superclass. ClassDescription superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass. Class superclass. ClassDescription superclass. Behavior superclass.!

ProtoObject superclass .!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:58:58'!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:59:25' prior: 50657400!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,
	').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:59:43' prior: 50657417!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:00:29' prior: 50657434!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:01:53' prior: 50657450!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,,').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:02:06' prior: 50657466!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:08:19' prior: 50657483!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:08:26' prior: 50657501!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
	A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:08:36' prior: 50657519!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test10 stamp: 'eaam 11/16/2023 20:08:44'!
FAILURE!

!testRun: #ImportTest #test10 stamp: 'eaam 11/16/2023 20:08:44'!
FAILURE!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer importCustomers!

importer importCustomers!

importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

importer importCustomers!

importer importCustomers!

importer importCustomers!

importer importCustomers!

ssion := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,a,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,a,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:13:57'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:14:06'!
PASSED!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers.
session!

session!

session!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers.
session!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers.
session!

session!

session!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:19:28' prior: 50657291!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:19:37' prior: 50657313!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:19:41' prior: 50657781!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:20:13' prior: 50657537!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:20:25' prior: 50657820!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:20:44' prior: 50657837!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:21:11'!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!methodRemoval: ImportTest #test10 stamp: 'eaam 11/16/2023 20:21:11'!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:21:19'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:21:19'!
FAILURE!
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 20:21:46'!
invalidRecord
	^'invalid record'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:22:25' prior: 50657162!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].
	self error: self invalidRecord.! !

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:22:29'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:22:32'!
PASSED!

''occurrencesOf: $1!

',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,' occurrencesOf: $,!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:25:17' prior: 50656314!
createRecord

	
	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:25:30' prior: 50657937!
createRecord

	^ record := line findTokens: $,! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:26:06'!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:26:37' prior: 50657942!
createRecord
	line isEmpty .
	^ record := line findTokens: $,! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:26:48'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:28:22' prior: 50657914!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.]
	ifFalse: [self error: self invalidRecord].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:28:25'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:28:25'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:28:26'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:28:26'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:28:26'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:28:26'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:28:29'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:30:09' prior: 50658013!
importRecord


	(self recordHasValidType) ifTrue: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:30:27'!
recordHasValidType
	^true! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:30:54' prior: 50658084!
recordHasValidType
	^self isCustomerRecord or: self isAddressRecord ! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:31:05' prior: 50658070!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:31:08'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:08'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:09'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:09'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:31:11'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:31:11'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:31:11'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:33:31'!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:34:04' prior: 50658148!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:34:06'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:35:52' prior: 50658094!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		(self addressRecordNumberAndZipCodeAreNumeric) ifFalse: [ self error: self invalidAddressRecordFields ]
		self importAddress.].! !
!CustomerImporter methodsFor: 'nil' stamp: 'eaam 11/16/2023 20:37:23'!
addressRecordNumberAndZipCodeAreNumeric
	(record third isNumber) and: (record fifth isNumber)! !

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:37:30'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:38:04' prior: 50658166!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:38:17' prior: 50658207!
addressRecordNumberAndZipCodeAreNumeric
	(record second isNumber) and: (record fourth isNumber)! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:38:19'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:38:22'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:38:28' prior: 50658190!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		(self addressRecordNumberAndZipCodeAreNumeric) ifFalse: [ self error: self invalidAddressRecordFields ].
		self importAddress.].! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 20:39:54'!
invalidAddressRecordFields
	^'Address street number and zip code must be numeric'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:40:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:40:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:40:03'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:40:04'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:40:30'!
ERROR!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:41:03'!
addressRecordStreetNumberAndZipCodeAreNumeric
	(record second isNumber) and: (record fourth isNumber)! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:41:03' prior: 50658335!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		(self addressRecordStreetNumberAndZipCodeAreNumeric) ifFalse: [ self error: self invalidAddressRecordFields ].
		self importAddress.].! !

!methodRemoval: CustomerImporter #addressRecordNumberAndZipCodeAreNumeric stamp: 'eaam 11/16/2023 20:41:03'!
addressRecordNumberAndZipCodeAreNumeric
	(record second isNumber) and: (record fourth isNumber)!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:41:35' prior: 50658409!
addressRecordStreetNumberAndZipCodeAreNumeric
	^(record second isNumber) and: (record fourth isNumber)! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:41:38'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:40'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:52'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:52'!
ERROR!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:42:39' prior: 50658441!
addressRecordStreetNumberAndZipCodeAreNumeric
	^(record third isNumber) and: (record fifth isNumber)! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:42:42'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:42:42'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:42:43'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:42:44'!
ERROR!

record third!

record third isNumber!

record third!

'3' isNumber!

'3' isInteger !

'3' isAlphaNumeric !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:45:16' prior: 50658261!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:45:50'!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!methodRemoval: ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:45:50'!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:45:56' prior: 50658578!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'Cuis,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:45:57'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:45:57'!
FAILURE!

!methodRemoval: CustomerImporter #addressRecordStreetNumberAndZipCodeAreNumeric stamp: 'eaam 11/16/2023 20:46:04'!
addressRecordStreetNumberAndZipCodeAreNumeric
	^(record third isNumber) and: (record fifth isNumber)!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:46:11' prior: 50658416!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].! !

!methodRemoval: CustomerImporter #invalidAddressRecordFields stamp: 'eaam 11/16/2023 20:46:19'!
invalidAddressRecordFields
	^'Address street number and zip code must be numeric'!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:46:24'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:24'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:25'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:26'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:26'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:46:27'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:46:27'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:23' prior: 50658652!
importRecord


	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].
	self error: self invalidRecord! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:35' prior: 50656370!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:51' prior: 50658720!
importRecord


	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		self importAddress.].
	self error: self invalidRecord! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:58' prior: 50656414!
importAddress

	((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:49:10' prior: 50658745!
importRecord


	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:49:15'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:15'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:16'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:49:18'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:49:18'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:50:16' prior: 50658731!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:51:26' prior: 50658754!
importAddress

	((record size = 6 )not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].


	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:51:45'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:51:46'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:51:58' prior: 50658618!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:52:00'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:52:03'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:03'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:04'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:04'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:52:22' prior: 50657946!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:52:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:54:41'!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:54:43'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:54:44'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:54:51' prior: 50658948!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:55:34' prior: 50655797!
isAddressRecord

	^ line first = 'A'! !

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:55:37'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:56:09' prior: 50658993!
isAddressRecord

	^ record first = 'A'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:56:12'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:13'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:13'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:14'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:56:15'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:56:15'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:57:03'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:57:12'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:57:17'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:18'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:19'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:57:20'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:57:20'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:58:29'!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:30'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:30'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:58:47' prior: 50657140!
isCustomerRecord

	^ line first = 'C'! !

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:52'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:58:59'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:59:18' prior: 50659139!
isCustomerRecord

	^ record first = 'C'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:59:21'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:21'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:22'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:23'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:23'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:24'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:24'!
FAILURE!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:37'!
FAILURE!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:37'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 21:00:21' prior: 50657964!
createRecord
	
	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 21:01:01' prior: 50658769!
importRecord

	(record isEmpty) ifTrue: [ self error: self invalidRecord ].
	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:01:03'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:04'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:05'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:05'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!
!Customer class methodsFor: 'no messages' stamp: 'eaam 11/16/2023 21:05:58'!
forFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer
	self new withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer! !
!Customer methodsFor: 'nil' stamp: 'eaam 11/16/2023 21:06:42'!
withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theCustomersIDType .
	identificationNumber := theIDNumberOfTheCustomer .! !
!Customer methodsFor: 'initialization' stamp: 'eaam 11/16/2023 21:06:58' prior: 50659345!
withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer

	super initialize.
	addresses := OrderedCollection new.
	
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theCustomersIDType .
	identificationNumber := theIDNumberOfTheCustomer .! !

!methodRemoval: Customer #withFirstName:lastName:IDType:andIDNumber: stamp: 'eaam 11/16/2023 21:07:27'!
withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer

	super initialize.
	addresses := OrderedCollection new.
	
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theCustomersIDType .
	identificationNumber := theIDNumberOfTheCustomer .!

!methodRemoval: Customer class #forFirstName:lastName:IDType:andIDNumber: stamp: 'eaam 11/16/2023 21:07:29'!
forFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer
	self new withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:10:51' prior: 50659267!
createRecord
	
	^ record := line findTokens: $, keep: $,! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:10:55'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:10:57'!
ERROR!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:11:46' prior: 50659402!
createRecord
	
	^ record := line findTokens: {$,} keep: $,! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:11:48'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:11:49'!
ERROR!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:12:04' prior: 50659462!
createRecord
	
	^ record := line findTokens: {$,} keep: {$,}! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:12:05'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:12:06'!
ERROR!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:12:37' prior: 50659522!
createRecord
	
	^ record := line findTokens: $,! !

----QUIT----(16 November 2023 21:39:29) CuisUniversity-5981.image priorSource: 10422831!

----STARTUP---- (16 November 2023 21:40:23) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----QUIT----(16 November 2023 21:40:29) CuisUniversity-5981.image priorSource: 10493938!

----STARTUP---- (18 November 2023 21:31:05) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----QUIT----(18 November 2023 21:31:42) CuisUniversity-5981.image priorSource: 10494162!

----STARTUP---- (19 November 2023 13:56:26) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!

!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 13:56:50' prior: 50656866!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:56:55'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:56:55'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:12'!
sessionIsEmpty
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:19' prior: 50659633!
sessionIsEmpty
	session isEmpty.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:57:24'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:57:24'!
ERROR!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 13:57:41'!
isEmpty
	self shouldBeImplemented.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:59:38'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:59:38'!
ERROR!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:27' prior: 50659650!
isEmpty
	tables isEmpty .! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:28' prior: 50659663!
isEmpty
	tables isEmpty.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:33' prior: 50659667!
isEmpty
	^tables isEmpty.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:05:14'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:05:14'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 14:05:32' prior: 50659638!
sessionIsEmpty
	^session isEmpty.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:05:39'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:05:51' prior: 50656752!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 14:05:52'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:06:24' prior: 50657762!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionIsEmpty).
		]
	! !

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:06:26'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:06:26'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:01'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:02'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:53:46' prior: 50659713!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAdresses).
		]
	! !

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:50'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:50'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:53:58'!
sessionHasNotAdresses
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:20' prior: 50659774!
sessionHasNotAdresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:40'!
sessionHasNotAddresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 16:54:40' prior: 50659748!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAddresses).
		]
	! !

!methodRemoval: ImportTest #sessionHasNotAdresses stamp: 'eaam 11/19/2023 16:54:40'!
sessionHasNotAdresses
	^session hasNotAddresses.!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:54:49'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:54:49'!
ERROR!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:54:56'!
hasNotAddresses
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:55:12' prior: 50659819!
hasNotAddresses
	tables at: ''.! !

!methodRemoval: ImportTest #sessionHasNotAddresses stamp: 'eaam 11/19/2023 16:56:17'!
sessionHasNotAddresses
	^session hasNotAddresses.!

!methodRemoval: DataBaseSession #hasNotAddresses stamp: 'eaam 11/19/2023 16:56:24'!
hasNotAddresses
	tables at: ''.!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:31' prior: 50659788!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .

		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:50' prior: 50659836!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:57' prior: 50657800!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:14' prior: 50657869!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:26' prior: 50658928!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:45' prior: 50658862!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:54' prior: 50659113!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 16:57:59'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:00'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:00'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:01'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:01'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 17:12:41' prior: 50658974!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 17:17:52'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655444!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655558!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650453!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650438!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650834 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650413 overrides: 16961402!
tearDown

	session commit.
	session close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50656583!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !

Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 17:23:35'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 18:21:46' prior: 50660123 overrides: 16961394!
setUp

	session :=PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 18:22:12' overrides: 16920235!
initialize
	| session |
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:22:26' prior: 50660190 overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 18:22:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:35'!
beginTransaction
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:42' prior: 50660213!
beginTransaction
	session beginTransaction .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:43' prior: 50660218!
beginTransaction
	session beginTransaction.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:26:44'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:04'!
persist: aNewCustomer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:21' prior: 50660282!
persist: aNewCustomer 
	session persist: aNewCustomer .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:22' prior: 50660288!
persist: aNewCustomer 
	session persist: aNewCustomer.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:27:46'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:27:49'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:55'!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:12' prior: 50660306!
selectAllOfType: Customer 
	^session selectAllOfType: Customer.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:40' prior: 50660312!
selectAllOfType: aType 
	^session selectAllOfType: aType.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:52' prior: 50660294!
persist: anObject 
	session persist: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:02:33'!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:02:39'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:02:39'!
PASSED!
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:02:55'!
commit
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:02' prior: 50660342!
commit
	session commit .! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:03' prior: 50660347!
commit
	session commit.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:03:15'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:03:16'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:03:48' prior: 50660178 overrides: 16961394!
setUp

	session := "PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:04:07' prior: 50660363 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	"PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:05:13' prior: 50660375 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:05:43'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:05:44'!
PASSED!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:05:56'!
close
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:00' prior: 50660408!
close
	session close.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:06:04'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:07'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:09'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:06:13'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:13'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:14'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:14'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:15'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:15'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:15'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:15'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:16'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:06:16'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:19'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:33'!
isEmpty
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:39' prior: 50660482!
isEmpty
	session isEmpty .! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:06:44'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:45'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:45'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:46'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:46'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:06:47'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:50'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:07:02' prior: 50660487!
isEmpty
	^session isEmpty .! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:11:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:19'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:19'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:11:21'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:11:21'!
PASSED!

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:11:51'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:11:51'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:12:08'!
beginTransaction
	self subclassResponsibility .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject 
	session persist: anObject.! !
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50658825!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session addCustomer: newCustomer! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50660324!
persist: anObject 
	session addCustomer: anObject.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50650747!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self addCustomer: anAddress ]
	! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50660622!
addCustomer: anObject 
	session addCustomer: anObject.! !

!methodRemoval: PersistentCustomerSystem #persist: stamp: 'eaam 11/19/2023 19:13:20'!
persist: anObject 
	session addCustomer: anObject.!

!methodRemoval: DataBaseSession #persist: stamp: 'eaam 11/19/2023 19:13:20'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:54'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:54' prior: 50660659!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !

!methodRemoval: DataBaseSession #addCustomer: stamp: 'eaam 11/19/2023 19:13:54'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:20' prior: 50660667!
addCustomer: anObject 
	session persist: anObject.! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:30'!
addCustomer: anObject

	self subclassResponsibility! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:10'!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50660223 overrides: 50660617!
beginTransaction
	session start.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50660776!
start
	session start.! !

!methodRemoval: PersistentCustomerSystem #beginTransaction stamp: 'eaam 11/19/2023 19:15:10'!
beginTransaction
	session start.!
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:26' prior: 50660787!
start
	session beguinTransaction.! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:39' prior: 50660796!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:16:11' prior: 50660413!
close
	session commit.
	session close.! !
!ImportTest methodsFor: 'tear down' stamp: 'eaam 11/19/2023 19:16:39' prior: 50660137 overrides: 16961402!
tearDown
	session close.
		
	validInputStream close.! !

!methodRemoval: PersistentCustomerSystem #commit stamp: 'eaam 11/19/2023 19:16:52'!
commit
	session commit.!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:17:00' prior: 50660389 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:17:07'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659941!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660010!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659683!
sessionIsEmpty
	^CustomerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660036!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659871!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659853!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659691!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660143!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660090!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660057!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660820 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659889!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660811 overrides: 16961402!
tearDown
	CustomerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659923!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659906!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50650370!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationType = theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660106!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659608!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:30'!
close

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:34' overrides: 16920235!
initialize

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:38'!
isEmpty

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:42'!
select: aCondition ofType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:45'!
selectAllOfType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:17:50'!
start

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:18:13'!
asdasdasd

	self subclassResponsibility! !

!methodRemoval: CustomerSystem #initialize stamp: 'eaam 11/19/2023 19:18:13'!
initialize

	self subclassResponsibility!

!methodRemoval: CustomerSystem #asdasdasd stamp: 'eaam 11/19/2023 19:18:17'!
asdasdasd

	self subclassResponsibility!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:19:15'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:16'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:17'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:17'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:19:19'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:19:19'!
PASSED!

CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:19:36'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:19:46' prior: 50661030 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:12' overrides: 50661170!
start
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:19' prior: 50661265 overrides: 50661170!
start! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:20:57' overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:21:21' prior: 50661275 overrides: 16920235!
initialize
	 
	session := Dictionary.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:25:25' overrides: 50661146!
close! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:25:44' prior: 50661282 overrides: 16920235!
initialize
	 
	session := Dictionary new.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:25:54' overrides: 50660771!
addCustomer: anObject 
	session persist: anObject.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:26:01' prior: 50661297 overrides: 50660771!
addCustomer: anObject 
	session add: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:27:56' prior: 50660766 overrides: 50660771!
addCustomer: anObject 
	session add: anObject.! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:28:56' prior: 50661292 overrides: 16920235!
initialize
	 
	session := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:29:55' overrides: 50661160!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:30:46'!
objectsOfType: aType! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:31:22' prior: 50661321 overrides: 50661160!
select: aCondition ofType: aType
	^(self objectsOfType: aType) select: aCondition.! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:26' prior: 50661101!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationTypeIs: theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:49' prior: 50661338!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer hasIdentificationType: theIDTypeOfTheCustomers and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:35'!
hasIdentificationType: aIDType
	^aIDType = identificationType 
! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:36' prior: 50661361!
hasIdentificationType: aIDType
	^aIDType = identificationType
! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/19/2023 19:35:30'!
hasIdentificationNumber: aIDNumber
	^aIDNumber = identificationNumber 
! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:36:10' prior: 50661252 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:36:15'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:36:15'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:17'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:36:37' prior: 50661309 overrides: 50660771!
addCustomer: anObject 
	session persist: anObject.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:40'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:41'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:41'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:42'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:42'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:46'!
ERROR!
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:37:06' prior: 50661350!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:37:08'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:09'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:09'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:10'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:37:24' prior: 50661377 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:38:36'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:38:36'!
ERROR!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:38:46' overrides: 50661165!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:39:48' prior: 50660958!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:40:37' prior: 50661566 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!methodRemoval: TransientCustomerSystem #objectsOfType: stamp: 'eaam 11/19/2023 19:40:50'!
objectsOfType: aType!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:40:56' prior: 50661332 overrides: 50661160!
select: aCondition ofType: aType
	^(self selectAllOfType: aType) select: aCondition.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:41:49' prior: 50661585 overrides: 50661165!
selectAllOfType: aType 
	session select:[:anObject | anObject isType: aType].! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:45:22' prior: 50661635 overrides: 50661165!
selectAllOfType: aType 
	session select:[:anObject | anObject class = aType].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:45:26'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:27'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:27'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:28'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:47:54'!
current
	^self subclasses detect: [:anEn|]! !

TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:48:08'!
TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:48:15'!
TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Enviroment subclass: #integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Integration category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:49:32'!
Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Development category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:49:45'!
Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Enviroment class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:50:36'!
current
	^self subclasses detect: [:anEnviroment | anEnviroment isCurrent] new.! !
!Development class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:51:31'!
isCurrent
	^(Smalltalk at: #env) = 'dev'! !
!Integration class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:52:19'!
isCurrent
	^Development isCurrent not.! !

(Smalltalk at: #env)!

(Smalltalk put: 'dev' at: #env)!

.Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env!

Smalltalk at: #env put: 'int'.!

Smalltalk at: #env.
!

Smalltalk at: #env put: 'dev'.
Smalltalk at: #env put: 'int'.!

Enviroment current.!
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:07' prior: 50661755!
current
	^(self subclasses detect: [:anEnviroment | anEnviroment isCurrent]) new.! !

Enviroment current.!

Smalltalk at: #env put: 'dev'.
!

Enviroment current.!
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:50'!
createSystem
	^self subclassResponsibility ! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:53' prior: 50661786!
createSystem
	^self subclassResponsibility.! !

!methodRemoval: Enviroment class #createSystem stamp: 'eaam 11/19/2023 19:57:16'!
createSystem
	^self subclassResponsibility.!
!Enviroment methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:19'!
createSystem
	^self subclassResponsibility.! !
!Development methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:47' overrides: 50661799!
createSystem
	^TransientCustomerSystem new.! !
!Integration methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:57' overrides: 50661799!
createSystem
	^TransientCustomerSystem new.! !
!CustomerSystem class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:13'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]! !

!methodRemoval: CustomerSystem class #current stamp: 'eaam 11/19/2023 19:58:13'!
current
	^self subclasses detect: [:anEn|]!

!methodRemoval: CustomerSystem class #asdsafasdfasd stamp: 'eaam 11/19/2023 19:58:16'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]!
!Integration methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:39' prior: 50661809 overrides: 50661799!
createSystem
	^PersistentCustomerSystem new.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:01'!
forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660859!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660922!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660940!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661066!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661129!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660903!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661084!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661042!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50650381!
importCustomersForReadStream: aReadStreamToRead forSession: aSessionToRecordDataOn
	(CustomerImporter forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: aReadStreamToRead) importCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660840!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !

!methodRemoval: CustomerImporter class #forDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:01:01'!
forDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:40' prior: 50661833!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!CustomerImporter methodsFor: 'initialization' stamp: 'eaam 11/19/2023 20:01:54'!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:54' prior: 50662029!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !

!methodRemoval: CustomerImporter #initializeForDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:01:54'!
initializeForDatabaseSessionToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:02:28'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50660639!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			customerSystem addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50662040!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	customerSystem := aSession.
	inputStream := anInputStream.! !
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 20:03:09'!
newCustomerSystem
	^Enviroment current createSystem .! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:03:34' prior: 50661611 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:03:38'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:03:41'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:04:40'!
ERROR!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 20:05:02' prior: 50661642 overrides: 50661165!
selectAllOfType: aType 
	^session select:[:anObject | anObject class = aType].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:05:07'!
ERROR!
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 20:05:32' overrides: 50661156!
isEmpty
	^session isEmpty.! !

CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:05:49'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:05:56'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:06:06'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'dataCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50662239 overrides: 50661156!
isEmpty
	^dataCollection isEmpty.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50661315 overrides: 16920235!
initialize
	 
	dataCollection := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50662178 overrides: 50661165!
selectAllOfType: aType 
	^dataCollection select:[:anObject | anObject class = aType].! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50661303 overrides: 50660771!
addCustomer: anObject 
	dataCollection add: anObject.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:32' prior: 50662108 overrides: 16961394!
setUp

	CustomerSystem := CustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:47' prior: 50662406 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:06:54'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'customerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:54' prior: 50661998!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661844!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660877!
sessionIsEmpty
	^customerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660882!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661934!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661862!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661880!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661590!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660979!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660996!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50662419 overrides: 16961394!
setUp

	customerSystem := PersistentCustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661970!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661060 overrides: 16961402!
tearDown
	customerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661898!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661953!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661503!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ customerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661113!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661916!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:07:00' prior: 50662630 overrides: 16961394!
setUp

	customerSystem := CustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:07:05'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

Smalltalk at: #env put: 'int'.!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:07:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:19'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:20'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

Smalltalk at: #env put: 'dev'.!

----STARTUP---- (19 November 2023 20:21:17) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!

!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 13:56:50' prior: 50656866!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:12'!
sessionIsEmpty
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:19' prior: 50662885!
sessionIsEmpty
	session isEmpty.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 13:57:41'!
isEmpty
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:27' prior: 50662894!
isEmpty
	tables isEmpty .! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:28' prior: 50662898!
isEmpty
	tables isEmpty.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:33' prior: 50662902!
isEmpty
	^tables isEmpty.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 14:05:32' prior: 50662890!
sessionIsEmpty
	^session isEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:05:51' prior: 50656752!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:06:24' prior: 50657762!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:53:46' prior: 50662931!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAdresses).
		]
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:53:58'!
sessionHasNotAdresses
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:20' prior: 50662967!
sessionHasNotAdresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:40'!
sessionHasNotAddresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 16:54:40' prior: 50662949!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAddresses).
		]
	! !

!methodRemoval: ImportTest #sessionHasNotAdresses stamp: 'eaam 11/19/2023 20:21:26'!
sessionHasNotAdresses
	^session hasNotAddresses.!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:54:56'!
hasNotAddresses
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:55:12' prior: 50663004!
hasNotAddresses
	tables at: ''.! !

!methodRemoval: ImportTest #sessionHasNotAddresses stamp: 'eaam 11/19/2023 20:21:26'!
sessionHasNotAddresses
	^session hasNotAddresses.!

!methodRemoval: DataBaseSession #hasNotAddresses stamp: 'eaam 11/19/2023 20:21:26'!
hasNotAddresses
	tables at: ''.!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:31' prior: 50662981!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .

		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:50' prior: 50663021!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:57' prior: 50657800!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:14' prior: 50657869!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:26' prior: 50658928!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:45' prior: 50658862!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:54' prior: 50659113!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 17:12:41' prior: 50658974!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655444!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655558!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650453!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650438!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650834 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650413 overrides: 16961402!
tearDown

	session commit.
	session close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50656583!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 18:21:46' prior: 50663257 overrides: 16961394!
setUp

	session :=PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 18:22:12' overrides: 16920235!
initialize
	| session |
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:22:26' prior: 50663327 overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:35'!
beginTransaction
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:42' prior: 50663350!
beginTransaction
	session beginTransaction .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:43' prior: 50663355!
beginTransaction
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:04'!
persist: aNewCustomer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:21' prior: 50663365!
persist: aNewCustomer 
	session persist: aNewCustomer .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:22' prior: 50663371!
persist: aNewCustomer 
	session persist: aNewCustomer.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:55'!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:12' prior: 50663382!
selectAllOfType: Customer 
	^session selectAllOfType: Customer.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:40' prior: 50663388!
selectAllOfType: aType 
	^session selectAllOfType: aType.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:52' prior: 50663377!
persist: anObject 
	session persist: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:02:33'!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:02:55'!
commit
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:02' prior: 50663411!
commit
	session commit .! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:03' prior: 50663416!
commit
	session commit.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:03:48' prior: 50663315 overrides: 16961394!
setUp

	session := "PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:04:07' prior: 50663426 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	"PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:05:13' prior: 50663438 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:05:56'!
close
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:00' prior: 50663464!
close
	session close.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:33'!
isEmpty
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:39' prior: 50663473!
isEmpty
	session isEmpty .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:07:02' prior: 50663478!
isEmpty
	^session isEmpty .! !

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:12:08'!
beginTransaction
	self subclassResponsibility .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject 
	session persist: anObject.! !
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50658825!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session addCustomer: newCustomer! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50663400!
persist: anObject 
	session addCustomer: anObject.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50650747!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self addCustomer: anAddress ]
	! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50663508!
addCustomer: anObject 
	session addCustomer: anObject.! !

!methodRemoval: PersistentCustomerSystem #persist: stamp: 'eaam 11/19/2023 20:21:27'!
persist: anObject 
	session addCustomer: anObject.!

!methodRemoval: DataBaseSession #persist: stamp: 'eaam 11/19/2023 20:21:27'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:54'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:54' prior: 50663545!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !

!methodRemoval: DataBaseSession #addCustomer: stamp: 'eaam 11/19/2023 20:21:27'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:20' prior: 50663553!
addCustomer: anObject 
	session persist: anObject.! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:30'!
addCustomer: anObject

	self subclassResponsibility! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:10'!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50663360 overrides: 50663503!
beginTransaction
	session start.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50663611!
start
	session start.! !

!methodRemoval: PersistentCustomerSystem #beginTransaction stamp: 'eaam 11/19/2023 20:21:27'!
beginTransaction
	session start.!
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:26' prior: 50663622!
start
	session beguinTransaction.! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:39' prior: 50663631!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:16:11' prior: 50663469!
close
	session commit.
	session close.! !
!ImportTest methodsFor: 'tear down' stamp: 'eaam 11/19/2023 19:16:39' prior: 50663271 overrides: 16961402!
tearDown
	session close.
		
	validInputStream close.! !

!methodRemoval: PersistentCustomerSystem #commit stamp: 'eaam 11/19/2023 20:21:27'!
commit
	session commit.!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:17:00' prior: 50663452 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663126!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663144!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50662910!
sessionIsEmpty
	^CustomerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663170!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663056!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663038!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50662914!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663277!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663224!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663191!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663655 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663074!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663646 overrides: 16961402!
tearDown
	CustomerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663108!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663091!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50650370!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationType = theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663240!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50662868!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:30'!
close

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:34' overrides: 16920235!
initialize

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:38'!
isEmpty

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:42'!
select: aCondition ofType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:45'!
selectAllOfType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:17:50'!
start

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:18:13'!
asdasdasd

	self subclassResponsibility! !

!methodRemoval: CustomerSystem #initialize stamp: 'eaam 11/19/2023 20:21:27'!
initialize

	self subclassResponsibility!

!methodRemoval: CustomerSystem #asdasdasd stamp: 'eaam 11/19/2023 20:21:27'!
asdasdasd

	self subclassResponsibility!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:19:46' prior: 50663865 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:12' overrides: 50664005!
start
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:19' prior: 50664053 overrides: 50664005!
start! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:20:57' overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:21:21' prior: 50664063 overrides: 16920235!
initialize
	 
	session := Dictionary.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:25:25' overrides: 50663981!
close! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:25:44' prior: 50664070 overrides: 16920235!
initialize
	 
	session := Dictionary new.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:25:54' overrides: 50663606!
addCustomer: anObject 
	session persist: anObject.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:26:01' prior: 50664085 overrides: 50663606!
addCustomer: anObject 
	session add: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:27:56' prior: 50663601 overrides: 50663606!
addCustomer: anObject 
	session add: anObject.! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:28:56' prior: 50664080 overrides: 16920235!
initialize
	 
	session := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:29:55' overrides: 50663995!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:30:46'!
objectsOfType: aType! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:31:22' prior: 50664109 overrides: 50663995!
select: aCondition ofType: aType
	^(self objectsOfType: aType) select: aCondition.! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:26' prior: 50663936!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationTypeIs: theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:49' prior: 50664126!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer hasIdentificationType: theIDTypeOfTheCustomers and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:35'!
hasIdentificationType: aIDType
	^aIDType = identificationType 
! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:36' prior: 50664149!
hasIdentificationType: aIDType
	^aIDType = identificationType
! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/19/2023 19:35:30'!
hasIdentificationNumber: aIDNumber
	^aIDNumber = identificationNumber 
! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:36:10' prior: 50664040 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:36:37' prior: 50664097 overrides: 50663606!
addCustomer: anObject 
	session persist: anObject.! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:37:06' prior: 50664138!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:37:24' prior: 50664165 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:38:46' overrides: 50664000!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:39:48' prior: 50663793!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:40:37' prior: 50664196 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!methodRemoval: TransientCustomerSystem #objectsOfType: stamp: 'eaam 11/19/2023 20:21:27'!
objectsOfType: aType!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:40:56' prior: 50664120 overrides: 50663995!
select: aCondition ofType: aType
	^(self selectAllOfType: aType) select: aCondition.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:41:49' prior: 50664209 overrides: 50664000!
selectAllOfType: aType 
	session select:[:anObject | anObject isType: aType].! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:45:22' prior: 50664259 overrides: 50664000!
selectAllOfType: aType 
	session select:[:anObject | anObject class = aType].! !
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:47:54'!
current
	^self subclasses detect: [:anEn|]! !

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Integration category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Integration category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Development category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Development category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Enviroment class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:50:36'!
current
	^self subclasses detect: [:anEnviroment | anEnviroment isCurrent] new.! !
!Development class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:51:31'!
isCurrent
	^(Smalltalk at: #env) = 'dev'! !
!Integration class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:52:19'!
isCurrent
	^Development isCurrent not.! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:07' prior: 50664336!
current
	^(self subclasses detect: [:anEnviroment | anEnviroment isCurrent]) new.! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:50'!
createSystem
	^self subclassResponsibility ! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:53' prior: 50664357!
createSystem
	^self subclassResponsibility.! !

!methodRemoval: Enviroment class #createSystem stamp: 'eaam 11/19/2023 20:21:28'!
createSystem
	^self subclassResponsibility.!
!Enviroment methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:19'!
createSystem
	^self subclassResponsibility.! !
!Development methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:47' overrides: 50664370!
createSystem
	^TransientCustomerSystem new.! !
!Integration methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:57' overrides: 50664370!
createSystem
	^TransientCustomerSystem new.! !
!CustomerSystem class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:13'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]! !

!methodRemoval: CustomerSystem class #current stamp: 'eaam 11/19/2023 20:21:28'!
current
	^self subclasses detect: [:anEn|]!

!methodRemoval: CustomerSystem class #asdsafasdfasd stamp: 'eaam 11/19/2023 20:21:28'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]!
!Integration methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:39' prior: 50664380 overrides: 50664370!
createSystem
	^PersistentCustomerSystem new.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:01'!
forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663694!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663757!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663775!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663901!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663964!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663738!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663919!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663877!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50650381!
importCustomersForReadStream: aReadStreamToRead forSession: aSessionToRecordDataOn
	(CustomerImporter forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: aReadStreamToRead) importCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663675!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !

!methodRemoval: CustomerImporter class #forDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:21:28'!
forDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:40' prior: 50664404!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!CustomerImporter methodsFor: 'initialization' stamp: 'eaam 11/19/2023 20:01:54'!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:54' prior: 50664600!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !

!methodRemoval: CustomerImporter #initializeForDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:21:28'!
initializeForDatabaseSessionToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50663525!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			customerSystem addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50664611!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	customerSystem := aSession.
	inputStream := anInputStream.! !
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 20:03:09'!
newCustomerSystem
	^Enviroment current createSystem .! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:03:34' prior: 50664235 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 20:05:02' prior: 50664266 overrides: 50664000!
selectAllOfType: aType 
	^session select:[:anObject | anObject class = aType].! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 20:05:32' overrides: 50663991!
isEmpty
	^session isEmpty.! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'dataCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664699 overrides: 50663991!
isEmpty
	^dataCollection isEmpty.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664103 overrides: 16920235!
initialize
	 
	dataCollection := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664692 overrides: 50664000!
selectAllOfType: aType 
	^dataCollection select:[:anObject | anObject class = aType].! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664091 overrides: 50663606!
addCustomer: anObject 
	dataCollection add: anObject.! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:32' prior: 50664679 overrides: 16961394!
setUp

	CustomerSystem := CustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:47' prior: 50664772 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'customerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:54' prior: 50664569!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664415!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663712!
sessionIsEmpty
	^customerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663717!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664505!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664433!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664451!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664214!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663814!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663831!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664785 overrides: 16961394!
setUp

	customerSystem := PersistentCustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664541!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663895 overrides: 16961402!
tearDown
	customerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664469!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664524!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664183!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ customerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663948!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664487!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:07:00' prior: 50664996 overrides: 16961394!
setUp

	customerSystem := CustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

----QUIT----(19 November 2023 20:23:01) CuisUniversity-5981.image priorSource: 10494385!

----STARTUP---- (19 November 2023 20:23:04) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


Smalltalk at: 'env' put: 'dev'.!

----QUIT----(19 November 2023 20:27:08) CuisUniversity-5981.image priorSource: 10671196!

----STARTUP---- (22 November 2023 00:07:27) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----QUIT----(22 November 2023 00:07:49) CuisUniversity-5981.image priorSource: 10671453!

----STARTUP---- (22 November 2023 00:11:18) as C:\Users\sofia\Documents\smalltalk\windows64\CuisUniversity-5981.image!


!classRemoval: #DataBaseSession stamp: 'S D 11/22/2023 00:11:36'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerImporter stamp: 'S D 11/22/2023 00:11:36'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Customer stamp: 'S D 11/22/2023 00:11:36'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Address stamp: 'S D 11/22/2023 00:11:36'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #ImportTest stamp: 'S D 11/22/2023 00:11:36'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session inputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

----End fileIn of C:\Users\sofia\Documents\smalltalk\windows64\CustomerImporter.st----!

----QUIT----(22 November 2023 00:12:24) CuisUniversity-5981.image priorSource: 10244609!

----STARTUP---- (22 November 2023 01:05:14) as C:\Users\sofia\Documents\smalltalk\windows64\CuisUniversity-5981.image!


Smalltalk at: #ENV put: 'Development'!

Smalltalk at: #ENV put: 'Development'!

Smalltalk at: #ENV put: 'Development'!

Smalltalk at: #ENV put: 'Development'!

Smalltalk at: #ENV put: 'Development'!

Smalltalk at: #env put: 'dev'!

Smalltalk at: #env put: 'dev'!

Smalltalk at: #env put: 'dev'!

Smalltalk at: #env put: 'dev'!

Smalltalk at: #env put: 'dev'!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'S D 11/22/2023 01:17:41'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'S D 11/22/2023 01:17:41'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:18:52'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:18:52' prior: 50652046!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: a haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveProvince: a haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:18:52' prior: 50652079!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: a haveAttributes: expectedAddressAttributes .
! !

!methodRemoval: ImportTest #doesAddress:haveAttributes: stamp: 'S D 11/22/2023 01:18:52'!
doesAddress: anAddressToCompare haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:19:34'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:19:35' prior: 50652937!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: a andStreetNumber: 2 haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:19:35' prior: 50652902!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: a andStreetNumber: 2 haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveProvince: a andStreetNumber: 2 haveAttributes: secondAddressExpectedAttributes .! !

!methodRemoval: ImportTest #doesAddress:haveProvince:haveAttributes: stamp: 'S D 11/22/2023 01:19:35'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:20:22'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:20:23' prior: 50653019!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:20:23' prior: 50652997!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: a andStreetNumber: 2 andStreetName: 3 haveAttributes: expectedAddressAttributes .
! !

!methodRemoval: ImportTest #doesAddress:haveProvince:andStreetNumber:haveAttributes: stamp: 'S D 11/22/2023 01:20:23'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:21:19'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:21:19' prior: 50653133!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:21:19' prior: 50653096!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 haveAttributes: secondAddressExpectedAttributes .! !

!methodRemoval: ImportTest #doesAddress:haveProvince:andStreetNumber:andStreetName:haveAttributes: stamp: 'S D 11/22/2023 01:21:19'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:21:43'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:21:43' prior: 50653222!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:21:43' prior: 50653199!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 haveAttributes: expectedAddressAttributes .
! !

!methodRemoval: ImportTest #doesAddress:haveProvince:andStreetNumber:andStreetName:andZipCode:haveAttributes: stamp: 'S D 11/22/2023 01:21:43'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aListOfAddressAttributes first.
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:21:48' prior: 50653282!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aListOfAddressAttributes second.
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:21:53' prior: 50653391!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aListOfAddressAttributes third .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:22:00' prior: 50653414!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aListOfAddressAttributes fourth .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:22:06' prior: 50653437!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aListOfAddressAttributes fifth.! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:22:13' prior: 50653459!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:22:18'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:22:18' prior: 50653344!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:22:18' prior: 50653306!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 .
	self doesAddress: secondAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 .! !

!methodRemoval: ImportTest #doesAddress:haveProvince:andStreetNumber:andStreetName:andZipCode:andTown:haveAttributes: stamp: 'S D 11/22/2023 01:22:18'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck haveAttributes: aListOfAddressAttributes 

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:22:50'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:22:50' prior: 50652030!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 1 haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:22:50' prior: 50652014!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 1 haveAttributes: expectedAttributes .	! !

!methodRemoval: ImportTest #doesCustomer:haveAttributes: stamp: 'S D 11/22/2023 01:22:50'!
doesCustomer: aCustomerToCompare haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:23:04'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:23:04' prior: 50653619!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 1 andLastName: 2 haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:23:04' prior: 50653636!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 1 andLastName: 2 haveAttributes: expectedAttributes .	! !

!methodRemoval: ImportTest #doesCustomer:haveFirstName:haveAttributes: stamp: 'S D 11/22/2023 01:23:04'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:23:23'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:23:23' prior: 50653706!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:23:23' prior: 50653688!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 haveAttributes: expectedAttributes .! !

!methodRemoval: ImportTest #doesCustomer:haveFirstName:andLastName:haveAttributes: stamp: 'S D 11/22/2023 01:23:23'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:23:46'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:23:46' prior: 50653779!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 andIDNumber: 4 haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:23:46' prior: 50653761!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 andIDNumber: 4 haveAttributes: expectedAttributes .	! !

!methodRemoval: ImportTest #doesCustomer:haveFirstName:andLastName:andIDType:haveAttributes: stamp: 'S D 11/22/2023 01:23:46'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aListOfCustomerAttributes first.		
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:24:00' prior: 50653815!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aListOfCustomerAttributes second.	
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:24:04' prior: 50653892!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: aListOfCustomerAttributes third.	
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:24:09' prior: 50653912!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: anIDTypeToCheck .
	self assert: aCustomerToCompare identificationNumber equals: aListOfCustomerAttributes fourth! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:24:15' prior: 50653932!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: anIDTypeToCheck .
	self assert: aCustomerToCompare identificationNumber equals: anIDNumberToCheck .! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:24:40'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck  

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: anIDTypeToCheck .
	self assert: aCustomerToCompare identificationNumber equals: anIDNumberToCheck .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:24:40' prior: 50653836!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 andIDNumber: 4 .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:24:40' prior: 50653854!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 andIDNumber: 4 .	! !

!methodRemoval: ImportTest #doesCustomer:haveFirstName:andLastName:andIDType:andIDNumber:haveAttributes: stamp: 'S D 11/22/2023 01:24:40'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck haveAttributes: aListOfCustomerAttributes 

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: anIDTypeToCheck .
	self assert: aCustomerToCompare identificationNumber equals: anIDNumberToCheck .!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:25:05'!
importCustomersForReadStream: aReadStreamToRead forSystem: aSessionToRecordDataOn
	(CustomerImporter forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: aReadStreamToRead) importCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:25:05' prior: 50653544!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 .
	self doesAddress: secondAddressesOfCustomer haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:25:05' prior: 50653987!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 andIDNumber: 4 .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:25:05' prior: 50651994!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:25:05' prior: 50654004!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 1 andLastName: 2 andIDType: 3 andIDNumber: 4 .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 01:25:05' prior: 50653522!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: a andStreetNumber: 2 andStreetName: 3 andZipCode: 4 andTown: 5 .
! !

!methodRemoval: ImportTest #importCustomersForReadStream:forSession: stamp: 'S D 11/22/2023 01:25:05'!
importCustomersForReadStream: aReadStreamToRead forSession: aSessionToRecordDataOn
	(CustomerImporter forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: aReadStreamToRead) importCustomers!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:26:02' prior: 50654123!
test02PepeSanchezIsImportedCorrectly

	| customer |	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 'Pepe' andLastName: 'Sanchez' andIDType: 'D' andIDNumber: '22333444' .	! !
!Customer class methodsFor: 'no messages' stamp: 'S D 11/22/2023 01:27:55'!
forFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer
	^self new withFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer! !
!Customer methodsFor: 'initialization' stamp: 'S D 11/22/2023 01:28:09'!
withFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer! !

!methodRemoval: Customer #initialize stamp: 'S D 11/22/2023 01:28:24'!
initialize

	super initialize.
	addresses := OrderedCollection new.!
!Customer methodsFor: 'initialization' stamp: 'S D 11/22/2023 01:28:57' prior: 50654198!
withFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer

	super initialize.
	
	addresses := OrderedCollection new.
	
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theIDTypeOfTheCustomer .
	identificationNumber := theIDNumberOfTheCustomer .! !
!Address class methodsFor: 'no messages' stamp: 'S D 11/22/2023 01:31:04'!
forProvince: theProvinceOfTheAddress andStreetNumber: theStreetNumberOfTheAddress andStreetName: theStreetNameOfTheAddress andZipCode: theZipCodeOfTheAddress andTown: theTownOfTheAddress

	^self new withProvince: theProvinceOfTheAddress andStreetNumber: theStreetNumberOfTheAddress andStreetName: theStreetNameOfTheAddress andZipCode: theZipCodeOfTheAddress andTown: theTownOfTheAddress! !
!Address methodsFor: 'nil' stamp: 'S D 11/22/2023 01:33:28'!
withProvince: theProvinceOfTheAddress andStreetNumber: theStreetNumberOfTheAddress andStreetName: theStreetNameOfTheAddress andZipCode: theZipCodeOfTheAddress andTown: theTownOfTheAddress

	province := theProvinceOfTheAddress .
	streetName := theStreetNameOfTheAddress .
	streetNumber := theStreetNumberOfTheAddress .
	zipCode := theZipCodeOfTheAddress .
	town := theTownOfTheAddress .! !
!Customer methodsFor: 'initialization' stamp: 'S D 11/22/2023 01:38:47' prior: 50654211!
withFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer

	
	
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theIDTypeOfTheCustomer .
	identificationNumber := theIDNumberOfTheCustomer .! !

!methodRemoval: Customer #withFirstName:andLastName:andIDType:andIDNumber: stamp: 'S D 11/22/2023 01:38:51'!
withFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer

	
	
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theIDTypeOfTheCustomer .
	identificationNumber := theIDNumberOfTheCustomer .!
!Customer methodsFor: 'initialization' stamp: 'S D 11/22/2023 01:38:59' overrides: 16920235!
initialize
	
	super initialize.
	
	addresses := OrderedCollection new.! !

!methodRemoval: Customer class #forFirstName:andLastName:andIDType:andIDNumber: stamp: 'S D 11/22/2023 01:39:03'!
forFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer
	^self new withFirstName: theFirstNameOfTheCustomer andLastName: theLastNameOfTheCustomer andIDType: theIDTypeOfTheCustomer andIDNumber: theIDNumberOfTheCustomer!

!methodRemoval: Address class #forProvince:andStreetNumber:andStreetName:andZipCode:andTown: stamp: 'S D 11/22/2023 01:39:08'!
forProvince: theProvinceOfTheAddress andStreetNumber: theStreetNumberOfTheAddress andStreetName: theStreetNameOfTheAddress andZipCode: theZipCodeOfTheAddress andTown: theTownOfTheAddress

	^self new withProvince: theProvinceOfTheAddress andStreetNumber: theStreetNumberOfTheAddress andStreetName: theStreetNameOfTheAddress andZipCode: theZipCodeOfTheAddress andTown: theTownOfTheAddress!

!methodRemoval: Address #withProvince:andStreetNumber:andStreetName:andZipCode:andTown: stamp: 'S D 11/22/2023 01:39:13'!
withProvince: theProvinceOfTheAddress andStreetNumber: theStreetNumberOfTheAddress andStreetName: theStreetNameOfTheAddress andZipCode: theZipCodeOfTheAddress andTown: theTownOfTheAddress

	province := theProvinceOfTheAddress .
	streetName := theStreetNameOfTheAddress .
	streetNumber := theStreetNumberOfTheAddress .
	zipCode := theZipCodeOfTheAddress .
	town := theTownOfTheAddress .!
!CustomerImporter methodsFor: 'initialization' stamp: 'S D 11/22/2023 01:40:35' prior: 50652435!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream
	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 01:45:34' prior: 50654085!
test03JuanPerezIsImportedCorrectly

	| customer |
	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 'Juan' andLastName: 'Perez' andIDType: 'C' andIDNumber: '23-25666777-9'.! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 14:21:46' prior: 50654050!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer secondAddressesOfCustomer |

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: 'BsAs' andStreetNumber: 3322 andStreetName: 'San Martin' andZipCode: 1636 andTown: 'Olivos'.
	
	self doesAddress: secondAddressesOfCustomer haveProvince: 'Buenos Aires' andStreetNumber: 		888 andStreetName: 'Maipu' andZipCode: 1122 andTown: 'Florida' .
! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 14:23:28' prior: 50654140!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA' .
! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'S D 11/22/2023 14:23:36'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'S D 11/22/2023 14:23:36'!
PASSED!
!ImportTest methodsFor: 'private' stamp: 'S D 11/22/2023 14:24:35'!
customerSystemDataIsEmpty
	^customerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:24:35' prior: 50652099!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self customerSystemDataIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:24:35' prior: 50652235!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self customerSystemDataIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:24:35' prior: 50652201!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self customerSystemDataIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:24:35' prior: 50652116!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self customerSystemDataIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:24:35' prior: 50652169!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self customerSystemDataIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:24:35' prior: 50652185!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self customerSystemDataIsEmpty.
		]
	! !

!methodRemoval: ImportTest #sessionIsEmpty stamp: 'S D 11/22/2023 14:24:35'!
sessionIsEmpty
	^customerSystem isEmpty.!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 14:25:46' prior: 50652133!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | | customer |
		self assert: anError messageText equals: importer invalidAddressRecord .
		customer := self obtainCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 14:25:56'!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^( self getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:25:56' prior: 50654569!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | | customer |
		self assert: anError messageText equals: importer invalidAddressRecord .
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:25:56' prior: 50654358!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer secondAddressesOfCustomer |

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveProvince: 'BsAs' andStreetNumber: 3322 andStreetName: 'San Martin' andZipCode: 1636 andTown: 'Olivos'.
	
	self doesAddress: secondAddressesOfCustomer haveProvince: 'Buenos Aires' andStreetNumber: 		888 andStreetName: 'Maipu' andZipCode: 1122 andTown: 'Florida' .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:25:56' prior: 50654384!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA' .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:25:56' prior: 50654344!
test03JuanPerezIsImportedCorrectly

	| customer |
	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveFirstName: 'Juan' andLastName: 'Perez' andIDType: 'C' andIDNumber: '23-25666777-9'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/22/2023 14:25:56' prior: 50654172!
test02PepeSanchezIsImportedCorrectly

	| customer |	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveFirstName: 'Pepe' andLastName: 'Sanchez' andIDType: 'D' andIDNumber: '22333444' .	! !

!methodRemoval: ImportTest #obtainCustomerWithIDType:andIDNumber: stamp: 'S D 11/22/2023 14:25:56'!
obtainCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^( self getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'S D 11/22/2023 14:25:59'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 14:26:13' prior: 50652151!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | | customer |
		self assert: anError messageText equals: importer invalidAddressRecord.
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.
		]
	! !

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'S D 11/22/2023 14:26:15'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/22/2023 14:26:26' prior: 50652218!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | | customer |
		self assert: anError messageText equals: importer invalidRecord.
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.
		]
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'S D 11/22/2023 14:26:34'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'S D 11/22/2023 14:26:34'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'S D 11/22/2023 14:26:34'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'S D 11/22/2023 14:26:34'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'S D 11/22/2023 14:26:34'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'S D 11/22/2023 14:26:34'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'S D 11/22/2023 14:26:34'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'S D 11/22/2023 14:26:35'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'S D 11/22/2023 14:26:35'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'S D 11/22/2023 14:26:35'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'S D 11/22/2023 14:26:35'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'S D 11/22/2023 14:26:35'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'S D 11/22/2023 14:26:35'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'S D 11/22/2023 14:26:35'!
PASSED!

----QUIT----(22 November 2023 14:26:42) CuisUniversity-5981.image priorSource: 10277243!

----STARTUP---- (22 November 2023 18:02:49) as /home/clinux01/Documentos/cuis/linux64(4)/linux64/CuisUniversity-5981.image!

!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:04:00' prior: 50654102!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:14:44' prior: 50654810!
test01ImportAddsTheCorrectNumberOfCustomers

	| listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	[| numberOfCostumers |
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.	
	self assert: numberOfCostumers equals: 2.].
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:16:39'!
assertCustomerImporterImportsRightAmountOfCustomers

	| numberOfCostumers |
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.	
	self assert: numberOfCostumers equals: 2! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:16:39' prior: 50654830!
test01ImportAddsTheCorrectNumberOfCustomers

	| listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	[self assertCustomerImporterImportsRightAmountOfCustomers.].
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:16:44' prior: 50654859!
test01ImportAddsTheCorrectNumberOfCustomers

	| listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assertCustomerImporterImportsRightAmountOfCustomers.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:17:46' prior: 50654877!
test01ImportAddsTheCorrectNumberOfCustomers

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	
	[| listOfSanchez listOfPerez|
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	].
	self assertCustomerImporterImportsRightAmountOfCustomers.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:18:10'!
assertCustomerImporterOnlyImportsOneOfEachCustomer

	| listOfSanchez listOfPerez|
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:18:10' prior: 50654895!
test01ImportAddsTheCorrectNumberOfCustomers

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	
	[self assertCustomerImporterOnlyImportsOneOfEachCustomer.
	].
	self assertCustomerImporterImportsRightAmountOfCustomers.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:18:20' prior: 50654927!
test01ImportAddsTheCorrectNumberOfCustomers

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	
	self assertCustomerImporterImportsRightAmountOfCustomers.
	
	self assertCustomerImporterOnlyImportsOneOfEachCustomer.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:19:12'!
assertCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck  

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: anIDTypeToCheck .
	self assert: aCustomerToCompare identificationNumber equals: anIDNumberToCheck .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:19:12' prior: 50654680!
test02PepeSanchezIsImportedCorrectly

	| customer |	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self assertCustomer: customer haveFirstName: 'Pepe' andLastName: 'Sanchez' andIDType: 'D' andIDNumber: '22333444' .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:19:12' prior: 50654666!
test03JuanPerezIsImportedCorrectly

	| customer |
	
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self assertCustomer: customer haveFirstName: 'Juan' andLastName: 'Perez' andIDType: 'C' andIDNumber: '23-25666777-9'.! !

!methodRemoval: ImportTest #doesCustomer:haveFirstName:andLastName:andIDType:andIDNumber: stamp: 'eaam 11/22/2023 18:19:12'!
doesCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck  

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: anIDTypeToCheck .
	self assert: aCustomerToCompare identificationNumber equals: anIDNumberToCheck .!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:20:26'!
assertAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:20:26' prior: 50654621!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer secondAddressesOfCustomer |

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self assertAddress: firstAddressesOfCustomer haveProvince: 'BsAs' andStreetNumber: 3322 andStreetName: 'San Martin' andZipCode: 1636 andTown: 'Olivos'.
	
	self assertAddress: secondAddressesOfCustomer haveProvince: 'Buenos Aires' andStreetNumber: 		888 andStreetName: 'Maipu' andZipCode: 1122 andTown: 'Florida' .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:20:26' prior: 50654648!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self assertAddress: listOfCustomerAddresses haveProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA' .
! !

!methodRemoval: ImportTest #doesAddress:haveProvince:andStreetNumber:andStreetName:andZipCode:andTown: stamp: 'eaam 11/22/2023 18:20:26'!
doesAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:22:24' prior: 50654512!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerSystemDataIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:22:51' prior: 50654456!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerSystemDataIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:31:25'!
shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:31:25' prior: 50655098!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:31:25' prior: 50655116!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:32:47'!
shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer a: errorMessage 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:32:47' prior: 50655146!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer a: importer invalidCustomerRecord
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:32:47' prior: 50655159!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer a: importer invalidCustomerRecord
	! !

!methodRemoval: ImportTest #shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: stamp: 'eaam 11/22/2023 18:32:47'!
shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerSystemDataIsEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:33:26'!
shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: errorMessage 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:33:26' prior: 50655200!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidCustomerRecord
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:33:26' prior: 50655185!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidCustomerRecord
	! !

!methodRemoval: ImportTest #shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor:a: stamp: 'eaam 11/22/2023 18:33:26'!
shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer a: errorMessage 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerSystemDataIsEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:33:33' prior: 50655227!
shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: errorMessage 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: errorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:34:14' prior: 50654530!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidRecord.
	! !

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:34:16'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:34:31' prior: 50654548!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidRecord.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:34:41' prior: 50655366!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidRecord.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:34:47' prior: 50654493!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidRecord.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:35:04' prior: 50654474!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidRecord.
	! !

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:35:05'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:35:05'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:35:06'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:35:06'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:35:24' prior: 50655409!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
		self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidRecord.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:35:28' prior: 50655482!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidRecord.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:36:11' prior: 50655394!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: importer invalidAddressRecord .
	! !

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:36:12'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:37:15'!
shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: errorMessage 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: errorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:37:15' prior: 50655298!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: importer invalidRecord.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:37:15' prior: 50655380!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: importer invalidRecord.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:37:15' prior: 50655256!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: importer invalidCustomerRecord
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:37:15' prior: 50655512!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: importer invalidAddressRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:37:15' prior: 50655241!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: importer invalidCustomerRecord
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:37:15' prior: 50655497!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: importer invalidRecord.! !

!methodRemoval: ImportTest #shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor:andErrorMessage: stamp: 'eaam 11/22/2023 18:37:15'!
shouldImportCustomersRaiseAnErrorAndCustomerSystemRemainEmptyFor: importer andErrorMessage: errorMessage 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: errorMessage.
		self assert: self customerSystemDataIsEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:38:03'!
forImporter: errorMessage shouldImportCustomersRaiseAnErrorErrorMessage: importer 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: errorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:38:03' prior: 50655636!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:38:03' prior: 50655594!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:38:03' prior: 50655651!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:38:03' prior: 50655665!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:38:03' prior: 50655608!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:38:03' prior: 50655622!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord
	! !

!methodRemoval: ImportTest #shouldImportCustomersRaiseAnErrorErrorMessage:forImporter: stamp: 'eaam 11/22/2023 18:38:03'!
shouldImportCustomersRaiseAnErrorErrorMessage: importer forImporter: errorMessage 

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: errorMessage.
		self assert: self customerSystemDataIsEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:38:29' prior: 50655694!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage 

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:38:51'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:40:14'!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage andAssert: aClossureToExecute  

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:14' prior: 50655750!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord andAssert: a.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:14' prior: 50655722!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord andAssert: a.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:14' prior: 50655765!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord andAssert: a.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:14' prior: 50655707!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord andAssert: a .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:14' prior: 50655736!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord andAssert: a
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:14' prior: 50655779!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord andAssert: a
	! !

!methodRemoval: ImportTest #forImporter:shouldImportCustomersRaiseAnErrorErrorMessage: stamp: 'eaam 11/22/2023 18:40:15'!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage 

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:40:42'!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage   

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:43' prior: 50655902!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:43' prior: 50655887!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:43' prior: 50655960!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:43' prior: 50655930!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:43' prior: 50655945!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:40:43' prior: 50655916!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord .
	! !

!methodRemoval: ImportTest #forImporter:shouldImportCustomersRaiseAnErrorErrorMessage:andAssert: stamp: 'eaam 11/22/2023 18:40:43'!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage andAssert: aClossureToExecute  

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:41:40'!
forImporter: importer

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | | customer |
		self assert: anError messageText equals: importer invalidRecord.
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:41:40' prior: 50654732!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:43:11'!
withCondition: aClossure forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage   

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:43:11' prior: 50656014!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self withCondition: a forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:43:11' prior: 50656029!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self withCondition: a forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:43:11' prior: 50656072!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self withCondition: a forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:43:11' prior: 50656043!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self withCondition: a forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:43:11' prior: 50656058!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self withCondition: a forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:43:11' prior: 50656000!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self withCondition: a forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord .
	! !

!methodRemoval: ImportTest #forImporter:shouldImportCustomersRaiseAnErrorErrorMessage: stamp: 'eaam 11/22/2023 18:43:11'!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage   

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]!

!methodRemoval: ImportTest #forImporter: stamp: 'eaam 11/22/2023 18:43:39'!
forImporter: importer

	^ self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | | customer |
		self assert: anError messageText equals: importer invalidRecord.
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:43:39' prior: 50656113!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	 self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | | customer |
		self assert: anError messageText equals: importer invalidRecord.
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:44:04'!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage withCondition: aClossure   

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:44:04' prior: 50656213!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: a shouldImportCustomersRaiseAnErrorErrorMessage: importer withCondition: importer invalidRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:44:04' prior: 50656198!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: a shouldImportCustomersRaiseAnErrorErrorMessage: importer withCondition: importer invalidCustomerRecord ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:44:04' prior: 50656139!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: a shouldImportCustomersRaiseAnErrorErrorMessage: importer withCondition: importer invalidRecord .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:44:04' prior: 50656169!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: a shouldImportCustomersRaiseAnErrorErrorMessage: importer withCondition: importer invalidRecord .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:44:04' prior: 50656154!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: a shouldImportCustomersRaiseAnErrorErrorMessage: importer withCondition: importer invalidCustomerRecord ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/22/2023 18:44:04' prior: 50656183!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: a shouldImportCustomersRaiseAnErrorErrorMessage: importer withCondition: importer invalidAddressRecord .
	! !

!methodRemoval: ImportTest #withCondition:forImporter:shouldImportCustomersRaiseAnErrorErrorMessage: stamp: 'eaam 11/22/2023 18:44:04'!
withCondition: aClossure forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage   

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		self assert: self customerSystemDataIsEmpty.
		]!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:44:21' prior: 50656274!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage withCondition: aClossure   

	^ self should: [aImporter importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		aClossure value.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:45:00' prior: 50656302!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord  withCondition: [self assert: self customerSystemDataIsEmpty.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:45:12' prior: 50656403!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:45:21' prior: 50656346!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:45:27' prior: 50656288!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:45:30' prior: 50656332!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:45:53' prior: 50656467!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:45:54'!
FAILURE!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:45:54'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:45:54'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:45:54'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:46:00' prior: 50656451!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:46:14' prior: 50656361!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:46:19' prior: 50656317!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .! !

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:46:21'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:46:55' prior: 50656253!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.] .
		! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:47:42' prior: 50656653!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
		! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:47:48' prior: 50654706!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:47:51' prior: 50656691!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:47:58' prior: 50654599!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:48:04'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:48:04'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:04'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:04'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:04'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:48:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:48:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:48:05'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:48:05'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:48:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:48:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:48:05'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:48:05'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:48:05'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:48:15' prior: 50656731!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/22/2023 18:48:20' prior: 50656711!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:48:22'!
PASSED!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:49:41'!
signalIfRecordIsEmpty

	^ (record isEmpty) ifTrue: [ self error: self invalidRecord ]! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:49:41' prior: 50652500!
importRecord

	self signalIfRecordIsEmpty.
	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:50:00' prior: 50652485!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			customerSystem addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:50:23' prior: 50656917!
importCustomer

	((record size = 5 ) not) ifTrue: [self error: self invalidCustomerRecord].
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			customerSystem addCustomer: newCustomer! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:50:50'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:50:51'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:50:51'!
PASSED!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:52:27'!
signalIfRecord

	((record size = 6 ) not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].


	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:52:52'!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].! !

!methodRemoval: CustomerImporter #signalIfRecord stamp: 'eaam 11/22/2023 18:52:56'!
signalIfRecord

	((record size = 6 ) not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].


	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:53:23' prior: 50652469!
importAddress

	self signalIfRecordHasNotSixParameters .


	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:53:24'!
PASSED!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:53:50' prior: 50656932!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			customerSystem addCustomer: newCustomer! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:53:53'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:53:53'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:53:53'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:53:53'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:53:53'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:53:57'!
ERROR!
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:05'!
signalIfRecordHasNotFiveParameters
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:10' prior: 50657168!
signalIfRecordHasNotFiveParameters
	((record size = 5 ) not) ifTrue: [self error: self invalidCustomerRecord].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:54:15'!
PASSED!
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:23' prior: 50657013!
signalIfRecordHasNotSixParameters
	((record size = 6 ) not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:39' prior: 50656900!
signalIfRecordIsEmpty
	^ (record isEmpty) ifTrue: [ self error: self invalidRecord ]! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:47' prior: 50657174!
signalIfRecordHasNotFiveParameters

	((record size = 5 ) not) ifTrue: [self error: self invalidCustomerRecord].! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:49' prior: 50657232!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:53' prior: 50657240!
signalIfRecordIsEmpty

	^ (record isEmpty) ifTrue: [ self error: self invalidRecord ]! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/22/2023 18:54:58' prior: 50652523!
recordHasValidType

	^self isCustomerRecord or: self isAddressRecord ! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/22/2023 18:55:08' prior: 50657036!
importAddress

	self signalIfRecordHasNotSixParameters .

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/22/2023 18:55:52' prior: 50652443!
invalidAddressRecord
	^'an address record must have 6 parameters'.! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/22/2023 18:56:04' prior: 50652448!
invalidCustomerRecord
	^'an custoer record must have 5 parameters'! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/22/2023 18:56:42' prior: 50652453!
invalidRecord
	^'record cant be empty and every line must start with "C" or "A"'! !

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:56:44'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:56:44'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:56:44'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:56:44'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:56:49'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:56:49'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:56:51'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:56:51'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:56:51'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:56:52'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:56:52'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:56:53'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:56:53'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:56:53'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:56:53'!
PASSED!
!CustomerImporter methodsFor: 'initialization' stamp: 'eaam 11/22/2023 18:57:10' prior: 50654335!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.! !
!TransientCustomerSystem methodsFor: 'customer management' stamp: 'eaam 11/22/2023 18:57:33' prior: 50652707 overrides: 50652583!
selectAllOfType: aType 
	^dataCollection select:[:anObject | anObject class = aType] copy.! !
!TransientCustomerSystem methodsFor: 'customer management' stamp: 'eaam 11/22/2023 18:57:43' prior: 50652700 overrides: 50652578!
select: aCondition ofType: aType
	^(self selectAllOfType: aType) select: aCondition copy.! !
!TransientCustomerSystem methodsFor: 'customer management' stamp: 'eaam 11/22/2023 18:57:49' prior: 50657430 overrides: 50652578!
select: aCondition ofType: aType
	^((self selectAllOfType: aType) select: aCondition )copy.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:58:02'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/22/2023 18:58:32'!
PASSED!

----QUIT----(22 November 2023 19:00:55) CuisUniversity-5981.image priorSource: 10340871!

----STARTUP---- (23 November 2023 02:02:44) as C:\Users\sofia\Documents\smalltalk\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Documents\smalltalk\windows64\CustomerImporter.st----!
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'S D 11/23/2023 02:04:31' overrides: 50658360!
beginTransaction
	self subclassResponsibility .! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'S D 11/23/2023 02:04:31' overrides: 50658360!
beginTransaction
	self subclassResponsibility .! !
!CustomerSystem methodsFor: 'transaction management' stamp: 'S D 11/23/2023 02:04:31' prior: 50658360!
beginTransaction

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'initialization' stamp: 'S D 11/23/2023 02:05:09' overrides: 16920235!
initialize

	self subclassResponsibility! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:06:04'!
assertAddress: anAddressToCompare hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/23/2023 02:06:05' prior: 50657785!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer secondAddressesOfCustomer |

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self assertAddress: firstAddressesOfCustomer hasProvince: 'BsAs' andStreetNumber: 3322 andStreetName: 'San Martin' andZipCode: 1636 andTown: 'Olivos'.
	
	self assertAddress: secondAddressesOfCustomer hasProvince: 'Buenos Aires' andStreetNumber: 		888 andStreetName: 'Maipu' andZipCode: 1122 andTown: 'Florida' .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'S D 11/23/2023 02:06:05' prior: 50657811!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self assertAddress: listOfCustomerAddresses hasProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA' .
! !

!methodRemoval: ImportTest #assertAddress:haveProvince:andStreetNumber:andStreetName:andZipCode:andTown: stamp: 'S D 11/23/2023 02:06:05'!
assertAddress: anAddressToCompare haveProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:06:38'!
keyword1: listOfCustomerAddresses

	^ self assertAddress: listOfCustomerAddresses hasProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:06:38' prior: 50658681!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self keyword1: listOfCustomerAddresses .
! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:07:54' prior: 50658728!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
self assertAddress: listOfCustomerAddresses hasProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA'! !

!methodRemoval: ImportTest #keyword1: stamp: 'S D 11/23/2023 02:07:55'!
keyword1: listOfCustomerAddresses

	^ self assertAddress: listOfCustomerAddresses hasProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA'!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:08:04' prior: 50658742!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self assertAddress: listOfCustomerAddresses hasProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:08:08' prior: 50658767!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self assertAddress: listOfCustomerAddresses hasProvince: 'CABA' andStreetNumber: 1122 andStreetName: 'Alem' andZipCode: 1001 andTown: 'CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:10:41'!
assertAddressExistsWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:11:31' prior: 50658802!
assertAddressExistsWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  ! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:12:41'!
assertCustomer: theOwnerOfTheAddress assertAddressExistsWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  ! !

!methodRemoval: ImportTest #assertAddressExistsWithProvince:andStreetName:andStreetNumber:andZipCode:andTown: stamp: 'S D 11/23/2023 02:12:41'!
assertAddressExistsWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:12:54'!
assertCustomer: theOwnerOfTheAddress hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  ! !

!methodRemoval: ImportTest #assertCustomer:assertAddressExistsWithProvince:andStreetName:andStreetNumber:andZipCode:andTown: stamp: 'S D 11/23/2023 02:12:54'!
assertCustomer: theOwnerOfTheAddress assertAddressExistsWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:13:21' prior: 50658856!
assertCustomer: theOwnerOfTheAddress hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |
	
	address := theOwnerOfTheAddress addressAt: 'Alem' ifNone: [self fail.].

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  ! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:13:29' prior: 50658889!
assertCustomer: theOwnerOfTheAddress hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |
	
	address := theOwnerOfTheAddress addressAt: aStreetNameToCheck ifNone: [self fail.].

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  ! !
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:14:23' prior: 50658785!
test05JuanPerezDataIsImportedCorrectly

	| customer |
	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.	
	self assertCustomer: customer hasAddressWithProvince: 'CABA'  andStreetName: 'Alem' andStreetNumber: 1122 andZipCode: 1001 andTown: 'CABA'! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'S D 11/23/2023 02:14:28'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'S D 11/23/2023 02:15:35' prior: 50658654!
test04PepeSanchezDataIsImportedCorrectly

	| customer |

	self importCustomersForReadStream: validInputStream forSystem: customerSystem .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	
	self assertCustomer: customer hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber: 3322 andZipCode: 1636 andTown: 'Olivos'.
	
	self assertCustomer: customer hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber: 		888 andZipCode: 1122 andTown: 'Florida' .
! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'S D 11/23/2023 02:16:28'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'S D 11/23/2023 02:16:28'!
PASSED!
!Integration class methodsFor: 'as yet unclassified' stamp: 'S D 11/23/2023 02:16:48' prior: 50657637!
isCurrent
	^(Smalltalk at: #env) = 'int'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'S D 11/23/2023 02:17:23'!
PASSED!

----QUIT----(23 November 2023 02:17:33) CuisUniversity-5981.image priorSource: 10428584!

----STARTUP---- (23 November 2023 17:11:45) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!

!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 17:27:34' prior: 50658225!
importAddress

	self signalIfRecordHasNotSixParameters .

	newAddress := Address forAddress: newAddress streetName: record second streetNumber: record third asNumber town: record fourth zipCode: record fifth asNumber province: record sixth.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 17:27:45' prior: 50659076!
importAddress

	self signalIfRecordHasNotSixParameters .

	newAddress := Address forAddress: newAddress streetName: record second streetNumber: record third asNumber town: record fourth zipCode: record fifth asNumber province: record sixth.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:27:46'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:27:46'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:27:46'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:27:46'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:27:46'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 17:27:46'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:27:48'!
ERROR!
!Address class methodsFor: 'instance creation' stamp: 'eaam 11/23/2023 17:27:53'!
forAddress: aNewAddress streetName: aRenameMe1 streetNumber: aRenameMe2 town: aRenameMe3 zipCode: aRenameMe4 province: aRenameMe5 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForAddress: aNewAddress streetName: aRenameMe1 streetNumber: aRenameMe2 town: aRenameMe3 zipCode: aRenameMe4 province: aRenameMe5 ! !
!Address class methodsFor: 'instance creation' stamp: 'eaam 11/23/2023 17:28:05' prior: 50659161!
forAddress: aNewAddress streetName: aRenameMe1 streetNumber: aRenameMe2 town: aRenameMe3 zipCode: aRenameMe4 province: aRenameMe5 
	^self new initializeForAddress: aNewAddress streetName: aRenameMe1 streetNumber: aRenameMe2 town: aRenameMe3 zipCode: aRenameMe4 province: aRenameMe5 ! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:28:09'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:28:09'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:28:09'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:28:09'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:28:09'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 17:28:09'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:28:11'!
ERROR!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:28:23'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:28:23'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province newAddress renameMe1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:28:23'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province newAddress renameMe1 renameMe2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:28:23'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province newAddress renameMe1 renameMe2 renameMe3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:28:23'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province newAddress renameMe1 renameMe2 renameMe3 renameMe4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:28:23'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province newAddress renameMe1 renameMe2 renameMe3 renameMe4 renameMe5'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:28:23'!
initializeForAddress: aNewAddress streetName: aRenameMe1 streetNumber: aRenameMe2 town: aRenameMe3 zipCode: aRenameMe4 province: aRenameMe5 
	self shouldBeImplemented.
	newAddress := aNewAddress.
	renameMe1 := aRenameMe1.
	renameMe2 := aRenameMe2.
	renameMe3 := aRenameMe3.
	renameMe4 := aRenameMe4.
	renameMe5 := aRenameMe5.! !
!Address methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:29:23' prior: 50659299!
initializeForAddress: aNewAddress streetName: aStreetName streetNumber: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 

	newAddress := aNewAddress.
	renameMe1 := aStreetName.
	renameMe2 := aStreetNumber.
	renameMe3 := aTownName.
	renameMe4 := aZipCode.
	renameMe5 := aProvinceName.! !
!Address methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:30:08' prior: 50659313!
initializeForAddress: aNewAddress streetName: aStreetName streetNumber: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 

	newAddress := aNewAddress.
	streetName := aStreetName.
	streetNumber := aStreetNumber.
	town := aTownName.
	zipCode := aZipCode.
	province := aProvinceName.! !

Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:30:18'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:30:22' prior: 50659326!
initializeForAddress: aNewAddress streetName: aStreetName streetNumber: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName 

	id := aNewAddress.
	streetName := aStreetName.
	streetNumber := aStreetNumber.
	town := aTownName.
	zipCode := aZipCode.
	province := aProvinceName.! !

TestCase subclass: #SuplierImporterTest
	instanceVariableNames: 'customerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SuplierImporterTest category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:31:48'!
TestCase subclass: #SuplierImporterTest
	instanceVariableNames: 'customerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #SuplierImporterTest stamp: 'eaam 11/23/2023 17:37:28'!
TestCase subclass: #SuplierImporterTest
	instanceVariableNames: 'customerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SuplierSystem category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:41:12'!
CustomerImporter subclass: #SuplierSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 17:40:59'!
test01
	
	| stream |
	stream := ReadStream on: '	S,Supplier1,D,123'.
	SuplierSystem forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: stream .! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 17:42:10' prior: 50659395!
test01
	
	| stream |
	stream := ReadStream on: '	S,Supplier1,D,123'.
	SuplierSystem forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: stream .
	
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 17:44:57' prior: 50659404!
test01
	
	| stream |
	stream := ReadStream on: '	S,Supplier1,D,123'.
	SuplierSystem forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: stream .
	
	self assert: customerSystem numberOfSupliers equals: 1.
	
	
	
	"self assert: "! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 17:46:51' prior: 50659413!
test01
	
	| stream suplier |
	stream := ReadStream on: '	S,Supplier1,D,123'.
	SuplierSystem forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: stream .
	
	self assert: customerSystem numberOfSupliers equals: 1.
	
	suplier := self getSuplierWithIDType: 'S' andIDNumber: 123. 

	"self assert: "! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 17:47:04' prior: 50659424!
test01
	
	| stream suplier |
	stream := ReadStream on: '	S,Supplier1,D,123'.
	SuplierSystem forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: stream .
	
	self assert: customerSystem numberOfSupliers equals: 1.
	
	suplier := customerSystem getSuplierWithIDType: 'S' andIDNumber: 123. 

	"self assert: "! !

!classRenamed: #CustomerSystem as: #ErpSystem stamp: 'eaam 11/23/2023 17:47:28'!
Smalltalk renameClassNamed: #CustomerSystem as: #ErpSystem!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:47:28' prior: 50657989 overrides: 16961394!
setUp

	customerSystem := ErpSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classRenamed: #PersistentCustomerSystem as: #PersistentErpSystem stamp: 'eaam 11/23/2023 17:47:42'!
Smalltalk renameClassNamed: #PersistentCustomerSystem as: #PersistentErpSystem!
!Integration methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:47:42' prior: 50657624 overrides: 50657563!
createSystem
	^PersistentErpSystem new.! !

!classRenamed: #TransientCustomerSystem as: #TransientErpSystem stamp: 'eaam 11/23/2023 17:47:56'!
Smalltalk renameClassNamed: #TransientCustomerSystem as: #TransientErpSystem!
!Development methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:47:56' prior: 50657594 overrides: 50657563!
createSystem
	^TransientErpSystem new.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 17:48:36' prior: 50659437!
test01
	
	| stream suplier |
	stream := ReadStream on: '	S,Supplier1,D,123'.
	SuplierSystem forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: stream .
	
	self assert: customerSystem numberOfSupliers equals: 1.
	
	suplier := customerSystem getSuplierWithIDType: 'S' andIDNumber: 123. 

	self assert: suplier! !

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:49:21'!
Object subclass: #CSVImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:49:21'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CSVImporter subclass: #SuplierSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SuplierSystem category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:49:29'!
CSVImporter subclass: #SuplierSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:49:41'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:49:41'!
Object subclass: #CSVImporter
	instanceVariableNames: 'line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:49:41'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:49:41'!
Object subclass: #CSVImporter
	instanceVariableNames: 'line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 17:49:41'!
createRecord
	
	^ record := line findTokens: $,! !

!methodRemoval: CustomerImporter #createRecord stamp: 'eaam 11/23/2023 17:49:41'!
createRecord
	
	^ record := line findTokens: $,!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:50:06'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:50:06'!
Object subclass: #CSVImporter
	instanceVariableNames: 'line record inputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 17:50:06'!
hasLineToImport

	line := inputStream nextLine. 
	^line notNil! !

!methodRemoval: CustomerImporter #hasLineToImport stamp: 'eaam 11/23/2023 17:50:06'!
hasLineToImport

	line := inputStream nextLine. 
	^line notNil!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:50:28'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 17:50:28'!
Object subclass: #CSVImporter
	instanceVariableNames: 'line record inputStream customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:50:28'!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.! !

!methodRemoval: CustomerImporter #initializeForCustomerSystemToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/23/2023 17:50:28'!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.!
!CSVImporter methodsFor: 'evaluating' stamp: 'eaam 11/23/2023 17:50:42'!
importCustomers 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	! !

!methodRemoval: CustomerImporter #importCustomers stamp: 'eaam 11/23/2023 17:50:42'!
importCustomers 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	!
!CSVImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 17:51:24'!
invalidRecord
	^'record cant be empty and every line must start with "C" or "A"'! !

!methodRemoval: CustomerImporter #invalidRecord stamp: 'eaam 11/23/2023 17:51:24'!
invalidRecord
	^'record cant be empty and every line must start with "C" or "A"'!
!CSVImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 17:51:35'!
signalIfRecordIsEmpty

	^ (record isEmpty) ifTrue: [ self error: self invalidRecord ]! !

!methodRemoval: CustomerImporter #signalIfRecordIsEmpty stamp: 'eaam 11/23/2023 17:51:35'!
signalIfRecordIsEmpty

	^ (record isEmpty) ifTrue: [ self error: self invalidRecord ]!
!CSVImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 17:51:55'!
importRecord

	self subclassResponsibility! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/23/2023 17:52:28'!
forSystem: aCustomerSystemToRecordDataOn importValues: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657737!
importCustomersForReadStream: aReadStreamToRead forSystem: aSessionToRecordDataOn
	(CustomerImporter forSystem: aSessionToRecordDataOn importValues: aReadStreamToRead) importCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657947!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
		! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50659491!
test01
	
	| stream suplier |
	stream := ReadStream on: '	S,Supplier1,D,123'.
	SuplierSystem forSystem: customerSystem importValues: stream .
	
	self assert: customerSystem numberOfSupliers equals: 1.
	
	suplier := customerSystem getSuplierWithIDType: 'S' andIDNumber: 123. 

	self assert: suplier! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657901!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657829!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657966!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657931!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657916!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657881!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657861!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:52:28' prior: 50657845!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystem: customerSystem importValues: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !

!methodRemoval: CustomerImporter class #forCustomerSystemToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/23/2023 17:52:28'!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 17:52:44'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:52:44'!
FAILURE!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:52:44'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 17:52:44'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 17:52:46'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:52:53'!
FAILURE!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:53:32'!
FAILURE!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 17:53:52'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:53:52'!
FAILURE!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:53:52'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 17:53:52'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:53:54'!
FAILURE!
!CSVImporter methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:55:21'!
initializeWithRecord: aCustomerSystemToRecordDataOn andInputStream: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 17:55:21' prior: 50659678!
forSystem: aCustomerSystemToRecordDataOn importValues: anInputStreamToReadFrom 
	^self new initializeWithRecord: aCustomerSystemToRecordDataOn andInputStream: anInputStreamToReadFrom ! !

!methodRemoval: CSVImporter #initializeForCustomerSystemToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/23/2023 17:55:21'!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.!
!CSVImporter class methodsFor: 'instance creation' stamp: 'eaam 11/23/2023 17:55:37'!
forSystem: aCustomerSystemToRecordDataOn importValues: anInputStreamToReadFrom 
	^self new initializeWithRecord: aCustomerSystemToRecordDataOn andInputStream: anInputStreamToReadFrom ! !

!methodRemoval: CustomerImporter class #forSystem:importValues: stamp: 'eaam 11/23/2023 17:55:37'!
forSystem: aCustomerSystemToRecordDataOn importValues: anInputStreamToReadFrom 
	^self new initializeWithRecord: aCustomerSystemToRecordDataOn andInputStream: anInputStreamToReadFrom !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 17:55:57'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:55:57'!
FAILURE!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:55:57'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 17:55:57'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:55:59'!
FAILURE!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:56:25'!
FAILURE!
!CSVImporter methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:57:40' prior: 50659989!
initializeWithRecord: aCustomerSystemToRecordDataOn andInputStream: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	line := anInputStream.! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 17:59:06'!
ERROR!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 17:59:12'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 17:59:13'!
ERROR!
!CSVImporter methodsFor: 'initialization' stamp: 'eaam 11/23/2023 17:59:57' prior: 50660095!
initializeWithRecord: aCustomerSystemToRecordDataOn andInputStream: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:00:00'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:00:00'!
FAILURE!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:00:00'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:00:00'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:00:02'!
FAILURE!

inputStream nextLine!

inputStream . nextLine!

inputStream !

inputStream nextLine!

inputStream !

self crLfNextLine!

self crLfNextLine crLfNextLine!

----QUIT----(23 November 2023 18:04:44) CuisUniversity-5981.image priorSource: 10477330!

----STARTUP---- (23 November 2023 18:05:50) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CustomerImporter.st----!

----STARTUP---- (23 November 2023 18:12:22) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CustomerImporter.st----!

!classRenamed: #CustomerSystem as: #ErpSystem stamp: 'eaam 11/23/2023 18:15:55'!
Smalltalk renameClassNamed: #CustomerSystem as: #ErpSystem!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:15:56' prior: 50660723 overrides: 16961394!
setUp

	customerSystem := ErpSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classRenamed: #PersistentCustomerSystem as: #PersistentErpSystem stamp: 'eaam 11/23/2023 18:16:08'!
Smalltalk renameClassNamed: #PersistentCustomerSystem as: #PersistentErpSystem!
!Integration methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:16:08' prior: 50660361 overrides: 50660300!
createSystem
	^PersistentErpSystem new.! !

!classRenamed: #TransientCustomerSystem as: #TransientErpSystem stamp: 'eaam 11/23/2023 18:16:16'!
Smalltalk renameClassNamed: #TransientCustomerSystem as: #TransientErpSystem!
!Development methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:16:17' prior: 50660331 overrides: 50660300!
createSystem
	^TransientErpSystem new.! !

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:16:37'!
Object subclass: #CSVImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:16:37'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/23/2023 18:17:21'!
forSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStream: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660651!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660636!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660682!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
		! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660582!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660616!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660567!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660488!
importCustomersForReadStream: aReadStreamToRead forSystem: aSessionToRecordDataOn
	(CustomerImporter forSystemToRecordOn: aSessionToRecordDataOn andInputStream: aReadStreamToRead) importCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660701!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660666!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:17:21' prior: 50660597!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: customerSystem andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !

!methodRemoval: CustomerImporter class #forCustomerSystemToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/23/2023 18:17:21'!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom !
!CSVImporter class methodsFor: 'instance creation' stamp: 'eaam 11/23/2023 18:17:44'!
forSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStream: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !

!methodRemoval: CustomerImporter class #forSystemToRecordOn:andInputStream: stamp: 'eaam 11/23/2023 18:17:44'!
forSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStream: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:17:54'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:17:54'!
Object subclass: #CSVImporter
	instanceVariableNames: 'customerSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:17:54'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:17:54'!
Object subclass: #CSVImporter
	instanceVariableNames: 'customerSystem inputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:17:54'!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.! !

!methodRemoval: CustomerImporter #initializeForCustomerSystemToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/23/2023 18:17:54'!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream

	customerSystem := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.!

Smalltalk at: #env put: 'dev'!

Smalltalk at: #env put: 'dev'.!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:19:16'!
PASSED!
!CSVImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 18:19:36'!
invalidRecord
	^'record cant be empty and every line must start with "C" or "A"'! !

!methodRemoval: CustomerImporter #invalidRecord stamp: 'eaam 11/23/2023 18:19:36'!
invalidRecord
	^'record cant be empty and every line must start with "C" or "A"'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/23/2023 18:19:50'!
import 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:19:50' prior: 50660468!
forImporter: aImporter shouldImportCustomersRaiseAnErrorErrorMessage: aErrorMessage withCondition: aClossure   

	^ self should: [aImporter import]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: aErrorMessage.
		aClossure value.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:19:50' prior: 50661483!
importCustomersForReadStream: aReadStreamToRead forSystem: aSessionToRecordDataOn
	(CustomerImporter forSystemToRecordOn: aSessionToRecordDataOn andInputStream: aReadStreamToRead) import! !

!methodRemoval: CustomerImporter #importCustomers stamp: 'eaam 11/23/2023 18:19:50'!
importCustomers 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	!
!CSVImporter methodsFor: 'evaluating' stamp: 'eaam 11/23/2023 18:20:05'!
import 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	! !

!methodRemoval: CustomerImporter #import stamp: 'eaam 11/23/2023 18:20:05'!
import 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:20:15'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:20:15'!
Object subclass: #CSVImporter
	instanceVariableNames: 'customerSystem inputStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:20:15'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:20:15'!
Object subclass: #CSVImporter
	instanceVariableNames: 'customerSystem inputStream line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 18:20:15'!
createRecord
	
	^ record := line findTokens: $,! !

!methodRemoval: CustomerImporter #createRecord stamp: 'eaam 11/23/2023 18:20:15'!
createRecord
	
	^ record := line findTokens: $,!
!CSVImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 18:20:26'!
importRecord

	self subclassResponsibility! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:20:29'!
PASSED!
!CSVImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 18:20:40'!
hasLineToImport

	line := inputStream nextLine. 
	^line notNil! !

!methodRemoval: CustomerImporter #hasLineToImport stamp: 'eaam 11/23/2023 18:20:40'!
hasLineToImport

	line := inputStream nextLine. 
	^line notNil!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:20:46'!
PASSED!
!CSVImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 18:21:00'!
signalIfRecordIsEmpty

	^ (record isEmpty) ifTrue: [ self error: self invalidRecord ]! !

!methodRemoval: CustomerImporter #signalIfRecordIsEmpty stamp: 'eaam 11/23/2023 18:21:00'!
signalIfRecordIsEmpty

	^ (record isEmpty) ifTrue: [ self error: self invalidRecord ]!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:21:08'!
PASSED!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:23:16'!
test01! !

!classDefinition: #SuplierImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:26:32'!
CSVImporter subclass: #SuplierImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:26:55' prior: 50662010!
test01
	| stream |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SuplierImporter forSystemToRecordOn: customerSystem andInputStream: stream.
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:27:01'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50660735!
customerSystemDataIsEmpty
	^system isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50660534!
test04PepeSanchezDataIsImportedCorrectly

	| customer |

	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	
	self assertCustomer: customer hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber: 3322 andZipCode: 1636 andTown: 'Olivos'.
	
	self assertCustomer: customer hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber: 		888 andZipCode: 1122 andTown: 'Florida' .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50660718 overrides: 16961402!
tearDown
	system close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661509!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661413!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
		! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661321 overrides: 16961394!
setUp

	system := ErpSystem newCustomerSystem .
	system start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661448!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50660508!
test02PepeSanchezIsImportedCorrectly

	| customer |	
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self assertCustomer: customer haveFirstName: 'Pepe' andLastName: 'Sanchez' andIDType: 'D' andIDNumber: '22333444' .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661432!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50662021!
test01
	| stream |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SuplierImporter forSystemToRecordOn: system andInputStream: stream.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661493!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661383!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50661468!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50660521!
test03JuanPerezIsImportedCorrectly

	| customer |
	
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self assertCustomer: customer haveFirstName: 'Juan' andLastName: 'Perez' andIDType: 'C' andIDNumber: '23-25666777-9'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50660498!
test01ImportAddsTheCorrectNumberOfCustomers

	self importCustomersForReadStream: validInputStream forSystem: system .
	
	self assertCustomerImporterImportsRightAmountOfCustomers.
	
	self assertCustomerImporterOnlyImportsOneOfEachCustomer.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:01' prior: 50660446!
assertCustomerImporterImportsRightAmountOfCustomers

	| numberOfCostumers |
	numberOfCostumers := (system selectAllOfType: Customer) size.	
	self assert: numberOfCostumers equals: 2! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:02' prior: 50661398!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:02' prior: 50661525!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidAddressRecord 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:02' prior: 50660553!
test05JuanPerezDataIsImportedCorrectly

	| customer |
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.	
	self assertCustomer: customer hasAddressWithProvince: 'CABA'  andStreetName: 'Alem' andStreetNumber: 1122 andZipCode: 1001 andTown: 'CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:27:02' prior: 50660739!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ system 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:27:39' prior: 50662162!
test01
	| stream |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SuplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:30:21' prior: 50662310!
test01
	| stream |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SuplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:32:46' prior: 50662318!
test01
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SuplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSuplierWithName: 'Supplier1' andIdNumber: 123.
	! !

!classRenamed: #SuplierImporter as: #SupplierImporter stamp: 'eaam 11/23/2023 18:32:55'!
Smalltalk renameClassNamed: #SuplierImporter as: #SupplierImporter!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:32:55' prior: 50662326!
test01
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSuplierWithName: 'Supplier1' andIdNumber: 123.
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:33:09' prior: 50662343!
test01
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSupplierWithName: 'Supplier1' andIdNumber: 123.
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:35:15' prior: 50662355!
test01
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (suplier nameIs: 'Supplier1').
	self assert: (suplier idTypeIs: 'D').
	self assert: (suplier idnumberIs: '123').! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:35:23'!
ERROR!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:35:41' overrides: 50661782!
importRecord
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 18:36:31' prior: 50660950!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
	customerSystem addCustomer: newCustomer! !

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:36:54'!
Object subclass: #CSVImporter
	instanceVariableNames: 'system inputStream line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:36:54' prior: 50661610!
initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStream

	system := aCustomerSystemToRecordDataOn.
	inputStream := anInputStream.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:36:54' prior: 50662391!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
	system addCustomer: newCustomer! !

!classDefinition: #Suplier category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:37:44'!
Object subclass: #Suplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:37:34' prior: 50662386 overrides: 50661782!
importRecord
	| newSupplier |
	newSupplier := Suplier with:
	system addCustomer: 1.! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:38:19' prior: 50662444 overrides: 50661782!
importRecord
	| newSupplier |
	newSupplier := Suplier name:
	system addCustomer: 1.! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:39:16' prior: 50662451 overrides: 50661782!
importRecord
	| newSupplier |
	newSupplier := Suplier name: record second identificationType: record third identificationNumber: record fourth.
	system addCustomer: newSupplier.! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:39:23'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:39:23'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:39:23'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:39:23'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:39:23'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:39:24'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:39:24'!
ERROR!
!Suplier class methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:39:33'!
name: aRenameMe1 identificationType: aRenameMe2 identificationNumber: aRenameMe3 
	self shouldBeImplemented.! !
!Suplier class methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:39:41' prior: 50662522!
name: aName identificationType: aRenameMe2 identificationNumber: aRenameMe3 
	self shouldBeImplemented.! !
!Suplier class methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:39:54' prior: 50662529!
name: aName identificationType: aIdentificationType identificationNumber: aRenameMe3 
	self shouldBeImplemented.! !
!Suplier class methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:40:04' prior: 50662536!
name: aName identificationType: aIdentificationType identificationNumber: aIdentificationNumber 
	self shouldBeImplemented.! !
!Suplier class methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:40:47' prior: 50662543!
name: aName identificationType: aIdentificationType identificationNumber: aIdentificationNumber 
	^self new initializeWithName: aName identificationType: aIdentificationType identificationNumber: aIdentificationNumber .! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:40:54'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:40:54'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:40:54'!
ERROR!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:40:58'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:40:58'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:40:58'!
ERROR!

!classDefinition: #Suplier category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:41:10'!
Object subclass: #Suplier
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Suplier category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:41:10'!
Object subclass: #Suplier
	instanceVariableNames: 'name identificationType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Suplier category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:41:10'!
Object subclass: #Suplier
	instanceVariableNames: 'name identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Suplier methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:41:10'!
initializeWithName: aName identificationType: aIdentificationType identificationNumber: aIdentificationNumber 
	self shouldBeImplemented.
	name := aName.
	identificationType := aIdentificationType.
	identificationNumber := aIdentificationNumber.! !
!Suplier methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:41:16' prior: 50662693!
initializeWithName: aName identificationType: aIdentificationType identificationNumber: aIdentificationNumber 
	name := aName.
	identificationType := aIdentificationType.
	identificationNumber := aIdentificationNumber.! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:41:49'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:41:49'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:41:49'!
ERROR!
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:42:05'!
numberOfSuppliers
	self shouldBeImplemented.! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:42:47' prior: 50662769!
numberOfSuppliers
	^(self selectAllOfType: Suplier ) size.! !
!PersistentErpSystem methodsFor: 'transaction management' stamp: 'eaam 11/23/2023 18:43:32' prior: 50661139 overrides: 50661062!
beginTransaction
	session beginTransaction .! !
!TransientErpSystem methodsFor: 'transaction management' stamp: 'eaam 11/23/2023 18:43:37' prior: 50661169 overrides: 50661062!
beginTransaction! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:43:41'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:43:41'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:43:41'!
ERROR!
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:43:54'!
getSupplierWithName: aRenameMe1 andIdNumber: aRenameMe2 
	self shouldBeImplemented.! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:44:09' prior: 50662845!
getSupplierWithName: aRenameMe1 andIdNumber: aRenameMe2 
	^self shouldBeImplemented.! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:44:34' prior: 50662851!
getSupplierWithName: aRenameMe1 andIdNumber: aRenameMe2 
	^1.! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:45:35' prior: 50662857!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^self select: [:supplier |] ofType: Suplier .! !

!classRenamed: #Suplier as: #Supp stamp: 'eaam 11/23/2023 18:46:00'!
Smalltalk renameClassNamed: #Suplier as: #Supp!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:46:00' prior: 50662458 overrides: 50661782!
importRecord
	| newSupplier |
	newSupplier := Supp name: record second identificationType: record third identificationNumber: record fourth.
	system addCustomer: newSupplier.! !
!TransientErpSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:46:00' prior: 50662774!
numberOfSuppliers
	^(self selectAllOfType: Supp ) size.! !
!TransientErpSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:46:01' prior: 50662863!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^self select: [:supplier |] ofType: Supp .! !

!classRenamed: #Supp as: #Supplierr stamp: 'eaam 11/23/2023 18:46:22'!
Smalltalk renameClassNamed: #Supp as: #Supplierr!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:46:22' prior: 50662874 overrides: 50661782!
importRecord
	| newSupplier |
	newSupplier := Supplierr name: record second identificationType: record third identificationNumber: record fourth.
	system addCustomer: newSupplier.! !
!TransientErpSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:46:22' prior: 50662883!
numberOfSuppliers
	^(self selectAllOfType: Supplierr ) size.! !
!TransientErpSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:46:22' prior: 50662889!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^self select: [:supplier |] ofType: Supplierr .! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:47:51' prior: 50662915!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^self select: [:aSupplier | aSupplier hasName: aName andIdNumber: aIdNumber] ofType: Supplierr .! !
!Supplierr methodsFor: 'initialization' stamp: 'eaam 11/23/2023 18:48:26'!
hasName: aName andIdNumber: aIdNumber
	^aName = name and: (aIdNumber = identificationNumber )! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:48:51' prior: 50662367!
test01
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (suplier hasName: 'Supplier1' andIdNumber: '123').
	self assert: (suplier idTypeIs: 'D').! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:48:54'!
ERROR!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:48:54'!
ERROR!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:49:17'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:49:17'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:49:17'!
ERROR!
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 18:49:40' prior: 50662922!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^(self select: [:aSupplier | aSupplier hasName: aName andIdNumber: aIdNumber] ofType: Supplierr) anyOne .! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:49:43'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:49:43'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:49:43'!
ERROR!
!Supplierr methodsFor: 'testing' stamp: 'eaam 11/23/2023 18:49:52'!
idTypeIs: aRenameMe1 
	self shouldBeImplemented.! !
!Supplierr methodsFor: 'testing' stamp: 'eaam 11/23/2023 18:49:59' prior: 50663075!
idTypeIs: aIdType 
	self shouldBeImplemented.! !
!Supplierr methodsFor: 'testing' stamp: 'eaam 11/23/2023 18:50:09' prior: 50663080!
idTypeIs: aIdType 
	^identificationType = aIdType .! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:50:43'!
PASSED!

	Undeclared!

self removeKey: #Supplier!

!classRenamed: #Supplierr as: #Supplier stamp: 'eaam 11/23/2023 18:52:22'!
Smalltalk renameClassNamed: #Supplierr as: #Supplier!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:52:22' prior: 50662900 overrides: 50661782!
importRecord
	| newSupplier |
	newSupplier := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system addCustomer: newSupplier.! !
!TransientErpSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:52:22' prior: 50662909!
numberOfSuppliers
	^(self selectAllOfType: Supplier ) size.! !
!TransientErpSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:52:22' prior: 50663012!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^(self select: [:aSupplier | aSupplier hasName: aName andIdNumber: aIdNumber] ofType: Supplier) anyOne .! !

Object subclass: #Supplierr
	instanceVariableNames: 'name identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'.
	Undeclared!

!classDefinition: #Supplierr category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:52:30'!
Object subclass: #Supplierr
	instanceVariableNames: 'name identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Supplierr stamp: 'eaam 11/23/2023 18:52:45'!
Object subclass: #Supplierr
	instanceVariableNames: 'name identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:52:48'!
PASSED!
!ErpSystem methodsFor: 'customer management' stamp: 'eaam 11/23/2023 18:55:25'!
add: anObject

	self subclassResponsibility! !
!PersistentErpSystem methodsFor: 'customer management' stamp: 'eaam 11/23/2023 18:55:25' overrides: 50663197!
add: anObject 
	session persist: anObject.! !
!TransientErpSystem methodsFor: 'customer management' stamp: 'eaam 11/23/2023 18:55:25' overrides: 50663197!
add: anObject 
	dataCollection add: anObject.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:55:25' prior: 50663099 overrides: 50661782!
importRecord
	| newSupplier |
	newSupplier := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newSupplier.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 18:55:25' prior: 50662423!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
	system add: newCustomer! !

!methodRemoval: ErpSystem #addCustomer: stamp: 'eaam 11/23/2023 18:55:25'!
addCustomer: anObject

	self subclassResponsibility!

!methodRemoval: PersistentErpSystem #addCustomer: stamp: 'eaam 11/23/2023 18:55:25'!
addCustomer: anObject 
	session persist: anObject.!

!methodRemoval: TransientErpSystem #addCustomer: stamp: 'eaam 11/23/2023 18:55:25'!
addCustomer: anObject 
	dataCollection add: anObject.!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:55:38'!
PASSED!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:55:59'!
Object subclass: #Party
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:55:59'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Party subclass: #Supplier
	instanceVariableNames: 'name identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:56:10'!
Party subclass: #Supplier
	instanceVariableNames: 'name identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Party subclass: #Supplier
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:56:43'!
Party subclass: #Supplier
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:56:58'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'eaam 11/23/2023 18:57:01'!
Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 18:57:05'!
PASSED!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:02:21'!
test02
	| stream supplier |
	
	stream := ReadStream on: 
		'S,Supplier1,D,123
		A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier addresses size) equals: 1.
	self assert: (supplier).! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/23/2023 19:02:43'!
assertParty: theOwnerOfTheAddress hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |
	
	address := theOwnerOfTheAddress addressAt: aStreetNameToCheck ifNone: [self fail.].

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:02:43' prior: 50662284!
test05JuanPerezDataIsImportedCorrectly

	| customer |
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := self getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.	
	self assertParty: customer hasAddressWithProvince: 'CABA'  andStreetName: 'Alem' andStreetNumber: 1122 andZipCode: 1001 andTown: 'CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:02:43' prior: 50662042!
test04PepeSanchezDataIsImportedCorrectly

	| customer |

	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := self getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	
	self assertParty: customer hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber: 3322 andZipCode: 1636 andTown: 'Olivos'.
	
	self assertParty: customer hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber: 		888 andZipCode: 1122 andTown: 'Florida' .
! !

!methodRemoval: ImportTest #assertCustomer:hasAddressWithProvince:andStreetName:andStreetNumber:andZipCode:andTown: stamp: 'eaam 11/23/2023 19:02:43'!
assertCustomer: theOwnerOfTheAddress hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |
	
	address := theOwnerOfTheAddress addressAt: aStreetNameToCheck ifNone: [self fail.].

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:03:31' prior: 50663431!
test02
	| stream supplier |
	
	stream := ReadStream on: 
		'S,Supplier1,D,123
		A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier addresses size) equals: 1.
	self assert: (supplier assertParty: supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:03:32'!
ERROR!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:03:32'!
ERROR!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:03:36'!
ERROR!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:03:36'!
ERROR!
!Supplier methodsFor: 'accessing' stamp: 'eaam 11/23/2023 19:03:41'!
addresses
	self shouldBeImplemented.! !

Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:04:00'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:04:04'!
Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'accessing' stamp: 'eaam 11/23/2023 19:04:20' prior: 50663544!
addresses
	^addresses! !

!methodRemoval: Supplier #addresses stamp: 'eaam 11/23/2023 19:05:44'!
addresses
	^addresses!
!Supplier methodsFor: 'accessing' stamp: 'eaam 11/23/2023 19:06:06'!
numberOfAddresses
	^addresses size! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:06:18' prior: 50663517!
test02
	| stream supplier |
	
	stream := ReadStream on: 
		'S,Supplier1,D,123
		A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier assertParty: supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !
!Supplier methodsFor: 'accessing' stamp: 'eaam 11/23/2023 19:08:19'!
addressAt: aStreetNameToSearchFor withNumber: theNumberOfTheAddress
	! !
!Supplier methodsFor: 'accessing' stamp: 'eaam 11/23/2023 19:09:23'!
hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck! !
!Supplier methodsFor: 'accessing' stamp: 'eaam 11/23/2023 19:11:12' prior: 50663609!
hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck
	^(addresses select: [ : anAddress | 
		anAddress province = aProvinceToCheck .
		anAddress streetNumber = aStreetNumberToCheck .
		anAddress streetName = aStreetNameToCheck .
		anAddress zipCode = aZipCodeToCheck .
		anAddress town = aTownToCheck . ]) isEmpty not.! !
!Supplier methodsFor: 'accessing' stamp: 'eaam 11/23/2023 19:13:19' prior: 50663617!
hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck
	^(addresses select: [ : anAddress | 
		anAddress hasProvince: aProvinceToCheck streetNumber: aStreetNumberToCheck streetName: aStreetNameToCheck  zipCode:  aZipCodeToCheck town: aTownToCheck . ]) isEmpty not.! !
!Address methodsFor: 'nil' stamp: 'eaam 11/23/2023 19:14:53'!
hasProvince: aProvinceToCheck streetNumber: aStreetNumberToCheck streetName: aStreetNameToCheck  zipCode:  aZipCodeToCheck town: aTownToCheck
	^
	(aProvinceToCheck = province) 
	and: (aStreetNumberToCheck = streetNumber) 
	and: (aStreetNameToCheck = streetName)
	and: (aZipCodeToCheck = zipCode)
	and: (aTownToCheck = town)! !
!Address methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:15:08' prior: 50663648!
hasProvince: aProvinceToCheck streetNumber: aStreetNumberToCheck streetName: aStreetNameToCheck  zipCode:  aZipCodeToCheck town: aTownToCheck
	^(aProvinceToCheck = province) 
	and: (aStreetNumberToCheck = streetNumber) 
	and: (aStreetNameToCheck = streetName)
	and: (aZipCodeToCheck = zipCode)
	and: (aTownToCheck = town)! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:15:53'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:15:53'!
ERROR!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:15:53'!
ERROR!
!Supplier methodsFor: 'initialization' stamp: 'eaam 11/23/2023 19:16:19' prior: 50662704!
initializeWithName: aName identificationType: aIdentificationType identificationNumber: aIdentificationNumber 
	name := aName.
	identificationType := aIdentificationType.
	identificationNumber := aIdentificationNumber.
	addresses := OrderedCollection new.! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:16:22'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:16:22'!
FAILURE!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:16:22'!
FAILURE!
!Party methodsFor: 'addresses' stamp: 'eaam 11/23/2023 19:16:51'!
addAddress: anAddress

	self subclassResponsibility! !

!methodRemoval: Party #addAddress: stamp: 'eaam 11/23/2023 19:16:58'!
addAddress: anAddress

	self subclassResponsibility!
!Party methodsFor: 'addresses' stamp: 'eaam 11/23/2023 19:17:07'!
addAddress: anAddress

	addresses add: anAddress ! !

!methodRemoval: Customer #addAddress: stamp: 'eaam 11/23/2023 19:17:07'!
addAddress: anAddress

	addresses add: anAddress !

!classDefinition: #CLAESEQUENOSECOMOLLAMAR category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:17:36'!
CSVImporter subclass: #CLAESEQUENOSECOMOLLAMAR
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:17:36'!
CLAESEQUENOSECOMOLLAMAR subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CLAESEQUENOSECOMOLLAMAR subclass: #SupplierImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:17:43'!
CLAESEQUENOSECOMOLLAMAR subclass: #SupplierImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:18:25'!
CLAESEQUENOSECOMOLLAMAR subclass: #CustomerImporter
	instanceVariableNames: 'newParty newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:18:25' prior: 50660998!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not or: (newParty isNil)) ifTrue: [self error: self invalidAddressRecord].! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:18:25' prior: 50663222!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:18:25' prior: 50660936!
importAddress

	self signalIfRecordHasNotSixParameters .

	newAddress := Address new.
			newParty addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:18:30'!
CLAESEQUENOSECOMOLLAMAR subclass: #CustomerImporter
	instanceVariableNames: 'newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CLAESEQUENOSECOMOLLAMAR category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:18:31'!
CSVImporter subclass: #CLAESEQUENOSECOMOLLAMAR
	instanceVariableNames: 'newParty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:18:31'!
CLAESEQUENOSECOMOLLAMAR subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CLAESEQUENOSECOMOLLAMAR category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:18:31'!
CSVImporter subclass: #CLAESEQUENOSECOMOLLAMAR
	instanceVariableNames: 'newParty newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 19:18:31'!
importAddress

	self signalIfRecordHasNotSixParameters .

	newAddress := Address new.
			newParty addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!methodRemoval: CustomerImporter #importAddress stamp: 'eaam 11/23/2023 19:18:31'!
importAddress

	self signalIfRecordHasNotSixParameters .

	newAddress := Address new.
			newParty addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:18:37'!
FAILURE!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:18:37'!
FAILURE!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 19:19:01'!
importParty

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:19:01' prior: 50660964 overrides: 50661782!
importRecord

	self signalIfRecordIsEmpty.
	(self isCustomerRecord) ifTrue: [ ^self importParty ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord! !

!methodRemoval: CustomerImporter #importCustomer stamp: 'eaam 11/23/2023 19:19:02'!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 19:19:05'!
importParty

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !

!methodRemoval: CustomerImporter #importParty stamp: 'eaam 11/23/2023 19:19:05'!
importParty

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 19:19:16' overrides: 50663891!
importParty

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !

!methodRemoval: CLAESEQUENOSECOMOLLAMAR #importParty stamp: 'eaam 11/23/2023 19:19:16'!
importParty

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 19:19:26'!
importParty

	self subclassResponsibility! !
!SupplierImporter methodsFor: 'nil' stamp: 'eaam 11/23/2023 19:20:00' overrides: 50663939!
importParty

	self signalIfRecordHasNotFourParameters .
		
	newParty := Supplier new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:20:16' prior: 50663944 overrides: 50663939!
importParty

	self signalIfRecordHasNotFourParameters .
		
	newParty := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newParty! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'error handling' stamp: 'eaam 11/23/2023 19:20:38'!
invalidAddressRecord
	^'an address record must have 6 parameters'.! !

!methodRemoval: CustomerImporter #invalidAddressRecord stamp: 'eaam 11/23/2023 19:20:38'!
invalidAddressRecord
	^'an address record must have 6 parameters'.!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'input validation' stamp: 'eaam 11/23/2023 19:21:34'!
isAddressRecord

	^ record first = 'A'! !

!methodRemoval: CustomerImporter #isAddressRecord stamp: 'eaam 11/23/2023 19:21:34'!
isAddressRecord

	^ record first = 'A'!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'input validation' stamp: 'eaam 11/23/2023 19:21:46'!
recordHasValidType

	self subclassResponsibility! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'input validation' stamp: 'eaam 11/23/2023 19:22:00'!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not or: (newParty isNil)) ifTrue: [self error: self invalidAddressRecord].! !

!methodRemoval: CustomerImporter #signalIfRecordHasNotSixParameters stamp: 'eaam 11/23/2023 19:22:00'!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not or: (newParty isNil)) ifTrue: [self error: self invalidAddressRecord].!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 19:23:21' overrides: 50661782!
importRecord

	self subclassResponsibility! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:24:10' prior: 50663213 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:24:39' prior: 50663957 overrides: 50663939!
importParty

	self signalIfRecordHasNotFourParameters .
		
	newParty := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newParty! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:26:29' prior: 50664012 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [^self importParty].
	self error: self invalidRecord.! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:26:37'!
isSupplierRecord
	^true! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:26:46' prior: 50664040!
isSupplierRecord
	^true! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:26:50'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:26:50'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 19:26:50'!
PASSED!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:27:14' prior: 50664044!
isSupplierRecord
	^ record first = 'S'! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:27:22'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:27:22'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 19:27:22'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:27:24'!
ERROR!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:27:35'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:27:35'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 19:27:35'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:27:36'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:27:40'!
signalIfRecordHasNotFourParameters
	self shouldBeImplemented.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:28:01' prior: 50664224!
signalIfRecordHasNotFourParameters
	((record size = 5 ) not) ifTrue: [self error: self invalidSupplierRecord].! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:28:06' prior: 50664230!
signalIfRecordHasNotFourParameters
	((record size = 4 ) not) ifTrue: [self error: self invalidSupplierRecord].! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:28:35' prior: 50664021 overrides: 50663939!
importParty

	"self signalIfRecordHasNotFourParameters ."
		
	newParty := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newParty! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:28:36'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 19:28:36'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:28:36'!
ERROR!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:28:58' prior: 50664031 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [ ^self importParty.].
	self error: self invalidRecord.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:29:30' prior: 50663586!
test02
	| stream supplier |
	
	stream := ReadStream on: 
		'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier assertParty: supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:29:31'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:29:39' prior: 50664322!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier assertParty: supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:29:40'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:30:01' prior: 50664343!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 19:30:04'!
PASSED!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:30:46' prior: 50664364!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:30:55' prior: 50664437!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:31:29' prior: 50664456!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').
	self assert: (supplier hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber:  888 andZipCode: 1122 andTown: 'Buenos Aires').! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:31:43'!
test03
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').
	self assert: (supplier hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber:  888 andZipCode: 1122 andTown: 'Buenos Aires').! !

!methodRemoval: ImportTest #test02 stamp: 'eaam 11/23/2023 19:31:43'!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').
	self assert: (supplier hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber:  888 andZipCode: 1122 andTown: 'Buenos Aires').!

!testRun: #ImportTest #test03 stamp: 'eaam 11/23/2023 19:31:46'!
FAILURE!

!testRun: #ImportTest #test03 stamp: 'eaam 11/23/2023 19:31:46'!
FAILURE!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:32:10'!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test03 stamp: 'eaam 11/23/2023 19:32:11'!
FAILURE!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 19:32:11'!
PASSED!

!testRun: #ImportTest #test03 stamp: 'eaam 11/23/2023 19:32:11'!
FAILURE!

!testRun: #ImportTest #test02 stamp: 'eaam 11/23/2023 19:32:23'!
PASSED!

!testRun: #ImportTest #test03 stamp: 'eaam 11/23/2023 19:32:25'!
FAILURE!

!testRun: #ImportTest #test03 stamp: 'eaam 11/23/2023 19:32:25'!
FAILURE!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:33:08' prior: 50664498!
test03
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').
	self assert: (supplier hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber:  888 andZipCode: 1122 andTown: 'Florida').! !

!testRun: #ImportTest #test03 stamp: 'eaam 11/23/2023 19:33:10'!
PASSED!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:33:23'!
test01SupplierIsImportedCorrectly
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (suplier hasName: 'Supplier1' andIdNumber: '123').
	self assert: (suplier idTypeIs: 'D').! !

!methodRemoval: ImportTest #test01 stamp: 'eaam 11/23/2023 19:33:23'!
test01
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (suplier hasName: 'Supplier1' andIdNumber: '123').
	self assert: (suplier idTypeIs: 'D').!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:33:34'!
test02SupplierAddressesIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').! !

!methodRemoval: ImportTest #test02 stamp: 'eaam 11/23/2023 19:33:34'!
test02
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 1.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:33:51'!
test03MultipleSupplierAddressesAreImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').
	self assert: (supplier hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber:  888 andZipCode: 1122 andTown: 'Florida').! !

!methodRemoval: ImportTest #test03 stamp: 'eaam 11/23/2023 19:33:51'!
test03
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').
	self assert: (supplier hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber:  888 andZipCode: 1122 andTown: 'Florida').!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:34:19'!
test04SupplierCanImportExistingCustomerCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfAddresses ) equals: 2.
	self assert: (supplier hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber:  3322 andZipCode: 1636 andTown: 'Olivos').
	self assert: (supplier hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber:  888 andZipCode: 1122 andTown: 'Florida').! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:35:11' prior: 50664774!
test04SupplierCanImportExistingCustomerCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774').
! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:35:14'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:35:14'!
ERROR!
!SupplierImporter methodsFor: 'nil' stamp: 'eaam 11/23/2023 19:35:55'!
isExistingCustomerRecord
! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 19:36:11' prior: 50664822!
isExistingCustomerRecord
	^ record first = 'EC'
! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:36:22'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:36:22'!
ERROR!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:36:54' prior: 50664313 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [ ^self importParty.].
	(self isExistingCustomerRecord) ifTrue: [ ^self importExistingCustomer ].
	self error: self invalidRecord.! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:36:58'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:36:58'!
ERROR!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:37:04'!
importExistingCustomer
	self shouldBeImplemented.! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:38:00' prior: 50664859!
importExistingCustomer
	! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:40:36' prior: 50664864!
importExistingCustomer
	(system hasCustomerWithIDType: record second andIDNumber: record third) ifFalse: [ self error: self cantAddNonexistentCustomerAsExisting ].
	! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:41:44' prior: 50664868!
importExistingCustomer

	| idType idNumber |
	
	idType := record second.
	idNumber := record third.
	(system hasCustomerWithIDType: idType andIDNumber: idNumber) ifFalse: [ self error: self cantAddNonexistentCustomerAsExisting ].
	newParty addCustomerWithIDType: record second! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:42:04' prior: 50664877!
importExistingCustomer

	| idType idNumber |
	
	idType := record second.
	idNumber := record third.
	(system hasCustomerWithIDType: idType andIDNumber: idNumber) ifFalse: [ self error: self cantAddNonexistentCustomerAsExisting ].
	newParty addCustomerWithIDType: idType andIDNumber: idNumber .! !
!TransientErpSystem methodsFor: 'customer management' stamp: 'eaam 11/23/2023 19:44:41'!
hasCustomerWithIDType: idType andIDNumber: idNumber
	^(self select: [ : aCustomer | aCustomer hasIDType: idType andIDNumber: idNumber] ofType: Customer) isEmpty not! !
!TransientErpSystem methodsFor: 'customer management' stamp: 'eaam 11/23/2023 19:44:54' prior: 50664902!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: idNumber
	^(self select: [ : aCustomer | aCustomer hasIDType: anIDTypeToCheck andIDNumber: idNumber] ofType: Customer) isEmpty not! !
!TransientErpSystem methodsFor: 'customer management' stamp: 'eaam 11/23/2023 19:44:59' prior: 50664911!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck
	^(self select: [ : aCustomer | aCustomer hasIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck] ofType: Customer) isEmpty not! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/23/2023 19:45:42'!
hasIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck
	^(identificationType = anIDTypeToCheck) and: (identificationNumber = anIDNumberToCheck)! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:45:56'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:45:56'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:46:27' prior: 50664799!
test04SupplierCanImportExistingCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774').
! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:47:04' prior: 50664945!
test04SupplierCanImportExistingCustomerCorrectly
	| supplierStream customerStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	customerStream := 'C,Juan,Perez,D,5456774'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774').
! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:47:19' prior: 50664962!
test04SupplierCanImportExistingCustomerCorrectly
	| supplierStream customerStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	customerStream := 'C,Juan,Perez,D,5456774'.
	(CustomerImporter forSystemToRecordOn: system andInputStream: customerStream ).
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774').
! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:47:20'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:47:20'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:47:30' prior: 50664981!
test04SupplierCanImportExistingCustomerCorrectly
	| supplierStream customerStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	customerStream := 'C,Juan,Perez,D,5456774'.
	(CustomerImporter forSystemToRecordOn: system andInputStream: customerStream ) import.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774').
! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:47:31'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:47:31'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:48:10'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:48:10'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:48:26' prior: 50665010!
test04SupplierCanImportExistingCustomerCorrectly
	| supplierStream customerStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	customerStream := ReadStream on: 'C,Juan,Perez,D,5456774'.
	(CustomerImporter forSystemToRecordOn: system andInputStream: customerStream ) import.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774').
! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:48:27'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:48:27'!
ERROR!
!Supplier methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:48:44'!
addCustomerWithIDType: idType andIDNumber: idNumber 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:48:53' prior: 50665075!
addCustomerWithIDType: theIDTypeOfTheCustomerToAdd andIDNumber: idNumber 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:48:58' prior: 50665081!
addCustomerWithIDType: theIDTypeOfTheCustomerToAdd andIDNumber: theIDNumberOfTheCustomerToAdd 
	self shouldBeImplemented.! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:50:53' prior: 50664889!
importExistingCustomer

	| idType idNumber customer |
	
	idType := record second.
	idNumber := record third.
	(system hasCustomerWithIDType: idType andIDNumber: idNumber) ifFalse: [ self error: self cantAddNonexistentCustomerAsExisting ].	
	
	newParty addCustomerWithIDType: idType andIDNumber: idNumber .! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:51:36'!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^( self getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne! !
!ErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:52:08'!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer

	self subclassResponsibility! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:53:18' prior: 50665108 overrides: 50665116!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 
! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:54:45'!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ self select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer.! !
!TransientErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:55:17' prior: 50665124 overrides: 50665116!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^(self getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne! !
!ErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:55:25'!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ self select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer.! !

!methodRemoval: TransientErpSystem #getAllCustomersWithIDType:andIDNumber: stamp: 'eaam 11/23/2023 19:55:25'!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ self select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer.!
!ErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:55:42' prior: 50665116!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^(self getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne! !

!methodRemoval: TransientErpSystem #getCustomerWithIDType:andIDNumber: stamp: 'eaam 11/23/2023 19:55:42'!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^(self getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne!
!ErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:55:47'!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^(self select: [:aSupplier | aSupplier hasName: aName andIdNumber: aIdNumber] ofType: Supplier) anyOne .! !

!methodRemoval: TransientErpSystem #getSupplierWithName:andIdNumber: stamp: 'eaam 11/23/2023 19:55:47'!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^(self select: [:aSupplier | aSupplier hasName: aName andIdNumber: aIdNumber] ofType: Supplier) anyOne .!
!ErpSystem methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:55:52'!
numberOfSuppliers
	^(self selectAllOfType: Supplier ) size.! !

!methodRemoval: TransientErpSystem #numberOfSuppliers stamp: 'eaam 11/23/2023 19:55:52'!
numberOfSuppliers
	^(self selectAllOfType: Supplier ) size.!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:55:57'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:55:57'!
ERROR!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:56:56' prior: 50665095!
importExistingCustomer

	| idType idNumber customer |
	
	idType := record second.
	idNumber := record third.
	
	system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newParty addCustomerWithIDType: idType andIDNumber: idNumber .! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:57:13' prior: 50665225!
importExistingCustomer

	| idType idNumber customer |
	
	idType := record second.
	idNumber := record third.
	
	customer := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newParty addCustomer: customer .! !

!methodRemoval: Supplier #addCustomerWithIDType:andIDNumber: stamp: 'eaam 11/23/2023 19:57:17'!
addCustomerWithIDType: theIDTypeOfTheCustomerToAdd andIDNumber: theIDNumberOfTheCustomerToAdd 
	self shouldBeImplemented.!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'eaam 11/23/2023 19:57:31'!
Party subclass: #Supplier
	instanceVariableNames: 'name customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:57:29'!
addCustomer: aCustomerToAdd
	customers add: aCustomerToAdd ! !
!Supplier methodsFor: 'initialization' stamp: 'eaam 11/23/2023 19:58:21' prior: 50663682!
initializeWithName: aName identificationType: aIdentificationType identificationNumber: aIdentificationNumber 
	name := aName.
	identificationType := aIdentificationType.
	identificationNumber := aIdentificationNumber.
	addresses := OrderedCollection new.
	customers := OrderedCollection new.! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:58:54'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:58:54'!
ERROR!
!Supplier methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:59:00'!
numberOfCustomers
	self shouldBeImplemented.! !
!Supplier methodsFor: 'category-name' stamp: 'eaam 11/23/2023 19:59:07' prior: 50665284!
numberOfCustomers
	^customers size! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:59:09'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 19:59:09'!
ERROR!
!Supplier methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:00:15'!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck
	! !
!Supplier methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:02:40'!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck andFirstName: aFirstNameToCheck 
	! !

!methodRemoval: Supplier #hasCustomerWithIDType:andIDNumber: stamp: 'eaam 11/23/2023 20:02:40'!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck
	!
!Supplier methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:02:56'!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck andFirstName: aFirstNameToCheck andLastName: aLastNameToCheck  
	! !

!methodRemoval: Supplier #hasCustomerWithIDType:andIDNumber:andFirstName: stamp: 'eaam 11/23/2023 20:02:56'!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck andFirstName: aFirstNameToCheck 
	!
!Supplier methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:03:48' prior: 50665316!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck andFirstName: aFirstNameToCheck andLastName: aLastNameToCheck  
	"^(customers select: [ : aCustomer | aCustomer hasIDType: "
	! !
!Supplier methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:05:45' prior: 50665330!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck andFirstName: aFirstNameToCheck andLastName: aLastNameToCheck  
	^(customers select: [ : aCustomer | aCustomer hasFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck ] isEmpty not)
	! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:06:50'!
hasFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck 
	^(aFirstNameToCheck = firstName) and:
	(aLastNameToCheck = lastName ) and:
	(anIDTypeToCheck = identificationType ) and:
	(anIDNumberToCheck = identificationNumber )! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:07:01' prior: 50665352!
hasFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck 
	^(aFirstNameToCheck = firstName) 
	and:	(aLastNameToCheck = lastName ) 
	and:	(anIDTypeToCheck = identificationType ) 
	and:	(anIDNumberToCheck = identificationNumber )! !

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:05'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:05'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:07:05'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:07:05'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:07:05'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:07:31' prior: 50665046!
test04SupplierCanImportExistingCustomerCorrectly
	| supplierStream customerStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	customerStream := ReadStream on: 'C,Juan,Perez,D,5456774'.
	(CustomerImporter forSystemToRecordOn: system andInputStream: customerStream ) import.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774' andFirstName: 'Juan' andLastName: 'Perez').
! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:07:32'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:07:32'!
ERROR!
!Supplier methodsFor: 'testing' stamp: 'eaam 11/23/2023 20:07:39' prior: 50665339!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck andFirstName: aFirstNameToCheck andLastName: aLastNameToCheck  
	^(customers select: [ : aCustomer | aCustomer hasFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck ]) isEmpty not
	! !

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:07:41'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 20:07:48'!
PASSED!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:08:10'!
test04SupplierCanImportnNewCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
EC,D,5456774'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774' andFirstName: 'Juan' andLastName: 'Perez').
! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:08:28' prior: 50665506!
test04SupplierCanImportnNewCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '5456774' andFirstName: 'Juan' andLastName: 'Perez').
! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:08:39' prior: 50665524!
test04SupplierCanImportnNewCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '22333444' andFirstName: 'Pepe' andLastName: 'Sanchez').
! !

!testRun: #ImportTest #test04SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:08:40'!
ERROR!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:09:02' prior: 50664840 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [ ^self importParty.].
	(self isExistingCustomerRecord) ifTrue: [ ^self importExistingCustomer ].
	(self isNewCustomerRecord) ifTrue: [ ^self importExistingCustomer ].
	self error: self invalidRecord.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:09:11'!
isNewCustomerRecord
! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:09:17' prior: 50665580!
isNewCustomerRecord
	^ record first = 'NC'
! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:09:29' prior: 50665566 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [ ^self importParty.].
	(self isExistingCustomerRecord) ifTrue: [ ^self importExistingCustomer ].
	(self isNewCustomerRecord) ifTrue: [ ^self importNewCustomer ].
	self error: self invalidRecord.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:09:53'!
importNewCustomer
	! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:10:40'!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:10:40' prior: 50663870 overrides: 50664006!
importRecord

	self signalIfRecordIsEmpty.
	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord! !

!methodRemoval: CustomerImporter #importParty stamp: 'eaam 11/23/2023 20:10:40'!
importParty

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:10:42'!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !

!methodRemoval: CustomerImporter #importCustomer stamp: 'eaam 11/23/2023 20:10:42'!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:10:51'!
importSupplier

	"self signalIfRecordHasNotFourParameters ."
		
	newParty := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newParty! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:10:51' prior: 50665590 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [ ^self importSupplier.].
	(self isExistingCustomerRecord) ifTrue: [ ^self importExistingCustomer ].
	(self isNewCustomerRecord) ifTrue: [ ^self importNewCustomer ].
	self error: self invalidRecord.! !

!methodRemoval: SupplierImporter #importParty stamp: 'eaam 11/23/2023 20:10:51'!
importParty

	"self signalIfRecordHasNotFourParameters ."
		
	newParty := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newParty!

!methodRemoval: CLAESEQUENOSECOMOLLAMAR #importParty stamp: 'eaam 11/23/2023 20:10:59'!
importParty

	self subclassResponsibility!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'input validation' stamp: 'eaam 11/23/2023 20:11:10'!
signalIfRecordHasNotFiveParameters

	((record size = 5 ) not) ifTrue: [self error: self invalidCustomerRecord].! !

!methodRemoval: CustomerImporter #signalIfRecordHasNotFiveParameters stamp: 'eaam 11/23/2023 20:11:10'!
signalIfRecordHasNotFiveParameters

	((record size = 5 ) not) ifTrue: [self error: self invalidCustomerRecord].!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'error handling' stamp: 'eaam 11/23/2023 20:11:17'!
invalidCustomerRecord
	^'an custoer record must have 5 parameters'! !

!methodRemoval: CustomerImporter #invalidCustomerRecord stamp: 'eaam 11/23/2023 20:11:17'!
invalidCustomerRecord
	^'an custoer record must have 5 parameters'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:11:40' prior: 50665604!
importNewCustomer
	self importCustomer ! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:11:48' prior: 50665729!
importNewCustomer
	self importCustomer .
	self importExistingCustomer ! !

!classDefinition: #CLAESEQUENOSECOMOLLAMAR category: 'CustomerImporter' stamp: 'eaam 11/23/2023 20:13:48'!
CSVImporter subclass: #CLAESEQUENOSECOMOLLAMAR
	instanceVariableNames: 'newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:13:48' prior: 50663990!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:13:48' prior: 50665642!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
	system add: newCustomer! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:13:48' prior: 50663825!
importAddress

	self signalIfRecordHasNotSixParameters .

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:13:48' prior: 50665236!
importExistingCustomer

	| idType idNumber customer |
	
	idType := record second.
	idNumber := record third.
	
	customer := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newCustomer addCustomer: customer .! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:13:48' prior: 50665666!
importSupplier

	"self signalIfRecordHasNotFourParameters ."
		
	newCustomer := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newCustomer! !

CLAESEQUENOSECOMOLLAMAR subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 20:13:57'!
CLAESEQUENOSECOMOLLAMAR subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:14:02' prior: 50665785!
importExistingCustomer

	| idType idNumber customer |
	
	idType := record second.
	idNumber := record third.
	
	customer := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newSupplier addCustomer: customer .! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:14:13' prior: 50665796!
importSupplier

	"self signalIfRecordHasNotFourParameters ."
		
	newSupplier := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newSupplier! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:14:29' prior: 50665734!
importNewCustomer
	self importCustomer .
	newSupplier add: newCustomer ! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:14:47' prior: 50665820!
importExistingCustomer

	| idType idNumber customer |
	
	idType := record second.
	idNumber := record third.
	
	newCustomer := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newSupplier addCustomer: newCustomer .! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:14:51' prior: 50665847!
importExistingCustomer

	| idType idNumber |
	
	idType := record second.
	idNumber := record third.
	
	newCustomer := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newSupplier addCustomer: newCustomer .! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:14:58'!
test05SupplierCanImportnNewCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '22333444' andFirstName: 'Pepe' andLastName: 'Sanchez').
! !

!methodRemoval: ImportTest #test04SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:14:58'!
test04SupplierCanImportnNewCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '22333444' andFirstName: 'Pepe' andLastName: 'Sanchez').
!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:15:01'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:15:01'!
ERROR!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:15:01'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:15:01'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:15:01'!
ERROR!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:15:03'!
ERROR!

record size!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'input validation' stamp: 'eaam 11/23/2023 20:16:11' prior: 50665749!
signalIfRecordHasNotSixParameters

	(((record size = 6 ) not) or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'input validation' stamp: 'eaam 11/23/2023 20:16:49' prior: 50665928!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not) ifTrue: [self error: self invalidAddressRecord].! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:17:07' prior: 50665770!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'error handling' stamp: 'eaam 11/23/2023 20:17:16'!
signalAddressHasNoOwner
	self subclassResponsibility ! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 20:18:00' overrides: 50665959!
signalAddressHasNoOwner
	(newCustomer isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'error handling' stamp: 'eaam 11/23/2023 20:18:19'!
addressMustHaveOwnerErrorMessage
	^'Addresses must have an owner'! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:18:44' overrides: 50665959!
signalAddressHasNoOwner
	(newCustomer isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:18:51' prior: 50665977 overrides: 50665959!
signalAddressHasNoOwner
	(newSupplier isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]! !

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:18:58'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:18:58'!
ERROR!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:18:58'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:18:58'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:18:58'!
ERROR!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:18:59'!
ERROR!

!classDefinition: #CLAESEQUENOSECOMOLLAMAR category: 'CustomerImporter' stamp: 'eaam 11/23/2023 20:20:47'!
CSVImporter subclass: #CLAESEQUENOSECOMOLLAMAR
	instanceVariableNames: 'newParty newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:20:47' prior: 50665944!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newParty addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:20:47' prior: 50665757!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:20:47' prior: 50665964 overrides: 50665959!
signalAddressHasNoOwner
	(newParty isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:20:47' prior: 50665858!
importExistingCustomer

	| idType idNumber |
	
	idType := record second.
	idNumber := record third.
	
	newParty := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newSupplier addCustomer: newParty .! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:20:47' prior: 50665841!
importNewCustomer
	self importCustomer .
	newSupplier add: newParty ! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'error handling' stamp: 'eaam 11/23/2023 20:20:56' prior: 50665959!
signalAddressHasNoOwner
	(newParty isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]! !

!methodRemoval: CustomerImporter #signalAddressHasNoOwner stamp: 'eaam 11/23/2023 20:20:56'!
signalAddressHasNoOwner
	(newParty isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]!

!methodRemoval: SupplierImporter #signalAddressHasNoOwner stamp: 'eaam 11/23/2023 20:21:00'!
signalAddressHasNoOwner
	(newSupplier isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 20:21:12'!
CLAESEQUENOSECOMOLLAMAR subclass: #SupplierImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:21:12' prior: 50666068!
importNewCustomer
	self importCustomer .
	newCustomer add: newParty ! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:21:12' prior: 50665831!
importSupplier

	"self signalIfRecordHasNotFourParameters ."
		
	newCustomer := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:21:12' prior: 50666058!
importExistingCustomer

	| idType idNumber |
	
	idType := record second.
	idNumber := record third.
	
	newParty := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newCustomer addCustomer: newParty .! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:28:48' overrides: 50666038!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:28:48' overrides: 50666038!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:28:48' prior: 50666038!
importCustomer

	self subclassResponsibility! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'eaam 11/23/2023 20:29:15'!
CLAESEQUENOSECOMOLLAMAR subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:29:15' prior: 50666102!
importNewCustomer
	self importCustomer .
	newSupplier add: newParty ! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:29:15' prior: 50666108!
importSupplier

	"self signalIfRecordHasNotFourParameters ."
		
	newSupplier := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newSupplier! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:29:15' prior: 50666118!
importExistingCustomer

	| idType idNumber |
	
	idType := record second.
	idNumber := record third.
	
	newParty := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newSupplier addCustomer: newParty .! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:29:37' prior: 50666155!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty! !

!methodRemoval: CustomerImporter #importCustomer stamp: 'eaam 11/23/2023 20:29:37'!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty!

!methodRemoval: SupplierImporter #importCustomer stamp: 'eaam 11/23/2023 20:29:37'!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newParty := Customer new.
			newParty firstName: record second.
			newParty lastName: record third.
			newParty identificationType: record fourth.
			newParty identificationNumber: record fifth.
	system add: newParty!

!classDefinition: #CLAESEQUENOSECOMOLLAMAR category: 'CustomerImporter' stamp: 'eaam 11/23/2023 20:30:18'!
CSVImporter subclass: #CLAESEQUENOSECOMOLLAMAR
	instanceVariableNames: 'newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:30:18' prior: 50666074!
signalAddressHasNoOwner
	(newCustomer isNil) ifTrue: [ self error: self addressMustHaveOwnerErrorMessage ]! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:30:18' prior: 50666022!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:30:18' prior: 50666196!
importCustomer

	self signalIfRecordHasNotFiveParameters .
		
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
	system add: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:30:18' prior: 50666185!
importExistingCustomer

	| idType idNumber |
	
	idType := record second.
	idNumber := record third.
	
	newCustomer := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newSupplier addCustomer: newCustomer .! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:30:18' prior: 50666169!
importNewCustomer
	self importCustomer .
	newSupplier add: newCustomer ! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:30:30' overrides: 50666248!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:30:30' overrides: 50666248!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:30:30' prior: 50666248!
importAddress

	self subclassResponsibility! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:30:41' prior: 50666294 overrides: 50666326!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:30:49' prior: 50666332 overrides: 50666326!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.
	
	newCustomer addAddress: newAddress.! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:31:06'!
createAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:31:06' prior: 50666347 overrides: 50666326!
importAddress

	self createAddress.
	
	newCustomer addAddress: newAddress.! !
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:31:32' prior: 50666310 overrides: 50666326!
importAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
	
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.
			
	newSupplier addAddress: newAddress.! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:31:48'!
createAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!methodRemoval: CustomerImporter #createAddress stamp: 'eaam 11/23/2023 20:31:48'!
createAddress

	self signalIfRecordHasNotSixParameters .
	self signalAddressHasNoOwner.

	newAddress := Address new.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth!
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:32:09' prior: 50666384 overrides: 50666326!
importAddress
	self createAddress.
			
	newSupplier addAddress: newAddress.! !
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:32:11' prior: 50666428 overrides: 50666326!
importAddress

	self createAddress.
			
	newSupplier addAddress: newAddress.! !
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 20:32:23' prior: 50666326!
importAddress

	self subclassResponsibility! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:32:27'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:32:27'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 20:32:27'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:32:29'!
ERROR!
!CLAESEQUENOSECOMOLLAMAR methodsFor: 'input validation' stamp: 'eaam 11/23/2023 20:33:14' prior: 50666241!
signalAddressHasNoOwner

	^self subclassResponsibility .! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 20:34:04' overrides: 50666519!
signalAddressHasNoOwner! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 20:35:11' prior: 50666525 overrides: 50666519!
signalAddressHasNoOwner
	(newCustomer isNil) ifTrue: [self error: self ]! !
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 20:35:29' prior: 50666530 overrides: 50666519!
signalAddressHasNoOwner
	(newCustomer isNil) ifTrue: [self error: self addressMustHaveOwnerErrorMessage]! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:35:44' overrides: 50666519!
signalAddressHasNoOwner
	(newSupplier isNil) ifTrue: [self error: self addressMustHaveOwnerErrorMessage]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:35:54'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:35:54'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 20:35:54'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:35:57'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/23/2023 20:36:36' prior: 50662067!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer addressMustHaveOwnerErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 20:36:40'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:36:40'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:37:31' prior: 50666288!
importNewCustomer
	self importCustomer .
	newSupplier addCustomer: newCustomer ! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 20:37:35'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 20:38:02'!
PASSED!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:38:43'!
test05SupplierCanImportNewCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '22333444' andFirstName: 'Pepe' andLastName: 'Sanchez').
! !

!methodRemoval: ImportTest #test05SupplierCanImportnNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:38:43'!
test05SupplierCanImportnNewCustomerCorrectly
	| supplierStream supplier |
	
	supplierStream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: supplierStream) import.
	
	supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (supplier numberOfCustomers ) equals: 1.
	self assert: (supplier hasCustomerWithIDType: 'D' andIDNumber: '22333444' andFirstName: 'Pepe' andLastName: 'Sanchez').
!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:39:51'!
test06FailImportingWhenSupplierRecordHasLessThanFourParameters

	| importer|
	importer := Supplier forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Hernan,D,123').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidCustomerRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:40:10' prior: 50666890!
test06FailImportingWhenSupplierRecordHasLessThanFourParameters

	| importer|
	importer := Supplier forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Hernan,D').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidSupplierRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:40:11'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:40:11'!
ERROR!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:40:20' prior: 50666904!
test06FailImportingWhenSupplierRecordHasLessThanFourParameters

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Hernan,D').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidSupplierRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:40:21'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:40:21'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:40:30'!
invalidSupplierRecord
	self shouldBeImplemented.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:41:00' prior: 50666949!
invalidSupplierRecord
	^'Supplier record must have 4 parameters'! !

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:41:04'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:41:04'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:41:04'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:41:04'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:41:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:41:04'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:41:04'!
FAILURE!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:41:26' prior: 50666175!
importSupplier

	self signalIfRecordHasNotFourParameters .
		
	newSupplier := Supplier name: record second identificationType: record third identificationNumber: record fourth.
	system add: newSupplier! !

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:41:36'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:41:36'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:41:36'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:41:36'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:41:36'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:41:36'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:41:55'!
test07FailImportingWhenSupplierRecordHasMoreThanFourParameters

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Hernan,D,123, smalltalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidSupplierRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 20:41:58'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:42:45'!
test8FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:42:52'!
test08FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !

!methodRemoval: ImportTest #test8FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:42:52'!
test8FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:42:53'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:43:19'!
test09FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:43:42' prior: 50667049!
test08FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:43:43'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:43:52' prior: 50667081!
test09FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .! !

!testRun: #ImportTest #test09FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:43:56'!
PASSED!

!methodRemoval: ImportTest #test09FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:44:30'!
test09FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:45:12'!
test09FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer addressMustHaveOwnerErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:45:14'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:45:26'!
test09FailImportingWhenAddressHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer addressMustHaveOwnerErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!methodRemoval: ImportTest #test09FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:45:26'!
test09FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer addressMustHaveOwnerErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:46:22'!
test10FailImportingWhenNewCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'EC,D,545677').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer addressMustHaveOwnerErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test10FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:46:26'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:46:26'!
FAILURE!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:46:41' prior: 50667194!
test10FailImportingWhenNewCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'EC,D,545677').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer customersMustHaveASupplierErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!SupplierImporter methodsFor: 'nil' stamp: 'eaam 11/23/2023 20:47:01'!
customersMustHaveASupplierErrorMessage
	^'Customers must have associated suppleir'! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:47:03' prior: 50667231!
customersMustHaveASupplierErrorMessage
	^'Customers must have associated supplier'! !
!SupplierImporter methodsFor: 'category-name' stamp: 'eaam 11/23/2023 20:47:53' prior: 50666277!
importExistingCustomer

	| idType idNumber |
	
	self signalCustomerHasAnAssociatedSupplier.
	
	idType := record second.
	idNumber := record third.
	
	newCustomer := system getCustomerWithIDType: idType andIDNumber: idNumber.
	
	newSupplier addCustomer: newCustomer .! !
!SupplierImporter methodsFor: 'nil' stamp: 'eaam 11/23/2023 20:48:00'!
signalCustomerHasAnAssociatedSupplier
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:48:21' prior: 50667254!
signalCustomerHasAnAssociatedSupplier
	(newSupplier isNil) ifTrue: [self error: self customersMustHaveASupplierErrorMessage ]
	! !

!testRun: #ImportTest #test10FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:48:26'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:48:36'!
test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'EC,D,545677').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer customersMustHaveASupplierErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!methodRemoval: ImportTest #test10FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:48:36'!
test10FailImportingWhenNewCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'EC,D,545677').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer customersMustHaveASupplierErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:48:53'!
test11FailImportingWhenNewCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'NC,Pepe,Sanchez,D,22333444').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer customersMustHaveASupplierErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:48:55'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:48:55'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:49:12' prior: 50666710!
importNewCustomer
	self importCustomer .
	self signalCustomerHasAnAssociatedSupplier .
	newSupplier addCustomer: newCustomer ! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 20:49:21' prior: 50667324!
importNewCustomer
	self signalCustomerHasAnAssociatedSupplier .
	self importCustomer .
	
	newSupplier addCustomer: newCustomer ! !

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:49:23'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:50:53' prior: 50667300!
test11FailImportingWhenNewCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'NC,Pepe,Sanchez,D,22333444').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer customersMustHaveASupplierErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:52:07'!
test12FailImportingWhenSupplierRecordTypeIsNotS

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'Smalltalk,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 20:52:36'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:53:40'!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'ECosistema,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		self assert: self customerSystemDataIsEmpty.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:53:51' prior: 50667377!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'ECosistema,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier  := 1.
		self assert: self customerSystemDataIsEmpty.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:54:16' prior: 50667394!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'ECosistema,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: self customerSystemDataIsEmpty.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:55:08' prior: 50667411!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'ECosistema,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 1 andIdNumber: 1. 
		self assert: self customerSystemDataIsEmpty.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:55:29' prior: 50667430!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
ECosistema,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 1 andIdNumber: 1. 
		self assert: self customerSystemDataIsEmpty.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:55:46' prior: 50667449!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
ECosistema,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: 123. 
		self assert: self customerSystemDataIsEmpty.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:55:59' prior: 50667467!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
ECosistema,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self assert: self customerSystemDataIsEmpty.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:56:20' prior: 50667485!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
ECosistema,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self assert: self customerSystemDataIsEmpty.
		self assert: supplier
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:57:01' prior: 50667504!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
ECosistema,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self assert: self customerSystemDataIsEmpty.
		self assert: supplier numberOfCustomers equals: 0.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:57:43'!
test14FailImportingWhenNewCustomerRecordTypeIsNotNC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
NCR,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self assert: self customerSystemDataIsEmpty.
		self assert: supplier numberOfCustomers equals: 0.
		] .
	! !

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 20:57:44'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 20:57:44'!
FAILURE!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:57:57' prior: 50667523!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
ECosistema,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self assert: supplier numberOfCustomers equals: 0.
		] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 20:58:02' prior: 50667543!
test14FailImportingWhenNewCustomerRecordTypeIsNotNC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
NCR,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self assert: supplier numberOfCustomers equals: 0.
		] .
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 20:58:05'!
PASSED!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:00:03' prior: 50667590!
test14FailImportingWhenNewCustomerRecordTypeIsNotNC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
NCR,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self deny: (system hasCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis').
		self assert: supplier numberOfCustomers equals: 0.
		] .
	! !

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:00:04'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:00:09'!
PASSED!

Smalltalk at: #env put: 'a'.!

Smalltalk at: #env put: 'int'.!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:00:36'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:36'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:36'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:37'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:37'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:00:37'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:38'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:00:38'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:00:39'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:00:39'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:00:40'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:00:40'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:00:40'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:00:40'!
FAILURE!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:00:47'!
ERROR!
!PersistentErpSystem methodsFor: 'initialization' stamp: 'eaam 11/23/2023 21:01:32' prior: 50661108 overrides: 50661076!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer with: Supplier).! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:01:41'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:01:42'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:01:42'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:01:43'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:01:43'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:01:43'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:01:44'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:01:44'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:01:44'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:01:45'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:01:45'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:01:46'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:01:46'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:01:46'!
FAILURE!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:01:49'!
ERROR!

Party subclass: #Customer
	instanceVariableNames: 'firstName lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'eaam 11/23/2023 21:03:10'!
Party subclass: #Customer
	instanceVariableNames: 'firstName lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #Party
	instanceVariableNames: 'id identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'eaam 11/23/2023 21:03:13'!
Object subclass: #Party
	instanceVariableNames: 'id identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:03:18'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:19'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:19'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:19'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:03:20'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:20'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:03:21'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:21'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:03:22'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:03:23'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:03:23'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:03:23'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:03:23'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:03:23'!
ERROR!
!ErpSystem methodsFor: 'customer management' stamp: 'eaam 11/23/2023 21:03:39'!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck
	^(self select: [ : aCustomer | aCustomer hasIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck] ofType: Customer) isEmpty not! !

!methodRemoval: TransientErpSystem #hasCustomerWithIDType:andIDNumber: stamp: 'eaam 11/23/2023 21:03:39'!
hasCustomerWithIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck
	^(self select: [ : aCustomer | aCustomer hasIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck] ofType: Customer) isEmpty not!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:03:44'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:45'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:45'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:45'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:46'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:03:46'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:47'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:03:47'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:03:48'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:03:49'!
PASSED!

Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env put: 'dev'.!
!Party methodsFor: 'accessing' stamp: 'eaam 11/23/2023 21:04:50'!
hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck
	^(addresses select: [ : anAddress | 
		anAddress hasProvince: aProvinceToCheck streetNumber: aStreetNumberToCheck streetName: aStreetNameToCheck  zipCode:  aZipCodeToCheck town: aTownToCheck . ]) isEmpty not.! !

!methodRemoval: Supplier #hasAddressWithProvince:andStreetName:andStreetNumber:andZipCode:andTown: stamp: 'eaam 11/23/2023 21:04:50'!
hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck
	^(addresses select: [ : anAddress | 
		anAddress hasProvince: aProvinceToCheck streetNumber: aStreetNumberToCheck streetName: aStreetNameToCheck  zipCode:  aZipCodeToCheck town: aTownToCheck . ]) isEmpty not.!
!Supplier methodsFor: 'testing' stamp: 'eaam 11/23/2023 21:05:15'!
hasName: aName andIDType: anIDTypeToCheck andIdNumber: aIdNumber
	^aName = name and: (aIdNumber = identificationNumber )! !
!ErpSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 21:05:15' prior: 50665192!
getSupplierWithName: aName andIdNumber: aIdNumber 
	^(self select: [:aSupplier | aSupplier hasName: aName andIDType: 'D' andIdNumber: aIdNumber] ofType: Supplier) anyOne .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 21:05:15' prior: 50664662!
test01SupplierIsImportedCorrectly
	| stream suplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	(SupplierImporter forSystemToRecordOn: system andInputStream: stream) import.
	
	self assert: system numberOfSuppliers equals: 1.
	
	suplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'.
	
	self assert: (suplier hasName: 'Supplier1' andIDType: 'D' andIdNumber: '123').
	self assert: (suplier idTypeIs: 'D').! !

!methodRemoval: Supplier #hasName:andIdNumber: stamp: 'eaam 11/23/2023 21:05:15'!
hasName: aName andIdNumber: aIdNumber
	^aName = name and: (aIdNumber = identificationNumber )!
!Party methodsFor: 'accessing' stamp: 'eaam 11/23/2023 21:05:24'!
numberOfAddresses
	^addresses size! !

!methodRemoval: Supplier #numberOfAddresses stamp: 'eaam 11/23/2023 21:05:24'!
numberOfAddresses
	^addresses size!

!methodRemoval: Supplier #addressAt:withNumber: stamp: 'eaam 11/23/2023 21:05:40'!
addressAt: aStreetNameToSearchFor withNumber: theNumberOfTheAddress
	!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:05:47'!
PASSED!

!methodRemoval: PersistentErpSystem #beginTransaction stamp: 'eaam 11/23/2023 21:06:47'!
beginTransaction
	session beginTransaction .!

!methodRemoval: TransientErpSystem #beginTransaction stamp: 'eaam 11/23/2023 21:06:51'!
beginTransaction!

!methodRemoval: ErpSystem #beginTransaction stamp: 'eaam 11/23/2023 21:06:53'!
beginTransaction

	self subclassResponsibility!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:06:57'!
PASSED!

!classRenamed: #CLAESEQUENOSECOMOLLAMAR as: #RecordImporter stamp: 'eaam 11/23/2023 21:09:37'!
Smalltalk renameClassNamed: #CLAESEQUENOSECOMOLLAMAR as: #RecordImporter!

!classRenamed: #RecordImporter as: #XImporter stamp: 'eaam 11/23/2023 21:09:53'!
Smalltalk renameClassNamed: #RecordImporter as: #XImporter!
!XImporter methodsFor: 'error messages' stamp: 'eaam 11/23/2023 21:11:23'!
invalidAddressRecordErrorMessage
	^'an address record must have 6 parameters'.! !
!XImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 21:11:23' prior: 50665936!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not) ifTrue: [self error: self invalidAddressRecordErrorMessage].! !

!methodRemoval: XImporter #invalidAddressRecord stamp: 'eaam 11/23/2023 21:11:23'!
invalidAddressRecord
	^'an address record must have 6 parameters'.!
!XImporter methodsFor: 'error messages' stamp: 'eaam 11/23/2023 21:11:30'!
invalidCustomerRecordErrorMessage
	^'an custoer record must have 5 parameters'! !
!XImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/23/2023 21:11:30' prior: 50665704!
signalIfRecordHasNotFiveParameters

	((record size = 5 ) not) ifTrue: [self error: self invalidCustomerRecordErrorMessage].! !

!methodRemoval: XImporter #invalidCustomerRecord stamp: 'eaam 11/23/2023 21:11:30'!
invalidCustomerRecord
	^'an custoer record must have 5 parameters'!
!XImporter class methodsFor: 'error messages' stamp: 'eaam 11/23/2023 21:11:37'!
invalidCustomerRecordErrorMessage
	^'an custoer record must have 5 parameters'! !

!methodRemoval: XImporter #invalidCustomerRecordErrorMessage stamp: 'eaam 11/23/2023 21:11:37'!
invalidCustomerRecordErrorMessage
	^'an custoer record must have 5 parameters'!
!XImporter class methodsFor: 'error messages' stamp: 'eaam 11/23/2023 21:11:42'!
invalidAddressRecordErrorMessage
	^'an address record must have 6 parameters'.! !

!methodRemoval: XImporter #invalidAddressRecordErrorMessage stamp: 'eaam 11/23/2023 21:11:42'!
invalidAddressRecordErrorMessage
	^'an address record must have 6 parameters'.!
!XImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 21:11:57' prior: 50668650!
signalIfRecordHasNotFiveParameters

	((record size = 5 ) not) ifTrue: [self error: self class invalidCustomerRecordErrorMessage].! !
!XImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 21:12:02' prior: 50668633!
signalIfRecordHasNotSixParameters

	((record size = 6 ) not) ifTrue: [self error: self class invalidAddressRecordErrorMessage].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:12:08'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:12:08'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:12:08'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:12:08'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:12:08'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:12:10'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:12:22'!
ERROR!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:12:39' prior: 50662201!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidCustomerRecordErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:12:43'!
ERROR!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:12:53' prior: 50662147!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidCustomerRecordErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:13:00' prior: 50662265!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidAddressRecordErrorMessage 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:13:05' prior: 50662114!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidAddressRecordErrorMessage 
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:13:09'!
PASSED!

!classRenamed: #XImporter as: #PartyImporter stamp: 'eaam 11/23/2023 21:13:43'!
Smalltalk renameClassNamed: #XImporter as: #PartyImporter!

!classRenamed: #PartyImporter as: #PartyDataImporter stamp: 'eaam 11/23/2023 21:13:53'!
Smalltalk renameClassNamed: #PartyImporter as: #PartyDataImporter!
!PartyDataImporter class methodsFor: 'error handling' stamp: 'eaam 11/23/2023 21:14:05'!
addressMustHaveOwnerErrorMessage
	^'Addresses must have an owner'! !

!methodRemoval: PartyDataImporter #addressMustHaveOwnerErrorMessage stamp: 'eaam 11/23/2023 21:14:05'!
addressMustHaveOwnerErrorMessage
	^'Addresses must have an owner'!
!CustomerImporter methodsFor: 'input validation' stamp: 'eaam 11/23/2023 21:14:22' prior: 50666537 overrides: 50666519!
signalAddressHasNoOwner
	(newCustomer isNil) ifTrue: [self error: self class addressMustHaveOwnerErrorMessage]! !
!SupplierImporter class methodsFor: 'input validation' stamp: 'eaam 11/23/2023 21:15:33'!
customersMustHaveASupplierErrorMessage
	^'Customers must have associated supplier'! !

!methodRemoval: SupplierImporter #customersMustHaveASupplierErrorMessage stamp: 'eaam 11/23/2023 21:15:33'!
customersMustHaveASupplierErrorMessage
	^'Customers must have associated supplier'!
!SupplierImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 21:15:44' prior: 50666544 overrides: 50666519!
signalAddressHasNoOwner
	(newSupplier isNil) ifTrue: [self error: self class addressMustHaveOwnerErrorMessage]! !
!SupplierImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 21:15:55' prior: 50667259!
signalCustomerHasAnAssociatedSupplier
	(newSupplier isNil) ifTrue: [self error: self class customersMustHaveASupplierErrorMessage ]
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:00'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:00'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:00'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:16:00'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:16:00'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:01'!
ERROR!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:16:08' prior: 50667163!
test09FailImportingWhenAddressHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class addressMustHaveOwnerErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:11'!
ERROR!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:16:16' prior: 50667270!
test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'EC,D,545677').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class customersMustHaveASupplierErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:16:25' prior: 50667343!
test11FailImportingWhenNewCustomerHasNoAssociatedSupplier

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'NC,Pepe,Sanchez,D,22333444').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class customersMustHaveASupplierErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:16:29' prior: 50666622!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class addressMustHaveOwnerErrorMessage 
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:16:31'!
PASSED!
!CSVImporter class methodsFor: 'error handling' stamp: 'eaam 11/23/2023 21:17:07'!
invalidRecord
	^'record cant be empty and every line must start with "C" or "A"'! !

!methodRemoval: CSVImporter #invalidRecord stamp: 'eaam 11/23/2023 21:17:07'!
invalidRecord
	^'record cant be empty and every line must start with "C" or "A"'!
!CSVImporter methodsFor: 'error handling' stamp: 'eaam 11/23/2023 21:17:11' prior: 50661897!
signalIfRecordIsEmpty

	^ (record isEmpty) ifTrue: [ self error: self class invalidRecord ]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:17:13'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:17:13'!
ERROR!
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:17:17' prior: 50667095!
test08FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:17:21' prior: 50662250!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord 
	withCondition: [self assert: self customerSystemDataIsEmpty]
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:17:24' prior: 50662186!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:17:34' prior: 50667358!
test12FailImportingWhenSupplierRecordTypeIsNotS

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'Smalltalk,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:17:38' prior: 50662083!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [| customer |
		customer := self getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
		! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:17:43' prior: 50667571!
test13FailImportingWhenExistingCustomerRecordTypeIsNotEC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
ECosistema,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self assert: supplier numberOfCustomers equals: 0.
		] .
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:17:47' prior: 50662170!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [self assert: self customerSystemDataIsEmpty] .! !
!ImportTest methodsFor: 'supplier tests' stamp: 'eaam 11/23/2023 21:17:50' prior: 50667711!
test14FailImportingWhenNewCustomerRecordTypeIsNotNC

	| importer|
	importer := SupplierImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'S,Supplier1,D,123
NCR,Hernan,0,smallTalk,cuis').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [ | supplier |
		supplier := system getSupplierWithName: 'Supplier1' andIdNumber: '123'. 
		self deny: (system hasCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis').
		self assert: supplier numberOfCustomers equals: 0.
		] .
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:17:53'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:17:53'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:17:53'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:17:53'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:17:53'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:17:53'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:17:53'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:17:53'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:17:58'!
ERROR!
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:18:09' prior: 50665677 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [ ^self importSupplier.].
	(self isExistingCustomerRecord) ifTrue: [ ^self importExistingCustomer ].
	(self isNewCustomerRecord) ifTrue: [ ^self importNewCustomer ].
	self error: super class invalidRecord.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:18:12'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:18:12'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:18:12'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:18:12'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:18:14'!
ERROR!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:18:20' prior: 50665621 overrides: 50664006!
importRecord

	self signalIfRecordIsEmpty.
	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: super class invalidRecord! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:18:23'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:23'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:23'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:23'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:18:24'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:18:32'!
PASSED!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:19:04' prior: 50660455!
assertCustomerImporterOnlyImportsOneOfEachCustomer

	| listOfSanchez listOfPerez|
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := system getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1! !

!methodRemoval: ImportTest #getAllCustomersWithIDType:andIDNumber: stamp: 'eaam 11/23/2023 21:19:20'!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ system 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:19:28' prior: 50670017!
assertCustomerImporterOnlyImportsOneOfEachCustomer

	| listOfSanchez listOfPerez|
	listOfSanchez := system getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := system getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:19:34' prior: 50660480!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^( system getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:20:10' prior: 50662133!
test02PepeSanchezIsImportedCorrectly

	| customer |	
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self assertCustomer: customer haveFirstName: 'Pepe' andLastName: 'Sanchez' andIDType: 'D' andIDNumber: '22333444' .	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:20:16' prior: 50662216!
test03JuanPerezIsImportedCorrectly

	| customer |
	
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self assertCustomer: customer haveFirstName: 'Juan' andLastName: 'Perez' andIDType: 'C' andIDNumber: '23-25666777-9'.! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:20:20' prior: 50663478!
test04PepeSanchezDataIsImportedCorrectly

	| customer |

	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	
	self assertParty: customer hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber: 3322 andZipCode: 1636 andTown: 'Olivos'.
	
	self assertParty: customer hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber: 		888 andZipCode: 1122 andTown: 'Florida' .
! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:20:25' prior: 50663464!
test05JuanPerezDataIsImportedCorrectly

	| customer |
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.	
	self assertParty: customer hasAddressWithProvince: 'CABA'  andStreetName: 'Alem' andStreetNumber: 1122 andZipCode: 1001 andTown: 'CABA'! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:20:30' prior: 50668845!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidAddressRecordErrorMessage 
	withCondition: [| customer |
		customer := system getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:20:35' prior: 50668864!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidAddressRecordErrorMessage 
	withCondition: [| customer |
		customer := system getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:20:38' prior: 50669499!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [| customer |
		customer := system getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer addresses isEmpty.]
		! !

!methodRemoval: ImportTest #getCustomerWithIDType:andIDNumber: stamp: 'eaam 11/23/2023 21:20:43'!
getCustomerWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer 

	^( system getAllCustomersWithIDType: theTypeOfID andIDNumber: theIDNumberOfTheCustomer) anyOne!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:20:46'!
PASSED!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:22:24' prior: 50669802 overrides: 50664006!
importRecord

	self signalIfRecordIsEmpty.
	
	self error: super class invalidRecord! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:22:52'!
checkRecordTypeAndImportIt
	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:23:12' prior: 50670297 overrides: 50664006!
importRecord

	self signalIfRecordIsEmpty.
	^self checkRecordTypeAndImportIt 
	self error: super class invalidRecord! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:23:56' prior: 50670312 overrides: 50664006!
importRecord

	self signalIfRecordIsEmpty.
	self checkRecordTypeAndImportIt 
	! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:24:05' prior: 50670303!
checkRecordTypeAndImportIt
	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: super class invalidRecord! !
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:24:25' prior: 50669681 overrides: 50664006!
importRecord
	self signalIfRecordIsEmpty.
	self checkRecordTypeAndImportIt.! !
!SupplierImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:24:39'!
checkRecordTypeAndImportIt
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	(self isSupplierRecord) ifTrue: [ ^self importSupplier.].
	(self isExistingCustomerRecord) ifTrue: [ ^self importExistingCustomer ].
	(self isNewCustomerRecord) ifTrue: [ ^self importNewCustomer ].
	self error: super class invalidRecord.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:24:45'!
PASSED!
!PartyDataImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:24:56'!
checkRecordTypeAndImportIt

	self subclassResponsibility! !
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:25:06' prior: 50670320 overrides: 50664006!
importRecord
	self checkRecordTypeAndImportIt 
	! !
!CSVImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:25:30' prior: 50661782!
importRecord
	self signalIfRecordIsEmpty.
	self subclassResponsibility! !
!CSVImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:26:00'!
checkRecordTypeAndImportIt

	self subclassResponsibility! !
!CSVImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/23/2023 21:26:10' prior: 50670470!
importRecord
	self signalIfRecordIsEmpty.
	self checkRecordTypeAndImportIt! !

!methodRemoval: CustomerImporter #importRecord stamp: 'eaam 11/23/2023 21:27:06'!
importRecord
	self checkRecordTypeAndImportIt 
	!

!methodRemoval: SupplierImporter #importRecord stamp: 'eaam 11/23/2023 21:27:12'!
importRecord
	self signalIfRecordIsEmpty.
	self checkRecordTypeAndImportIt.!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:27:19'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:27:19'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:27:25'!
ERROR!

!methodRemoval: PartyDataImporter #importRecord stamp: 'eaam 11/23/2023 21:27:46'!
importRecord

	self subclassResponsibility!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:27:48'!
PASSED!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:29:06' prior: 50670066!
test02PepeSanchezIsImportedCorrectly

	| customer |	
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self assert: (customer hasFirstName: 'Pepe' andLastName: 'Sanchez' andIDType: 'D' andIDNumber:'22333444' ).! !

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:29:12'!
PASSED!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:29:25' prior: 50670080!
test03JuanPerezIsImportedCorrectly

	| customer |
	
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self assert: (customer hasFirstName: 'Juan' andLastName: 'Perez' andIDType: 'C' andIDNumber: '23-25666777-9').! !

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:29:26'!
PASSED!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:29:46' prior: 50670094!
test04PepeSanchezDataIsImportedCorrectly

	| customer |

	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'D' andIDNumber: '22333444'.
	
	self assert: (customer hasAddressWithProvince: 'BsAs' andStreetName: 'San Martin' andStreetNumber: 3322 andZipCode: 1636 andTown: 'Olivos').
	
	self assert: (customer hasAddressWithProvince: 'Buenos Aires' andStreetName: 'Maipu' andStreetNumber: 		888 andZipCode: 1122 andTown: 'Florida') .
! !

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:29:47'!
PASSED!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:29:56' prior: 50670113!
test05JuanPerezDataIsImportedCorrectly

	| customer |
	self importCustomersForReadStream: validInputStream forSystem: system .
	customer := system getCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.	
	self assert: (customer hasAddressWithProvince: 'CABA'  andStreetName: 'Alem' andStreetNumber: 1122 andZipCode: 1001 andTown: 'CABA')! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:29:56'!
PASSED!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:30:16' prior: 50670127!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidAddressRecordErrorMessage 
	withCondition: [| customer |
		customer := system getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer numberOfAddresses equals: 0.]
	! !

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:30:17'!
PASSED!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:30:31' prior: 50670146!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidAddressRecordErrorMessage 
	withCondition: [| customer |
		customer := system getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer numberOfAddresses equals: 0.]
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:30:47' prior: 50670166!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forSystemToRecordOn: system andInputStream: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self forImporter: importer 
	shouldImportCustomersRaiseAnErrorErrorMessage: importer class invalidRecord
	withCondition: [| customer |
		customer := system getCustomerWithIDType: 'smallTalk' andIDNumber: 'cuis'.
		self assert: customer numberOfAddresses equals: 0.]
		! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:30:52'!
PASSED!

!methodRemoval: ImportTest #assertAddress:hasProvince:andStreetNumber:andStreetName:andZipCode:andTown: stamp: 'eaam 11/23/2023 21:31:02'!
assertAddress: anAddressToCompare hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  

	self assert: anAddressToCompare province equals: aProvinceToCheck .
	self assert: anAddressToCompare streetNumber equals: aStreetNumberToCheck .
	self assert: anAddressToCompare streetName equals: aStreetNameToCheck .
	self assert: anAddressToCompare zipCode equals: aZipCodeToCheck .
	self assert: anAddressToCompare town equals: aTownToCheck .!

!methodRemoval: ImportTest #assertCustomer:haveFirstName:andLastName:andIDType:andIDNumber: stamp: 'eaam 11/23/2023 21:31:03'!
assertCustomer: aCustomerToCompare haveFirstName: aFirstNameToCheck andLastName: aLastNameToCheck andIDType: anIDTypeToCheck andIDNumber: anIDNumberToCheck  

	self assert: aCustomerToCompare firstName equals: aFirstNameToCheck .
	self assert: aCustomerToCompare lastName equals: aLastNameToCheck .
	self assert: aCustomerToCompare identificationType equals: anIDTypeToCheck .
	self assert: aCustomerToCompare identificationNumber equals: anIDNumberToCheck .!

!methodRemoval: ImportTest #assertCustomerImporterImportsRightAmountOfCustomers stamp: 'eaam 11/23/2023 21:31:08'!
assertCustomerImporterImportsRightAmountOfCustomers

	| numberOfCostumers |
	numberOfCostumers := (system selectAllOfType: Customer) size.	
	self assert: numberOfCostumers equals: 2!

!methodRemoval: ImportTest #assertCustomerImporterOnlyImportsOneOfEachCustomer stamp: 'eaam 11/23/2023 21:31:12'!
assertCustomerImporterOnlyImportsOneOfEachCustomer

	| listOfSanchez listOfPerez|
	listOfSanchez := system getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := system getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1!

!methodRemoval: ImportTest #assertParty:hasAddressWithProvince:andStreetName:andStreetNumber:andZipCode:andTown: stamp: 'eaam 11/23/2023 21:31:13'!
assertParty: theOwnerOfTheAddress hasAddressWithProvince: aProvinceToCheck andStreetName: aStreetNameToCheck andStreetNumber: aStreetNumberToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck

	| address |
	
	address := theOwnerOfTheAddress addressAt: aStreetNameToCheck ifNone: [self fail.].

	self assertAddress: address hasProvince: aProvinceToCheck andStreetNumber: aStreetNumberToCheck andStreetName: aStreetNameToCheck andZipCode: aZipCodeToCheck andTown: aTownToCheck  !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:31:15'!
ERROR!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 21:31:15'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 21:31:15'!
ERROR!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:31:37'!
assertCustomerImporterImportsRightAmountOfCustomers
	! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:31:45'!
assertCustomerImporterOnlyImportsOneOfEachCustomer
! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 21:32:06' prior: 50671138!
assertCustomerImporterImportsRightAmountOfCustomers
	
	! !

----QUIT----(23 November 2023 21:32:15) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (23 November 2023 23:53:54) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!

!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 23:54:53' prior: 50671148!
assertCustomerImporterImportsRightAmountOfCustomers
	
	| numberOfCostumers |
	numberOfCostumers := (system selectAllOfType: Customer) size.	
	self assert: numberOfCostumers equals: 2! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 23:55:11' prior: 50671143!
assertCustomerImporterOnlyImportsOneOfEachCustomer
	| listOfSanchez listOfPerez|
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 23:55:16'!
ERROR!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 23:55:16'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 23:55:16'!
ERROR!
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 23:55:34' prior: 50671169!
assertCustomerImporterOnlyImportsOneOfEachCustomer
	| listOfSanchez listOfPerez|
	listOfSanchez := system getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1! !
!ImportTest methodsFor: 'customer tests' stamp: 'eaam 11/23/2023 23:56:12' prior: 50671289!
assertCustomerImporterOnlyImportsOneOfEachCustomer
	| listOfSanchez listOfPerez|
	listOfSanchez := system getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := system getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test01SupplierIsImportedCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test02SupplierAddressesIsImportedCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test03MultipleSupplierAddressesAreImportedCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test04SupplierCanImportExistingCustomerCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test05SupplierCanImportNewCustomerCorrectly stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenSupplierRecordHasLessThanFourParameters stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenSupplierRecordHasMoreThanFourParameters stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 23:56:18'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenExistingCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenNewCustomerHasNoAssociatedSupplier stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenSupplierRecordTypeIsNotS stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenExistingCustomerRecordTypeIsNotEC stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenNewCustomerRecordTypeIsNotNC stamp: 'eaam 11/23/2023 23:56:19'!
PASSED!

----QUIT----(23 November 2023 23:56:29) CuisUniversity-5981.image priorSource: 10864058!