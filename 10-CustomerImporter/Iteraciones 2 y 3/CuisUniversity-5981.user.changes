

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (16 November 2023 18:04:08) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CustomerImporter.st----!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:09:16' prior: 50650400 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	inputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:09:19'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:20'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:20'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:21'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:09:22'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:09:56' prior: 50650804 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	inputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test01NewSelectorShouldNotBeEmpty stamp: 'eaam 11/16/2023 18:12:49'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test02NewSelectorShouldNotContainSeparators stamp: 'eaam 11/16/2023 18:12:49'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:49'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:49'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test03ExtractingToSelectorAlreadyDefinedInTheClassRaisesAWarning stamp: 'eaam 11/16/2023 18:12:49'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:50'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test04NewSelectorShouldNotStartWithANumber stamp: 'eaam 11/16/2023 18:12:50'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:50'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:50'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test05NewUnarySelectorShouldNotStartWithASymbol stamp: 'eaam 11/16/2023 18:12:50'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:51'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test06IntervalToExtractIsNotBeforeMethodSourceCodeBoundaries stamp: 'eaam 11/16/2023 18:12:51'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:51'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:51'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test07IntervalToExtractIsNotAfterMethodSourceCodeBoundaries stamp: 'eaam 11/16/2023 18:12:51'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:52'!
m1 ^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test08IntervalToExtractShouldNotContainAReturnExpression stamp: 'eaam 11/16/2023 18:12:52'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:52'!
m1 ^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:52'!
m2

	^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:52' prior: 50651074!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test09ExtractingALiteralCreatesANewMethodAndChangesExistingCodeToCallThatNewMethod stamp: 'eaam 11/16/2023 18:12:52'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:52'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:52'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test10IntervalToExtractDoesNotContainsPartOfTheOriginalSelector stamp: 'eaam 11/16/2023 18:12:52'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:53'!
m1 | localVar | ^ localVar + 3! !

!testRun: #ExtractMethodTest #test11IntervalToExtractDoesNotContainsPartOfLocalVariablesDefinition stamp: 'eaam 11/16/2023 18:12:53'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:53'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:53'!
m1 <annoyingPragma>! !

!testRun: #ExtractMethodTest #test12IntervalToExtractDoesNotContainsPartOfPragmasDefinition stamp: 'eaam 11/16/2023 18:12:53'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:54'!
m1 ^ 3 + ((4))! !

!testRun: #ExtractMethodTest #test13IntervalToExtractShouldBeAValidSmalltalkExpression stamp: 'eaam 11/16/2023 18:12:54'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:54'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:54'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test14ItIsNotPossibleToExtractTheLeftSideOfAnAssignment stamp: 'eaam 11/16/2023 18:12:54'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m1 self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55' prior: 50651236!
m1 self m2! !

!testRun: #ExtractMethodTest #test15ExtractingAListOfStatementsCreatesANewMethodWithoutReturn stamp: 'eaam 11/16/2023 18:12:55'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:55'!
m1 ^ 'hey true'! !

!testRun: #ExtractMethodTest #test16CanNotExtractPartOfALiteral stamp: 'eaam 11/16/2023 18:12:55'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:55'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m1 ^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:55'!
m2

	^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56' prior: 50651291!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test17AStringContainingTheReturnCharacterCanBeExtracted stamp: 'eaam 11/16/2023 18:12:56'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m1
	
	self m3.
	self m4: 5.! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56' prior: 50651323!
m1
	
	self m2.! !

!testRun: #ExtractMethodTest #test18ExtractingAListOfStatementsIncludingDotsRemovesThemAndContinuesWithMethodExtraction stamp: 'eaam 11/16/2023 18:12:56'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:56'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m1 ^ ((42))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56'!
m2

	^ 42! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:56' prior: 50651356!
m1 ^ ((self m2))! !

!testRun: #ExtractMethodTest #test19ASelectionContainingAdditionalParenthesesAtTheBeginningAndOrEndCanBeExtracted stamp: 'eaam 11/16/2023 18:12:56'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m1 | local | ^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m2: local

	^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57' prior: 50651388!
m1 | local | ^ self m2: local! !

!testRun: #ExtractMethodTest #test20ASelectionContainingALocalVariableIsParameterizedOnTheExtractedMessage stamp: 'eaam 11/16/2023 18:12:57'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:57'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m1 ^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57'!
m2

	^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:57' prior: 50651421!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test21ASelectionContainingAdditionalParenthesesOnOneSideCanBeExtractedAndItIsNotTrimmed stamp: 'eaam 11/16/2023 18:12:57'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:58'!
m1 | localVar | ^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:58'!
m2: localVar

	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:58' prior: 50651453!
m1 | localVar | ^ self m2: localVar! !

!testRun: #ExtractMethodTest #test22ItIsPossibleToExtractTheLastExpressionOfAMethod stamp: 'eaam 11/16/2023 18:12:58'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:58'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:58'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test23CanNotExtractWithAnInvalidInterval stamp: 'eaam 11/16/2023 18:12:58'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:59'!
m1 | localVar | localVar _ 8! !

!testRun: #ExtractMethodTest #test24ItIsNotPossibleToExtractAnIntervalIncludingATemporaryAssignmentExpression stamp: 'eaam 11/16/2023 18:12:59'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:12:59'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test25NewUnarySelectorShouldNotContainInvalidCharacters stamp: 'eaam 11/16/2023 18:12:59'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:12:59'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:59'!
m1 ^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:59'!
m2

	^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:12:59' prior: 50651568!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test26ItIsPossibleToExtractAnEntireBlockIncludingALocalAssignment stamp: 'eaam 11/16/2023 18:12:59'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:00'!
m1 ^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:00'!
m2

	^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:00' prior: 50651601!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test27ItIsPossibleToExtractExpressionsWithOptimizedSelectors stamp: 'eaam 11/16/2023 18:13:00'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:00'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:00'!
m1 | localVar | ^ #foo! !

!testRun: #ExtractMethodTest #test28ItIsNotPossibleToExtractALocalVariableInsideOfItsDeclaration stamp: 'eaam 11/16/2023 18:13:00'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m1: arg ^ 2 + arg * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m2: arg

	^ 2 + arg! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01' prior: 50651659!
m1: arg ^ (self m2: arg) * 3! !

!testRun: #ExtractMethodTest #test29ExtractingABinaryExpressionToAKeywordMessageIntroducesParenthesesToNotBreakOriginalPrecedence stamp: 'eaam 11/16/2023 18:13:01'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m1 ^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m2

	^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01' prior: 50651693!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test30ItIsPossibleToExtractAQuotedExpression stamp: 'eaam 11/16/2023 18:13:01'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:01'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m1 ^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01'!
m2

	^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:01' prior: 50651724!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test31ItIsPossibleToExtractExpressionsWithOptimizedSelectorsWhereTheReceiverIsNotASimpleLiteral stamp: 'eaam 11/16/2023 18:13:01'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m1 ^ [ | a | a _ 3 factorial ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02' prior: 50651758!
m1 ^ [ self m2 ]! !

!testRun: #ExtractMethodTest #test32ItIsPossibleToExtractATemporaryDeclarationOfABlockIfItIsNotUsedOutsideOfSelectionInterval stamp: 'eaam 11/16/2023 18:13:02'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:02'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m1 | a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:02' prior: 50651791!
m1 self m2! !

!testRun: #ExtractMethodTest #test33ItIsPossibleToExtractATemporaryDeclarationIfItIsNotUsedOutsideOfSelectionInterval stamp: 'eaam 11/16/2023 18:13:02'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:03'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test34TryingToExtractAMethodWithLessArgumentsThanNeededFails stamp: 'eaam 11/16/2023 18:13:03'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:03'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:03'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test35TryingToExtractAMethodWithMoreArgumentsThanNeededFails stamp: 'eaam 11/16/2023 18:13:03'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m1 ^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m2

	^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04' prior: 50651875!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test36ItIsPossibleToExtractACascadeExpression stamp: 'eaam 11/16/2023 18:13:04'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:04'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m1 | temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04'!
m2

	| temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:04' prior: 50651908!
m1 self m2! !

!testRun: #ExtractMethodTest #test37ItIsPossibleATempDeclarationAlongWithABlock stamp: 'eaam 11/16/2023 18:13:04'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:05'!
m1 ^ (  (3 + 4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:05'!
m2

	^ 3 + 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:05' prior: 50651940!
m1 ^ (  (self m2))! !

!testRun: #ExtractMethodTest #test38ItIsPossibleToExtractCodeThatContainsMultipleParenthesisWithSpacesBetweenThem stamp: 'eaam 11/16/2023 18:13:05'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:05'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:05'!
m1 ^ 42! !

!testRun: #ExtractMethodTest #test39TryingToExtractToAMethodThatExistsInASuperclassRaisesAWarning stamp: 'eaam 11/16/2023 18:13:05'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06'!
m1 |var| var _ 42. ^ var! !

!testRun: #ExtractMethodTest #test40CanNotExtractTemporaryAssignmentWithDeclarationIfTheVariableIsUsedOutsideOfSelectionInterval stamp: 'eaam 11/16/2023 18:13:06'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06'!
m1: arg ^ self! !

!testRun: #ExtractMethodTest #test41CannotExtractPartOfMethodSignature stamp: 'eaam 11/16/2023 18:13:06'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:06'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06'!
m1 10. 10! !
!ClassToExtractMethod methodsFor: 'something' stamp: 'eaam 11/16/2023 18:13:06'!
m2

	^ 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06' prior: 50652047!
m1 self m2. 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:06' prior: 50652054!
m1 self m2. self m2! !

!testRun: #ExtractMethodTest #test42ExtractsManyRepetitionsOnSameMethod stamp: 'eaam 11/16/2023 18:13:06'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07'!
m1 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07'!
m1b 100+10! !
!ClassToExtractMethod methodsFor: 'something' stamp: 'eaam 11/16/2023 18:13:07'!
m2

	^ 10! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07' prior: 50652086!
m1b 100+self m2! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:07' prior: 50652082!
m1 self m2! !

!testRun: #ExtractMethodTest #test43ExtractsRepetitionsOnMoreThanOneMethod stamp: 'eaam 11/16/2023 18:13:07'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:07'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:07'!
m1 true ifTrue: [self m1.
	self m2]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:07'!
m2

	self m1.
	self m2! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:07' prior: 50652121!
m1 true ifTrue: [self m2]! !

!testRun: #ExtractMethodTest #test44CanExtractManyStatementsInsideABlock stamp: 'eaam 11/16/2023 18:13:07'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m1 [true] whileTrue: [ true ifTrue: [ self m1 ].
	true ifTrue: [ self m2 ].
	self m3]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m4

	true ifTrue: [ self m1 ].
	true ifTrue: [ self m2 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08' prior: 50652153!
m1 [true] whileTrue: [ self m4.
	self m3]! !

!testRun: #ExtractMethodTest #test45CanExtractCodeWithMoreThanOneBlockAndABlockAtTheEndInsideAnotherBlock stamp: 'eaam 11/16/2023 18:13:08'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:08'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m1: arg
	[true] whileTrue: [ true ifTrue: [ arg ].]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08'!
m3: argModified

	^ true ifTrue: [ argModified ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:08' prior: 50652189!
m1: arg
	[true] whileTrue: [ self m3: arg.]! !

!testRun: #ExtractMethodTest #test46CanModifyArgumentsNamesInExtractedMethod stamp: 'eaam 11/16/2023 18:13:08'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:09'!
m1: arg1 m2: arg2
	[true] whileTrue: [ arg1 ifTrue: [ arg2 ].]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:09'!
m3: arg1Modified m4: arg2

	^ arg1Modified ifTrue: [ arg2 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:09' prior: 50652224!
m1: arg1 m2: arg2
	[true] whileTrue: [ self m3: arg1 m4: arg2.]! !

!testRun: #ExtractMethodTest #test47OnlyModifiedArgumentsNamesAreModifiedInExtractedMethod stamp: 'eaam 11/16/2023 18:13:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:13:09'!
m1 10! !

!testRun: #ExtractMethodTest #test48NewSelectorMustBeUnaryWhenNoArguments stamp: 'eaam 11/16/2023 18:13:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'eaam 11/16/2023 18:13:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:10'!
m1 1 to: 2 do: [ :x | x + 1]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:10'!
m2: x

	^ x + 1! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'eaam 11/16/2023 18:13:10' prior: 50652283!
m1 1 to: 2 do: [ :x | self m2: x]! !

!testRun: #ExtractMethodTest #test49CanExtractFromOptimizedMessageSends stamp: 'eaam 11/16/2023 18:13:10'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'eaam 11/16/2023 18:13:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:24:03' prior: 50650498!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'CABA' ifNone: [self fail].
	
	self assert: listOfCustomerAddresses size equals: 1.
	
	self doesAddress: listOfCustomerAddresses first haveAttributes: expectedAddressAttributes .
! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:24:07'!
ERROR!
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:24:23'!
addressAt: aRenameMe1 ifNone: aRenameMe2 
	self shouldBeImplemented.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:24:43' prior: 50652331!
addressAt: aRenameMe1 ifNone: aBlockIfNone 
	self shouldBeImplemented.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:24:59' prior: 50652336!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	self shouldBeImplemented.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:26:12' prior: 50652341!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	^addresses select: [addresses isInDirection: aAddressDirection ].! !
!Address methodsFor: 'province' stamp: 'eaam 11/16/2023 18:28:52'!
isInDirection: aAddressDirection
	^aAddressDirection = streetName .! !
!Address methodsFor: 'street' stamp: 'eaam 11/16/2023 18:29:11'!
isInStreet: aAddressDirection
	^aAddressDirection = streetName .! !
!Customer methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:29:11' prior: 50652347!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	^addresses select: [addresses isInStreet: aAddressDirection ].! !

!methodRemoval: Address #isInDirection: stamp: 'eaam 11/16/2023 18:29:11'!
isInDirection: aAddressDirection
	^aAddressDirection = streetName .!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/Packages/TerseGuide.pck.st----!
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:30:21' prior: 50652364!
addressAt: aAddressDirection ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aAddressDirection ] ifNone: aBlockIfNone value.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:30:30' prior: 50655296!
addressAt: aStreetDirection ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetDirection ] ifNone: aBlockIfNone value.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:30:46' prior: 50655304!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetToSearchFor ] ifNone: aBlockIfNone value.! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:31:03' prior: 50655312!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetToSearchFor ] ifNone: [aBlockIfNone value].! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:31:08' prior: 50655320!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [addresses isInStreet: aStreetToSearchFor ] ifNone: aBlockIfNone.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:32:12'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:12'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:13'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:14'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:14'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:32:15'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:33:29' prior: 50652306!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail].
	
	self assert: listOfCustomerAddresses size equals: 1.
	
	self doesAddress: listOfCustomerAddresses first haveAttributes: expectedAddressAttributes .
! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:33:31'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:33:32'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:33:43' prior: 50655355!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self assert: listOfCustomerAddresses size equals: 1.
	
	self doesAddress: listOfCustomerAddresses first haveAttributes: expectedAddressAttributes .
! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/16/2023 18:34:13' prior: 50655328!
addressAt: aStreetToSearchFor ifNone: aBlockIfNone 
	^addresses detect: [:anAddress | anAddress isInStreet: aStreetToSearchFor ] ifNone: aBlockIfNone.! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:34:17'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:34:18'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:34:55' prior: 50655384!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:34:57'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:35:07' prior: 50655420!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:35:30' prior: 50650468!
test04PepeSanchezDataIsImportedCorrectly

	| customer listOfCustomerAddresses firstAddressExpectedAttributes secondAddressExpectedAttributes|
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	listOfCustomerAddresses := customer addressAt: 'San Martin' ifNone: [self fail.].

	self doesAddress: listOfCustomerAddresses first haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: listOfCustomerAddresses second haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:35:43' prior: 50655464!
test04PepeSanchezDataIsImportedCorrectly

	| customer listOfCustomerAddresses firstAddressExpectedAttributes secondAddressExpectedAttributes|
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	listOfCustomerAddresses := customer addressAt: 'San Martin' ifNone: [self fail.].	listOfCustomerAddresses := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: listOfCustomerAddresses first haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: listOfCustomerAddresses second haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:36:33' prior: 50655494!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes|
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	firstAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: firstAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:37:08' prior: 50655526!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:38:02' prior: 50650652!
importCustomers 
	
	|newCustomer   |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:38:02'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:38:06' prior: 50655591!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:38:16'!
isCustomerRecond

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:38:16' prior: 50655632!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:38:28'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream inAddressRecord'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:38:28' prior: 50655669!
importCustomers 
	
	|newCustomer  |

	inAddressRecord := inputStream nextLine.
	[ inAddressRecord notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := inAddressRecord findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(inAddressRecord beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := inAddressRecord findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			inAddressRecord := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:38:28' prior: 50655664!
isCustomerRecond

	^ inAddressRecord beginsWith: 'C'! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:40:10'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:40:10' prior: 50655711!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:40:10' prior: 50655746!
isCustomerRecond

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:40:38'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:40:38' prior: 50655760!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:40:44' prior: 50655802!
importCustomers 
	
	|newCustomer  |

	line := inputStream nextLine.
	[line := inputStream nextLine.. line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].
			line := inputStream nextLine. ].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:26' prior: 50655835!
importCustomers 
	
	|newCustomer  |

	[line := inputStream nextLine.. line notNil ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:34'!
hasLineToImport

	line := inputStream nextLine.. line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:34' prior: 50655869!
importCustomers 
	
	|newCustomer  |

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:52' prior: 50655905!
importCustomers 
	
	| newCustomer  |

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:41:54' prior: 50655936!
importCustomers 
	
	| newCustomer |

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:41:58' prior: 50655967!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:41:58'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:42:07' prior: 50655998!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData  |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:42:07'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:43:46' prior: 50656037!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [  
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData  |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:43:46'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer newAddress customerData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/16/2023 18:43:58'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:43:58' prior: 50656076!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [  
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | addressData  |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:44:51' prior: 50656125!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [
		(self isCustomerRecond) ifTrue: [  
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:45:08' prior: 50656154!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		record := line findTokens: $,.

		(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.].].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:45:30'!
keyword

	(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:45:30' prior: 50656180!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		record := line findTokens: $,.

		self keyword.].
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:45:32'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:45:34'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:12' prior: 50655900!
hasLineToImport

	line := inputStream nextLine. 
	^line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:32'!
importRecord

	(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 18:46:32' prior: 50656229!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		record := line findTokens: $,.

		self importRecord.].
	! !

!methodRemoval: CustomerImporter #keyword stamp: 'eaam 11/16/2023 18:46:32'!
keyword

	(self isCustomerRecond) ifTrue: [  
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:50'!
createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:50' prior: 50656285!
importCustomers 
	
	 

	[self hasLineToImport ] whileTrue: [		self createRecord.

		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:55' prior: 50656319!
importCustomers 
	[self hasLineToImport ] whileTrue: [		self createRecord.

		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:46:58' prior: 50656326!
importCustomers 
	[self hasLineToImport ] whileTrue: [		self createRecord.

		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:13' prior: 50656333!
importCustomers 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.].
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:15' prior: 50656340!
importCustomers 
	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.
		].
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 18:47:28'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:29'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:30'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:30'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 18:47:31'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:46'!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:46' prior: 50656261!
importRecord

	(self isCustomerRecond) ifTrue: [  
			self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:47:50' prior: 50656382!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:01'!
importAddress

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:01' prior: 50656398!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:06' prior: 50656427!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].

		(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:48:12' prior: 50656435!
importRecord

	(self isCustomerRecond) ifTrue: [  		self importCustomer ].
		(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:51:26'!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| customer importer|
	importer := CustomerImporter from: [ReadStream].
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:53:13' prior: 50656450!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| customer importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,1,x').
	
	self importCustomersForReadStream: inputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 18:56:04' prior: 50656462!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,1,x').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 18:56:35'!
invalidCustomerRecord
	^'invalid customer record'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:57:01' prior: 50656443!
importRecord


	(self isCustomerRecond) ifTrue: [  		self importCustomer ].
		(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 18:57:45' prior: 50656498!
importRecord


	(self isCustomerRecond) ifTrue: [  		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:17:04' prior: 50656477!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:17:13'!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !

!methodRemoval: ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFive stamp: 'eaam 11/16/2023 19:17:13'!
test06FailImportingWhenCustomerRecordHasLessThanFive

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importRecord]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:19:41' prior: 50650418!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: inputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:19:47' prior: 50656563!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: inputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:24:38'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:38'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:39'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:40'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:24:40'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:24:40'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:24:40'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:25:14'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:25:14'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:25:36'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:29:03'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:29:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:07'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:07'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:49'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:29:49'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:30:10' prior: 50656529!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:30:11'!
FAILURE!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:30:11'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:31:42' prior: 50656506!
importRecord


	(self isCustomerRecond) ifTrue: [  
		
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:33:17' prior: 50656687!
importRecord


	(self isCustomerRecond) ifTrue: [  
		(record size < 5) ifTrue: [self error: self invalidCustomerRecord ].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:33:18' prior: 50656695!
importRecord


	(self isCustomerRecond) ifTrue: [  
		(record size < 5) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:33:23'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:23'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:24'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:25'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:33:25'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:33:25'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:34:32'!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:34:41' prior: 50656735!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: '' equals: ''.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:35:33' prior: 50656662!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: self customerIsNotImported: 'Hernan'.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:35:45' prior: 50656769!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self customerIsNotImported: 'Hernan').
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:36:27' prior: 50656787!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self customerIsNotImported: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:36:36'!
FAILURE!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:36:36'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:37:55' prior: 50656705!
importRecord


	(self isCustomerRecond) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [ 
			self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:38:02'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:02'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:03'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:03'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:38:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:38:04'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:38:04'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:39:47' prior: 50656805!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:41:40'!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:42:25' prior: 50656884!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:43:03' prior: 50656902!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Maipu,888,Florida,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:44:53' prior: 50656921!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Maipu,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:04' prior: 50656939!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:17' prior: 50656957!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:23'!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:45:29' prior: 50656993!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:46:14' prior: 50656975!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:46:37' prior: 50656831!
importRecord


	(self isCustomerRecond) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:39'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:46:40'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:46:40'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:46:54' prior: 50657050!
importRecord


	(self isCustomerRecond) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:46:59'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:00'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:00'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:01'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:47:02'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:48:12'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 19:48:12' prior: 50657095!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importAddress.]! !

!methodRemoval: CustomerImporter #isCustomerRecond stamp: 'eaam 11/16/2023 19:48:12'!
isCustomerRecond

	^ line beginsWith: 'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 19:49:07' prior: 50657145!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.]! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:49:10'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:11'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:12'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:12'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:49:13'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:49:13'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:49:16'!
ERROR!
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 19:49:19'!
invalidAddressRecord
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 19:50:09' prior: 50657211!
invalidAddressRecord
	^'an address must have 6 parameters'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:50:13'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:14'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:15'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:15'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:16'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:16'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:50:28'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:29'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:29'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:30'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:30'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:31'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:33'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:50:45' prior: 50657031!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:50'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:50:54' prior: 50657012!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 19:50:57'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:57'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:58'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 19:50:59'!
PASSED!

----QUIT----(16 November 2023 19:51:32) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (16 November 2023 19:51:41) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


ProtoObject new.!

----STARTUP---- (16 November 2023 19:53:07) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


CustomerImporter superclass.!

CustomerImporter superclass. Object superclass.!

CustomerImporter superclass. Object superclass. ProtoObject superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass. Class superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass. Class superclass. ClassDescription superclass.!

CustomerImporter superclass. Object superclass. ProtoObject class. ProtoObject class superclass. Class superclass. ClassDescription superclass. Behavior superclass.!

ProtoObject superclass .!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:58:58'!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:59:25' prior: 50657400!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'A,Henderson,712,Red Bark Ln,1122,Nevada,
	').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 19:59:43' prior: 50657417!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:00:29' prior: 50657434!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:01:53' prior: 50657450!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,,').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:02:06' prior: 50657466!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:08:19' prior: 50657483!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
	A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:08:26' prior: 50657501!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
	A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:08:36' prior: 50657519!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test10 stamp: 'eaam 11/16/2023 20:08:44'!
FAILURE!

!testRun: #ImportTest #test10 stamp: 'eaam 11/16/2023 20:08:44'!
FAILURE!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,
A,Maipu,888,Florida,1122,Buenos Aires').!

importer importCustomers!

importer importCustomers!

importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

importer importCustomers!

importer importCustomers!

importer importCustomers!

importer importCustomers!

ssion := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,a,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,a,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:13:57'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:14:06'!
PASSED!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Maipu,888,Florida,1122,,Buenos Aires').
importer importCustomers.
session!

session!

session!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers.
session!

session := DataBaseSession for: (Array with: Address with: Customer).
importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,smallTalk,cuis
A,Maipu,888,Florida,1122,Buenos Aires').
importer importCustomers.
session!

session!

session!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:19:28' prior: 50657291!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:19:37' prior: 50657313!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:19:41' prior: 50657781!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:20:13' prior: 50657537!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:20:25' prior: 50657820!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:20:44' prior: 50657837!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:21:11'!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!methodRemoval: ImportTest #test10 stamp: 'eaam 11/16/2023 20:21:11'!
test10

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:21:19'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:21:19'!
FAILURE!
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 20:21:46'!
invalidRecord
	^'invalid record'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:22:25' prior: 50657162!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].
	self error: self invalidRecord.! !

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:22:29'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:22:32'!
PASSED!

''occurrencesOf: $1!

',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,' occurrencesOf: $,!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:25:17' prior: 50656314!
createRecord

	
	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:25:30' prior: 50657937!
createRecord

	^ record := line findTokens: $,! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:26:06'!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:26:37' prior: 50657942!
createRecord
	line isEmpty .
	^ record := line findTokens: $,! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:26:41'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:26:41'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:26:41'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:26:48'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:28:22' prior: 50657914!
importRecord


	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.]
	ifFalse: [self error: self invalidRecord].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:28:25'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:28:25'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:28:25'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:28:26'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:28:26'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:28:26'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:28:26'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:28:29'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:30:09' prior: 50658013!
importRecord


	(self recordHasValidType) ifTrue: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:30:27'!
recordHasValidType
	^true! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:30:54' prior: 50658084!
recordHasValidType
	^self isCustomerRecord or: self isAddressRecord ! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:31:05' prior: 50658070!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:31:08'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:08'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:09'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:09'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:31:10'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:31:11'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:31:11'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:31:11'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:33:31'!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:34:04' prior: 50658148!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:34:06'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:35:52' prior: 50658094!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		(self addressRecordNumberAndZipCodeAreNumeric) ifFalse: [ self error: self invalidAddressRecordFields ]
		self importAddress.].! !
!CustomerImporter methodsFor: 'nil' stamp: 'eaam 11/16/2023 20:37:23'!
addressRecordNumberAndZipCodeAreNumeric
	(record third isNumber) and: (record fifth isNumber)! !

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:37:30'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:37:31'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:37:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:38:04' prior: 50658166!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:38:17' prior: 50658207!
addressRecordNumberAndZipCodeAreNumeric
	(record second isNumber) and: (record fourth isNumber)! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:38:19'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:38:20'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:38:20'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:38:22'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:38:28' prior: 50658190!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		(self addressRecordNumberAndZipCodeAreNumeric) ifFalse: [ self error: self invalidAddressRecordFields ].
		self importAddress.].! !
!CustomerImporter methodsFor: 'error handling' stamp: 'eaam 11/16/2023 20:39:54'!
invalidAddressRecordFields
	^'Address street number and zip code must be numeric'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:40:02'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:40:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:40:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:40:03'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:40:03'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:40:04'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:40:30'!
ERROR!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:41:03'!
addressRecordStreetNumberAndZipCodeAreNumeric
	(record second isNumber) and: (record fourth isNumber)! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:41:03' prior: 50658335!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		(self addressRecordStreetNumberAndZipCodeAreNumeric) ifFalse: [ self error: self invalidAddressRecordFields ].
		self importAddress.].! !

!methodRemoval: CustomerImporter #addressRecordNumberAndZipCodeAreNumeric stamp: 'eaam 11/16/2023 20:41:03'!
addressRecordNumberAndZipCodeAreNumeric
	(record second isNumber) and: (record fourth isNumber)!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:41:35' prior: 50658409!
addressRecordStreetNumberAndZipCodeAreNumeric
	^(record second isNumber) and: (record fourth isNumber)! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:41:38'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:41:38'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:41:38'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:40'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:52'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:41:52'!
ERROR!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/16/2023 20:42:39' prior: 50658441!
addressRecordStreetNumberAndZipCodeAreNumeric
	^(record third isNumber) and: (record fifth isNumber)! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:42:42'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:42:42'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:42:42'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:42:43'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:42:43'!
FAILURE!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:42:44'!
ERROR!

record third!

record third isNumber!

record third!

'3' isNumber!

'3' isInteger !

'3' isAlphaNumeric !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:45:16' prior: 50658261!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:45:50'!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!methodRemoval: ImportTest #test12FailImportingWhenAddressRecordHasNonNumericStreetNumber stamp: 'eaam 11/16/2023 20:45:50'!
test12FailImportingWhenAddressRecordHasNonNumericStreetNumber

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'C,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:45:56' prior: 50658578!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'Cuis,Hernan,0,smallTalk,cuis
A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:45:57'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:45:57'!
FAILURE!

!methodRemoval: CustomerImporter #addressRecordStreetNumberAndZipCodeAreNumeric stamp: 'eaam 11/16/2023 20:46:04'!
addressRecordStreetNumberAndZipCodeAreNumeric
	^(record third isNumber) and: (record fifth isNumber)!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:46:11' prior: 50658416!
importRecord


	(self recordHasValidType) ifFalse: [self error: self invalidRecord].
	(self isCustomerRecord) ifTrue: [  
		((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].! !

!methodRemoval: CustomerImporter #invalidAddressRecordFields stamp: 'eaam 11/16/2023 20:46:19'!
invalidAddressRecordFields
	^'Address street number and zip code must be numeric'!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:46:24'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:24'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:25'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:26'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:46:26'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:46:27'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:46:27'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:46:27'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:23' prior: 50658652!
importRecord


	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [
		((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].
		self importAddress.].
	self error: self invalidRecord! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:35' prior: 50656370!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:51' prior: 50658720!
importRecord


	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		self importAddress.].
	self error: self invalidRecord! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:48:58' prior: 50656414!
importAddress

	((record size = 6 )not) ifTrue: [self error: self invalidAddressRecord].

	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:49:10' prior: 50658745!
importRecord


	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:49:15'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:15'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:16'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:49:17'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:49:18'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:49:18'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:49:18'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:50:16' prior: 50658731!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:51:26' prior: 50658754!
importAddress

	((record size = 6 )not or: (newCustomer isNil)) ifTrue: [self error: self invalidAddressRecord].


	newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:51:45'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:51:46'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:51:58' prior: 50658618!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:52:00'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:52:03'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:03'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:04'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:04'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:52:05'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:52:22' prior: 50657946!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:52:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:54:41'!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:54:43'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:54:44'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:54:51' prior: 50658948!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:55:34' prior: 50655797!
isAddressRecord

	^ line first = 'A'! !

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:55:37'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:56:09' prior: 50658993!
isAddressRecord

	^ record first = 'A'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:56:12'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:13'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:13'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:14'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:56:15'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:56:15'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:56:15'!
FAILURE!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:57:03'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:57:12'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:57:17'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:18'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:19'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:57:20'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:57:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:57:20'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/16/2023 20:58:29'!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"self assert: (self sNotImportedCustomerWithName: 'Hernan')."
		]
	! !

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:30'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:30'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:58:47' prior: 50657140!
isCustomerRecord

	^ line first = 'C'! !

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:52'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:58:56'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:58:56'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:58:56'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:58:59'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 20:59:18' prior: 50659139!
isCustomerRecord

	^ record first = 'C'! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 20:59:21'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:21'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:22'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:23'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 20:59:23'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:24'!
FAILURE!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 20:59:24'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:24'!
FAILURE!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:37'!
FAILURE!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 20:59:37'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 21:00:21' prior: 50657964!
createRecord
	
	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'eaam 11/16/2023 21:01:01' prior: 50658769!
importRecord

	(record isEmpty) ifTrue: [ self error: self invalidRecord ].
	(self isCustomerRecord) ifTrue: [ ^self importCustomer ].
	(self isAddressRecord) ifTrue: [ 		^self importAddress.].
	self error: self invalidRecord! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:01:03'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:04'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:05'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:05'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:01:06'!
PASSED!
!Customer class methodsFor: 'no messages' stamp: 'eaam 11/16/2023 21:05:58'!
forFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer
	self new withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer! !
!Customer methodsFor: 'nil' stamp: 'eaam 11/16/2023 21:06:42'!
withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theCustomersIDType .
	identificationNumber := theIDNumberOfTheCustomer .! !
!Customer methodsFor: 'initialization' stamp: 'eaam 11/16/2023 21:06:58' prior: 50659345!
withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer

	super initialize.
	addresses := OrderedCollection new.
	
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theCustomersIDType .
	identificationNumber := theIDNumberOfTheCustomer .! !

!methodRemoval: Customer #withFirstName:lastName:IDType:andIDNumber: stamp: 'eaam 11/16/2023 21:07:27'!
withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer

	super initialize.
	addresses := OrderedCollection new.
	
	firstName := theFirstNameOfTheCustomer .
	lastName := theLastNameOfTheCustomer .
	identificationType := theCustomersIDType .
	identificationNumber := theIDNumberOfTheCustomer .!

!methodRemoval: Customer class #forFirstName:lastName:IDType:andIDNumber: stamp: 'eaam 11/16/2023 21:07:29'!
forFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer
	self new withFirstName: theFirstNameOfTheCustomer lastName: theLastNameOfTheCustomer IDType: theCustomersIDType andIDNumber: theIDNumberOfTheCustomer!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:10:51' prior: 50659267!
createRecord
	
	^ record := line findTokens: $, keep: $,! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:10:55'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:10:55'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:10:57'!
ERROR!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:11:46' prior: 50659402!
createRecord
	
	^ record := line findTokens: {$,} keep: $,! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:11:48'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:11:48'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:11:49'!
ERROR!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:12:04' prior: 50659462!
createRecord
	
	^ record := line findTokens: {$,} keep: {$,}! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/16/2023 21:12:05'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
FAILURE!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/16/2023 21:12:05'!
FAILURE!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/16/2023 21:12:05'!
FAILURE!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/16/2023 21:12:05'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/16/2023 21:12:06'!
ERROR!
!CustomerImporter methodsFor: 'record creation auxiliaries' stamp: 'eaam 11/16/2023 21:12:37' prior: 50659522!
createRecord
	
	^ record := line findTokens: $,! !

----QUIT----(16 November 2023 21:39:29) CuisUniversity-5981.image priorSource: 10422831!

----STARTUP---- (16 November 2023 21:40:23) as /home/clinux01/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----QUIT----(16 November 2023 21:40:29) CuisUniversity-5981.image priorSource: 10493938!

----STARTUP---- (18 November 2023 21:31:05) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----QUIT----(18 November 2023 21:31:42) CuisUniversity-5981.image priorSource: 10494162!

----STARTUP---- (19 November 2023 13:56:26) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!

!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 13:56:50' prior: 50656866!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:56:55'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:56:55'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:12'!
sessionIsEmpty
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:19' prior: 50659633!
sessionIsEmpty
	session isEmpty.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:57:24'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:57:24'!
ERROR!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 13:57:41'!
isEmpty
	self shouldBeImplemented.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:59:38'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 13:59:38'!
ERROR!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:27' prior: 50659650!
isEmpty
	tables isEmpty .! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:28' prior: 50659663!
isEmpty
	tables isEmpty.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:33' prior: 50659667!
isEmpty
	^tables isEmpty.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:05:14'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:05:14'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 14:05:32' prior: 50659638!
sessionIsEmpty
	^session isEmpty.! !

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:05:39'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:05:51' prior: 50656752!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 14:05:52'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:06:24' prior: 50657762!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionIsEmpty).
		]
	! !

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:06:26'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 14:06:26'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:01'!
FAILURE!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:02'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:53:46' prior: 50659713!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAdresses).
		]
	! !

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:50'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:53:50'!
ERROR!
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:53:58'!
sessionHasNotAdresses
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:20' prior: 50659774!
sessionHasNotAdresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:40'!
sessionHasNotAddresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 16:54:40' prior: 50659748!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAddresses).
		]
	! !

!methodRemoval: ImportTest #sessionHasNotAdresses stamp: 'eaam 11/19/2023 16:54:40'!
sessionHasNotAdresses
	^session hasNotAddresses.!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:54:49'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:54:49'!
ERROR!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:54:56'!
hasNotAddresses
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:55:12' prior: 50659819!
hasNotAddresses
	tables at: ''.! !

!methodRemoval: ImportTest #sessionHasNotAddresses stamp: 'eaam 11/19/2023 16:56:17'!
sessionHasNotAddresses
	^session hasNotAddresses.!

!methodRemoval: DataBaseSession #hasNotAddresses stamp: 'eaam 11/19/2023 16:56:24'!
hasNotAddresses
	tables at: ''.!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:31' prior: 50659788!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .

		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:50' prior: 50659836!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:57' prior: 50657800!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:14' prior: 50657869!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:26' prior: 50658928!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:45' prior: 50658862!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:54' prior: 50659113!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 16:57:59'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:00'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:00'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:01'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 16:58:01'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 16:58:02'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 17:12:41' prior: 50658974!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 17:17:52'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655444!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655558!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650453!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650438!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650834 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650413 overrides: 16961402!
tearDown

	session commit.
	session close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50656583!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !

Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 17:23:35'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 18:21:46' prior: 50660123 overrides: 16961394!
setUp

	session :=PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 18:22:12' overrides: 16920235!
initialize
	| session |
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:22:26' prior: 50660190 overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 18:22:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:35'!
beginTransaction
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:42' prior: 50660213!
beginTransaction
	session beginTransaction .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:43' prior: 50660218!
beginTransaction
	session beginTransaction.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 18:26:33'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:26:44'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:04'!
persist: aNewCustomer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:21' prior: 50660282!
persist: aNewCustomer 
	session persist: aNewCustomer .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:22' prior: 50660288!
persist: aNewCustomer 
	session persist: aNewCustomer.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:27:46'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 18:27:49'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:55'!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:12' prior: 50660306!
selectAllOfType: Customer 
	^session selectAllOfType: Customer.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:40' prior: 50660312!
selectAllOfType: aType 
	^session selectAllOfType: aType.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:52' prior: 50660294!
persist: anObject 
	session persist: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:02:33'!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:02:39'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:02:39'!
PASSED!
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:02:55'!
commit
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:02' prior: 50660342!
commit
	session commit .! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:03' prior: 50660347!
commit
	session commit.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:03:15'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:03:16'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:03:48' prior: 50660178 overrides: 16961394!
setUp

	session := "PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:04:07' prior: 50660363 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	"PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:05:13' prior: 50660375 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:05:43'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:05:44'!
PASSED!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:05:56'!
close
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:00' prior: 50660408!
close
	session close.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:06:04'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:07'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:09'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:06:13'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:13'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:14'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:14'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:15'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:15'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:15'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:15'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:16'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:06:16'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:06:16'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:19'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:33'!
isEmpty
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:39' prior: 50660482!
isEmpty
	session isEmpty .! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:06:44'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:45'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:45'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:46'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:06:46'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:06:47'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:06:47'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:06:47'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:06:50'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:07:02' prior: 50660487!
isEmpty
	^session isEmpty .! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:11:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:19'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:19'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:11:20'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:11:21'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:11:21'!
PASSED!

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:11:51'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:11:51'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:12:08'!
beginTransaction
	self subclassResponsibility .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject 
	session persist: anObject.! !
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50658825!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session addCustomer: newCustomer! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50660324!
persist: anObject 
	session addCustomer: anObject.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50650747!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self addCustomer: anAddress ]
	! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50660622!
addCustomer: anObject 
	session addCustomer: anObject.! !

!methodRemoval: PersistentCustomerSystem #persist: stamp: 'eaam 11/19/2023 19:13:20'!
persist: anObject 
	session addCustomer: anObject.!

!methodRemoval: DataBaseSession #persist: stamp: 'eaam 11/19/2023 19:13:20'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:54'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:54' prior: 50660659!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !

!methodRemoval: DataBaseSession #addCustomer: stamp: 'eaam 11/19/2023 19:13:54'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:13:59'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:13:59'!
PASSED!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:20' prior: 50660667!
addCustomer: anObject 
	session persist: anObject.! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:30'!
addCustomer: anObject

	self subclassResponsibility! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:10'!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50660223 overrides: 50660617!
beginTransaction
	session start.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50660776!
start
	session start.! !

!methodRemoval: PersistentCustomerSystem #beginTransaction stamp: 'eaam 11/19/2023 19:15:10'!
beginTransaction
	session start.!
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:26' prior: 50660787!
start
	session beguinTransaction.! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:39' prior: 50660796!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:16:11' prior: 50660413!
close
	session commit.
	session close.! !
!ImportTest methodsFor: 'tear down' stamp: 'eaam 11/19/2023 19:16:39' prior: 50660137 overrides: 16961402!
tearDown
	session close.
		
	validInputStream close.! !

!methodRemoval: PersistentCustomerSystem #commit stamp: 'eaam 11/19/2023 19:16:52'!
commit
	session commit.!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:17:00' prior: 50660389 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:17:07'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659941!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660010!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659683!
sessionIsEmpty
	^CustomerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660036!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659871!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659853!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659691!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660143!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660090!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660057!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660820 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659889!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660811 overrides: 16961402!
tearDown
	CustomerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659923!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659906!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50650370!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationType = theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50660106!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50659608!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:30'!
close

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:34' overrides: 16920235!
initialize

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:38'!
isEmpty

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:42'!
select: aCondition ofType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:45'!
selectAllOfType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:17:50'!
start

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:18:13'!
asdasdasd

	self subclassResponsibility! !

!methodRemoval: CustomerSystem #initialize stamp: 'eaam 11/19/2023 19:18:13'!
initialize

	self subclassResponsibility!

!methodRemoval: CustomerSystem #asdasdasd stamp: 'eaam 11/19/2023 19:18:17'!
asdasdasd

	self subclassResponsibility!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:19:15'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:16'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:17'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:17'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:19:18'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:19:19'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:19:19'!
PASSED!

CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:19:36'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:19:46' prior: 50661030 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:12' overrides: 50661170!
start
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:19' prior: 50661265 overrides: 50661170!
start! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:20:57' overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:21:21' prior: 50661275 overrides: 16920235!
initialize
	 
	session := Dictionary.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:25:25' overrides: 50661146!
close! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:25:44' prior: 50661282 overrides: 16920235!
initialize
	 
	session := Dictionary new.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:25:54' overrides: 50660771!
addCustomer: anObject 
	session persist: anObject.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:26:01' prior: 50661297 overrides: 50660771!
addCustomer: anObject 
	session add: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:27:56' prior: 50660766 overrides: 50660771!
addCustomer: anObject 
	session add: anObject.! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:28:56' prior: 50661292 overrides: 16920235!
initialize
	 
	session := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:29:55' overrides: 50661160!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:30:46'!
objectsOfType: aType! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:31:22' prior: 50661321 overrides: 50661160!
select: aCondition ofType: aType
	^(self objectsOfType: aType) select: aCondition.! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:26' prior: 50661101!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationTypeIs: theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:49' prior: 50661338!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer hasIdentificationType: theIDTypeOfTheCustomers and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:35'!
hasIdentificationType: aIDType
	^aIDType = identificationType 
! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:36' prior: 50661361!
hasIdentificationType: aIDType
	^aIDType = identificationType
! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/19/2023 19:35:30'!
hasIdentificationNumber: aIDNumber
	^aIDNumber = identificationNumber 
! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:36:10' prior: 50661252 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:14'!
ERROR!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:36:14'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:36:15'!
ERROR!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:36:15'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:17'!
ERROR!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:36:37' prior: 50661309 overrides: 50660771!
addCustomer: anObject 
	session persist: anObject.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:40'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:41'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:41'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:42'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:36:42'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:36:43'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:36:46'!
ERROR!
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:37:06' prior: 50661350!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:37:08'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:09'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:09'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:10'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:37:11'!
PASSED!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:37:24' prior: 50661377 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:38:36'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:38:36'!
ERROR!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:38:46' overrides: 50661165!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:39:48' prior: 50660958!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:40:37' prior: 50661566 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!methodRemoval: TransientCustomerSystem #objectsOfType: stamp: 'eaam 11/19/2023 19:40:50'!
objectsOfType: aType!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:40:56' prior: 50661332 overrides: 50661160!
select: aCondition ofType: aType
	^(self selectAllOfType: aType) select: aCondition.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:41:49' prior: 50661585 overrides: 50661165!
selectAllOfType: aType 
	session select:[:anObject | anObject isType: aType].! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:45:22' prior: 50661635 overrides: 50661165!
selectAllOfType: aType 
	session select:[:anObject | anObject class = aType].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 19:45:26'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:27'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:27'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:28'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 19:45:29'!
PASSED!
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:47:54'!
current
	^self subclasses detect: [:anEn|]! !

TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:48:08'!
TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:48:15'!
TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Enviroment subclass: #integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Integration category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:49:32'!
Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Development category: 'CustomerImporter' stamp: 'eaam 11/19/2023 19:49:45'!
Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Enviroment class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:50:36'!
current
	^self subclasses detect: [:anEnviroment | anEnviroment isCurrent] new.! !
!Development class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:51:31'!
isCurrent
	^(Smalltalk at: #env) = 'dev'! !
!Integration class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:52:19'!
isCurrent
	^Development isCurrent not.! !

(Smalltalk at: #env)!

(Smalltalk put: 'dev' at: #env)!

.Smalltalk at: #env put: 'dev'.!

Smalltalk at: #env!

Smalltalk at: #env put: 'int'.!

Smalltalk at: #env.
!

Smalltalk at: #env put: 'dev'.
Smalltalk at: #env put: 'int'.!

Enviroment current.!
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:07' prior: 50661755!
current
	^(self subclasses detect: [:anEnviroment | anEnviroment isCurrent]) new.! !

Enviroment current.!

Smalltalk at: #env put: 'dev'.
!

Enviroment current.!
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:50'!
createSystem
	^self subclassResponsibility ! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:53' prior: 50661786!
createSystem
	^self subclassResponsibility.! !

!methodRemoval: Enviroment class #createSystem stamp: 'eaam 11/19/2023 19:57:16'!
createSystem
	^self subclassResponsibility.!
!Enviroment methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:19'!
createSystem
	^self subclassResponsibility.! !
!Development methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:47' overrides: 50661799!
createSystem
	^TransientCustomerSystem new.! !
!Integration methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:57' overrides: 50661799!
createSystem
	^TransientCustomerSystem new.! !
!CustomerSystem class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:13'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]! !

!methodRemoval: CustomerSystem class #current stamp: 'eaam 11/19/2023 19:58:13'!
current
	^self subclasses detect: [:anEn|]!

!methodRemoval: CustomerSystem class #asdsafasdfasd stamp: 'eaam 11/19/2023 19:58:16'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]!
!Integration methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:39' prior: 50661809 overrides: 50661799!
createSystem
	^PersistentCustomerSystem new.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:01'!
forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660859!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660922!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660940!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661066!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661129!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660903!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661084!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50661042!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50650381!
importCustomersForReadStream: aReadStreamToRead forSession: aSessionToRecordDataOn
	(CustomerImporter forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: aReadStreamToRead) importCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50660840!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !

!methodRemoval: CustomerImporter class #forDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:01:01'!
forDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:40' prior: 50661833!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!CustomerImporter methodsFor: 'initialization' stamp: 'eaam 11/19/2023 20:01:54'!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:54' prior: 50662029!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !

!methodRemoval: CustomerImporter #initializeForDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:01:54'!
initializeForDatabaseSessionToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:02:28'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50660639!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			customerSystem addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50662040!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	customerSystem := aSession.
	inputStream := anInputStream.! !
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 20:03:09'!
newCustomerSystem
	^Enviroment current createSystem .! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:03:34' prior: 50661611 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:03:38'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:03:38'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:03:38'!
ERROR!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:03:41'!
ERROR!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:04:40'!
ERROR!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 20:05:02' prior: 50661642 overrides: 50661165!
selectAllOfType: aType 
	^session select:[:anObject | anObject class = aType].! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:05:04'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:05:04'!
ERROR!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:05:07'!
ERROR!
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 20:05:32' overrides: 50661156!
isEmpty
	^session isEmpty.! !

CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:05:49'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:05:56'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:06:06'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'dataCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50662239 overrides: 50661156!
isEmpty
	^dataCollection isEmpty.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50661315 overrides: 16920235!
initialize
	 
	dataCollection := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50662178 overrides: 50661165!
selectAllOfType: aType 
	^dataCollection select:[:anObject | anObject class = aType].! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50661303 overrides: 50660771!
addCustomer: anObject 
	dataCollection add: anObject.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:06:18'!
PASSED!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:06:20'!
PASSED!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:32' prior: 50662108 overrides: 16961394!
setUp

	CustomerSystem := CustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:47' prior: 50662406 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:06:54'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'customerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:54' prior: 50661998!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661844!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660877!
sessionIsEmpty
	^customerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660882!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661934!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661862!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661880!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661590!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660979!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50660996!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50662419 overrides: 16961394!
setUp

	customerSystem := PersistentCustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661970!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661060 overrides: 16961402!
tearDown
	customerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661898!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661953!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661503!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ customerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661113!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50661916!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:07:00' prior: 50662630 overrides: 16961394!
setUp

	customerSystem := CustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:07:05'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:07:06'!
PASSED!

Smalltalk at: #env put: 'int'.!

!testRun: #ImportTest #test01ImportAddsTheCorrectNumberOfCustomers stamp: 'eaam 11/19/2023 20:07:18'!
PASSED!

!testRun: #ImportTest #test02PepeSanchezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:18'!
PASSED!

!testRun: #ImportTest #test03JuanPerezIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:19'!
PASSED!

!testRun: #ImportTest #test04PepeSanchezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:20'!
PASSED!

!testRun: #ImportTest #test05JuanPerezDataIsImportedCorrectly stamp: 'eaam 11/19/2023 20:07:20'!
PASSED!

!testRun: #ImportTest #test06FailImportingWhenCustomerRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test08FailImportingWhenAddressRecordHasLessThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test09FailImportingWhenAddressRecordHasMoreThanFiveParameters stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test10FailImportingWhenRecordHasAnInvalidType stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test11FailImportingWhenRecordHasEmptyLine stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test12FailImportingWhenAddressHasNoAssociatedCustomer stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test13FailImportingWhenAddressRecordTypeIsNotA stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

!testRun: #ImportTest #test14FailImportingWhenCustomerRecordTypeIsNotC stamp: 'eaam 11/19/2023 20:07:21'!
PASSED!

Smalltalk at: #env put: 'dev'.!

----STARTUP---- (19 November 2023 20:21:17) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!

!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 13:56:50' prior: 50656866!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:12'!
sessionIsEmpty
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 13:57:19' prior: 50662885!
sessionIsEmpty
	session isEmpty.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 13:57:41'!
isEmpty
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:27' prior: 50662894!
isEmpty
	tables isEmpty .! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:28' prior: 50662898!
isEmpty
	tables isEmpty.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 14:04:33' prior: 50662902!
isEmpty
	^tables isEmpty.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 14:05:32' prior: 50662890!
sessionIsEmpty
	^session isEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:05:51' prior: 50656752!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 14:06:24' prior: 50657762!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:53:46' prior: 50662931!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAdresses).
		]
	! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:53:58'!
sessionHasNotAdresses
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:20' prior: 50662967!
sessionHasNotAdresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'category-name' stamp: 'eaam 11/19/2023 16:54:40'!
sessionHasNotAddresses
	^session hasNotAddresses.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 16:54:40' prior: 50662949!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		self assert: (self sessionHasNotAddresses).
		]
	! !

!methodRemoval: ImportTest #sessionHasNotAdresses stamp: 'eaam 11/19/2023 20:21:26'!
sessionHasNotAdresses
	^session hasNotAddresses.!
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:54:56'!
hasNotAddresses
	self shouldBeImplemented.! !
!DataBaseSession methodsFor: 'testing' stamp: 'eaam 11/19/2023 16:55:12' prior: 50663004!
hasNotAddresses
	tables at: ''.! !

!methodRemoval: ImportTest #sessionHasNotAddresses stamp: 'eaam 11/19/2023 20:21:26'!
sessionHasNotAddresses
	^session hasNotAddresses.!

!methodRemoval: DataBaseSession #hasNotAddresses stamp: 'eaam 11/19/2023 20:21:26'!
hasNotAddresses
	tables at: ''.!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:31' prior: 50662981!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .

		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:50' prior: 50663021!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:56:57' prior: 50657800!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:14' prior: 50657869!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:26' prior: 50658928!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:45' prior: 50658862!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 16:57:54' prior: 50659113!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 17:12:41' prior: 50658974!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: session andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655444!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50655558!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650453!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650438!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: session .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650834 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50650413 overrides: 16961402!
tearDown

	session commit.
	session close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 17:17:52' prior: 50656583!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: session .
	
	numberOfCostumers := (session selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 18:21:46' prior: 50663257 overrides: 16961394!
setUp

	session :=PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 18:22:12' overrides: 16920235!
initialize
	| session |
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:22:26' prior: 50663327 overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:26'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:35'!
beginTransaction
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:42' prior: 50663350!
beginTransaction
	session beginTransaction .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:24:43' prior: 50663355!
beginTransaction
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:04'!
persist: aNewCustomer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:21' prior: 50663365!
persist: aNewCustomer 
	session persist: aNewCustomer .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:22' prior: 50663371!
persist: aNewCustomer 
	session persist: aNewCustomer.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:27:55'!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:12' prior: 50663382!
selectAllOfType: Customer 
	^session selectAllOfType: Customer.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:40' prior: 50663388!
selectAllOfType: aType 
	^session selectAllOfType: aType.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 18:28:52' prior: 50663377!
persist: anObject 
	session persist: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:02:33'!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:02:55'!
commit
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:02' prior: 50663411!
commit
	session commit .! !
!PersistentCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:03:03' prior: 50663416!
commit
	session commit.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:03:48' prior: 50663315 overrides: 16961394!
setUp

	session := "PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:04:07' prior: 50663426 overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	"PersistentCustomerSystem new."
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:05:13' prior: 50663438 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session beginTransaction.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:05:56'!
close
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:00' prior: 50663464!
close
	session close.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:33'!
isEmpty
	self shouldBeImplemented.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:06:39' prior: 50663473!
isEmpty
	session isEmpty .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:07:02' prior: 50663478!
isEmpty
	^session isEmpty .! !

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerSystem methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:12:08'!
beginTransaction
	self subclassResponsibility .! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject 
	session persist: anObject.! !
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:20'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50658825!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session addCustomer: newCustomer! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50663400!
persist: anObject 
	session addCustomer: anObject.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50650747!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self addCustomer: anAddress ]
	! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:20' prior: 50663508!
addCustomer: anObject 
	session addCustomer: anObject.! !

!methodRemoval: PersistentCustomerSystem #persist: stamp: 'eaam 11/19/2023 20:21:27'!
persist: anObject 
	session addCustomer: anObject.!

!methodRemoval: DataBaseSession #persist: stamp: 'eaam 11/19/2023 20:21:27'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!
!DataBaseSession methodsFor: 'persistance' stamp: 'eaam 11/19/2023 19:13:54'!
persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:13:54' prior: 50663545!
persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !

!methodRemoval: DataBaseSession #addCustomer: stamp: 'eaam 11/19/2023 20:21:27'!
addCustomer: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:20' prior: 50663553!
addCustomer: anObject 
	session persist: anObject.! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:14:30'!
addCustomer: anObject

	self subclassResponsibility! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:10'!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50663360 overrides: 50663503!
beginTransaction
	session start.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:15:10' prior: 50663611!
start
	session start.! !

!methodRemoval: PersistentCustomerSystem #beginTransaction stamp: 'eaam 11/19/2023 20:21:27'!
beginTransaction
	session start.!
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:26' prior: 50663622!
start
	session beguinTransaction.! !
!PersistentCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:15:39' prior: 50663631!
start
	session beginTransaction.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:16:11' prior: 50663469!
close
	session commit.
	session close.! !
!ImportTest methodsFor: 'tear down' stamp: 'eaam 11/19/2023 19:16:39' prior: 50663271 overrides: 16961402!
tearDown
	session close.
		
	validInputStream close.! !

!methodRemoval: PersistentCustomerSystem #commit stamp: 'eaam 11/19/2023 20:21:27'!
commit
	session commit.!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:17:00' prior: 50663452 overrides: 16961394!
setUp

	session := PersistentCustomerSystem new.
	session start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663126!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663144!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50662910!
sessionIsEmpty
	^CustomerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663170!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663056!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663038!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50662914!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663277!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663224!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663191!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663655 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663074!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663646 overrides: 16961402!
tearDown
	CustomerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663108!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663091!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50650370!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationType = theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50663240!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:07' prior: 50662868!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forDatabaseSessionToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:30'!
close

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:34' overrides: 16920235!
initialize

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:38'!
isEmpty

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:42'!
select: aCondition ofType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:17:45'!
selectAllOfType: aType

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:17:50'!
start

	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:18:13'!
asdasdasd

	self subclassResponsibility! !

!methodRemoval: CustomerSystem #initialize stamp: 'eaam 11/19/2023 20:21:27'!
initialize

	self subclassResponsibility!

!methodRemoval: CustomerSystem #asdasdasd stamp: 'eaam 11/19/2023 20:21:27'!
asdasdasd

	self subclassResponsibility!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:27'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'configuration tables id session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:19:46' prior: 50663865 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:12' overrides: 50664005!
start
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:20:19' prior: 50664053 overrides: 50664005!
start! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:20:57' overrides: 16920235!
initialize
	 
	session := DataBaseSession for: (Array with: Address with: Customer).! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:21:21' prior: 50664063 overrides: 16920235!
initialize
	 
	session := Dictionary.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:25:25' overrides: 50663981!
close! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:25:44' prior: 50664070 overrides: 16920235!
initialize
	 
	session := Dictionary new.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:25:54' overrides: 50663606!
addCustomer: anObject 
	session persist: anObject.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:26:01' prior: 50664085 overrides: 50663606!
addCustomer: anObject 
	session add: anObject.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:27:56' prior: 50663601 overrides: 50663606!
addCustomer: anObject 
	session add: anObject.! !
!TransientCustomerSystem methodsFor: 'initialization' stamp: 'eaam 11/19/2023 19:28:56' prior: 50664080 overrides: 16920235!
initialize
	 
	session := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 19:29:55' overrides: 50663995!
select: aCondition ofType: aType
	^session select: aCondition ofType: aType.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:30:46'!
objectsOfType: aType! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:31:22' prior: 50664109 overrides: 50663995!
select: aCondition ofType: aType
	^(self objectsOfType: aType) select: aCondition.! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:26' prior: 50663936!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer identificationTypeIs: theIDTypeOfTheCustomers and:[ aCustomer identificationNumber = theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:33:49' prior: 50664126!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | aCustomer hasIdentificationType: theIDTypeOfTheCustomers and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:35'!
hasIdentificationType: aIDType
	^aIDType = identificationType 
! !
!Customer methodsFor: 'name' stamp: 'eaam 11/19/2023 19:34:36' prior: 50664149!
hasIdentificationType: aIDType
	^aIDType = identificationType
! !
!Customer methodsFor: 'testing' stamp: 'eaam 11/19/2023 19:35:30'!
hasIdentificationNumber: aIDNumber
	^aIDNumber = identificationNumber 
! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:36:10' prior: 50664040 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:36:37' prior: 50664097 overrides: 50663606!
addCustomer: anObject 
	session persist: anObject.! !
!ImportTest methodsFor: 'private' stamp: 'eaam 11/19/2023 19:37:06' prior: 50664138!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ CustomerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:37:24' prior: 50664165 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:38:46' overrides: 50664000!
selectAllOfType: Customer 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'tests' stamp: 'eaam 11/19/2023 19:39:48' prior: 50663793!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: CustomerSystem .
	
	numberOfCostumers := (CustomerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 19:40:37' prior: 50664196 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!methodRemoval: TransientCustomerSystem #objectsOfType: stamp: 'eaam 11/19/2023 20:21:27'!
objectsOfType: aType!
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:40:56' prior: 50664120 overrides: 50663995!
select: aCondition ofType: aType
	^(self selectAllOfType: aType) select: aCondition.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:41:49' prior: 50664209 overrides: 50664000!
selectAllOfType: aType 
	session select:[:anObject | anObject isType: aType].! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 19:45:22' prior: 50664259 overrides: 50664000!
selectAllOfType: aType 
	session select:[:anObject | anObject class = aType].! !
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:47:54'!
current
	^self subclasses detect: [:anEn|]! !

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: 'CustomerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Enviroment category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #Enviroment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Integration category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Integration category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Integration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Development category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Development category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Enviroment subclass: #Development
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Enviroment class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:50:36'!
current
	^self subclasses detect: [:anEnviroment | anEnviroment isCurrent] new.! !
!Development class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:51:31'!
isCurrent
	^(Smalltalk at: #env) = 'dev'! !
!Integration class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:52:19'!
isCurrent
	^Development isCurrent not.! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:07' prior: 50664336!
current
	^(self subclasses detect: [:anEnviroment | anEnviroment isCurrent]) new.! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:50'!
createSystem
	^self subclassResponsibility ! !
!Enviroment class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:56:53' prior: 50664357!
createSystem
	^self subclassResponsibility.! !

!methodRemoval: Enviroment class #createSystem stamp: 'eaam 11/19/2023 20:21:28'!
createSystem
	^self subclassResponsibility.!
!Enviroment methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:19'!
createSystem
	^self subclassResponsibility.! !
!Development methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:47' overrides: 50664370!
createSystem
	^TransientCustomerSystem new.! !
!Integration methodsFor: 'no messages' stamp: 'eaam 11/19/2023 19:57:57' overrides: 50664370!
createSystem
	^TransientCustomerSystem new.! !
!CustomerSystem class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:13'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]! !

!methodRemoval: CustomerSystem class #current stamp: 'eaam 11/19/2023 20:21:28'!
current
	^self subclasses detect: [:anEn|]!

!methodRemoval: CustomerSystem class #asdsafasdfasd stamp: 'eaam 11/19/2023 20:21:28'!
asdsafasdfasd
	^self subclasses detect: [:anEn|]!
!Integration methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 19:58:39' prior: 50664380 overrides: 50664370!
createSystem
	^PersistentCustomerSystem new.! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:01'!
forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663694!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663757!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663775!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663901!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663964!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663738!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663919!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663877!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50650381!
importCustomersForReadStream: aReadStreamToRead forSession: aSessionToRecordDataOn
	(CustomerImporter forCustomerSystemToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: aReadStreamToRead) importCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:01' prior: 50663675!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: CustomerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !

!methodRemoval: CustomerImporter class #forDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:21:28'!
forDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aSessionToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'eaam 11/19/2023 20:01:40' prior: 50664404!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForDatabaseSessionToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !
!CustomerImporter methodsFor: 'initialization' stamp: 'eaam 11/19/2023 20:01:54'!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:01:54' prior: 50664600!
forCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom 
	^self new initializeForCustomerSystemToRecordOn: aCustomerSystemToRecordDataOn andInputStreamWithCustomerData: anInputStreamToReadFrom ! !

!methodRemoval: CustomerImporter #initializeForDatabaseSessionToRecordOn:andInputStreamWithCustomerData: stamp: 'eaam 11/19/2023 20:21:28'!
initializeForDatabaseSessionToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	session := aSession.
	inputStream := anInputStream.!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'customerSystem inputStream line newCustomer newAddress record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50663525!
importCustomer

	((record size = 5 )not) ifTrue: [self error: self invalidCustomerRecord].
		

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			customerSystem addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:02:28' prior: 50664611!
initializeForCustomerSystemToRecordOn: aSession andInputStreamWithCustomerData: anInputStream
	customerSystem := aSession.
	inputStream := anInputStream.! !
!CustomerSystem class methodsFor: 'no messages' stamp: 'eaam 11/19/2023 20:03:09'!
newCustomerSystem
	^Enviroment current createSystem .! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:03:34' prior: 50664235 overrides: 16961394!
setUp

	CustomerSystem := TransientCustomerSystem new.
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!TransientCustomerSystem methodsFor: 'category-name' stamp: 'eaam 11/19/2023 20:05:02' prior: 50664266 overrides: 50664000!
selectAllOfType: aType 
	^session select:[:anObject | anObject class = aType].! !
!TransientCustomerSystem methodsFor: 'transaction management' stamp: 'eaam 11/19/2023 20:05:32' overrides: 50663991!
isEmpty
	^session isEmpty.! !

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'dataCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664699 overrides: 50663991!
isEmpty
	^dataCollection isEmpty.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664103 overrides: 16920235!
initialize
	 
	dataCollection := OrderedCollection new.! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664692 overrides: 50664000!
selectAllOfType: aType 
	^dataCollection select:[:anObject | anObject class = aType].! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:06' prior: 50664091 overrides: 50663606!
addCustomer: anObject 
	dataCollection add: anObject.! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:32' prior: 50664679 overrides: 16961394!
setUp

	CustomerSystem := CustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:06:47' prior: 50664772 overrides: 16961394!
setUp

	CustomerSystem := PersistentCustomerSystem newCustomerSystem .
	CustomerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'eaam 11/19/2023 20:21:28'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'customerSystem validInputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:54' prior: 50664569!
test14FailImportingWhenCustomerRecordTypeIsNotC

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'Cobayo,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664415!
test13FailImportingWhenAddressRecordTypeIsNotA

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
Alpaca,Henderson,712,Red Bark Ln,1122,Nevada').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663712!
sessionIsEmpty
	^customerSystem isEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663717!
test05JuanPerezDataIsImportedCorrectly

	| customer listOfCustomerAddresses expectedAddressAttributes |
		expectedAddressAttributes := OrderedCollection 
		with: 'CABA'
		with: 1122
		with:'Alem'
		with: 1001
		with: 'CABA'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.
	listOfCustomerAddresses := customer addressAt: 'Alem' ifNone: [self fail.].
	
	self doesAddress: listOfCustomerAddresses haveAttributes: expectedAddressAttributes .
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664505!
test09FailImportingWhenAddressRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122,Nevada,Tompson').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664433!
test08FailImportingWhenAddressRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis
A,Henderson,712,Red Bark Ln,1122').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord .
		"No tiene address"
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664451!
test07FailImportingWhenCustomerRecordHasMoreThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk,cuis,TDD').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664214!
test01ImportAddsTheCorrectNumberOfCustomers

	| numberOfCostumers listOfSanchez listOfPerez|

	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	
	numberOfCostumers := (customerSystem selectAllOfType: Customer) size.
	
	listOfSanchez := self getAllCustomersWithIDType: 'D' andIDNumber: '22333444'.
		
	listOfPerez := self getAllCustomersWithIDType: 'C' andIDNumber: '23-25666777-9'.
	
	self assert: numberOfCostumers equals: 2.
	self assert: listOfSanchez size equals: 1. self assert: listOfPerez size equals: 1.
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663814!
test03JuanPerezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes := OrderedCollection 
		with: 'Juan'
		with: 'Perez'
		with: 'C'
		with: '23-25666777-9'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'C' andIDNumber: '23-25666777-9'.

	self doesCustomer: customer haveAttributes: expectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663831!
test04PepeSanchezDataIsImportedCorrectly

	| customer firstAddressesOfCustomer firstAddressExpectedAttributes secondAddressExpectedAttributes secondAddressesOfCustomer |
	
	firstAddressExpectedAttributes := OrderedCollection
		with: 'BsAs'
		with: 3322
		with: 'San Martin'
		with: 1636
		with: 'Olivos'.
	
	secondAddressExpectedAttributes := OrderedCollection 
		with: 'Buenos Aires'
		with: 888
		with: 'Maipu'
		with: 1122
		with: 'Florida'.
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	firstAddressesOfCustomer := customer addressAt: 'San Martin' ifNone: [self fail.].	secondAddressesOfCustomer := customer addressAt: 'Maipu' ifNone: [self fail.].

	self doesAddress: firstAddressesOfCustomer haveAttributes: firstAddressExpectedAttributes .
	self doesAddress: secondAddressesOfCustomer haveAttributes: secondAddressExpectedAttributes .! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664785 overrides: 16961394!
setUp

	customerSystem := PersistentCustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664541!
test10FailImportingWhenRecordHasAnInvalidType

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663895 overrides: 16961402!
tearDown
	customerSystem close.
		
	validInputStream close.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664469!
test12FailImportingWhenAddressHasNoAssociatedCustomer

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on:  'A,Henderson,71a2,Red Bark Ln,1122, Louisiana').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidAddressRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664524!
test11FailImportingWhenRecordHasEmptyLine

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: '
HelloWorld,Hernan,0,smallTalk,cuis').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidRecord.
		self assert: self sessionIsEmpty.
		]
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664183!
getAllCustomersWithIDType: theIDTypeOfTheCustomers andIDNumber: theIDNumberOfTheCustomers 

	^ customerSystem 
		select: [:aCustomer | (aCustomer hasIdentificationType: theIDTypeOfTheCustomers) and:[ aCustomer hasIdentificationNumber: theIDNumberOfTheCustomers]] 
		ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50663948!
test02PepeSanchezIsImportedCorrectly

	| customer expectedAttributes |	
	expectedAttributes :=  OrderedCollection 
		with: 'Pepe'
		with: 'Sanchez'
		with: 'D'
		with: '22333444'.
	
	self importCustomersForReadStream: validInputStream forSession: customerSystem .
	customer := self obtainCustomerWithIDType: 'D' andIDNumber: '22333444'.
	self doesCustomer: customer haveAttributes: expectedAttributes .	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'eaam 11/19/2023 20:06:55' prior: 50664487!
test06FailImportingWhenCustomerRecordHasLessThanFiveParameters

	| importer|
	importer := CustomerImporter forCustomerSystemToRecordOn: customerSystem andInputStreamWithCustomerData: (ReadStream on: 'C,Hernan,0,smallTalk').
	
	self should: [importer importCustomers]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: anError messageText equals: importer invalidCustomerRecord.
		self assert: (self sessionIsEmpty).
		]
	! !
!ImportTest methodsFor: 'set up' stamp: 'eaam 11/19/2023 20:07:00' prior: 50664996 overrides: 16961394!
setUp

	customerSystem := CustomerSystem newCustomerSystem .
	customerSystem start.
	validInputStream :=  ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.! !

----QUIT----(19 November 2023 20:23:01) CuisUniversity-5981.image priorSource: 10494385!

----STARTUP---- (19 November 2023 20:23:04) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


Smalltalk at: 'env' put: 'dev'.!

----QUIT----(19 November 2023 20:27:08) CuisUniversity-5981.image priorSource: 10671196!

----STARTUP---- (22 November 2023 00:07:27) as /home/ezfloat/ing-software-1-c2-2023/xd3/linux64/linux64/CuisUniversity-5981.image!


----QUIT----(22 November 2023 00:07:49) CuisUniversity-5981.image priorSource: 10671453!