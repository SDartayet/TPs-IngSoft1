

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (24 August 2023 20:13:08) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/MiBoolean.st----!

ObjectBuilder create: #anObject
	collaboratorNames: ''
	in: 'MiBoolean'
	!

!classDefinition: #anObject category: 'MiBoolean' stamp: 'em 8/24/2023 20:19:47'!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MiBoolean'!

!classDefinition: 'anObject class' category: 'MiBoolean' stamp: 'em 8/24/2023 20:19:47'!
anObject class
	instanceVariableNames: ''!

!classRemoval: #anObject stamp: 'em 8/24/2023 20:19:57'!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MiBoolean'!

ObjectBuilder create: #Peano
	collaboratorNames: ''
	in: 'DenotativeObject-TestSupport'
	!

!classDefinition: #Peano category: 'DenotativeObject-TestSupport' stamp: 'em 8/24/2023 20:37:38'!
DenotativeObject subclass: #Peano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-TestSupport'!

!classDefinition: 'Peano class' category: 'DenotativeObject-TestSupport' stamp: 'em 8/24/2023 20:37:38'!
Peano class
	instanceVariableNames: ''!

!classRemoval: #Peano stamp: 'em 8/24/2023 20:37:49'!
DenotativeObject subclass: #Peano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-TestSupport'!

ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Peano'
	!

!classDefinition: #I category: 'Peano' stamp: 'em 8/24/2023 20:38:08'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'em 8/24/2023 20:38:08'!
I class
	instanceVariableNames: ''!
!I class methodsFor: 'no messages' stamp: 'em 8/24/2023 20:38:49'!
next
	^self cloneNamed: self name, 'I'! !

I next!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'em 8/24/2023 20:39:00'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: ''!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 20:39:00'!
II class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:39:00'!
next
	^self cloneNamed: self name, 'I'! !

I next!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 20:39:18'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 20:39:18'!
III class
	instanceVariableNames: ''!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:39:18'!
next
	^self cloneNamed: self name, 'I'! !

III next!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'em 8/24/2023 20:39:35'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: ''!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'em 8/24/2023 20:39:35'!
IIII class
	instanceVariableNames: ''!
!IIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:39:35'!
next
	^self cloneNamed: self name, 'I'! !

!classRemoval: #II stamp: 'em 8/24/2023 20:45:40'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'em 8/24/2023 20:45:45'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIII stamp: 'em 8/24/2023 20:45:50'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

I
	collaboratorNames: 'siguiente'
	in: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'em 8/24/2023 20:45:56'!
I class
	instanceVariableNames: 'siguiente'!

!classDefinition: #I category: 'Peano' stamp: 'em 8/24/2023 20:45:56'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'em 8/24/2023 20:45:56'!
I class
	instanceVariableNames: 'siguiente'!
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:53:06' prior: 50650543!
next
	siguiente ifnil: [siguiente ^ self cloneNamed: self name, 'I']
	^siguiente! !
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:53:12' prior: 50650639!
next
	siguiente ifNil: [siguiente ^ self cloneNamed: self name, 'I']
	^siguiente! !

I next!

I next!
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:54:56' prior: 50650645!
next
	siguiente ifNil: [siguiente ^ self cloneNamed: self name, 'I']
	^siguiente! !

I next!

I next!
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:56:39' prior: 50650652!
next
	siguiente ifNil: [siguiente ^ self cloneNamed: self name, 'I'].
	^siguiente! !

I next!
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:57:04' prior: 50650659!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

I next!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'em 8/24/2023 20:57:10'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 20:57:10'!
II class
	instanceVariableNames: 'siguiente'!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:57:10'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

I next next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 20:57:23'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 20:57:23'!
III class
	instanceVariableNames: 'siguiente'!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:57:23'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

I next next next !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'em 8/24/2023 20:57:25'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'em 8/24/2023 20:57:25'!
IIII class
	instanceVariableNames: 'siguiente'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:57:25'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

I next next next next !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIII category: 'Peano' stamp: 'em 8/24/2023 20:57:29'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIIII class' category: 'Peano' stamp: 'em 8/24/2023 20:57:29'!
IIIII class
	instanceVariableNames: 'siguiente'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:57:29'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

!classRemoval: #IIIII stamp: 'em 8/24/2023 20:57:34'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIII stamp: 'em 8/24/2023 20:57:38'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'em 8/24/2023 20:57:42'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'em 8/24/2023 20:57:47'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

I next next next next next next!

I next next next next next!

I next next next next next!

I next!

I next next next next next next next next !

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'em 8/24/2023 20:59:04'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
II class
	instanceVariableNames: 'siguiente'!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
III class
	instanceVariableNames: 'siguiente'!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
IIII class
	instanceVariableNames: 'siguiente'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIII category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIIII class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
IIIII class
	instanceVariableNames: 'siguiente'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIII category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIIIII class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
IIIIII class
	instanceVariableNames: 'siguiente'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIIII category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIIIIII class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
IIIIIII class
	instanceVariableNames: 'siguiente'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIIIII category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIIIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIIIIIII class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
IIIIIIII class
	instanceVariableNames: 'siguiente'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIIIIIIII category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIIIIIIII class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'IIIIIIIII class' category: 'Peano' stamp: 'em 8/24/2023 20:59:05'!
IIIIIIIII class
	instanceVariableNames: 'siguiente'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 20:59:05'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !

!classRemoval: #IIIIIIIII stamp: 'em 8/24/2023 20:59:20'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIIIII stamp: 'em 8/24/2023 20:59:27'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII x!

!classRemoval: #IIIIIII stamp: 'em 8/24/2023 20:59:45'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIIII stamp: 'em 8/24/2023 20:59:49'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIIII stamp: 'em 8/24/2023 20:59:57'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #IIII stamp: 'em 8/24/2023 21:00:00'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'em 8/24/2023 21:00:04'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'em 8/24/2023 21:00:07'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:03:01'!
+ unSumandoNatural
	^unSumandoNatural next! !
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:06:40' prior: 50651005!
+ unSumandoNatural
	^unSumandoNatural next! !

I next!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'em 8/24/2023 21:06:45'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: 'siguiente'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 21:06:45'!
II class
	instanceVariableNames: 'siguiente'!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:06:45'!
+ unSumandoNatural
	^unSumandoNatural next! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:06:45'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'].
	^siguiente! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:11:37' prior: 50651030!
+ unSumandoNatural
	^self anterior + unSumandoNatural next! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:16:35'!
previous
	| anterior |
	^anterior! !

II
	collaboratorNames: 'siguiente anterior'
	in: 'Peano'!

II
	collaboratorNames: 'siguiente, anterior'
	in: 'Peano'!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:18:20' prior: 50651034!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. siguiente previous: self].
	^siguiente! !

II
	collaboratorNames: 'siguiente. anterior'
	in: 'Peano'!

II
	collaboratorNames: 'siguiente anterior'
	in: 'Peano'!

II
	collaboratorNames: 'siguiente aaaaa'
	in: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 21:19:15'!
II class
	instanceVariableNames: 'siguiente aaaaa'!

!classDefinition: #II category: 'Peano' stamp: 'em 8/24/2023 21:19:15'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 21:19:15'!
II class
	instanceVariableNames: 'siguiente aaaaa'!

II
	collaboratorNames: 'siguiente anterior'
	in: 'Peano'!

II
	collaboratorNames: 'siguiente anterio'
	in: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 21:19:27'!
II class
	instanceVariableNames: 'siguiente anterio'!

!classDefinition: #II category: 'Peano' stamp: 'em 8/24/2023 21:19:27'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 21:19:27'!
II class
	instanceVariableNames: 'siguiente anterio'!

II
	collaboratorNames: 'siguiente anterior'
	in: 'Peano'!

II
	collaboratorNames: 'siguiente anterior'
	in: 'Peano'!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:20:05' prior: 50651053!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:20:17' prior: 50651045!
previous
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !

II
	collaboratorNames: 'siguiente anterior'
	in: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 21:20:24'!
II class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: #II category: 'Peano' stamp: 'em 8/24/2023 21:20:24'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'em 8/24/2023 21:20:24'!
II class
	instanceVariableNames: 'siguiente anterior'!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:20:44'!
previous: elAnterior
	anterior ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !

!methodRemoval: II class #previous stamp: 'em 8/24/2023 21:21:00'!
previous
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:21:27' prior: 50651132!
previous: elAnterior
	anterior ifNil: [anterior := elAnterior. 
	siguiente previous: self].
	^siguiente! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:21:54' prior: 50651145!
previous: elAnterior
	anterior ifNil: [anterior := elAnterior.].
	^anterior! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:22:20'!
previous
	^anterior! !
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:22:48' prior: 50650665!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:23:24' prior: 50651040!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !

II + I!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 21:25:04'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 21:25:04'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:25:04'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:25:04'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:25:04'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:25:04'!
previous: elAnterior
	anterior ifNil: [anterior := elAnterior.].
	^anterior! !

II + I!

II + I!

II + I!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!

 III .!
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:32:05'!
- unRestandoNatural
	^self previous - unRestandoNatural previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:41:40' prior: 50651215!
- unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous - unRestandoNatural previous]! !

II - I!

III - II!

!classRemoval: #III stamp: 'em 8/24/2023 21:41:59'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 21:42:20'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 21:42:20'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:42:20'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:42:20'!
- unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous - unRestandoNatural previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:42:20'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:42:20'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:42:20'!
previous: elAnterior
	anterior ifNil: [anterior := elAnterior.].
	^anterior! !

III - II!

III - II!

III - I!

III - II!

III - II!

III - I!

III - I!

III - I!

!classRemoval: #III stamp: 'em 8/24/2023 21:45:12'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II next!

II next!

II next!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 21:46:07'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 21:46:07'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:46:07'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:46:07'!
- unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous - unRestandoNatural previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:46:07'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:46:07'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:46:07'!
previous: elAnterior
	anterior ifNil: [anterior := elAnterior.].
	^anterior! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:47:24' prior: 50651152!
previous: elAnterior
	anterior ifNil: [anterior := elAnterior.].! !

!classRemoval: #III stamp: 'em 8/24/2023 21:47:44'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 21:47:47'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 21:47:47'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:47:47'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:47:47'!
- unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous - unRestandoNatural previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:47:47'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:47:47'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:47:47'!
previous: elAnterior
	anterior ifNil: [anterior := elAnterior.].! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:49:03' prior: 50651380!
previous: elAnterior
	anterior := elAnterior! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:49:13' prior: 50651331!
previous: elAnterior
	anterior := elAnterior! !

!classRemoval: #III stamp: 'em 8/24/2023 21:49:17'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'em 8/24/2023 21:49:29'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'em 8/24/2023 21:49:29'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:49:29'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:49:29'!
- unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous - unRestandoNatural previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:49:29'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:49:29'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:49:29'!
previous: elAnterior
	anterior := elAnterior! !

III - II!

III - II!

III - II!

III - I!

III - III!
!I class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:55:53'!
restateA: numeroNatural
	^numeroNatural previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:56:50'!
restandoMalo: unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous restandoMalo: unRestandoNatural previous]! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:57:38' prior: 50651220!
- unRestandoNatural
	^unRestandoNatural restateA: self! !
!II class methodsFor: 'as yet unclassified' stamp: 'em 8/24/2023 21:59:17'!
restateA: unNumeroNatural
	^unNumeroNatural previous - self previous! !
!I class methodsFor: '--** private fileout/in **--' stamp: 'em 8/24/2023 21:59:26' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'em 8/24/2023 21:59:26' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := III.
	anterior := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'em 8/24/2023 21:59:26' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := II.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'em 8/24/2023 21:59:26'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'em 8/24/2023 21:59:26'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := III.
	anterior := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'em 8/24/2023 21:59:26'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := II.!

!classRemoval: #III stamp: 'em 8/24/2023 21:59:48'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!I class methodsFor: '--** private fileout/in **--' stamp: 'em 8/24/2023 21:59:54' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'em 8/24/2023 21:59:54' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := AnObsoleteIII.
	anterior := I.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'em 8/24/2023 21:59:54'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'em 8/24/2023 21:59:54'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := AnObsoleteIII.
	anterior := I.!

----STARTUP---- (28 August 2023 17:10:35) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 17:11:20'!
* numeroNatural
	^numeroNatural! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 17:12:19'!
* multiplicando
	^multiplicando + (self previous * multiplicando)! !

ObjectBuilder create: #UnSemaforo
	collaboratorNames: ''
	in: 'Semaforo'
	!

!classDefinition: #UnSemaforo category: 'Semaforo' stamp: 'eaam 8/28/2023 19:06:47'!
DenotativeObject subclass: #UnSemaforo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'UnSemaforo class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:06:47'!
UnSemaforo class
	instanceVariableNames: ''!

ObjectBuilder create: #LuzAmarilla asChildOf: DenotativeObject collaboratorNames: '' in: 'Semaforo'!

!classDefinition: #LuzAmarilla category: 'Semaforo' stamp: 'eaam 8/28/2023 19:07:07'!
DenotativeObject subclass: #LuzAmarilla
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'LuzAmarilla class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:07:07'!
LuzAmarilla class
	instanceVariableNames: ''!

ObjectBuilder create: #LuzVerde asChildOf: DenotativeObject collaboratorNames: '' in: 'Semaforo'!

!classDefinition: #LuzVerde category: 'Semaforo' stamp: 'eaam 8/28/2023 19:07:37'!
DenotativeObject subclass: #LuzVerde
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'LuzVerde class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:07:37'!
LuzVerde class
	instanceVariableNames: ''!

ObjectBuilder create: #LuzRoja asChildOf: DenotativeObject collaboratorNames: '' in: 'Semaforo'!

!classDefinition: #LuzRoja category: 'Semaforo' stamp: 'eaam 8/28/2023 19:07:52'!
DenotativeObject subclass: #LuzRoja
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'LuzRoja class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:07:52'!
LuzRoja class
	instanceVariableNames: ''!
!LuzAmarilla class methodsFor: 'no messages' stamp: 'eaam 8/28/2023 19:10:38'!
prender
	self color: Color yellow ! !

LuzAmarilla
	asChildOf: Light
	collaboratorNames: ''
	in: 'Semaforo'!

!classDefinition: 'LuzAmarilla class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:13:38'!
LuzAmarilla class
	instanceVariableNames: ''!

!classDefinition: #LuzAmarilla category: 'Semaforo' stamp: 'eaam 8/28/2023 19:13:38'!
Light subclass: #LuzAmarilla
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'LuzAmarilla class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:13:38'!
LuzAmarilla class
	instanceVariableNames: ''!

	self color: Color yellow !

Light!
!LuzAmarilla class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:16:50'!
apagar
		self color: Color yellow ! !
!LuzAmarilla class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:16:55' prior: 50650532!
apagar
		self color: Color black ! !

LuzAmarilla prender !
!LuzAmarilla class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:17:20' prior: 50650537!
apagar
		self color: Color black! !

LuzAmarilla prender !

LuzAmarilla prender !

LuzAmarilla prender !

LuzAmarilla prender !
!UnSemaforo class methodsFor: 'no messages' stamp: 'eaam 8/28/2023 19:25:08'!
prender
	LuzAmarilla prender.
	(Delay for: 0.5*second) wait.
	LuzAmarilla apagar.
	(Delay for: 0.5*second) wait.! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:25:44'!
titilarLuzAmarilla
	! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:25:52' prior: 50650557!
titilarLuzAmarilla
	LuzAmarilla prender.
	(Delay for: 0.5*second) wait.
	LuzAmarilla apagar.
	(Delay for: 0.5*second) wait.! !

LuzRoja
	asChildOf:  Light 
	collaboratorNames: ''
	in: 'Semaforo'!

!classDefinition: 'LuzRoja class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:28:32'!
LuzRoja class
	instanceVariableNames: ''!

!classDefinition: #LuzRoja category: 'Semaforo' stamp: 'eaam 8/28/2023 19:28:32'!
Light subclass: #LuzRoja
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'LuzRoja class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:28:32'!
LuzRoja class
	instanceVariableNames: ''!

LuzVerde
	asChildOf: Light
	collaboratorNames: ''
	in: 'Semaforo'!

!classDefinition: 'LuzVerde class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:28:57'!
LuzVerde class
	instanceVariableNames: ''!

!classDefinition: #LuzVerde category: 'Semaforo' stamp: 'eaam 8/28/2023 19:28:57'!
Light subclass: #LuzVerde
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'LuzVerde class' category: 'Semaforo' stamp: 'eaam 8/28/2023 19:28:57'!
LuzVerde class
	instanceVariableNames: ''!
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:29:59'!
avisarPrecaucion
	5 timesRepeat: [self titilarLuzAmarilla]! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:30:19' prior: 50650550!
prender
	self avisarPrecaucion! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:30:39'!
avisarPrecaucionPorEncendido
	5 timesRepeat: [self titilarLuzAmarilla]! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:30:39' prior: 50650608!
prender
	self avisarPrecaucionPorEncendido! !

!methodRemoval: UnSemaforo class #avisarPrecaucion stamp: 'eaam 8/28/2023 19:30:39'!
avisarPrecaucion
	5 timesRepeat: [self titilarLuzAmarilla]!

UnSemaforo  prender!

UnSemaforo  prender!

UnSemaforo  prender!

UnSemaforo  prender!

UnSemaforo  prender!
!LuzRoja class methodsFor: 'no messages' stamp: 'eaam 8/28/2023 19:33:38'!
prender
	self color: Color red! !
!LuzRoja class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:33:46'!
apagar
	self color: Color black! !
!LuzVerde class methodsFor: 'no messages' stamp: 'eaam 8/28/2023 19:33:55'!
apagar
	self color: Color black! !
!LuzVerde class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:34:04'!
prender
	self color: Color green ! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:36:15'!
esperarTiempoDeTitilado

	^ (Delay for: 0.5*second) wait! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:36:15' prior: 50650561!
titilarLuzAmarilla
	LuzAmarilla prender.
	self esperarTiempoDeTitilado.
	LuzAmarilla apagar.
	(Delay for: 0.5*second) wait.! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:36:15' prior: 50650652!
titilarLuzAmarilla
	LuzAmarilla prender.
	self esperarTiempoDeTitilado.
	LuzAmarilla apagar.
	self esperarTiempoDeTitilado.! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:36:24' prior: 50650646!
esperarTiempoDeTitilado
	^ (Delay for: 0.5*second) wait! !
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:38:57'!
esperarTiempo: unTiempo
	^ (Delay for: unTiempo) wait! !

!methodRemoval: UnSemaforo class #esperarTiempoDeTitilado stamp: 'eaam 8/28/2023 19:39:07'!
esperarTiempoDeTitilado
	^ (Delay for: 0.5*second) wait!
!UnSemaforo class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 19:39:34' prior: 50650660!
titilarLuzAmarilla
	LuzAmarilla prender.
	self esperarTiempo: 0.5*second.
	LuzAmarilla apagar.
	self esperarTiempo: 0.5*second.! !
!LuzAmarilla class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 19:40:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !
!LuzRoja class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 19:40:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !
!LuzVerde class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 19:40:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !

!methodRemoval: LuzAmarilla class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 19:40:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!

!methodRemoval: LuzRoja class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 19:40:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!

!methodRemoval: LuzVerde class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 19:40:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!
!LuzAmarilla class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 19:48:43' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !
!LuzRoja class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 19:48:43' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !
!LuzVerde class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 19:48:43' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !

!methodRemoval: LuzAmarilla class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 19:48:43'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!

!methodRemoval: LuzRoja class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 19:48:43'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!

!methodRemoval: LuzVerde class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 19:48:43'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!

holanosequeesesto !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:05:26'!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			((self - divisor) esMasChico: divisor)
				ifTrue: [
					^1
					]
				ifFalse: [^ 1 + ((self - divisor) \ divisor)]
			]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:07:00'!
esMasChico: unNatural
	^True! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:21:13' prior: 50650778!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			((self - divisor) esMasChico: divisor)
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !
!I class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:22:50'!
\ divisor
	(self isEqualTo: divisor) ifTrue: [^I]! !
!I class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:23:02' prior: 50650800!
\ divisor
	(self isEqualTo: divisor) ifTrue: [^I] ifFalse: [self - self]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:24:14' prior: 50650787!
esMasChico: unNatural
	^True! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:32:09' prior: 50650791!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(((self - divisor) - divisor) error)
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !

II \ I!

II \ I!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:33:27' prior: 50650815!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:33:35' prior: 50650825!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: [((self - divisor) - divisor)])
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !

II \ I!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:34:53'!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: [((self - divisor) - divisor)])
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) divisionMala divisor)]
			]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:35:03' prior: 50650845!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: [((self - divisor) - divisor)])
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:36:15' prior: 50650835!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(((self - divisor) - divisor) Error)
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:36:19' prior: 50650865!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(((self - divisor) - divisor) error)
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:36:23' prior: 50650874!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			([((self - divisor) - divisor)] error)
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !

II \ I!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:36:49' prior: 50650883!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			([((self - divisor) - divisor)] error)
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !

II \ I!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:37:12' prior: 50650893!
\ divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			([((self - divisor) - divisor)] error)
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) \ divisor)]
			]! !

!methodRemoval: II class #esMasChico: stamp: 'eaam 8/28/2023 20:37:53'!
esMasChico: unNatural
	^True!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:38:11' prior: 50650855!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [
					^I
					]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !

II \ I!

II divisionMala: I!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:38:51' prior: 50650914!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!I class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:40:23' prior: 50650444!
* unNumeroNatural
	^unNumeroNatural! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:40:37' prior: 50650448!
* unMultiplicando
	^unMultiplicando + (self previous * unMultiplicando)! !
!I class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:46:15'!
dividiteA: numeroNatural
	^numeroNatural! !
!I class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:46:23'!
dividiA: numeroNatural
	^numeroNatural! !

!methodRemoval: I class #dividiteA: stamp: 'eaam 8/28/2023 20:46:29'!
dividiteA: numeroNatural
	^numeroNatural!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:50:53' prior: 50650902!
\ divisor
	(self isEqualTo: divisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - divisor) \ divisor)] ! !

II \ I!

II \ II!

II \ II!

II next next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'eaam 8/28/2023 20:51:54'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'eaam 8/28/2023 20:51:54'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
* unMultiplicando
	^unMultiplicando + (self previous * unMultiplicando)! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
- unRestandoNatural
	^unRestandoNatural restateA: self! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
\ divisor
	(self isEqualTo: divisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - divisor) \ divisor)] ! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
previous: elAnterior
	anterior := elAnterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
restandoMalo: unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous restandoMalo: unRestandoNatural previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
restateA: unNumeroNatural
	^unNumeroNatural previous - self previous! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'eaam 8/28/2023 20:51:54'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'eaam 8/28/2023 20:51:54'!
IIII class
	instanceVariableNames: 'siguiente anterior'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
* unMultiplicando
	^unMultiplicando + (self previous * unMultiplicando)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
- unRestandoNatural
	^unRestandoNatural restateA: self! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
\ divisor
	(self isEqualTo: divisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - divisor) \ divisor)] ! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
previous
	^anterior! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
previous: elAnterior
	anterior := elAnterior! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
restandoMalo: unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous restandoMalo: unRestandoNatural previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:51:54'!
restateA: unNumeroNatural
	^unNumeroNatural previous - self previous! !

IIII \ II !

IIII \ III!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:52:32'!
divisionBuena:unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] ! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:53:01' prior: 50650957!
\ divisor
	^ divisor timesToDivide: self! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:57:23'!
timesToDivide: unDivisor
	self = unDivisor ifTrue: [^I] ifFalse: [True]
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:57:40' prior: 50651128!
timesToDivide: unDivisor
	self = unDivisor ifTrue: [^I] ifFalse: [^ I + ((self - unDivisor) \ unDivisor)]
	! !

!classRemoval: #IIII stamp: 'eaam 8/28/2023 20:58:27'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'eaam 8/28/2023 20:58:31'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!I class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:58:58'!
timesToDivide: numeroNatural
	^numeroNatural! !

II \ I!

II \ II!

II next next!

II next next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'eaam 8/28/2023 20:59:31'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'eaam 8/28/2023 20:59:31'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
* unMultiplicando
	^unMultiplicando + (self previous * unMultiplicando)! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
- unRestandoNatural
	^unRestandoNatural restateA: self! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
\ divisor
	^ divisor timesToDivide: self! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
divisionBuena:unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] ! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
previous: elAnterior
	anterior := elAnterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
restandoMalo: unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous restandoMalo: unRestandoNatural previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
restateA: unNumeroNatural
	^unNumeroNatural previous - self previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
timesToDivide: unDivisor
	self = unDivisor ifTrue: [^I] ifFalse: [^ I + ((self - unDivisor) \ unDivisor)]
	! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'eaam 8/28/2023 20:59:31'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'eaam 8/28/2023 20:59:31'!
IIII class
	instanceVariableNames: 'siguiente anterior'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
* unMultiplicando
	^unMultiplicando + (self previous * unMultiplicando)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
- unRestandoNatural
	^unRestandoNatural restateA: self! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
\ divisor
	^ divisor timesToDivide: self! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
divisionBuena:unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] ! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
previous
	^anterior! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
previous: elAnterior
	anterior := elAnterior! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
restandoMalo: unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous restandoMalo: unRestandoNatural previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
restateA: unNumeroNatural
	^unNumeroNatural previous - self previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 20:59:31'!
timesToDivide: unDivisor
	self = unDivisor ifTrue: [^I] ifFalse: [^ I + ((self - unDivisor) \ unDivisor)]
	! !

III / I!

III / I!

III \ I!

III \ II!

IIII \ II!

IIII \ II!

IIII \ IIII!

IIII \ II!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:00:33' prior: 50651117!
divisionBuena: unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] ! !

!classRemoval: #IIII stamp: 'eaam 8/28/2023 21:00:37'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'eaam 8/28/2023 21:00:39'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:02:34'!
solucioonCatedraDeDividir: unDivisor
	^ unDivisor timesToDivide: self! !

!methodRemoval: II class #\ stamp: 'eaam 8/28/2023 21:02:43'!
\ divisor
	^ divisor timesToDivide: self!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:02:59'!
\ unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] ! !

!methodRemoval: II class #divisionBuena: stamp: 'eaam 8/28/2023 21:02:59'!
divisionBuena: unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:24' prior: 50651134!
timesToDivide: unDivisor
	self = unDivisor ifTrue: [^I] ifFalse: [^ I + ((self - unDivisor) solucioonCatedraDeDividir: unDivisor)]
	! !

II next next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'eaam 8/28/2023 21:03:33'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'III class' category: 'Peano' stamp: 'eaam 8/28/2023 21:03:33'!
III class
	instanceVariableNames: 'siguiente anterior'!
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
* unMultiplicando
	^unMultiplicando + (self previous * unMultiplicando)! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
- unRestandoNatural
	^unRestandoNatural restateA: self! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
\ unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] ! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
previous
	^anterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
previous: elAnterior
	anterior := elAnterior! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
restandoMalo: unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous restandoMalo: unRestandoNatural previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
restateA: unNumeroNatural
	^unNumeroNatural previous - self previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
solucioonCatedraDeDividir: unDivisor
	^ unDivisor timesToDivide: self! !
!III class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
timesToDivide: unDivisor
	self = unDivisor ifTrue: [^I] ifFalse: [^ I + ((self - unDivisor) solucioonCatedraDeDividir: unDivisor)]
	! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'eaam 8/28/2023 21:03:33'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'siguiente anterior'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'eaam 8/28/2023 21:03:33'!
IIII class
	instanceVariableNames: 'siguiente anterior'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
* unMultiplicando
	^unMultiplicando + (self previous * unMultiplicando)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
+ unSumandoNatural
	^self previous + unSumandoNatural next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
- unRestandoNatural
	^unRestandoNatural restateA: self! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
\ unDivisor
	(self isEqualTo: unDivisor)
		ifTrue: [^I]
		ifFalse: [^ I + ((self - unDivisor) \ unDivisor)] ! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(self error: ((self - divisor) - divisor))
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
next
	siguiente ifNil: [siguiente := self cloneNamed: self name, 'I'. 
	siguiente previous: self].
	^siguiente! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
previous
	^anterior! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
previous: elAnterior
	anterior := elAnterior! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
restandoMalo: unRestandoNatural
	(unRestandoNatural isEqualTo: I) 
	ifTrue: [^self previous.] 
	ifFalse: [^self previous restandoMalo: unRestandoNatural previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
restateA: unNumeroNatural
	^unNumeroNatural previous - self previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
solucioonCatedraDeDividir: unDivisor
	^ unDivisor timesToDivide: self! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:03:33'!
timesToDivide: unDivisor
	self = unDivisor ifTrue: [^I] ifFalse: [^ I + ((self - unDivisor) solucioonCatedraDeDividir: unDivisor)]
	! !

II \ I!

II \ II!

IIII \ II!

IIII \ II!

II \ II!

II \ III!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:04:43' prior: 50651374!
timesToDivide: unDivisor
	(self isEqualTo: unDivisor) ifTrue: [^I] ifFalse: [^ I + ((self - unDivisor) solucioonCatedraDeDividir: unDivisor)]
	! !

IIII \ II!

IIII \ II!

III \ II!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:11:41' prior: 50650390!
next
	siguiente ifNotNil: [^siguiente].
	siguiente := II createChildNamed: self name, 'I'. 
	siguiente previous: self.
	^siguiente! !

!classRemoval: #IIII stamp: 'eaam 8/28/2023 21:12:06'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'eaam 8/28/2023 21:12:10'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:50:18' prior: 50650925!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(((self - divisor) -divisor) )
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!II class methodsFor: 'as yet unclassified' stamp: 'eaam 8/28/2023 21:50:20' prior: 50651588!
divisionMala: divisor
	(self isEqualTo: divisor) 
		ifTrue: [^ I]
		ifFalse: [
			(((self - divisor) - divisor) )
				ifTrue: [^I]
				ifFalse: [^ I + ((self - divisor) divisionMala: divisor)]
			]! !
!I class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 21:52:31' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/28/2023 21:52:31' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := I.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 21:52:31'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'eaam 8/28/2023 21:52:31'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := I.!

----STARTUP---- (31 August 2023 20:12:10) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano1.st----!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano1.st----!

!classRemoval: #IIII stamp: 'EAAM 8/31/2023 20:15:28'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'EAAM 8/31/2023 20:15:29'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'EAAM 8/31/2023 20:15:29'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #I stamp: 'EAAM 8/31/2023 20:15:29'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano1.st----!
!I class methodsFor: '--** private fileout/in **--' stamp: 'EAAM 8/31/2023 20:16:01' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'EAAM 8/31/2023 20:16:01' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := I.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'EAAM 8/31/2023 20:16:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'EAAM 8/31/2023 20:16:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := I.!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano1.st----!

!classRemoval: #IIII stamp: 'EAAM 8/31/2023 20:16:32'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'EAAM 8/31/2023 20:16:32'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!

!classRemoval: #IIII stamp: 'EAAM 8/31/2023 20:17:18'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'EAAM 8/31/2023 20:17:18'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'EAAM 8/31/2023 20:17:18'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #I stamp: 'EAAM 8/31/2023 20:17:18'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Quepasa.st----!

!classRemoval: #II stamp: 'EAAM 8/31/2023 20:17:50'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano1'!

!classRemoval: #I stamp: 'EAAM 8/31/2023 20:17:51'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano1'!

----STARTUP---- (31 August 2023 20:18:26) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!

!classRemoval: #IIII stamp: 'eaam 8/31/2023 20:19:31'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'eaam 8/31/2023 20:19:32'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'eaam 8/31/2023 20:19:32'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #I stamp: 'eaam 8/31/2023 20:19:32'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Quepasa.st----!
!I class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/31/2023 20:20:01' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'eaam 8/31/2023 20:20:01' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := I.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'eaam 8/31/2023 20:20:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'eaam 8/31/2023 20:20:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	siguiente := nil.
	anterior := I.!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Quepasa.st----!

!classRemoval: #II stamp: 'eaam 8/31/2023 20:22:41'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Quepasa'!

!classRemoval: #I stamp: 'eaam 8/31/2023 20:22:41'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Quepasa'!

----STARTUP---- (31 August 2023 20:23:00) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/NumerosNaturalesTests.st----!
!II class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 20:35:23' prior: 50650436!
/ unNumeroNatural
	unNumeroNatural = self ifTrue: [^I].
	(self esMenorA: unNumeroNatural) ifTrue: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	"((self - unNumeroNatural) esMenorA: unNumeroNatural ) ifTrue: [^I]."
	^I + ((self - unNumeroNatural) / unNumeroNatural )! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'eaameze 8/31/2023 20:35:29'!
PASSED!

!classRemoval: #IIII stamp: 'eaameze 8/31/2023 20:39:18'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'eaameze 8/31/2023 20:39:18'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'eaameze 8/31/2023 20:39:18'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #I stamp: 'eaameze 8/31/2023 20:39:19'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #NumerosNaturalesTest stamp: 'eaameze 8/31/2023 20:39:23'!
DenotativeObject subclass: #NumerosNaturalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales Tests'!

Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW'!

!classDefinition: #XXX category: 'ISW' stamp: 'eaameze 8/31/2023 20:47:09'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW'!
!XXX class methodsFor: 'no messages' stamp: 'eaameze 8/31/2023 20:55:36'!
findOddsPart0
	|elements index odds|
	
	elements :=  #(1 2 5 6 9).
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) 
			ifTrue: [odds add: (elements at: index)].
		index := index+1.
		].
	^odds! !

XXX new!

XXX new!

self findOddsPart0!

XXX new!

XXX new!

XXX findOddsPart0!
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 20:59:30'!
findOddsPart1
	|elements index odds|
	
	elements :=  #(1 2 5 6 9).
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) 
			ifTrue: [odds add: (elements at: index)].
		index := index+1.
		].
	^odds! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:06:19' prior: 50650796!
findOddsPart1
	|elements odds|
	elements :=  #(1 2 5 6 9).
	odds := OrderedCollection new.
	elements do: [: element | (element odd) ifTrue: [odds add: (element)]].
	^odds! !

XXX new!

XXX findOddsPart1!
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:14:18'!
findOddsPart2
	|elements odds|
	elements :=  #(1 2 5 6 9).
	odds := Set new.
	elements select: [: element | (element odd)].
	^odds! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:14:40' prior: 50650817!
findOddsPart2
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements select: [: element | (element odd)].
! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:17:38'!
findDoubles
	|elements doubles|
	elements :=  #(1 2 5 6 9).
	doubles := OrderedCollection new.
	elements do: [: element | (element odd)].
	^doubles ! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:18:26' prior: 50650831!
findDoubles
	|elements doubles|
	elements :=  #(1 2 5 6 9).
	doubles := OrderedCollection new.
	elements do: [: element | doubles add element].
	^doubles ! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:18:42' prior: 50650839!
findDoubles
	|elements doubles|
	elements :=  #(1 2 5 6 9).
	doubles := OrderedCollection new.
	elements do: [: element | doubles add: (element*2)].
	^doubles ! !

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Packages/TerseGuide.pck.st----!
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:22:22' prior: 50650847!
findDoubles
	|elements doubles|
	elements :=  #(1 2 5 6 9).
	doubles := OrderedCollection new.
	elements collect: [:element | element + element].
	^doubles ! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:22:39' prior: 50653776!
findDoubles
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements collect: [:element | element + element].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:23:21'!
findFirstEven
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements findFirst: [:element | element even].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:25:50' prior: 50653791!
findFirstEven
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements detect: [:element | element even].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:32:45'!
findFirstEvenWiothoutMatching
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements detect: [:element | element even] ifNone: [ 'no hay pares' ].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:33:30' prior: 50653804!
findFirstEvenWiothoutMatching
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements detect: [:element | element even] ifNone: [ ^'no hay pares' ].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:37:16'!
findFirstEvenWiothoutMatchingExeption
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements detect: [:element | element even] ifNone: [ self error: 'no hay pares' ].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:38:31'!
sumElementsInjecting
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements inject: 0 into: [:a :c | a + c].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:40:36'!
sumElementsSum
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements inject: 0 into: [:sum :element | sum + element].
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:40:59' prior: 50653828!
sumElementsInjecting
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements inject: 0 into: [:sum :element | sum + element]
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:45:31' prior: 50653834!
sumElementsSum
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements sum.
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:46:46' prior: 50653848!
sumElementsSum
	|elements|
	elements :=  #(1 2 5 6 9).
	^elements sum
	! !

XXX new!

#(1 2 3) sum!
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:49:21'!
extraactVowels
	|elements|
	elements :=  'sdawasffhsd'.
	^elements select: [:char | char isVowel]
	! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:50:27' prior: 50653860!
extraactVowels
	|elements|
	elements :=  'abcdefguijp'.
	^elements select: [:char | char isVowel]
	! !

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Quepasa.st----!

!classRemoval: #II stamp: 'eaameze 8/31/2023 21:56:24'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Quepasa'!

!classRemoval: #I stamp: 'eaameze 8/31/2023 21:56:24'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Quepasa'!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Peano.st----!
!II class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:56:41' prior: 50654170!
/ unNumeroNatural
	unNumeroNatural = self ifTrue: [^I].
	(self esMenorA: unNumeroNatural) ifTrue: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	"((self - unNumeroNatural) esMenorA: unNumeroNatural ) ifTrue: [^I]."
	^I + ((self - unNumeroNatural) / unNumeroNatural )! !

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/NumerosNaturalesTests.st----!
!II class methodsFor: 'as yet unclassified' stamp: 'eaameze 8/31/2023 21:58:20' prior: 50654321!
/ unNumeroNatural
	unNumeroNatural = self ifTrue: [^I].
	(self esMenorA: unNumeroNatural) ifTrue: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	((self - unNumeroNatural) esMenorA: unNumeroNatural ) ifTrue: [^I].
	^I + ((self - unNumeroNatural) / unNumeroNatural )! !

----STARTUP---- (4 September 2023 20:03:47) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Packages/TerseGuide.pck.st----!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'eaam 9/4/2023 21:18:02'!
currentTimeInMil

	^ Time millisecondClockValue * millisecond! !
!CustomerBookTest methodsFor: 'testing' stamp: 'eaam 9/4/2023 21:18:02' prior: 50653279!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := self currentTimeInMil.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'eaam 9/4/2023 21:18:02' prior: 50653528!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := self currentTimeInMil.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := self currentTimeInMil.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'eaam 9/4/2023 21:18:02' prior: 50653296!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := self currentTimeInMil.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'eaam 9/4/2023 21:18:02' prior: 50653561!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := self currentTimeInMil.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := self currentTimeInMil.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !

----STARTUP---- (7 September 2023 17:21:01) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


Object subclass: #Booleano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classDefinition: #Booleano category: 'CuisUniversity' stamp: 'eze 9/7/2023 17:22:12'!
Object subclass: #Booleano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classRemoval: #Booleano stamp: 'eze 9/7/2023 17:22:22'!
Object subclass: #Booleano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

Object subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Falso category: 'Booleano' stamp: 'eze 9/7/2023 17:24:36'!
Object subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

Object subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Verdadero category: 'Booleano' stamp: 'eze 9/7/2023 17:24:42'!
Object subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!
!Falso methodsFor: 'no messages' stamp: 'eze 9/7/2023 17:25:17'!
printOn
	^'falso'! !
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:25:34'!
not
	^Verdadero! !
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:26:51' prior: 50653644!
not
	^Verdadero new! !

!classDefinition: #Falso category: 'Booleano' stamp: 'eze 9/7/2023 17:29:27'!
Object subclass: #Falso
	instanceVariableNames: 'verdadero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:29:24' prior: 50653648!
not
	^verdadero! !

Object subclass: #Verdadero
	instanceVariableNames: 'verdadero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Verdadero category: 'Booleano' stamp: 'eze 9/7/2023 17:29:44'!
Object subclass: #Verdadero
	instanceVariableNames: 'verdadero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

Object subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Falso category: 'Booleano' stamp: 'eze 9/7/2023 17:31:41'!
Object subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:31:55' prior: 50653658!
not
	^Verdadero new! !

Object subclass: #Falso
	instanceVariableNames: 'falso'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Falso category: 'Booleano' stamp: 'eze 9/7/2023 17:32:03'!
Object subclass: #Falso
	instanceVariableNames: 'falso'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

Object subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Falso category: 'Booleano' stamp: 'eze 9/7/2023 17:32:25'!
Object subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

Object subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Verdadero category: 'Booleano' stamp: 'eze 9/7/2023 17:32:29'!
Object subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

Smalltalk at: #verdadero put: Verdadero new.
Smalltalk at: #falso put: Falso new!
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:33:32' prior: 50653683!
not
	^verdadero! !
!Verdadero methodsFor: 'no messages' stamp: 'eze 9/7/2023 17:33:59'!
not
	^falso! !

verdadero not.!

falso not.!
!Verdadero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:40:43'!
or: aBoolean
	^verdadero! !
!Verdadero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:40:55' prior: 50653727!
or: aBoolean
	^self! !
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:41:12'!
or: aBoolean
	^aBoolean! !
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:41:24'!
and: aBoolean
	^self! !
!Verdadero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:41:33'!
and: aBoolean
	^aBoolean! !
!Verdadero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:43:49' overrides: 16902975!
printOn: atream
	^'́verdadero'! !
!Verdadero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:44:08' prior: 50653746 overrides: 16902975!
printOn: atream
	^'verdadero'! !

!classDefinition: #Booleano category: 'Booleano' stamp: 'eze 9/7/2023 17:45:50'!
Object subclass: #Booleano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Verdadero category: 'Booleano' stamp: 'eze 9/7/2023 17:45:51'!
Booleano subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

Booleano subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!

!classDefinition: #Falso category: 'Booleano' stamp: 'eze 9/7/2023 17:46:14'!
Booleano subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleano'!
!Booleano methodsFor: 'no messages' stamp: 'eze 9/7/2023 17:46:39'!
not
	self subclassResponsibility ! !
!Booleano methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:47:04'!
or: aBooleano
	self subclassResponsibility ! !
!Booleano methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:47:07'!
and: aBooleano
	self subclassResponsibility ! !
!Falso methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:48:05' overrides: 16902975!
printOn: aStream
	aStream nextPutAll: 'falso'! !
!Verdadero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 17:48:15' prior: 50653751 overrides: 16902975!
printOn: aStream
	aStream nextPutAll: 'verdadero'! !

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Pre-Numeros-Ejercicio.st----!

Numero subclass: #a0
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero0
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero0 category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:38:21'!
Object subclass: #Numero0
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Numero0
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Numero0
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRenamed: #Numero0 as: #Enteros stamp: 'eze 9/7/2023 21:40:30'!
Smalltalk renameClassNamed: #Numero0 as: #Enteros!

Numero subclass: #Enteros
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Enteros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Enteros category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:40:49'!
Object subclass: #Enteros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Enteros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Enteros category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:40:51'!
Numero subclass: #Enteros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fractions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fractions category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:40:59'!
Numero subclass: #Fractions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRenamed: #Fractions as: #Fraccion stamp: 'eze 9/7/2023 21:41:39'!
Smalltalk renameClassNamed: #Fractions as: #Fraccion!
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50654018!
isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50653951!
* aMultiplier 

	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50654029!
isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50654024!
isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50653965!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50654080 overrides: 16901788!
hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50654069 overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50653998!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50654007 overrides: 16902975!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'eze 9/7/2023 21:41:39' prior: 50654040!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !

Numero subclass: #Fraccion
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:43:15'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:43:20'!
Numero subclass: #Fraccion
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Enteros
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Enteros category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:43:35'!
Numero subclass: #Enteros
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:43:44'!
Numero subclass: #Fraccion
	instanceVariableNames: 'value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Fraccion stamp: 'eze 9/7/2023 21:44:05'!
Numero subclass: #Fraccion
	instanceVariableNames: 'value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:44:27'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'value denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:45:19'!
Numero subclass: #Fraccion
	instanceVariableNames: 'value denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:45:38'!
Numero subclass: #Fraccion
	instanceVariableNames: 'value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'no messages' stamp: 'eze 9/7/2023 21:46:55' overrides: 50654214!
* aMultiplier 


	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)! !

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:52:42'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Enteros subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Zero category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:54:16'!
Enteros subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Enteros subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'eze 9/7/2023 21:54:19'!
Enteros subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----STARTUP---- (28 September 2023 18:05:08) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


Object subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classDefinition: #RomanTest category: 'CuisUniversity' stamp: 'eaam 9/28/2023 18:07:15'!
Object subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classDefinition: #RomanTest category: 'CuisUniversity' stamp: 'eaam 9/28/2023 18:07:30'!
TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classRemoval: #RomanTest stamp: 'eaam 9/28/2023 18:07:37'!
TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

!classDefinition: #RomanTest category: 'CuisUniversity' stamp: 'eaam 9/28/2023 18:08:13'!
TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CuisUniversity'!

TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!

!classDefinition: #RomanTest category: 'Roman' stamp: 'eaam 9/28/2023 18:08:48'!
TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!
!RomanTest methodsFor: 'no messages' stamp: 'eaam 9/28/2023 18:12:04'!
Test01
	self assert: 1 asRoman equals: 'I'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:16:38'!
test01
	self assert: 1 asRoman equals: 'I'! !

!methodRemoval: RomanTest #Test01 stamp: 'eaam 9/28/2023 18:16:43'!
Test01
	self assert: 1 asRoman equals: 'I'!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:16:46'!
ERROR!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:16:56'!
ERROR!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:17:39'!
ERROR!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:17:48'!
ERROR!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:18:09'!
FAILURE!

	self assert: 1 asRoman equals: 'I'!
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:19:20'!
asRoman
	self shouldBeImplemented.! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:19:36' prior: 50653678!
asRoman
	^ 'I'.! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:19:50' prior: 50653658!
test01
	self assert: 1 asRoman equals: 'I'! !

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:19:52'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:19:52'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:21:56'!
test02
	self assert: 2 asRoman equals: 'II'! !

	self assert: 2 asRoman equals: 'II'!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:22:19'!
FAILURE!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:23:08'!
FAILURE!
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:25:15' prior: 50653682!
asRoman
	(self = 1) ifTrue: [^'I'.].
	^'II'! !

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:25:28'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:25:28'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:25:28'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:25:47'!
test03
	self assert: 3 asRoman equals: 'III'! !

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:25:49'!
FAILURE!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:28:04'!
test04
	self assert: 4 asRoman equals: 'IV'! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:28:17' prior: 50653705!
asRoman
	(self = 1) ifTrue: [^'I'.].
	(self = 2) ifTrue: [^'II'.].
	(self = 3) ifTrue: [^'III'.].
	(self = 4) ifTrue: [^'IV'.].! !

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:28:21'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:28:21'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:28:21'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:28:21'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:28:21'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:28:57'!
test05
	self assert: 5 asRoman equals: 'V'! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:29:30' prior: 50653728!
asRoman
	(self = 1) ifTrue: [^'I'.].
	(self = 2) ifTrue: [^'II'.].
	(self = 3) ifTrue: [^'III'.].
	(self = 4) ifTrue: [^'IV'.].
	^'V'.! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:32:16' prior: 50653751!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	
	(self = 4) ifTrue: [^'IV'.].
	^'V'.! !

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:32:38'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:32:38'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:32:38'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:32:38'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:32:38'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:32:38'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:34:45'!
test06
	self assert: 6 asRoman equals: 'VI'! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:35:00' prior: 50653758!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	^'VI'.! !

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:35:02'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:35:02'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:35:02'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:35:02'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:35:02'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:35:02'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:35:02'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:36:40'!
test07
	self assert: 7 asRoman equals: 'VII'! !

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:36:42'!
FAILURE!
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:36:59' prior: 50653783!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self = 6) ifTrue: [^'V'.].
	
	^'VII'.! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:37:08'!
test08
	self assert: 8 asRoman equals: 'VIII'! !

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:37:14'!
FAILURE!
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:37:35' prior: 50653813!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self = 6) ifTrue: [^'VI'.].
	(self = 7) ifTrue: [^'VII'.].
	^'VIII'.! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:37:38' prior: 50653821!
test08
	self assert: 8 asRoman equals: 'VIII'! !

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:37:38'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:38:36'!
test09
	self assert: 9 asRoman equals: 'IX'! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:38:54' prior: 50653828!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self = 6) ifTrue: [^'VI'.].
	(self = 7) ifTrue: [^'VII'.].
	(self = 8) ifTrue: [^'VIII'.].
	^'IX'.! !

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:39:13'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:42:27'!
test10
	self assert: 10 asRoman equals: 'X'! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:42:44' prior: 50653868!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self = 6) ifTrue: [^'VI'.].
	(self = 7) ifTrue: [^'VII'.].
	(self = 8) ifTrue: [^'VIII'.].
	(self = 9) ifTrue: [^'IX'.].
	^'X'.! !

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:42:46'!
PASSED!
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:44:20' prior: 50653906!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	(self = 6) ifTrue: [^'VI'.].
	(self = 7) ifTrue: [^'VII'.].
	(self = 8) ifTrue: [^'VIII'.].
	(self = 9) ifTrue: [^'IX'.].
	].
	^'X'.! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:45:21' prior: 50653942!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	(self = 6) ifTrue: [^'VI'.].
	(self = 7) ifTrue: [^'VII'.].
	(self = 8) ifTrue: [^'VIII'.].
	].
	(self = 9) ifTrue: [^'IX'.].
	^'X'.! !
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:46:45' prior: 50653954!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	[^ String new: self withAll: $I.	].
	].
	(self = 9) ifTrue: [^'IX'.].
	^'X'.! !

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:46:48'!
FAILURE!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:46:48'!
FAILURE!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:46:48'!
FAILURE!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:46:48'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:46:51'!
FAILURE!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:47:03'!
FAILURE!
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:47:12' prior: 50653966!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ String new: self withAll: $I.	
	].
	(self = 9) ifTrue: [^'IX'.].
	^'X'.! !

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:47:16'!
FAILURE!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:47:16'!
FAILURE!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:47:16'!
FAILURE!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:47:16'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:47:17'!
FAILURE!
!SmallInteger methodsFor: '#romans' stamp: 'eaam 9/28/2023 18:47:51' prior: 50654006!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', (String new: self - 5 withAll: $I).	
	].
	(self = 9) ifTrue: [^'IX'.].
	^'X'.! !

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:47:53'!
PASSED!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:49:13' prior: 50654044!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', (self - 5 asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	^'X'.! !

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:49:15'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:49:15'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:49:15'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:49:15'!
PASSED!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:49:24' prior: 50654080!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	^'X'.! !

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:49:26'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:52:20'!
test11
	self assert: 11 asRoman equals: 'XI'! !

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 18:52:22'!
FAILURE!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:53:18'!
test12
	self assert: 12 asRoman equals: 'XII'! !

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 18:53:19'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:53:46' prior: 50654115!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self = 1) ifTrue: [^'XI'.].
	^'XII'.! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:54:55'!
test13
	self assert: 13 asRoman equals: 'XIII'! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:55:32' prior: 50654164!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self = 11) ifTrue: [^'XI'.].
	(self = 12) ifTrue: [^'XII'.].
	^'XIII'! !

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 18:55:34'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:56:30'!
test14
	self assert: 14 asRoman equals: 'XIV'! !

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 18:56:32'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:57:04' prior: 50654181!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self = 11) ifTrue: [^'XI'.].
	(self = 12) ifTrue: [^'XII'.].
	(self = 13) ifTrue: [^'XIII'.].
	^'XIV'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:58:27' prior: 50654233!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 13) 
	ifTrue: [
	^ 'X', ((self - 10) asRoman).	
	].
	(self = 11) ifTrue: [^'XI'.].
	(self = 12) ifTrue: [^'XII'.].
	(self = 13) ifTrue: [^'XIII'.].
	^'XIV'
	! !

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 18:58:29'!
PASSED!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:58:36' prior: 50654248!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 13) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 11) ifTrue: [^'XI'.].
	(self = 12) ifTrue: [^'XII'.].
	(self = 13) ifTrue: [^'XIII'.].
	^'XIV'
	! !

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 18:58:38'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 18:59:05'!
test15
	self assert: 15 asRoman equals: 'XV'! !

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 18:59:07'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 18:59:29' prior: 50654299!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 14) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XV'
	! !

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 18:59:31'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:00:00'!
test16
	self assert: 16 asRoman equals: 'XVI'! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:00:07' prior: 50654357!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 15) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XVI'
	! !

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:00:11'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:00:19'!
test17
	self assert: 17 asRoman equals: 'XVII'! !

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:00:20'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:00:28' prior: 50654412!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 16) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XVII'
	! !

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:00:31'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:00:39'!
test18
	self assert: 18 asRoman equals: 'XVIII'! !

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:00:42'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:00:53' prior: 50654471!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 17) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XVIII'
	! !

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testE stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'eaam 9/28/2023 19:00:56'!
FAILURE!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testRoundHalfAwayFromZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:00:56'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testRoundHalfAwayFromZero stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'eaam 9/28/2023 19:00:56'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'eaam 9/28/2023 19:00:57'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'eaam 9/28/2023 19:00:57'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'eaam 9/28/2023 19:00:58'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'eaam 9/28/2023 19:00:58'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'eaam 9/28/2023 19:00:58'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #LargePositiveIntegerTest #test_raisedTo_modulo stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNext stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBits stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBitsInvalid stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextInteger stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextIntegerInvalid stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger1 stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger2 stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSeedAndRepeatability stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSetAtRandom stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSimpleBuckets stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNext stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBits stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBitsInvalid stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextInteger stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextIntegerInvalid stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger1 stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger2 stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSeedAndRepeatability stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSetAtRandom stamp: 'eaam 9/28/2023 19:00:59'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSimpleBuckets stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #TrieUnicodeTest #test01 stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #TrieUnicodeTest #test02 stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #TrieUnicodeTest #test03 stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'eaam 9/28/2023 19:01:00'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'eaam 9/28/2023 19:01:00'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'eaam 9/28/2023 19:01:00'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'eaam 9/28/2023 19:01:00'!
FAILURE!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:01:04'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:01:08'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:02:28'!
test19
	self assert: 19 asRoman equals: 'XIX'! !

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:02:34'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:02:47' prior: 50654532!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 18) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XIX'
	! !

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:04:06'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:04:16'!
test20
	self assert: 20 asRoman equals: 'XX'! !

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:04:17'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:04:27' prior: 50655827!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 19) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XX'
	! !

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:04:30'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:05:45'!
test30
	self assert: 30 asRoman equals: 'XXX'! !

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:05:55'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:06:06' prior: 50655893!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 29) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XXX'
	! !

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:06:10'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:06:34'!
test31
	self assert: 31 asRoman equals: 'XXXI'! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:06:45' prior: 50655961!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 30) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XXXI'
	! !

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:06:47'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:07:38'!
test39
	self assert: 39 asRoman equals: 'XXXIX'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:07:55'!
test32
	self assert: 32 asRoman equals: 'XXXII'! !

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:07:57'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:08:08' prior: 50656029!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 32) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XXXII'
	! !

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:08:11'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'eaam 9/28/2023 19:08:11'!
FAILURE!

!testRun: #RomanTest #test39 stamp: 'eaam 9/28/2023 19:08:11'!
FAILURE!

!methodRemoval: RomanTest #test39 stamp: 'eaam 9/28/2023 19:08:38'!
test39
	self assert: 39 asRoman equals: 'XXXIX'!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:08:54'!
test40
	self assert: 40 asRoman equals: 'XL'! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:09:08' prior: 50656107!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 40) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XL'
	! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:10:29'!
test50
	self assert: 50 asRoman equals: 'L'! !

	self assert: 50 asRoman equals: 'L'!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:10:45' prior: 50656188!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	^'XL'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:11:07' prior: 50656208!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	^'L'
	! !

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:11:09'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:11:19'!
test43
	self assert: 43 asRoman equals: 'XL'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:11:26' prior: 50656295!
test43
	self assert: 43 asRoman equals: 'XLIII'! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:11:45' prior: 50656222!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self = 43) ifTrue: [^'XL'.].
	^'L'
	! !

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:11:48'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:12:01' prior: 50656305!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self = 43) ifTrue: [^'XLIII'.].
	^'L'
	! !

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:12:03'!
PASSED!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:12:33' prior: 50656323!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'X', ((self - 40) asRoman).	
	].
	^'L'
	! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:14:29'!
test100
	self assert: 100 asRoman equals: 'C'! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:14:51' prior: 50656400!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'X', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:15:22' prior: 50656422!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'X', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	^'C'
	! !

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:15:23'!
FAILURE!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:15:23'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:15:23'!
FAILURE!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:15:34'!
FAILURE!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:15:34'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:15:34'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:15:43' prior: 50656440!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	^'C'
	! !

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:15:44'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:16:02'!
test200
	self assert: 200 asRoman equals: 'CC'! !

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:16:04'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:16:39' prior: 50656589!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	^'CC'
	! !

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:16:41'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:16:49'!
test500
	self assert: 500 asRoman equals: 'D'! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:17:07' prior: 50656677!
asRoman
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:17:09'!
PASSED!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:20:48'!
asRomanOne: one five: five ten: ten
	"
	I V X 10
	X L C 100
	C D M 1000
	"
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:21:24' prior: 50656853!
asRomanOne: one five: five ten: ten
	"
	I V X 10
	X L C 100
	C D M 1000
	"
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:21:59' prior: 50656766!
asRoman
	(self between: 1  and: 10) ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:23:18' prior: 50656875!
asRomanOne: one five: five ten: ten
	"
	I V X 10
	X L C 100
	C D M 1000
	"
	self < 4 ifTrue:
	[^ String new: self withAll: $I.	].
	(self = 4) ifTrue: [^one, five.].
	(self = 5) ifTrue: [^five.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^one, ten.].
	(self = 10) ifTrue: [^ten.].
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:24:11' prior: 50656888!
asRoman
	(self between: 1  and: 10) ifTrue:
	[^self asRomanOne: 'I'	five: 'V' ten: 'X'.	].
	(self = 4) ifTrue: [^'IV'.].
	(self = 5) ifTrue: [^'V'.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^'IX'.].
	(self = 10) ifTrue: [^'X'.].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:24:29' prior: 50656923!
asRoman
	(self between: 1  and: 10) ifTrue:
	[^self asRomanOne: 'I'	five: 'V' ten: 'X'.	].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:24:31'!
PASSED!

----SNAPSHOT----(28 September 2023 19:24:47) CuisUniversity-5981.image priorSource: 10197292!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:25:52' prior: 50656909!
asRomanOne: one five: five ten: ten
	"
	I V X 10
	X L C 100
	C D M 1000
	"
	self < 4 ifTrue:
	[^ String new: self withAll: one.	].
	(self = 4) ifTrue: [^one, five.].
	(self = 5) ifTrue: [^five.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^one, ten.].
	(self = 10) ifTrue: [^ten.].
	! !

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:25:54'!
ERROR!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:25:54'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:25:58'!
ERROR!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:26:14' prior: 50656944!
asRoman
	(self between: 1  and: 10) ifTrue:
	[^self asRomanOne: $I	five: $V ten: $X.	].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:26:44' prior: 50657030!
asRomanOne: one five: five ten: ten
	"
	I V X 10
	X L C 100
	C D M 1000
	"
	self < 4 ifTrue:
	[^ String new: self withAll: one.	].
	(self = 4) ifTrue: [^one asString, five asString.].
	(self = 5) ifTrue: [^five asString.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^one asString, ten asString.].
	(self = 10) ifTrue: [^ten asString.].
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:26:55' prior: 50657113!
asRoman
	(self between: 1  and: 10) ifTrue:
	[^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:26:57'!
PASSED!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:27:04' prior: 50657143!
asRoman
	(self between: 1  and: 10) ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:27:27' prior: 50657226!
asRoman
	(self between: 1  and: 10) ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:27:31' prior: 50657241!
asRoman
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 39) 
	ifTrue: [
		^ 'X', ((self - 10) asRoman).	
	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:29:07' prior: 50657256!
asRoman
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 100) 
	ifTrue: [^((self // 10) asRomanOne: $X	 five: $L ten: $C), (self \\ 10) asRoman	].
	(self = 40) ifTrue: [^'XL'.].
	(self between: 41  and: 49) 
	ifTrue: [
		^ 'XL', ((self - 40) asRoman).	
	].
	(self = 50) ifTrue: [^'L'.].
	(self = 100) ifTrue: [^'C'.].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:29:09'!
FAILURE!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:29:09'!
FAILURE!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:29:09'!
FAILURE!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:29:09'!
FAILURE!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:29:09'!
FAILURE!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:29:09'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:29:12'!
FAILURE!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:29:17'!
FAILURE!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:30:21'!
test0
	self assert: 0 asRoman equals: ''! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:30:50' prior: 50657128!
asRomanOne: one five: five ten: ten
	"
	I V X 10
	X L C 100
	C D M 1000
	"
	(self == 0) ifTrue: [^''].
	self < 4 ifTrue:
	[^ String new: self withAll: one.	].
	(self = 4) ifTrue: [^one asString, five asString.].
	(self = 5) ifTrue: [^five asString.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^one asString, ten asString.].
	(self = 10) ifTrue: [^ten asString.].
	! !

!testRun: #RomanTest #test0 stamp: 'eaam 9/28/2023 19:30:53'!
FAILURE!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:32:26' prior: 50657271!
asRoman
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 100) 
	ifTrue: [^((self // 10) asRomanOne: $X	 five: $L ten: $C), (self \\ 10) asRoman	].
	(self = 200) ifTrue: [^'CC'.].
	^'D'
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:33:23' prior: 50657383!
asRoman
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 100) 
		ifTrue: [^((self // 10) asRomanOne: $X	 five: $L ten: $C), (self \\ 10) asRoman	].
	(self between: 101  and: 1000) 
		ifTrue: [^((self // 10) asRomanOne: $C	 five: $D ten: $M), (self \\ 100) asRoman	].	! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 19:33:41'!
test1000
	self assert: 1000 asRoman equals: 'M'! !

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:33:43'!
ERROR!

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:33:50'!
ERROR!

!methodRemoval: RomanTest #test0 stamp: 'eaam 9/28/2023 19:34:02'!
test0
	self assert: 0 asRoman equals: ''!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:34:13'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:34:13'!
ERROR!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:34:16'!
ERROR!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:34:40' prior: 50657394!
asRoman
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 100) 
		ifTrue: [^((self // 10) asRomanOne: $X	 five: $L ten: $C), ((self \\ 10) asRoman	)].
	(self between: 101  and: 1000) 
		ifTrue: [^((self // 10) asRomanOne: $C	 five: $D ten: $M), ((self \\ 100) asRoman	)].	! !

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:34:43'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:34:43'!
ERROR!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:34:45'!
ERROR!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:34:56'!
ERROR!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:37:00' prior: 50657364!
asRomanOne: one five: five ten: ten
	"
	I V X 10
	X L C 100
	C D M 1000
	"
	self < 4 ifTrue:
	[^ String new: self withAll: one.	].
	(self = 4) ifTrue: [^one asString, five asString.].
	(self = 5) ifTrue: [^five asString.].
	(self between: 6  and: 8) 
	ifTrue: [
	^ 'V', ((self - 5) asRoman).	
	].
	(self = 9) ifTrue: [^one asString, ten asString.].
	(self = 10) ifTrue: [^ten asString.].
	! !
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:37:06' prior: 50657492!
asRoman
	(self == 0) ifTrue: [^''].
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 100) 
		ifTrue: [^((self // 10) asRomanOne: $X	 five: $L ten: $C), ((self \\ 10) asRoman	)].
	(self between: 101  and: 1000) 
		ifTrue: [^((self // 10) asRomanOne: $C	 five: $D ten: $M), ((self \\ 100) asRoman	)].	! !

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:37:09'!
ERROR!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:37:09'!
ERROR!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:37:09'!
PASSED!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:37:09'!
ERROR!

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:37:11'!
ERROR!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:37:15'!
ERROR!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:37:22' prior: 50657595!
asRoman
	(self == 0) ifTrue: [^''].
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 100) 
		ifTrue: [^((self // 10) asRomanOne: $X	 five: $L ten: $C), ((self \\ 10) asRoman	)].
	(self between: 101  and: 1000) 
		ifTrue: [^((self // 10) asRomanOne: $C	 five: $D ten: $M), ((self \\ 10) asRoman	)].	! !

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:37:24'!
ERROR!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:37:24'!
ERROR!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:37:24'!
PASSED!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:37:24'!
ERROR!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:37:28'!
ERROR!
!SmallInteger methodsFor: '*romans' stamp: 'eaam 9/28/2023 19:38:18' prior: 50657684!
asRoman
	(self == 0) ifTrue: [^''].
	(self between: 1  and: 10) 
		ifTrue: [^self asRomanOne: $I	 five: $V ten: $X.	].
	(self between: 11  and: 100) 
		ifTrue: [^((self // 10) asRomanOne: $X	 five: $L ten: $C), ((self \\ 10) asRoman	)].
	(self between: 101  and: 1000) 
		ifTrue: [^((self // 100) asRomanOne: $C	 five: $D ten: $M), ((self \\ 10) asRoman	)].	! !

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test100 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test1000 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test200 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test32 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test43 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

!testRun: #RomanTest #test500 stamp: 'eaam 9/28/2023 19:38:19'!
PASSED!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/04-BabySteps/TDDBabyStepsGame.st----!

TDDBabyStepsGameContador start.!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'eaam 9/28/2023 20:28:09'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:31:51'!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

TestCase subclass: #Contador
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'eaam 9/28/2023 20:32:26'!
TestCase subclass: #Contador
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!Contador methodsFor: 'no messages' stamp: 'eaam 9/28/2023 20:32:34' overrides: 16902254!
value
	^value! !
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:32:50' overrides: 16920235!
initialize
	value := 0! !
!Contador class methodsFor: 'no messages' stamp: 'eaam 9/28/2023 20:33:11' overrides: 16785646!
new
	^self new initialize! !
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:34:16'!
valor
	^value! !

!methodRemoval: Contador #value stamp: 'eaam 9/28/2023 20:34:16'!
value
	^value!
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:34:42' prior: 50659701!
valor
	^0! !

!methodRemoval: Contador class #new stamp: 'eaam 9/28/2023 20:34:56'!
new
	^self new initialize!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'eaam 9/28/2023 20:35:07'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'eaam 9/28/2023 20:35:19'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:35:19'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:35:19'!
ERROR!

!methodRemoval: TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:35:19'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:35:19'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:35:19'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:35:57'!
ERROR!
!Contador methodsFor: 'operator' stamp: 'eaam 9/28/2023 20:36:14'!
incrementar
	self shouldBeImplemented.! !
!Contador methodsFor: 'operator' stamp: 'eaam 9/28/2023 20:36:23' prior: 50659759!
incrementar
	^1.! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:36:37'!
FAILURE!
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:37:12' prior: 50659708!
valor
	^value! !
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:37:22' prior: 50659763!
incrementar
	value := value + 1.! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:37:27'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'eaam 9/28/2023 20:37:27'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:37:27'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'eaam 9/28/2023 20:38:41'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:38:41'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:38:41'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'eaam 9/28/2023 20:38:41'!
PASSED!

!methodRemoval: TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'eaam 9/28/2023 20:38:41'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	!
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:43:07' prior: 50659693 overrides: 16920235!
initialize
	value := 0! !
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:45:07' prior: 50659775!
incrementar
	value := 1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'eaam 9/28/2023 20:45:08'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:45:08'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:45:08'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'eaam 9/28/2023 20:45:08'!
FAILURE!

!methodRemoval: TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'eaam 9/28/2023 20:45:08'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:45:08'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'eaam 9/28/2023 20:45:08'!
FAILURE!
!Contador methodsFor: 'as yet unclassified' stamp: 'eaam 9/28/2023 20:45:24' prior: 50659833!
incrementar
	value := value + 1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'eaam 9/28/2023 20:45:25'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:45:25'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'eaam 9/28/2023 20:45:25'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:45:25'!
extraTest
	
	self assert: true.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'eaam 9/28/2023 20:45:25'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'eaam 9/28/2023 20:45:25'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'eaam 9/28/2023 20:45:25'!
PASSED!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 20:47:35'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!

'A' \\ 'Z'!

$A \\ $Z!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:51:39'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:51:58'!
ERROR!
!Object methodsFor: 'category-name' stamp: 'eaam 9/28/2023 20:52:15'!
asRot13
	self shouldBeImplemented.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:52:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:53:18'!
ERROR!

!methodRemoval: Object #asRot13 stamp: 'eaam 9/28/2023 20:53:49'!
asRot13
	self shouldBeImplemented.!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:53:54'!
ERROR!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 20:54:01'!
asRot13
	self shouldBeImplemented.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:55:26'!
ERROR!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 20:55:45' prior: 50659966!
asRot13
	^ $n.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:55:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:55:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:55:51'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:55:51'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:55:51'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:55:51'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:55:51'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:55:51'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:56:08'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 20:56:51' prior: 50659975!
asRot13
	(self = $a) ifTrue: [^$n].! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 20:57:19' prior: 50660027!
asRot13
	(self = $a) ifTrue: [^$n].
	^$m! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:58:06'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 20:58:28' prior: 50660032!
asRot13
	(self = $a) ifTrue: [^$n].
	^$z! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:58:34'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:58:34'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:58:34'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:59:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:59:14'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:59:14'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:59:14'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:59:14'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 20:59:14'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 20:59:14'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:00:25' prior: 50660041!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	^$a! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:29'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:00:29'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:29'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:29'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:00:29'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:00:29'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:01:05' prior: 50660098!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	^$m! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:01:09'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:01:09'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:01:09'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:01:09'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:01:09'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:01:09'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:03:26' prior: 50660164!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	^$`! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:03:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:03:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:03:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:03:33'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:03:33'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:03:33'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:03:33'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:03:33'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:03:33'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:04:16' prior: 50660235!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	(self = $`) ifTrue: [^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:04:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:04:20'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:04:20'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:20'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:20'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:04:20'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:04:20'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:05:21' prior: 50660314!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $A) ifTrue: [^$N].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	(self = $M) ifTrue: [^$Z].
	(self = $`) ifTrue: [^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:05:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:05:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:05:26'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:05:26'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:05:26'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:06:06' prior: 50660410!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $A) ifTrue: [^$N].
	(self = $m) ifTrue: [^$z].
	(self = $M) ifTrue: [^$Z].
	
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	
	(self = $`) ifTrue: [^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:11'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:06:11'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:06:11'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:06:11'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:06:11'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:06:11'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:06:49' prior: 50660517!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $A) ifTrue: [^$N].
	(self = $m) ifTrue: [^$z].
	(self = $M) ifTrue: [^$Z].
	
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	
	(self = $`) ifTrue: [^$`].
	(self = $`) ifTrue: [^${].
	^''! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:06:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:59'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:06:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:06:59'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:07:10' prior: 50660624!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $A) ifTrue: [^$N].
	(self = $m) ifTrue: [^$z].
	(self = $M) ifTrue: [^$Z].
	
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:07:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:07:15'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:07:15'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:07:15'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:07:15'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:07:15'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:07:15'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:07:25'!
FAILURE!

----End fileIn of /home/clinux01/ing-software-1-c2-2023/CuisLinux64/Packages/TerseGuide.pck.st----!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:11:34' prior: 50660726!
asRot13
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:11:39'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:13:54' prior: 50663776!
asRot13
	(self asciiValue).
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:14:15' prior: 50663792!
asRot13
	(self asciiValue: self).
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:15:34' prior: 50663805!
asRot13
	(self asciiValue).
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:16:38' prior: 50663819!
asRot13
	(self asciiValue between: $a asciiValue and: $a asciiValue).
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:17:40' prior: 50663832!
asRot13
	(self asciiValue between: $a asciiValue and: $z asciiValue).
	
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:17:52' prior: 50663847!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue).
	
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:19:10' prior: 50663862!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self asciiValue: (self asciiValue + 13)].	
	(self = $a) ifTrue: [^$n].
	(self = $m) ifTrue: [^$z].
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:19:17' prior: 50663877!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self asciiValue: (self asciiValue + 13)].	
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 21:19:21' prior: 50660839!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:19:21'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:19:48'!
ERROR!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:22:09' prior: 50663893!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:22:53' prior: 50663926!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self = $n) ifTrue: [^$a].
	(self = $z) ifTrue: [^$m].
	
	(self = $A) ifTrue: [^$N].
	(self = $M) ifTrue: [^$Z].
	(self = $N) ifTrue: [^$A].
	(self = $Z) ifTrue: [^$M].
	
	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:23:25' prior: 50663941!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self asciiValue between: $A asciiValue and: $N asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $N asciiValue and: $Z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	

	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:23:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:23:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:23:53'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:23:53'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:24:02'!
FAILURE!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:25:19' prior: 50663960!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self asciiValue between: $A asciiValue and: $M asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $N asciiValue and: $Z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	

	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:25:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:25:24'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:25:24'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:25:28'!
ERROR!
!Object methodsFor: 'TDDBabyStepsGameRot13' stamp: 'eaam 9/28/2023 21:26:25' prior: 50664031!
asRot13
	self isString.

	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self asciiValue between: $A asciiValue and: $M asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $N asciiValue and: $Z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	

	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !

!methodRemoval: Object #asRot13 stamp: 'eaam 9/28/2023 21:36:39'!
asRot13
	self isString.

	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self asciiValue between: $A asciiValue and: $M asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $N asciiValue and: $Z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	

	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:36:53'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:20'!
ERROR!
!Character methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:37:39'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:37:43' prior: 50664150!
asRot13
	self isString.

	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self asciiValue between: $A asciiValue and: $M asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $N asciiValue and: $Z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	

	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !
!Character methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:37:49' prior: 50664154!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self asciiValue between: $A asciiValue and: $M asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $N asciiValue and: $Z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	

	(self = $`) ifTrue: [^$`].
	(self = ${) ifTrue: [^${].
	^''! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:37:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:37:59'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:37:59'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:38:04'!
ERROR!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:38:21'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:40:12' prior: 50664244!
asRot13
	^'', (self at: 1) asRot13 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:40:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:40:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:40:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:40:25'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:40:32'!
ERROR!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:43:16' prior: 50664248!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^self class new: (self at: 1) asRot13 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:43:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:43:32'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:43:32'!
ERROR!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:44:10' prior: 50664305!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^self class new: (self at: 1) asRot13! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:45:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:45:53'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:45:53'!
ERROR!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:46:46' prior: 50664360!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^self class new: ((self at: 1) asRot13)! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:46:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:46:53'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:46:53'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:47:16'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:47:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:47:21'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:47:21'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:47:25'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:47:39'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:47:39'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:47:50'!
ERROR!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:49:02' prior: 50664414!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^self at: 1 put: ((self at: 1) asRot13)! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:49:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:49:07'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:49:07'!
FAILURE!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 21:49:36' prior: 50664574!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^'' at: 1 put: ((self at: 1) asRot13)! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 21:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:49:39'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:49:39'!
ERROR!

b  x isEmpty.									"test if string is empty"
!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 21:58:07'!
ERROR!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 22:00:56' prior: 50664628!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^self class new: ((self at: 1) asRot13)! !
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 22:03:14' prior: 50664687!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^((self at: 1) asRot13) asString! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:03:20'!
PASSED!
!Character methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 22:03:36' prior: 50664175!
asRot13
	(self asciiValue between: $a asciiValue and: $m asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	
	(self asciiValue between: $A asciiValue and: $M asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue + 13)].	
	(self asciiValue between: $N asciiValue and: $Z asciiValue)
		ifTrue: [^ self class asciiValue: (self asciiValue - 13)].	

	^self! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:03:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:03:46'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 22:03:46'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:03:46'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:03:46'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 22:03:46'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:03:46'!
FAILURE!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 22:05:53' prior: 50664693!
asRot13
	(self size = 1) isTrue:
	[(self isEmpty ) ifTrue: [^''].
	^((self at: 1) asRot13) asString.].! !
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 22:07:10' prior: 50664872!
asRot13
	(self isEmpty ) ifTrue: [^''].
	(self size = 1) isTrue:
	[^((self at: 1) asRot13) asString.].

	^ (self at: 1) asRot13 asString, (self at: 2) asRot13 asString! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:07:15'!
ERROR!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 22:07:37' prior: 50664878!
asRot13
	(self isEmpty ) ifTrue: [^''].
	(self size = 1) ifTrue:
	[^((self at: 1) asRot13) asString.].

	^ (self at: 1) asRot13 asString, (self at: 2) asRot13 asString! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:07:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:07:44'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 22:07:44'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 9/28/2023 22:07:44'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 9/28/2023 22:07:44'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 22:07:44'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 9/28/2023 22:07:44'!
FAILURE!
!String methodsFor: 'asRot13' stamp: 'eaam 9/28/2023 22:10:31' prior: 50664890!
asRot13
	(self isEmpty ) ifTrue: [^''].
	^self inject: '' into: [:string :char | string, char asRot13 asString].! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 9/28/2023 22:10:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'eaam 9/28/2023 22:10:42'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 9/28/2023 22:10:42'!
PASSED!

----SNAPSHOT----(28 September 2023 22:11:09) CuisUniversity-5981.image priorSource: 10412018!

----STARTUP---- (2 October 2023 17:33:29) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!

!Character methodsFor: 'asRot13' stamp: 'eaam 10/2/2023 17:35:15' prior: 50664743!
asRot13
	(self asLowercase asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [ ^ self class asciiValue: self asciiValue + 13 ].
	(self asLowercase asciiValue
		between: $n asciiValue
		and: $z asciiValue) ifTrue: [ ^ self class asciiValue: self asciiValue - 13 ].
	! !

!testRun: #CharacterTest #testCaseConversion stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'eaam 10/2/2023 17:35:15'!
PASSED!

!testRun: #BooleanTest #testAndAndAndAndTrueTable stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #BooleanTest #testAndAndAndTrueTable stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #BooleanTest #testAndAndTrueTable stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #BooleanTest #testIsBoolean stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #BooleanTest #testOrOrOrOrTrueTable stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #BooleanTest #testOrOrOrTrueTable stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #BooleanTest #testOrOrTrueTable stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'eaam 10/2/2023 17:35:20'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'eaam 10/2/2023 17:35:21'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:22'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:22'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'eaam 10/2/2023 17:35:22'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:22'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'eaam 10/2/2023 17:35:23'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'eaam 10/2/2023 17:35:24'!
PASSED!

!testRun: #SmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:24'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'eaam 10/2/2023 17:35:24'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'eaam 10/2/2023 17:35:24'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'eaam 10/2/2023 17:35:25'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:25'!
PASSED!

!testRun: #SmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:25'!
PASSED!

!testRun: #SmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:26'!
PASSED!

!testRun: #SmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:26'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:26'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:26'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'eaam 10/2/2023 17:35:26'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:26'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'eaam 10/2/2023 17:35:27'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'eaam 10/2/2023 17:35:27'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'eaam 10/2/2023 17:35:27'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'eaam 10/2/2023 17:35:27'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'eaam 10/2/2023 17:35:27'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'eaam 10/2/2023 17:35:27'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'eaam 10/2/2023 17:35:27'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #SmalltalkCompleterTest #testMessages stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #WeakMessageSendTest #testIsMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #ObjectTest #testErrorSignalsTheRightException stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenBecauseSignalsTheRightError stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenSignalsTheRightError stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorAt stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorClass stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorEqEq stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorInstVarAt stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorPerform stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorSize stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
literalVariable
	#_coverageTracker118009_ markAsExecuted.
	#_coverageTracker118009_
		coverAll:
			{20 to: 25}
		by: Object.! !

!testRun: #CodeCoverageTest #test001_1_CoversALiteralVariable stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
manyLiteralVariables
	#_coverageTracker118017_ markAsExecuted.
	#_coverageTracker118017_
		coverAll:
			{25 to: 30}
		by: Object.
	#_coverageTracker118017_
		coverAll:
			{34 to: 44}
		by: ProtoObject.! !

!testRun: #CodeCoverageTest #test001_2_CoversManyLiteralVariables stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameLiteralVariables
	#_coverageTracker118019_ markAsExecuted.
	#_coverageTracker118019_
		coverAll:
			{48 to: 53}
		by: Object.
	#_coverageTracker118019_
		coverAll:
			{57 to: 62}
		by: Object.! !

!testRun: #CodeCoverageTest #test001_3_CoversMultipleOcurrencesOfTheSameLiteralVariable stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedLiteralVariable
	#_coverageTracker118021_ markAsExecuted.
	[
	#_coverageTracker118021_
		coverAll:
			{33 to: 38}
		by: Object ].! !

!testRun: #CodeCoverageTest #test001_4_DoesNotCoverLiteralVariablesThatWereNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
unaryMessageSend
	#_coverageTracker118026_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118026_
		coverAll:
			{21 to: 26}
		by: Object.
	#_coverageTracker118026_
		coverAll:
			{28 to: 30}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test002_CoversAnUnaryMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedMessageSend
	#_coverageTracker118028_ markAsExecuted.
	[
	[ | receiver1 |
	receiver1 _ #_coverageTracker118028_
		coverAll:
			{29 to: 34}
		by: Object.
	#_coverageTracker118028_
		coverAll:
			{36 to: 38}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value ].! !

!testRun: #CodeCoverageTest #test003_DoesNotCoverMessageSendsThatAreNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameMessageSend
	#_coverageTracker118032_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118032_
		coverAll:
			{43 to: 48}
		by: Object.
	#_coverageTracker118032_
		coverAll:
			{50 to: 52}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker118032_
		coverAll:
			{56 to: 61}
		by: Object.
	#_coverageTracker118032_
		coverAll:
			{63 to: 65}
		evaluating: [ receiver2 new ]
		thatSends: #new
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test004_CoversMultipleOcurrencesOfTheSameMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
binaryMessageSend
	#_coverageTracker118036_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118036_
		coverAll:
			{22 to: 22}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker118036_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 +
				(#_coverageTracker118036_
					coverAll:
						{25 to: 26}
					byLiteralOrPseudoVariable: 2) ]
		thatSends: #+
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test005_CoversABinaryMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
keywordMessageSend
	#_coverageTracker118040_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118040_
		coverAll:
			{23 to: 27}
		by: Array.
	#_coverageTracker118040_
		coverAll:
			{29 to: 33. 42 to: 46}
		evaluating: [
			receiver1
				with:
					(#_coverageTracker118040_
						coverAll:
							{35 to: 40}
						by: Object)
				with:
					(#_coverageTracker118040_
						coverAll:
							{48 to: 58}
						by: ProtoObject) ]
		thatSends: #with:with:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test006_CoversAKeywordMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheReceiverInAMessageSend
	#_coverageTracker118046_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118046_
		coverAll:
			{50 to: 54}
		by: Array.
	#_coverageTracker118046_
		coverAll:
			{56 to: 60. 68 to: 72}
		evaluating: [
			receiver1
				with:
					(#_coverageTracker118046_
						coverAll:
							{62 to: 66}
						by: Array)
				with:
					(#_coverageTracker118046_
						coverAll:
							{74 to: 78}
						by: Array) ]
		thatSends: #with:with:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test007_CoversMultipleOcurrencesOfTheReceiverInAMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfAnArgumentInAMessageSend
	#_coverageTracker118051_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118051_
		coverAll:
			{49 to: 53}
		by: Array.
	#_coverageTracker118051_
		coverAll:
			{55 to: 59. 68 to: 72}
		evaluating: [
			receiver1
				with:
					(#_coverageTracker118051_
						coverAll:
							{61 to: 66}
						by: Object)
				with:
					(#_coverageTracker118051_
						coverAll:
							{74 to: 79}
						by: Object) ]
		thatSends: #with:with:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test008_CoversMultipleOcurrencesOfAnArgumentInAMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
literal
	#_coverageTracker118057_ markAsExecuted.
	#_coverageTracker118057_
		coverAll:
			{11 to: 12}
		byLiteralOrPseudoVariable: 1.! !

!testRun: #CodeCoverageTest #test009_1_CoversALiteral stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
manyLiterals
	#_coverageTracker118059_ markAsExecuted.
	#_coverageTracker118059_
		coverAll:
			{17 to: 17}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker118059_
		coverAll:
			{21 to: 21}
		byLiteralOrPseudoVariable: 2.! !

!testRun: #CodeCoverageTest #test009_2_CoversManyLiterals stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameLiteral
	#_coverageTracker118061_ markAsExecuted.
	#_coverageTracker118061_
		coverAll:
			{39 to: 39}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker118061_
		coverAll:
			{43 to: 43}
		byLiteralOrPseudoVariable: 1.! !

!testRun: #CodeCoverageTest #test009_3_CoversMultipleOcurrencesOfTheSameLiteral stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedLiteral
	#_coverageTracker118063_ markAsExecuted.
	[
	#_coverageTracker118063_
		coverAll:
			{25 to: 25}
		byLiteralOrPseudoVariable: 1 ].! !

!testRun: #CodeCoverageTest #test009_4_DoesNotCoverLiteralsThatWereNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
instanceVariable
	#_coverageTracker118065_ markAsExecuted.
	#_coverageTracker118065_
		cover: (21 to: 36)
		declaredAt: (21 to: 36)
		by: instanceVariable.! !

!testRun: #CodeCoverageTest #test010_1_CoversAnInstanceVariable stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleInstanceVariables
	#_coverageTracker118067_ markAsExecuted.
	#_coverageTracker118067_
		cover: (30 to: 45)
		declaredAt: (30 to: 45)
		by: instanceVariable.
	#_coverageTracker118067_
		cover: (49 to: 69)
		declaredAt: (49 to: 69)
		by: otherInstanceVariable.! !

!testRun: #CodeCoverageTest #test010_2_CoversMultipleInstanceVariables stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameInstanceVariable
	#_coverageTracker118069_ markAsExecuted.
	#_coverageTracker118069_
		cover: (48 to: 63)
		declaredAt: (48 to: 63)
		by: instanceVariable.
	#_coverageTracker118069_
		cover: (67 to: 82)
		declaredAt: (48 to: 63)
		by: instanceVariable.! !

!testRun: #CodeCoverageTest #test010_3_CoversMultipleOcurrencesOfTheSameInstanceVariable stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedInstanceVariable
	#_coverageTracker118071_ markAsExecuted.
	[
	#_coverageTracker118071_
		cover: (34 to: 49)
		declaredAt: (34 to: 49)
		by: instanceVariable ].! !

!testRun: #CodeCoverageTest #test010_4_DoesNotCoverInstanceVariablesThatWereNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
unusedTemporaryVariableDeclaration
	| a |
	#_coverageTracker118073_ markAsExecuted.! !

!testRun: #CodeCoverageTest #test011_1_DoesNotCoverTemporariesDeclarations stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
temporaryVariable
	| a |
	#_coverageTracker118076_ markAsExecuted.
	#_coverageTracker118076_
		cover: (31 to: 31)
		declaredAt: (24 to: 24)
		by: a.! !

!testRun: #CodeCoverageTest #test011_2_CoversTemporaryVariablesAndTheirDeclarationsWhenTheTemporaryVariableIsRead stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
manyTemporaryVariables
	| a b |
	#_coverageTracker118078_ markAsExecuted.
	#_coverageTracker118078_
		cover: (38 to: 38)
		declaredAt: (29 to: 29)
		by: a.
	#_coverageTracker118078_
		cover: (42 to: 42)
		declaredAt: (31 to: 31)
		by: b.! !

!testRun: #CodeCoverageTest #test011_3_CoversAManyTemporaryVariables stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameTemporaryVariable
	| a |
	#_coverageTracker118080_ markAsExecuted.
	#_coverageTracker118080_
		cover: (58 to: 58)
		declaredAt: (51 to: 51)
		by: a.
	#_coverageTracker118080_
		cover: (62 to: 62)
		declaredAt: (51 to: 51)
		by: a.! !

!testRun: #CodeCoverageTest #test011_4_CoversMultipleOccurrencesOfTheSameTemporaryVariable stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedTemporaryVariable
	| a |
	#_coverageTracker118082_ markAsExecuted.
	[
	#_coverageTracker118082_
		cover: (44 to: 44)
		declaredAt: (35 to: 35)
		by: a ].! !

!testRun: #CodeCoverageTest #test011_5_DoesNotCoverATemporaryVariableOrItsDeclarationWhenTheTemporaryVariableIsNotReadNorWritten stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
variableNode
	#_coverageTracker118084_ markAsExecuted.
	#_coverageTracker118084_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: true.! !

!testRun: #CodeCoverageTest #test012_1_CoversAVariable stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
mutipleVariableNodes
	#_coverageTracker118088_ markAsExecuted.
	#_coverageTracker118088_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: true.
	#_coverageTracker118088_
		coverAll:
			{32 to: 36}
		byLiteralOrPseudoVariable: false.! !

!testRun: #CodeCoverageTest #test012_2_CoversMutipleVariables stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOftheSameVariable
	#_coverageTracker118090_ markAsExecuted.
	#_coverageTracker118090_
		coverAll:
			{40 to: 43}
		byLiteralOrPseudoVariable: true.
	#_coverageTracker118090_
		coverAll:
			{47 to: 50}
		byLiteralOrPseudoVariable: true.! !

!testRun: #CodeCoverageTest #test012_3_CoversMultipleOcurrencesOftheSameVariable stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedVariable
	#_coverageTracker118092_ markAsExecuted.
	[
	#_coverageTracker118092_
		coverAll:
			{26 to: 29}
		byLiteralOrPseudoVariable: true ].! !

!testRun: #CodeCoverageTest #test012_4_DoesNotCoverVariablesThatAreNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
implicitSelfReturn
	"This method has an implicit self return"
	#_coverageTracker118094_ markAsExecuted.! !

!testRun: #CodeCoverageTest #test013_1_DoesNotCoverImplicitSelfReturns stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
return
	#_coverageTracker118101_ markAsExecuted.
	^ #_coverageTracker118101_
		coverAll:
			{12 to: 13}
		byLiteralOrPseudoVariable: 1.! !

!testRun: #CodeCoverageTest #test013_2_CoversReturnNodes stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedReturnNode
	#_coverageTracker118103_ markAsExecuted.
	[ ^ #_coverageTracker118103_
		coverAll:
			{30 to: 30}
		byLiteralOrPseudoVariable: 1 ].! !

!testRun: #CodeCoverageTest #test013_3_DoesNotCoversReturnNodesThatAreNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleReturnNodes
	#_coverageTracker118105_ markAsExecuted.
	[ ^ #_coverageTracker118105_
		coverAll:
			{28 to: 28}
		byLiteralOrPseudoVariable: 1 ].
	^ #_coverageTracker118105_
		coverAll:
			{37 to: 38}
		byLiteralOrPseudoVariable: 2.! !

!testRun: #CodeCoverageTest #test013_4_CoversTheExecutedOcurrenceOfMultipleReturnNodes stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameReturnNodes
	#_coverageTracker118109_ markAsExecuted.
	[ ^ #_coverageTracker118109_
		coverAll:
			{47 to: 47}
		byLiteralOrPseudoVariable: 1 ].
	^ #_coverageTracker118109_
		coverAll:
			{56 to: 57}
		byLiteralOrPseudoVariable: 1.! !

!testRun: #CodeCoverageTest #test013_5_CoversTheExecutedOcurrenceOfTheSameReturnNode stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
assignment
	#_coverageTracker118111_ markAsExecuted.
	#_coverageTracker118111_
		cover: (15 to: 30)
		declaredAt: (15 to: 30)
		by:
			(instanceVariable _ #_coverageTracker118111_
				coverAll:
					{34 to: 35}
				byLiteralOrPseudoVariable: 1).! !

!testRun: #CodeCoverageTest #test014_1_CoversAnAssignment stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleAssignments
	#_coverageTracker118113_ markAsExecuted.
	#_coverageTracker118113_
		cover: (24 to: 39)
		declaredAt: (24 to: 39)
		by:
			(instanceVariable _ #_coverageTracker118113_
				coverAll:
					{44 to: 44}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118113_
		cover: (48 to: 68)
		declaredAt: (48 to: 68)
		by:
			(otherInstanceVariable _ #_coverageTracker118113_
				coverAll:
					{73 to: 73}
				byLiteralOrPseudoVariable: 2).! !

!testRun: #CodeCoverageTest #test014_2_CoversMultipleAssignments stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameAssignment
	#_coverageTracker118115_ markAsExecuted.
	#_coverageTracker118115_
		cover: (42 to: 57)
		declaredAt: (42 to: 57)
		by:
			(instanceVariable _ #_coverageTracker118115_
				coverAll:
					{62 to: 62}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118115_
		cover: (66 to: 81)
		declaredAt: (42 to: 57)
		by:
			(instanceVariable _ #_coverageTracker118115_
				coverAll:
					{86 to: 86}
				byLiteralOrPseudoVariable: 2).! !

!testRun: #CodeCoverageTest #test014_3_CoversMultipleOcurrencesOfTheSameAssignment stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedAssignment
	#_coverageTracker118117_ markAsExecuted.
	[
	#_coverageTracker118117_
		cover: (28 to: 43)
		declaredAt: (28 to: 43)
		by:
			(instanceVariable _ #_coverageTracker118117_
				coverAll:
					{48 to: 48}
				byLiteralOrPseudoVariable: 1) ].! !

!testRun: #CodeCoverageTest #test014_4_DoesNotCoverAssignmentsThatAreNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
assignVariableToItself
	#_coverageTracker118119_ markAsExecuted.
	#_coverageTracker118119_
		cover: (47 to: 62)
		declaredAt: (27 to: 42)
		by:
			(instanceVariable _ #_coverageTracker118119_
				cover: (27 to: 42)
				declaredAt: (27 to: 42)
				by: instanceVariable).! !

!testRun: #CodeCoverageTest #test014_5_CoversTheUsageOfTheVariableThatIsBeingAssigned stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
backtick
	#_coverageTracker118121_ markAsExecuted.
	#_coverageTracker118121_
		coverAll:
			{13 to: 24}
		byLiteralOrPseudoVariable: `Object new`.! !

!testRun: #CodeCoverageTest #test015_1_CoversABacktickNode stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleBacktickNodes
	#_coverageTracker118126_ markAsExecuted.
	#_coverageTracker118126_
		coverAll:
			{26 to: 37}
		byLiteralOrPseudoVariable: `Object new`.
	#_coverageTracker118126_
		coverAll:
			{41 to: 51}
		byLiteralOrPseudoVariable: `Array new`.! !

!testRun: #CodeCoverageTest #test015_2_CoversMultipleBacktickNodes stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameBacktickNode
	#_coverageTracker118128_ markAsExecuted.
	#_coverageTracker118128_
		coverAll:
			{44 to: 55}
		byLiteralOrPseudoVariable: `Object new`.
	#_coverageTracker118128_
		coverAll:
			{59 to: 70}
		byLiteralOrPseudoVariable: `Object new`.! !

!testRun: #CodeCoverageTest #test015_3_CoversMultipleOcurrencesOftheSameBacktickNode stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedBacktickNode
	#_coverageTracker118130_ markAsExecuted.
	[
	#_coverageTracker118130_
		coverAll:
			{30 to: 41}
		byLiteralOrPseudoVariable: `Object new` ].! !

!testRun: #CodeCoverageTest #test015_5_DoesNotCoverBackticksNodesThatAreNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
emptyBlock
	#_coverageTracker118132_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ ].
	#_coverageTracker118132_
		coverAll:
			{18 to: 22}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test016_1_CoversTheEvaluationOfAnEmptyBlock stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
block
	#_coverageTracker118134_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [
	#_coverageTracker118134_
		coverAll:
			{12 to: 12}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118134_
		coverAll:
			{16 to: 20}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test016_2_CoversTheEvaluationOfABlock stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleEmptyBlocks
	#_coverageTracker118140_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [
	#_coverageTracker118140_
		coverAll:
			{26 to: 26}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118140_
		coverAll:
			{30 to: 34}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ [
	#_coverageTracker118140_
		coverAll:
			{40 to: 40}
		byLiteralOrPseudoVariable: 2 ].
	#_coverageTracker118140_
		coverAll:
			{44 to: 48}
		evaluating: [ receiver2 value ]
		thatSends: #value
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test016_3_CoversTheEvaluationOfMultipleBlocks stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameBlockNode
	#_coverageTracker118142_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [
	#_coverageTracker118142_
		coverAll:
			{43 to: 43}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118142_
		coverAll:
			{47 to: 51}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ [
	#_coverageTracker118142_
		coverAll:
			{57 to: 57}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118142_
		coverAll:
			{61 to: 65}
		evaluating: [ receiver2 value ]
		thatSends: #value
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test016_4_CoversMultipleOcurrencesOfTheSameBlockNode stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notEvaluatedBlockNode
	#_coverageTracker118146_ markAsExecuted.
	[
	#_coverageTracker118146_
		coverAll:
			{28 to: 28}
		byLiteralOrPseudoVariable: 1 ].! !

!testRun: #CodeCoverageTest #test016_5_DoesNotCoverBlockNodesThatAreNotEvaluated stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
blockWithTemporaryVariables
	#_coverageTracker118153_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a b |
	#_coverageTracker118153_
		cover: (44 to: 44)
		declaredAt: (36 to: 36)
		by:
			(a _ #_coverageTracker118153_
				coverAll:
					{49 to: 49}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118153_
		cover: (54 to: 54)
		declaredAt: (38 to: 38)
		by:
			(b _ #_coverageTracker118153_
				coverAll:
					{59 to: 59}
				byLiteralOrPseudoVariable: 2) ].
	#_coverageTracker118153_
		coverAll:
			{63 to: 67}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test016_7_CoversMultipleTemporaryVariablesInABlock stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
blockWithArguments
	#_coverageTracker118159_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :a :b |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118159_
		cover: (33 to: 33)
		declaredAt: (26 to: 26)
		by: a.
	#_coverageTracker118159_
		coverAll:
			{35 to: 35}
		evaluating: [
			receiver1 +
				(#_coverageTracker118159_
					cover: (37 to: 37)
					declaredAt: (29 to: 29)
					by: b) ]
		thatSends: #+
		to: receiver1 ] value ].
	#_coverageTracker118159_
		coverAll:
			{41 to: 46. 50 to: 55}
		evaluating: [
			receiver2
				value:
					(#_coverageTracker118159_
						coverAll:
							{48 to: 48}
						byLiteralOrPseudoVariable: 1)
				value:
					(#_coverageTracker118159_
						coverAll:
							{56 to: 57}
						byLiteralOrPseudoVariable: 2) ]
		thatSends: #value:value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test016_8_CoversBlockArgumentsWhenTheyAreReferenced stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
braceNode
	#_coverageTracker118165_ markAsExecuted.
	#_coverageTracker118165_
		coverAll:
			{14 to: 18}
		byLiteralOrPseudoVariable:
			{1}.! !

!testRun: #CodeCoverageTest #test017_1_CoversABraceNode stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleBraceNodes
	#_coverageTracker118167_ markAsExecuted.
	#_coverageTracker118167_
		coverAll:
			{23 to: 27}
		byLiteralOrPseudoVariable:
			{1}.
	#_coverageTracker118167_
		coverAll:
			{31 to: 35}
		byLiteralOrPseudoVariable:
			{2}.! !

!testRun: #CodeCoverageTest #test017_2_CoversMultipleBraceNodes stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
multipleOcurrencesOfTheSameBraceNode
	#_coverageTracker118169_ markAsExecuted.
	#_coverageTracker118169_
		coverAll:
			{41 to: 45}
		byLiteralOrPseudoVariable:
			{1}.
	#_coverageTracker118169_
		coverAll:
			{49 to: 53}
		byLiteralOrPseudoVariable:
			{1}.! !

!testRun: #CodeCoverageTest #test017_3_CoversMultipleOcurrencesOfTheSameBraceNode stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedBraceNode
	#_coverageTracker118171_ markAsExecuted.
	[
	#_coverageTracker118171_
		coverAll:
			{27 to: 31}
		byLiteralOrPseudoVariable:
			{1} ].! !

!testRun: #CodeCoverageTest #test017_4_DoesNotCoverBraceNodesThatAreNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
cascade
	#_coverageTracker118173_ markAsExecuted.
	[ | cascadeReceiver |
	cascadeReceiver _ #_coverageTracker118173_
		coverAll:
			{12 to: 17}
		by: Object.
	[ | receiver1 |
	receiver1 _ cascadeReceiver.
	#_coverageTracker118173_
		coverAll:
			{21 to: 23}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker118173_
		coverAll:
			{28 to: 32}
		evaluating: [ receiver2 value ]
		thatSends: #value
		to: receiver2 ] value ] value.! !

!testRun: #CodeCoverageTest #test018_1_CoversACascadeMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
cascadeWithArgument: arg
	#_coverageTracker118176_ markAsExecuted.
	[ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker118176_
		coverAll:
			{29 to: 31}
		by: Set.
	#_coverageTracker118176_
		coverAll:
			{33 to: 35}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker118176_
		coverAll:
			{39 to: 42}
		evaluating: [
			receiver2 add:
				(#_coverageTracker118176_
					cover: (44 to: 46)
					declaredAt: (22 to: 24)
					by: arg) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker118176_
		coverAll:
			{51 to: 54}
		evaluating: [ receiver3 copy ]
		thatSends: #copy
		to: receiver3 ] value ] value.! !

!testRun: #CodeCoverageTest #test018_2_CoversACascadeMessageSendWithArgument stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
implicitSelfReturnWhenSelfIsReferenced
	#_coverageTracker118184_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118184_
		coverAll:
			{43 to: 46}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118184_
		coverAll:
			{48 to: 52}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test019_CoversCollaborationsWithImplicitSelfReturnsWhenSelfIsReferenced stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
notExecutedMessageArgument
	#_coverageTracker118186_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker118186_
		coverAll:
			{31 to: 35}
		by: Array.
	#_coverageTracker118186_
		coverAll:
			{39 to: 43. 62 to: 66}
		evaluating: [
			receiver3
				with: [
					[ | receiver1 |
					receiver1 _ #_coverageTracker118186_
						coverAll:
							{47 to: 50}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker118186_
						coverAll:
							{52 to: 56}
						evaluating: [ receiver1 value ]
						thatSends: #value
						to: receiver1 ] value ]
				with: [
					[ | receiver2 |
					receiver2 _ #_coverageTracker118186_
						coverAll:
							{70 to: 73}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker118186_
						coverAll:
							{75 to: 85}
						evaluating: [ receiver2 printString ]
						thatSends: #printString
						to: receiver2 ] value ]]
		thatSends: #with:with:
		to: receiver3 ] value.! !

!testRun: #CodeCoverageTest #test020_DoesNotCoverMessageArgumentsThatAreNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
optimizedMessage
	#_coverageTracker118194_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker118194_
		coverAll:
			{21 to: 21}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker118194_
		coverAll:
			{23 to: 25. 30 to: 32}
		evaluating: [
			receiver2
				to:
					(#_coverageTracker118194_
						coverAll:
							{27 to: 28}
						byLiteralOrPseudoVariable: 10)
				do: [ :number |
					[ | receiver1 |
					receiver1 _ #_coverageTracker118194_
						cover: (46 to: 51)
						declaredAt: (37 to: 42)
						by: number.
					#_coverageTracker118194_
						coverAll:
							{53 to: 57}
						evaluating: [ receiver1 value ]
						thatSends: #value
						to: receiver1 ] value ]]
		thatSends: #to:do:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test021_CoversOptimizedMessages stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
cascadeNodeWithMessageSendReceiver
	#_coverageTracker118201_ markAsExecuted.
	[ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker118201_
		coverAll:
			{38 to: 54}
		by: OrderedCollection.
	#_coverageTracker118201_
		coverAll:
			{56 to: 58}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker118201_
		coverAll:
			{62 to: 65}
		evaluating: [ receiver2 copy ]
		thatSends: #copy
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker118201_
		coverAll:
			{70 to: 77}
		evaluating: [ receiver3 yourself ]
		thatSends: #yourself
		to: receiver3 ] value ] value.! !

!testRun: #CodeCoverageTest #test022_CoversTheReceiverOfACascadeNodeWhenItIsAMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
cascadeNodeWithBlockReceiverThatIsEvaluated
	#_coverageTracker118207_ markAsExecuted.
	[ | cascadeReceiver |
	cascadeReceiver _ [
	[ | receiver1 |
	receiver1 _ #_coverageTracker118207_
		coverAll:
			{49 to: 52}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118207_
		coverAll:
			{54 to: 58}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value ].
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker118207_
		coverAll:
			{64 to: 68}
		evaluating: [ receiver2 class ]
		thatSends: #class
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker118207_
		coverAll:
			{73 to: 77}
		evaluating: [ receiver3 value ]
		thatSends: #value
		to: receiver3 ] value ] value.! !

!testRun: #CodeCoverageTest #test023_CoversTheReceiverOfACascadeNodeWhenItIsABlockThatIsEvaluated stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
cascadeNodeWithBlockReceiverThatIsNotEvaluated
	#_coverageTracker118209_ markAsExecuted.
	[ | cascadeReceiver |
	cascadeReceiver _ [
	[ | receiver1 |
	receiver1 _ #_coverageTracker118209_
		coverAll:
			{52 to: 55}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118209_
		coverAll:
			{57 to: 61}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value ].
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker118209_
		coverAll:
			{67 to: 71}
		evaluating: [ receiver2 class ]
		thatSends: #class
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker118209_
		coverAll:
			{76 to: 79}
		evaluating: [ receiver3 hash ]
		thatSends: #hash
		to: receiver3 ] value ] value.! !

!testRun: #CodeCoverageTest #test024_DoesNotCoverTheReceiverOfACascadeNodeWhenItIsABlockThatIsNotExecuted stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
messageSendWithMessageSendReceiver
	#_coverageTracker118215_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker118215_
		coverAll:
			{39 to: 55}
		by: OrderedCollection.
	#_coverageTracker118215_
		coverAll:
			{57 to: 59}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker118215_
		coverAll:
			{64 to: 68}
		evaluating: [ receiver2 value ]
		thatSends: #value
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test025_CoversTheReceiverOfAMessageSendWhenItIsAMessageSend stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
messageSendWithBlockReceiverThatIsEvaluated
	#_coverageTracker118219_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [
	[ | receiver1 |
	receiver1 _ #_coverageTracker118219_
		coverAll:
			{49 to: 54}
		by: Object.
	#_coverageTracker118219_
		coverAll:
			{56 to: 58}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value ].
	#_coverageTracker118219_
		coverAll:
			{64 to: 68}
		evaluating: [ receiver2 value ]
		thatSends: #value
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test026_CoversTheReceiverOfAMessageSendWhenItIsABlockThatIsEvaluated stamp: 'eaam 10/2/2023 17:35:27'!
PASSED!
!Behavior method!
messageSendWithBlockReceiverThatIsNotEvaluated
	#_coverageTracker118224_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [
	[ | receiver1 |
	receiver1 _ #_coverageTracker118224_
		coverAll:
			{52 to: 57}
		by: Object.
	#_coverageTracker118224_
		coverAll:
			{59 to: 61}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value ].
	#_coverageTracker118224_
		coverAll:
			{67 to: 71}
		evaluating: [ receiver2 class ]
		thatSends: #class
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test027_DoesNotCoverTheReceiverOfAMessageSendWhenItIsABlockThatIsNotEvaluated stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
value
	"This example overrides uses super to send the same message that was received.
	
	It is used to verify that a bug was not introduced by the code coverage machinery, because
	wrapping super in a message to track code coverage will return self and the #value message
	will end up being dispatched to self instead of super (as intended) leading to an infinite loop."
	#_coverageTracker118228_ markAsExecuted.
	#_coverageTracker118228_
		coverAll:
			{381 to: 385}
		evaluating: [ super value ]
		thatSends: #value
		to: super.! !

!testRun: #CodeCoverageTest #test028_DoesNotCoverSuper stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
foo: aBoolean
	#_coverageTracker118234_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118234_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118234_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118234_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118234_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test029_Informs0PercentCoverageWhenNoneOfTheCompiledMethodCollaborationsAreCovered stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
foo: aBoolean
	#_coverageTracker118238_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118238_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118238_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118238_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118238_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test030_Informs100PercentCoverageWhenAllOfTheCompiledMethodCollaborationsAreCovered stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
foo: aBoolean
	#_coverageTracker118242_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118242_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118242_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118242_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118242_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test030_InformsThePercentageOfCollaborationsThatWereCoveredInACompiledMethod stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
foo: aBoolean
	#_coverageTracker118246_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118246_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118246_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118246_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118246_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test031_DoesNotCountCoveredCollaborationsMoreThanOnce stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
foo: aBoolean
	#_coverageTracker118251_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118251_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118251_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118251_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118251_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test032_AppendsCoveredCollaborationsMadeFromDifferentCallsToACompiledMethod stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
foo: aBoolean
	#_coverageTracker118255_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118255_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118255_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118255_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118255_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !
!Behavior method!
foo: aBoolean
	#_coverageTracker118257_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118257_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118257_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118257_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118257_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test034_OverwritesCodeCoverageReportsGeneratedFromPreviouslyAnalizedBlocks stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
emptyMethod
	#_coverageTracker118261_ markAsExecuted.! !

!testRun: #CodeCoverageTest #test035_Informs100PercentCoverageWhenCoveringAnEmptyCompiledMethod stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
foo: aBoolean
	#_coverageTracker118265_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118265_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118265_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118265_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118265_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test036_Informs0PercentCoverageWhenNoneOfTheAnalyzedCompiledMethodsOfAClassHaveBeenCovered stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
emptyMethod
	#_coverageTracker118269_ markAsExecuted.! !

!testRun: #CodeCoverageTest #test037_DoesNotCoverEmptyMethods stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
emptyMethod
	#_coverageTracker118271_ markAsExecuted.! !

!testRun: #CodeCoverageTest #test039_Informs100PercentCoverageWhenAllOfTheAnalyzedCompiledMethodsOfAClassHaveBeenCovered stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
emptyMethod
	#_coverageTracker118271_ markAsExecuted.! !
!Behavior method!
foo: aBoolean
	#_coverageTracker118273_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118273_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118273_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118273_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118273_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test040_CalculatesThePercentCoverageOfAClassBasedOnThePercentCoverageOfItsAnalyzedCompiledMethods stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
emptyMethod
	#_coverageTracker118278_ markAsExecuted.! !
!Behavior method!
foo: aBoolean
	#_coverageTracker118278_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118278_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118278_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118278_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118278_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !
!Behavior method!
emptyMethod
	#_coverageTracker118282_ markAsExecuted.! !
!Behavior method!
foo: aBoolean
	#_coverageTracker118282_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118282_
		cover: (17 to: 24)
		declaredAt: (6 to: 13)
		by: aBoolean.
	#_coverageTracker118282_
		coverAll:
			{28 to: 34. 44 to: 51}
		evaluating: [
			receiver1
				ifTrue: [
					#_coverageTracker118282_
						coverAll:
							{38 to: 38}
						byLiteralOrPseudoVariable: 1 ]
				ifFalse: [
					#_coverageTracker118282_
						coverAll:
							{55 to: 55}
						byLiteralOrPseudoVariable: 2 ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test041_OverwritesCodeCoverageReportsForClassesGeneratedFromPreviouslyAnalizedBlocks stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
m1
	#_coverageTracker118290_ markAsExecuted.
	^ #_coverageTracker118290_
		coverAll:
			{8 to: 11}
		byLiteralOrPseudoVariable: #foo.! !

!testRun: #CodeCoverageTest #test043_Informs100PercentCoverageWhenAllOfTheAnalizedClassesInASystemCategoryHave100PercentCoverage stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
m1
	#_coverageTracker118292_ markAsExecuted.
	^ #_coverageTracker118292_
		coverAll:
			{8 to: 11}
		byLiteralOrPseudoVariable: #foo.! !

!testRun: #CodeCoverageTest #test044_Informs0PercentCoverageWhenNoneOfTheAnalizedClassesInASystemCategoryHaveBeenCovered stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
m1
	#_coverageTracker118296_ markAsExecuted.
	^ #_coverageTracker118296_
		coverAll:
			{8 to: 11}
		byLiteralOrPseudoVariable: #foo.! !
!Behavior method!
m2
	#_coverageTracker118296_ markAsExecuted.! !
!Behavior method!
m3
	#_coverageTracker118296_ markAsExecuted.! !

!testRun: #CodeCoverageTest #test045_InformsThePercentageOfCollaborationsThatWereCoveredInACompiledMethod stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
raiseError
	#_coverageTracker118299_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker118299_
		coverAll:
			{14 to: 18}
		by: Error.
	#_coverageTracker118299_
		coverAll:
			{20 to: 26}
		evaluating: [
			receiver2 signal:
				[ | receiver1 |
				receiver1 _ #_coverageTracker118299_
					coverAll:
						{28 to: 31}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker118299_
					coverAll:
						{33 to: 54}
					evaluating: [ receiver1 errorMessageForTesting ]
					thatSends: #errorMessageForTesting
					to: receiver1 ] value ]
		thatSends: #signal:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test046_CoversMessagesThatSignalAnError stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageWithArgument: anArgument
	#_coverageTracker118303_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118303_
		cover: (36 to: 45)
		declaredAt: (22 to: 31)
		by: anArgument.
	#_coverageTracker118303_
		coverAll:
			{47 to: 51}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test047_CoversSelectorArgumentsWhenTheyAreReferenced stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
raiseErrorFromBlock
	#_coverageTracker118307_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [
	[ | receiver2 |
	receiver2 _ #_coverageTracker118307_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118307_
		coverAll:
			{30 to: 35}
		evaluating: [
			receiver2 error:
				[ | receiver1 |
				receiver1 _ #_coverageTracker118307_
					coverAll:
						{37 to: 40}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker118307_
					coverAll:
						{42 to: 63}
					evaluating: [ receiver1 errorMessageForTesting ]
					thatSends: #errorMessageForTesting
					to: receiver1 ] value ]
		thatSends: #error:
		to: receiver2 ] value ].
	#_coverageTracker118307_
		coverAll:
			{67 to: 71}
		evaluating: [ receiver3 value ]
		thatSends: #value
		to: receiver3 ] value.! !

!testRun: #CodeCoverageTest #test048_CoversBlocksThatSignalAnError stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableAssignment
	| a |
	#_coverageTracker118309_ markAsExecuted.
	#_coverageTracker118309_
		cover: (39 to: 39)
		declaredAt: (33 to: 33)
		by:
			(a _ #_coverageTracker118309_
				coverAll:
					{43 to: 44}
				byLiteralOrPseudoVariable: 1).! !

!testRun: #CodeCoverageTest #test049_CoversTemporaryVariablesAndTheirDeclarationsWhenTheTemporaryVariableIsWritten stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableReadAndAssignment
	| a |
	#_coverageTracker118313_ markAsExecuted.
	#_coverageTracker118313_
		cover: (45 to: 45)
		declaredAt: (40 to: 40)
		by:
			(a _ #_coverageTracker118313_
				coverAll:
					{50 to: 50}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118313_
		cover: (55 to: 55)
		declaredAt: (40 to: 40)
		by: a.! !

!testRun: #CodeCoverageTest #test050_CoversTemporaryVariablesAndTheirDeclarationsOnlyOnceWhenTheTemporaryVariableIsReadOrWrittenMoreThanOnce stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageWithUnusedArgument: anArgument
	#_coverageTracker118317_ markAsExecuted.
	[
	#_coverageTracker118317_
		cover: (43 to: 52)
		declaredAt: (28 to: 37)
		by: anArgument ].! !

!testRun: #CodeCoverageTest #test051_DoesNotCoversSelectorArgumentsWhenTheyAreNotReferenced stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageArgumentUsedManyTimes: anArgument
	#_coverageTracker118319_ markAsExecuted.
	#_coverageTracker118319_
		cover: (44 to: 53)
		declaredAt: (31 to: 40)
		by: anArgument.
	#_coverageTracker118319_
		cover: (57 to: 66)
		declaredAt: (31 to: 40)
		by: anArgument.! !

!testRun: #CodeCoverageTest #test052_CoversSelectorArgumentsOnlyOnceWhenTheyAreReferencedMultipleTimes stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithUnusedArgument
	#_coverageTracker118321_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ :a |
	nil ].
	#_coverageTracker118321_
		coverAll:
			{36 to: 41}
		evaluating: [
			receiver1 value:
				(#_coverageTracker118321_
					coverAll:
						{42 to: 43}
					byLiteralOrPseudoVariable: 1) ]
		thatSends: #value:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test053_DoesNotCoverBlockArgumentsWhenTheyAreNotReferenced stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithArgumentUsedManyTimes
	#_coverageTracker118326_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :argument |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118326_
		cover: (48 to: 55)
		declaredAt: (37 to: 44)
		by: argument.
	#_coverageTracker118326_
		coverAll:
			{57 to: 57}
		evaluating: [
			receiver1 +
				(#_coverageTracker118326_
					cover: (59 to: 66)
					declaredAt: (37 to: 44)
					by: argument) ]
		thatSends: #+
		to: receiver1 ] value ].
	#_coverageTracker118326_
		coverAll:
			{70 to: 75}
		evaluating: [
			receiver2 value:
				(#_coverageTracker118326_
					coverAll:
						{76 to: 77}
					byLiteralOrPseudoVariable: 1) ]
		thatSends: #value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test054_CoversBlockArgumentsOnlyOnceWhenTheyAreReferencedMultipleTimes stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithReadTemporaryVariable
	#_coverageTracker118330_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118330_
		cover: (40 to: 40)
		declaredAt: (37 to: 37)
		by: a ].
	#_coverageTracker118330_
		coverAll:
			{44 to: 48}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test055_CoversBlockTemporaryVariablesAndTheirDeclarationsWhenTheTemporaryVariablesAreRead stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithWrittenTemporaryVariable
	#_coverageTracker118334_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118334_
		cover: (43 to: 43)
		declaredAt: (40 to: 40)
		by:
			(a _ #_coverageTracker118334_
				coverAll:
					{47 to: 47}
				byLiteralOrPseudoVariable: 1) ].
	#_coverageTracker118334_
		coverAll:
			{51 to: 55}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test056_CoversBlockTemporaryVariablesAndTheirDeclarationsWhenTheTemporaryVariablesAreWritten stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithReadAndWrittenTemporaryVariable
	#_coverageTracker118338_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118338_
		cover: (50 to: 50)
		declaredAt: (47 to: 47)
		by:
			(a _ #_coverageTracker118338_
				coverAll:
					{55 to: 55}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118338_
		cover: (58 to: 58)
		declaredAt: (47 to: 47)
		by: a ].
	#_coverageTracker118338_
		coverAll:
			{62 to: 66}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test057_CoversBlockTemporaryVariablesAndTheirDeclarationsOnlyOnceWhenTheTemporaryVariablesAreReferencedMultipleTimes stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
assignment
	#_coverageTracker118342_ markAsExecuted.
	#_coverageTracker118342_
		cover: (15 to: 30)
		declaredAt: (15 to: 30)
		by:
			(instanceVariable _ #_coverageTracker118342_
				coverAll:
					{34 to: 35}
				byLiteralOrPseudoVariable: 1).! !

!testRun: #CodeCoverageTest #test058_DoesNotCoverMethodsThatWereNotExecuted stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableAssignedToTrue
	| a |
	#_coverageTracker118344_ markAsExecuted.
	#_coverageTracker118344_
		cover: (44 to: 44)
		declaredAt: (37 to: 37)
		by:
			(a _ #_coverageTracker118344_
				coverAll:
					{48 to: 51}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test059_PartiallyCoversABooleanTemporaryVariableDeclarationThatHasOnlyBeenAssignedToTrue stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableAssignedToFalse
	| a |
	#_coverageTracker118347_ markAsExecuted.
	#_coverageTracker118347_
		cover: (45 to: 45)
		declaredAt: (38 to: 38)
		by:
			(a _ #_coverageTracker118347_
				coverAll:
					{49 to: 53}
				byLiteralOrPseudoVariable: false).! !

!testRun: #CodeCoverageTest #test060_PartiallyCoversABooleanTemporaryVariableDeclarationThatHasOnlyBeenAssignedToFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableAssignedToTrueAndFalse
	| a |
	#_coverageTracker118349_ markAsExecuted.
	#_coverageTracker118349_
		cover: (52 to: 52)
		declaredAt: (45 to: 45)
		by:
			(a _ #_coverageTracker118349_
				coverAll:
					{56 to: 59}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118349_
		cover: (63 to: 63)
		declaredAt: (45 to: 45)
		by:
			(a _ #_coverageTracker118349_
				coverAll:
					{67 to: 71}
				byLiteralOrPseudoVariable: false).! !

!testRun: #CodeCoverageTest #test061_FullyCoversABooleanTemporaryVariableDeclarationThatHasBeenAssignedToTrueAndFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableAssignedToTrueMoreThanOnce
	| a |
	#_coverageTracker118353_ markAsExecuted.
	#_coverageTracker118353_
		cover: (56 to: 56)
		declaredAt: (49 to: 49)
		by:
			(a _ #_coverageTracker118353_
				coverAll:
					{60 to: 63}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118353_
		cover: (67 to: 67)
		declaredAt: (49 to: 49)
		by:
			(a _ #_coverageTracker118353_
				coverAll:
					{71 to: 74}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test062_DoesNotCountMultipleAssignmentsWithTheSameValueToBooleanTemporaryVariables stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableAssignedToBooleanAndThenNonBoolean
	| a |
	#_coverageTracker118355_ markAsExecuted.
	#_coverageTracker118355_
		cover: (64 to: 64)
		declaredAt: (57 to: 57)
		by:
			(a _ #_coverageTracker118355_
				coverAll:
					{68 to: 71}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118355_
		cover: (75 to: 75)
		declaredAt: (57 to: 57)
		by:
			(a _ #_coverageTracker118355_
				coverAll:
					{79 to: 79}
				byLiteralOrPseudoVariable: 1).! !

!testRun: #CodeCoverageTest #test063_DoesNotConsiderATemporaryDeclarationAsBooleanWhenItIsAssignedToABooleanAndThenToANonBoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
temporaryVariableAssignedToNonBooleanAndThenBoolean
	| a |
	#_coverageTracker118359_ markAsExecuted.
	#_coverageTracker118359_
		cover: (64 to: 64)
		declaredAt: (57 to: 57)
		by:
			(a _ #_coverageTracker118359_
				coverAll:
					{68 to: 68}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118359_
		cover: (72 to: 72)
		declaredAt: (57 to: 57)
		by:
			(a _ #_coverageTracker118359_
				coverAll:
					{76 to: 79}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test064_DoesNotConsiderATemporaryDeclarationAsBooleanWhenItIsAssignedToANonBooleanAndThenToABoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
methodWithOneArgument: arg
	#_coverageTracker118361_ markAsExecuted.
	#_coverageTracker118361_
		cover: (30 to: 32)
		declaredAt: (24 to: 26)
		by: arg.! !

!testRun: #CodeCoverageTest #test065_PartiallyCoversABooleanArgumentThatHasOnlyBeenAssignedToTrue stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
methodWithOneArgument: arg
	#_coverageTracker118365_ markAsExecuted.
	#_coverageTracker118365_
		cover: (30 to: 32)
		declaredAt: (24 to: 26)
		by: arg.! !

!testRun: #CodeCoverageTest #test066_PartiallyCoversABooleanArgumentThatHasOnlyBeenAssignedToFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
methodWithOneArgument: arg
	#_coverageTracker118367_ markAsExecuted.
	#_coverageTracker118367_
		cover: (30 to: 32)
		declaredAt: (24 to: 26)
		by: arg.! !

!testRun: #CodeCoverageTest #test067_FullyCoversABooleanArgumentThatHasBeenAssignedToTrueAndFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
methodWithOneArgument: arg
	#_coverageTracker118369_ markAsExecuted.
	#_coverageTracker118369_
		cover: (30 to: 32)
		declaredAt: (24 to: 26)
		by: arg.! !

!testRun: #CodeCoverageTest #test068_DoesNotCountMultipleAssignmentsWithTheSameValueToBooleanArguments stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
methodWithOneArgument: arg
	#_coverageTracker118371_ markAsExecuted.
	#_coverageTracker118371_
		cover: (30 to: 32)
		declaredAt: (24 to: 26)
		by: arg.! !

!testRun: #CodeCoverageTest #test069_DoesNotConsiderAnArgumentAsBooleanWhenItIsAssignedToABooleanAndThenToANonBoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
methodWithOneArgument: arg
	#_coverageTracker118376_ markAsExecuted.
	#_coverageTracker118376_
		cover: (30 to: 32)
		declaredAt: (24 to: 26)
		by: arg.! !

!testRun: #CodeCoverageTest #test070_DoesNotConsiderAnArgumentAsBooleanWhenItIsAssignedToANonBooleanAndThenToABoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithArgumentAssignedToTrue
	#_coverageTracker118380_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :arg |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118380_
		cover: (44 to: 46)
		declaredAt: (38 to: 40)
		by: arg.
	#_coverageTracker118380_
		coverAll:
			{48 to: 58}
		evaluating: [ receiver1 printString ]
		thatSends: #printString
		to: receiver1 ] value ].
	#_coverageTracker118380_
		coverAll:
			{62 to: 67}
		evaluating: [
			receiver2 value:
				(#_coverageTracker118380_
					coverAll:
						{69 to: 72}
					byLiteralOrPseudoVariable: true) ]
		thatSends: #value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test071_PartiallyCoversABooleanBlockArgumentThatHasOnlyBeenAssignedToTrue stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithArgumentAssignedToFalse
	#_coverageTracker118384_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :arg |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118384_
		cover: (45 to: 47)
		declaredAt: (39 to: 41)
		by: arg.
	#_coverageTracker118384_
		coverAll:
			{49 to: 59}
		evaluating: [ receiver1 printString ]
		thatSends: #printString
		to: receiver1 ] value ].
	#_coverageTracker118384_
		coverAll:
			{63 to: 68}
		evaluating: [
			receiver2 value:
				(#_coverageTracker118384_
					coverAll:
						{70 to: 74}
					byLiteralOrPseudoVariable: false) ]
		thatSends: #value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test072_PartiallyCoversABooleanBlockArgumentThatHasOnlyBeenAssignedToFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithArgument: anArgument
	#_coverageTracker118388_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :arg |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118388_
		cover: (42 to: 44)
		declaredAt: (36 to: 38)
		by: arg.
	#_coverageTracker118388_
		coverAll:
			{46 to: 56}
		evaluating: [ receiver1 printString ]
		thatSends: #printString
		to: receiver1 ] value ].
	#_coverageTracker118388_
		coverAll:
			{60 to: 65}
		evaluating: [
			receiver2 value:
				(#_coverageTracker118388_
					cover: (67 to: 76)
					declaredAt: (20 to: 29)
					by: anArgument) ]
		thatSends: #value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test073_FullyCoversABooleanBlockArgumentThatHasBeenAssignedToTrueAndFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithArgument: anArgument
	#_coverageTracker118392_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :arg |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118392_
		cover: (42 to: 44)
		declaredAt: (36 to: 38)
		by: arg.
	#_coverageTracker118392_
		coverAll:
			{46 to: 56}
		evaluating: [ receiver1 printString ]
		thatSends: #printString
		to: receiver1 ] value ].
	#_coverageTracker118392_
		coverAll:
			{60 to: 65}
		evaluating: [
			receiver2 value:
				(#_coverageTracker118392_
					cover: (67 to: 76)
					declaredAt: (20 to: 29)
					by: anArgument) ]
		thatSends: #value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test074_DoesNotCountMultipleAssignmentsWithTheSameValueToBlockBooleanArguments stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithArgument: anArgument
	#_coverageTracker118396_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :arg |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118396_
		cover: (42 to: 44)
		declaredAt: (36 to: 38)
		by: arg.
	#_coverageTracker118396_
		coverAll:
			{46 to: 56}
		evaluating: [ receiver1 printString ]
		thatSends: #printString
		to: receiver1 ] value ].
	#_coverageTracker118396_
		coverAll:
			{60 to: 65}
		evaluating: [
			receiver2 value:
				(#_coverageTracker118396_
					cover: (67 to: 76)
					declaredAt: (20 to: 29)
					by: anArgument) ]
		thatSends: #value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test075_DoesNotConsiderABlockArgumentAsBooleanWhenItIsAssignedToABooleanAndThenToANonBoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockWithArgument: anArgument
	#_coverageTracker118403_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ :arg |
	[ | receiver1 |
	receiver1 _ #_coverageTracker118403_
		cover: (42 to: 44)
		declaredAt: (36 to: 38)
		by: arg.
	#_coverageTracker118403_
		coverAll:
			{46 to: 56}
		evaluating: [ receiver1 printString ]
		thatSends: #printString
		to: receiver1 ] value ].
	#_coverageTracker118403_
		coverAll:
			{60 to: 65}
		evaluating: [
			receiver2 value:
				(#_coverageTracker118403_
					cover: (67 to: 76)
					declaredAt: (20 to: 29)
					by: anArgument) ]
		thatSends: #value:
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test076_DoesNotConsiderABlockArgumentAsBooleanWhenItIsAssignedToANonBooleanAndThenToABoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
assignBlockTemporary: aValue
	"This example returns 1 when evaluating the block to avoid excersicing the boolean selector feature as well"
	#_coverageTracker118407_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118407_
		cover: (153 to: 153)
		declaredAt: (148 to: 148)
		by:
			(a _ #_coverageTracker118407_
				cover: (157 to: 162)
				declaredAt: (23 to: 28)
				by: aValue).
	#_coverageTracker118407_
		coverAll:
			{167 to: 167}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118407_
		coverAll:
			{171 to: 175}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test077_PartiallyCoversABlockBooleanTemporaryVariableDeclarationThatHasOnlyBeenAssignedToTrue stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
assignBlockTemporary: aValue
	"This example returns 1 when evaluating the block to avoid excersicing the boolean selector feature as well"
	#_coverageTracker118413_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118413_
		cover: (153 to: 153)
		declaredAt: (148 to: 148)
		by:
			(a _ #_coverageTracker118413_
				cover: (157 to: 162)
				declaredAt: (23 to: 28)
				by: aValue).
	#_coverageTracker118413_
		coverAll:
			{167 to: 167}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118413_
		coverAll:
			{171 to: 175}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test078_PartiallyCoversABlockBooleanTemporaryVariableDeclarationThatHasOnlyBeenAssignedToFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
assignBlockTemporary: aValue
	"This example returns 1 when evaluating the block to avoid excersicing the boolean selector feature as well"
	#_coverageTracker118417_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118417_
		cover: (153 to: 153)
		declaredAt: (148 to: 148)
		by:
			(a _ #_coverageTracker118417_
				cover: (157 to: 162)
				declaredAt: (23 to: 28)
				by: aValue).
	#_coverageTracker118417_
		coverAll:
			{167 to: 167}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118417_
		coverAll:
			{171 to: 175}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test079_FullyCoversABlockBooleanTemporaryVariableDeclarationThatHasOnlyBeenAssignedToTrueAndFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
assignBlockTemporary: aValue
	"This example returns 1 when evaluating the block to avoid excersicing the boolean selector feature as well"
	#_coverageTracker118423_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118423_
		cover: (153 to: 153)
		declaredAt: (148 to: 148)
		by:
			(a _ #_coverageTracker118423_
				cover: (157 to: 162)
				declaredAt: (23 to: 28)
				by: aValue).
	#_coverageTracker118423_
		coverAll:
			{167 to: 167}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118423_
		coverAll:
			{171 to: 175}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test080_DoesNotCountMultipleAssignmentsWithTheSameValueToBlockBooleanTemporaryVariables stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
assignBlockTemporary: aValue
	"This example returns 1 when evaluating the block to avoid excersicing the boolean selector feature as well"
	#_coverageTracker118430_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118430_
		cover: (153 to: 153)
		declaredAt: (148 to: 148)
		by:
			(a _ #_coverageTracker118430_
				cover: (157 to: 162)
				declaredAt: (23 to: 28)
				by: aValue).
	#_coverageTracker118430_
		coverAll:
			{167 to: 167}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118430_
		coverAll:
			{171 to: 175}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test081_DoesNotConsiderABlockTemporaryDeclarationAsBooleanWhenItIsAssignedToABooleanAndThenToANonBoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
assignBlockTemporary: aValue
	"This example returns 1 when evaluating the block to avoid excersicing the boolean selector feature as well"
	#_coverageTracker118436_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ [ | a |
	#_coverageTracker118436_
		cover: (153 to: 153)
		declaredAt: (148 to: 148)
		by:
			(a _ #_coverageTracker118436_
				cover: (157 to: 162)
				declaredAt: (23 to: 28)
				by: aValue).
	#_coverageTracker118436_
		coverAll:
			{167 to: 167}
		byLiteralOrPseudoVariable: 1 ].
	#_coverageTracker118436_
		coverAll:
			{171 to: 175}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test082_DoesNotConsiderABlockTemporaryDeclarationAsBooleanWhenItIsAssignedToANonBooleanAndThenToABoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageSendReturningMessageResultInstanceVariable
	#_coverageTracker118440_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118440_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118440_
		coverAll:
			{58 to: 92}
		evaluating: [ receiver1 returnMessageResultInstanceVariable ]
		thatSends: #returnMessageResultInstanceVariable
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test083_PartiallyCoversABooleanSelectorThatOnlyReturnsTrue stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageSendReturningMessageResultInstanceVariable
	#_coverageTracker118444_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118444_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118444_
		coverAll:
			{58 to: 92}
		evaluating: [ receiver1 returnMessageResultInstanceVariable ]
		thatSends: #returnMessageResultInstanceVariable
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test084_PartiallyCoversABooleanSelectorThatOnlyReturnsFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageSendReturningMessageResultInstanceVariable
	#_coverageTracker118446_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118446_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118446_
		coverAll:
			{58 to: 92}
		evaluating: [ receiver1 returnMessageResultInstanceVariable ]
		thatSends: #returnMessageResultInstanceVariable
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test085_FullyCoversABooleanSelectorThatReturnsTrueAndFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageSendReturningMessageResultInstanceVariable
	#_coverageTracker118448_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118448_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118448_
		coverAll:
			{58 to: 92}
		evaluating: [ receiver1 returnMessageResultInstanceVariable ]
		thatSends: #returnMessageResultInstanceVariable
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test086_DoesNotCountMultipleReturnsOfSameValueFromBooleanSelectors stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageSendReturningMessageResultInstanceVariable
	#_coverageTracker118453_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118453_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118453_
		coverAll:
			{58 to: 92}
		evaluating: [ receiver1 returnMessageResultInstanceVariable ]
		thatSends: #returnMessageResultInstanceVariable
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test087_DoesNotConsiderASelectorAsBooleanWhenItReturnsABooleanAndThenANonBoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageSendReturningMessageResultInstanceVariable
	#_coverageTracker118457_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118457_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118457_
		coverAll:
			{58 to: 92}
		evaluating: [ receiver1 returnMessageResultInstanceVariable ]
		thatSends: #returnMessageResultInstanceVariable
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test088_DoesNotConsiderASelectorAsBooleanWhenItReturnsANonBooleanAndThenABoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
instanceVariableAssignedToTrue
	#_coverageTracker118459_ markAsExecuted.
	#_coverageTracker118459_
		cover: (34 to: 49)
		declaredAt: (34 to: 49)
		by:
			(instanceVariable _ #_coverageTracker118459_
				coverAll:
					{53 to: 56}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test090_PartiallyCoversAnInstanceTemporaryVariableDeclarationThatHasOnlyBeenAssignedToTrue stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
instanceVariableAssignedToFalse
	#_coverageTracker118461_ markAsExecuted.
	#_coverageTracker118461_
		cover: (35 to: 50)
		declaredAt: (35 to: 50)
		by:
			(instanceVariable _ #_coverageTracker118461_
				coverAll:
					{54 to: 58}
				byLiteralOrPseudoVariable: false).! !

!testRun: #CodeCoverageTest #test091_PartiallyCoversAnInstanceTemporaryVariableDeclarationThatHasOnlyBeenAssignedToFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
instanceVariableAssignedToTrueAndFalse
	#_coverageTracker118463_ markAsExecuted.
	#_coverageTracker118463_
		cover: (42 to: 57)
		declaredAt: (42 to: 57)
		by:
			(instanceVariable _ #_coverageTracker118463_
				coverAll:
					{61 to: 64}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118463_
		cover: (68 to: 83)
		declaredAt: (42 to: 57)
		by:
			(instanceVariable _ #_coverageTracker118463_
				coverAll:
					{87 to: 91}
				byLiteralOrPseudoVariable: false).! !

!testRun: #CodeCoverageTest #test092_FullyCoversABooleanInstanceVariableDeclarationThatHasBeenAssignedToTrueAndFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
instanceVariableAssignedToTrueMoreThanOnce
	#_coverageTracker118465_ markAsExecuted.
	#_coverageTracker118465_
		cover: (47 to: 62)
		declaredAt: (47 to: 62)
		by:
			(instanceVariable _ #_coverageTracker118465_
				coverAll:
					{66 to: 69}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118465_
		cover: (73 to: 88)
		declaredAt: (47 to: 62)
		by:
			(instanceVariable _ #_coverageTracker118465_
				coverAll:
					{92 to: 95}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test093_DoesNotCountMultipleAssignmentsWithTheSameValueToBooleanInstanceVariables stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
instanceVariableAssignedToABooleanAndThenToANonBoolean
	#_coverageTracker118469_ markAsExecuted.
	#_coverageTracker118469_
		cover: (58 to: 73)
		declaredAt: (58 to: 73)
		by:
			(instanceVariable _ #_coverageTracker118469_
				coverAll:
					{77 to: 80}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118469_
		cover: (84 to: 99)
		declaredAt: (58 to: 73)
		by:
			(instanceVariable _ #_coverageTracker118469_
				coverAll:
					{103 to: 103}
				byLiteralOrPseudoVariable: 1).! !

!testRun: #CodeCoverageTest #test094_DoesNotConsiderAnInstanceVariableAsBooleanWhenItIsAssignedToABooleanAndThenToANonBoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
instanceVariableAssignedToANonBooleanAndThenToABoolean
	#_coverageTracker118471_ markAsExecuted.
	#_coverageTracker118471_
		cover: (58 to: 73)
		declaredAt: (58 to: 73)
		by:
			(instanceVariable _ #_coverageTracker118471_
				coverAll:
					{77 to: 77}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118471_
		cover: (81 to: 96)
		declaredAt: (58 to: 73)
		by:
			(instanceVariable _ #_coverageTracker118471_
				coverAll:
					{100 to: 103}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test095_DoesNotConsiderAnInstanceVariableAsBooleanWhenItIsAssignedToANonBooleanAndThenToABoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
instanceVariableAssignedToTrue
	#_coverageTracker118476_ markAsExecuted.
	#_coverageTracker118476_
		cover: (34 to: 49)
		declaredAt: (34 to: 49)
		by:
			(instanceVariable _ #_coverageTracker118476_
				coverAll:
					{53 to: 56}
				byLiteralOrPseudoVariable: true).! !
!Behavior method!
instanceVariableAssignedToFalse
	#_coverageTracker118476_ markAsExecuted.
	#_coverageTracker118476_
		cover: (35 to: 50)
		declaredAt: (35 to: 50)
		by:
			(instanceVariable _ #_coverageTracker118476_
				coverAll:
					{54 to: 58}
				byLiteralOrPseudoVariable: false).! !

!testRun: #CodeCoverageTest #test096_DoesNotCoverABooleanInstanceVariableAssignedInDifferentMethods stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
emptyMethodWithUnusedArgument: arg
	#_coverageTracker118478_ markAsExecuted.! !

!testRun: #CodeCoverageTest #test097_DoesNotCoverUnusedMethodArguments stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
classVariableAssignedToTrue
	#_coverageTracker118480_ markAsExecuted.
	#_coverageTracker118480_
		cover: (31 to: 43)
		declaredAt: (31 to: 43)
		by:
			(ClassVariable _ #_coverageTracker118480_
				coverAll:
					{47 to: 50}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test098_PartiallyCoversABooleanClassVariableThatHasOnlyBeenAssignedToTrue stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
classVariableAssignedToFalse
	#_coverageTracker118482_ markAsExecuted.
	#_coverageTracker118482_
		cover: (32 to: 44)
		declaredAt: (32 to: 44)
		by:
			(ClassVariable _ #_coverageTracker118482_
				coverAll:
					{48 to: 52}
				byLiteralOrPseudoVariable: false).! !

!testRun: #CodeCoverageTest #test099_PartiallyCoversABooleanClassVariableThatHasOnlyBeenAssignedToFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
classVariableAssignedToTrueAndFalse
	#_coverageTracker118484_ markAsExecuted.
	#_coverageTracker118484_
		cover: (39 to: 51)
		declaredAt: (39 to: 51)
		by:
			(ClassVariable _ #_coverageTracker118484_
				coverAll:
					{55 to: 58}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118484_
		cover: (62 to: 74)
		declaredAt: (39 to: 51)
		by:
			(ClassVariable _ #_coverageTracker118484_
				coverAll:
					{78 to: 82}
				byLiteralOrPseudoVariable: false).! !

!testRun: #CodeCoverageTest #test100_FullyCoversABooleanClassVariableThatHasBeenAssignedToTrueAndFalse stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
classVariableAssignedToABooleanMoreThanOnce
	#_coverageTracker118488_ markAsExecuted.
	#_coverageTracker118488_
		cover: (47 to: 59)
		declaredAt: (47 to: 59)
		by:
			(ClassVariable _ #_coverageTracker118488_
				coverAll:
					{63 to: 66}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118488_
		cover: (70 to: 82)
		declaredAt: (47 to: 59)
		by:
			(ClassVariable _ #_coverageTracker118488_
				coverAll:
					{86 to: 89}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test101_DoesNotCountMultipleAssignmentsWithTheSameValueToClassTemporaryVariables stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
classVariableAssignedToABooleanAndThenToANonBoolean
	#_coverageTracker118490_ markAsExecuted.
	#_coverageTracker118490_
		cover: (55 to: 67)
		declaredAt: (55 to: 67)
		by:
			(ClassVariable _ #_coverageTracker118490_
				coverAll:
					{71 to: 74}
				byLiteralOrPseudoVariable: true).
	#_coverageTracker118490_
		cover: (78 to: 90)
		declaredAt: (55 to: 67)
		by:
			(ClassVariable _ #_coverageTracker118490_
				coverAll:
					{94 to: 94}
				byLiteralOrPseudoVariable: 1).! !

!testRun: #CodeCoverageTest #test102_DoesNotConsiderAClassVariableAsBooleanWhenItIsAssignedToABooleanAndThenToANonBoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
classVariableAssignedToANonBooleanAndThenToABoolean
	#_coverageTracker118494_ markAsExecuted.
	#_coverageTracker118494_
		cover: (55 to: 67)
		declaredAt: (55 to: 67)
		by:
			(ClassVariable _ #_coverageTracker118494_
				coverAll:
					{71 to: 71}
				byLiteralOrPseudoVariable: 1).
	#_coverageTracker118494_
		cover: (75 to: 87)
		declaredAt: (55 to: 67)
		by:
			(ClassVariable _ #_coverageTracker118494_
				coverAll:
					{91 to: 94}
				byLiteralOrPseudoVariable: true).! !

!testRun: #CodeCoverageTest #test103_DoesNotConsiderAClassVariableAsBooleanWhenItIsAssignedToANonBooleanAndThenToABoolean stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #CodeCoverageTest #test104_IgnoresAbstractMethods stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifTrue: aBoolean
	#_coverageTracker118498_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118498_
		cover: (20 to: 27)
		declaredAt: (9 to: 16)
		by: aBoolean.
	#_coverageTracker118498_
		coverAll:
			{29 to: 35}
		evaluating: [
			receiver1 ifTrue: [
				#_coverageTracker118498_
					coverAll:
						{39 to: 39}
					byLiteralOrPseudoVariable: 1 ]]
		thatSends: #ifTrue:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test105_PartiallyCoversIfTrueMessageSendsWhenBothBranchesAreNotExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifTrue: aBoolean
	#_coverageTracker118501_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118501_
		cover: (20 to: 27)
		declaredAt: (9 to: 16)
		by: aBoolean.
	#_coverageTracker118501_
		coverAll:
			{29 to: 35}
		evaluating: [
			receiver1 ifTrue: [
				#_coverageTracker118501_
					coverAll:
						{39 to: 39}
					byLiteralOrPseudoVariable: 1 ]]
		thatSends: #ifTrue:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test106_FullyCoversIfTrueMessageSendsWhenBothBranchesAreExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifTrueIfFalse: aReceiver
	#_coverageTracker118505_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118505_
		cover: (28 to: 36)
		declaredAt: (16 to: 24)
		by: aReceiver.
	#_coverageTracker118505_
		coverAll:
			{40 to: 46. 53 to: 60}
		evaluating: [
			receiver1
				ifTrue: [ ]
				ifFalse: [ ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test107_PartiallyCoversIfTrueIfFalseMessageSendsWhenBothBranchesAreNotExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifTrueIfFalse: aReceiver
	#_coverageTracker118509_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118509_
		cover: (28 to: 36)
		declaredAt: (16 to: 24)
		by: aReceiver.
	#_coverageTracker118509_
		coverAll:
			{40 to: 46. 53 to: 60}
		evaluating: [
			receiver1
				ifTrue: [ ]
				ifFalse: [ ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test108_FullyCoversIfTrueIfFalseMessageSendsWhenBothBranchesAreExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifFalse: aReceiver
	#_coverageTracker118513_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118513_
		cover: (22 to: 30)
		declaredAt: (10 to: 18)
		by: aReceiver.
	#_coverageTracker118513_
		coverAll:
			{32 to: 39}
		evaluating: [
			receiver1 ifFalse: [
				#_coverageTracker118513_
					coverAll:
						{43 to: 43}
					byLiteralOrPseudoVariable: 1 ]]
		thatSends: #ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test109_PartiallyCoversIfFalseMessageSendsWhenBothBranchesAreNotExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifFalse: aReceiver
	#_coverageTracker118515_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118515_
		cover: (22 to: 30)
		declaredAt: (10 to: 18)
		by: aReceiver.
	#_coverageTracker118515_
		coverAll:
			{32 to: 39}
		evaluating: [
			receiver1 ifFalse: [
				#_coverageTracker118515_
					coverAll:
						{43 to: 43}
					byLiteralOrPseudoVariable: 1 ]]
		thatSends: #ifFalse:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test110_FullyCoversIfFalseMessageSendsWhenBothBranchesAreExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifFalseIfTrue: aReceiver
	#_coverageTracker118519_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118519_
		cover: (28 to: 36)
		declaredAt: (16 to: 24)
		by: aReceiver.
	#_coverageTracker118519_
		coverAll:
			{40 to: 47. 54 to: 60}
		evaluating: [
			receiver1
				ifFalse: [ ]
				ifTrue: [ ]]
		thatSends: #ifFalse:ifTrue:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test111_PartiallyCoversIfFalseIfTrueMessageSendsWhenBothBranchesAreNotExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
ifFalseIfTrue: aReceiver
	#_coverageTracker118524_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118524_
		cover: (28 to: 36)
		declaredAt: (16 to: 24)
		by: aReceiver.
	#_coverageTracker118524_
		coverAll:
			{40 to: 47. 54 to: 60}
		evaluating: [
			receiver1
				ifFalse: [ ]
				ifTrue: [ ]]
		thatSends: #ifFalse:ifTrue:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test112_FullyCoversIfFalseIfTrueMessageSendsWhenBothBranchesAreExercised stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
blockReturningFromMethodWith: anObject
	#_coverageTracker118528_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker118528_
		cover: (42 to: 49)
		declaredAt: (31 to: 38)
		by: anObject.
	#_coverageTracker118528_
		coverAll:
			{51 to: 57}
		evaluating: [ receiver1 ifTrue: [ ^ #_coverageTracker118528_
					coverAll:
						{63 to: 63}
					byLiteralOrPseudoVariable: 1 ]]
		thatSends: #ifTrue:
		to: receiver1 ] value.! !

!testRun: #CodeCoverageTest #test113_FullyCoversDecisionSelectorsWhenTheyReturnFromTheMethodTheyWereCreatedFrom stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!
!Behavior method!
messageReceiverTracker
	#_coverageTracker118532_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker118532_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker118532_
		coverAll:
			{32 to: 56}
		evaluating: [ receiver1 trackMessageReceiverUsage ]
		thatSends: #trackMessageReceiverUsage
		to: receiver1 ] value.
	#_coverageTracker118532_
		coverAll:
			{59 to: 69}
		evaluating: [ receiver2 printString ]
		thatSends: #printString
		to: receiver2 ] value.! !

!testRun: #CodeCoverageTest #test114_EvaluatesReceiversOnlyOnceWhenCoveringMessageSends stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToInstVarReturnsAccessReceiversBranch stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToIsEmptyForVariableNotDefinedInClass stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testAllBroadAccessToReturnsAccessInAllHierarchy stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToFailsWhenWantsToStopOnInvalidSuperclass stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToPutsFirstSuperclassesFirst stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToStopsOnRightClass stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testAllUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testHasReferencesToInstanceVariableNamedLooksInClassOnly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsReceiverWhenNoOtherSuperclassImplementsSelector stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsTheTopSuperclassImplementingSelector stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingValuesIfNoneBlockWhenSelectorIsNotImplemented stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testIsInstanceVariableNamedReferencedInHierarchyLooksReferencesInHierarchy stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testProtoObjectAllRegularInstVarNamesDoesNotFail stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #BehaviorTest #testWithAllSuperclassesUpToIncludesReceiverClass stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test00MessagesForTestingAreImplemented stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test01TypeOfMessageSentToLiteralNumberAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test02TypeOfMessageSentToLiteralStringAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test03TypeOfMessageSentToLiteralSymbolAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test04TypeOfMessageSentToLiteralArrayAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test05TypeOfMessageSentToLiteralBraceArrayAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test06TypeOfMessageSentToLiteralBlockAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test07TypeOfMessageSentToLiteralCharacterAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test08TypeOfMessageSentToLiteralNilAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test09TypeOfMessageSentToLiteralTrueAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test10TypeOfMessageSentToLiteralFalseAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test11TypeOfMessageSentToSelfAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test12TypeOfMessageSentToSuperAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test13TypesIsUndefinedForAnyMessageSendToSuperFromProtoObject stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test14TypeOfMessageSentToGlobalVarAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #SHST80RangeTypeTest #test15TypeOfMessageSentToClassVarAreObtainedCorrectly stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #DebuggerTest #testCategoriesAreAddedSortedByAndSeparatedByClass stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #DebuggerTest #testMetaclassCategoriesIncludesInstanceCreation stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutLeadingBlanks stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutTrailingBlanks stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutLeadingBlanks stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutTrailingBlanks stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithReplacesTheCategoryWithTheGivenOne stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithWorksWhenCategoryIsNil stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #AddInstanceVariableTest #test01NewVariableNameCanNotBeEmpty stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #AddInstanceVariableTest #test02NewVariableNameCanNotContainBlanks stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #AddInstanceVariableTest #test03NewVariableNameCanNotContainInvalidCharacters stamp: 'eaam 10/2/2023 17:35:28'!
PASSED!

!testRun: #AddInstanceVariableTest #test04ValidNewVariableNameGetBlanksTrimmed stamp: 'eaam 10/2/2023 17:35:29'!
PASSED!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:29'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test05NewVariableNameCanNotBeDefinedInClass stamp: 'eaam 10/2/2023 17:35:29'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:29'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:29'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:29'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'eaam 10/2/2023 17:35:29'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:30'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'eaam 10/2/2023 17:35:30'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:30'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:30'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'eaam 10/2/2023 17:35:30'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'eaam 10/2/2023 17:35:30'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:30'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:30'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:30'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test08AddCreatesNewInstanceVariable stamp: 'eaam 10/2/2023 17:35:30'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:31'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:31'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:31'!
m1 | a | a := 10.! !

!testRun: #AddInstanceVariableTest #test09FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'eaam 10/2/2023 17:35:31'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:31'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:31'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:31'!
m1:a! !

!testRun: #AddInstanceVariableTest #test10FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'eaam 10/2/2023 17:35:31'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:31'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:31'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:31'!
m1 [ :a | ] value: 1! !

!testRun: #AddInstanceVariableTest #test11FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'eaam 10/2/2023 17:35:31'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:32'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:32'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:32'!
m1 [ | a | ] value! !

!testRun: #AddInstanceVariableTest #test12FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'eaam 10/2/2023 17:35:32'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:32'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:32'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:32'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:32'!
m1 | a | ! !

!testRun: #AddInstanceVariableTest #test13FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'eaam 10/2/2023 17:35:32'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'eaam 10/2/2023 17:35:33'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:33'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:33'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test14NewVariableNameCanNotBeAReservedName stamp: 'eaam 10/2/2023 17:35:33'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'eaam 10/2/2023 17:35:33'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:33'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:33'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test01NewVariableCanNotBeEmpty stamp: 'eaam 10/2/2023 17:35:33'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:33'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:33'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:33'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test02NewVariableHasToBeValid stamp: 'eaam 10/2/2023 17:35:33'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:34'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:34'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:34'!
m1 | new | ^ 2! !

!testRun: #ExtractToTemporaryTest #test03NewVariableNameCanNotBeDefinedInMethod stamp: 'eaam 10/2/2023 17:35:34'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:34'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:34'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:34'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:34'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test04FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'eaam 10/2/2023 17:35:34'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:35'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:35'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:35'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:35'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'eaam 10/2/2023 17:35:35'!
PASSED!
!Character methodsFor: 'asRot13' stamp: 'eaam 10/2/2023 17:35:35' prior: 50657036!
asRot13
	(self asLowercase asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [ ^ self class asciiValue: self asciiValue + 13 ].
	(self asLowercase asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [ ^ self class asciiValue: self asciiValue - 13 ].
	! !

!classRemoval: #ClassToRefactorSuperclass stamp: 'eaam 10/2/2023 17:35:35'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:35'!
AnObsoleteClassToRefactorSuperclass subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:35'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:35'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test06SourceCodeToExtractCanNotIncludeReturn stamp: 'eaam 10/2/2023 17:35:35'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:36'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:36'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:36'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test07SourceCodeToExtractCanNotBeEmpty stamp: 'eaam 10/2/2023 17:35:36'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:36'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:36'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:36'!
m1 ^ 1 + 3! !

!testRun: #ExtractToTemporaryTest #test08SourceCodeToExtractCanNotHaveSyntaxErrors stamp: 'eaam 10/2/2023 17:35:36'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:36'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:36'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:36'!
m1 1+2. 3+4! !

!testRun: #ExtractToTemporaryTest #test09SourceCodeToExtractHasToBeOneStatement stamp: 'eaam 10/2/2023 17:35:36'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:37'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test10FailsIfIntervalToExtractIsBeforeMethodSourceCodeBoundaries stamp: 'eaam 10/2/2023 17:35:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:37'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test11FailsIfIntervalToExtractIsAfterMethodSourceCodeBoundaries stamp: 'eaam 10/2/2023 17:35:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:38'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:38' prior: 50661281!
m1

	| new |
	new := 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test12ItIsPossibleToExtractASingleLiteralFromAMethodWithoutAnyTempsOrArguments stamp: 'eaam 10/2/2023 17:35:38'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:38'!
m1

	| four |
	four := 4.
	^ four + 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:38' prior: 50661311!
m1

	| four two |
	four := 4.
	two := 2.
	^ four + two! !

!testRun: #ExtractToTemporaryTest #test13ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAlreadyOtherTemporary stamp: 'eaam 10/2/2023 17:35:38'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:38'!
m1

	| |
	^ 3 factorial! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:38' prior: 50661343!
m1

	| f |
	f := 3 factorial.
	^ f! !

!testRun: #ExtractToTemporaryTest #test14ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAnEmptyTemporariesDeclaration stamp: 'eaam 10/2/2023 17:35:38'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:39'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:39' prior: 50661375!
m1

	| new |
	new := 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test15ItIsPossibleToExtractCodeAndGenerateAssignmentUsingAnsiAssignmentStyle stamp: 'eaam 10/2/2023 17:35:39'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:39'!
m1

	^ [ self m2 ]! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:39' prior: 50661405!
m1

	^ [ | new |
	new := self m2 ]! !

!testRun: #ExtractToTemporaryTest #test16ItIsPossibleToExtractASingleLiteralFromABlockWithoutAnyTempsOrArguments stamp: 'eaam 10/2/2023 17:35:39'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:40'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test17CannotExtractPartOfMethodName stamp: 'eaam 10/2/2023 17:35:40'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:40'!
m1 ^ self m2! !

!testRun: #ExtractToTemporaryTest #test18CannotExtractPartOfMessageSend stamp: 'eaam 10/2/2023 17:35:40'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:40'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:40' prior: 50661484!
m1

	| new |
	new := 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test19ItIsPossibleToExtractAnIntervalWithSomeExtraSpaces stamp: 'eaam 10/2/2023 17:35:40'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:41'!
m1

	^ []! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:41' prior: 50661514!
m1

	| new |
	new := [].
	^ new! !

!testRun: #ExtractToTemporaryTest #test20ItIsPossibleToExtractAnEmptyBlock stamp: 'eaam 10/2/2023 17:35:41'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:41'!
m1 | existing | existing := 2! !

!testRun: #ExtractToTemporaryTest #test21CannotExtractLeftSideOfAssignment stamp: 'eaam 10/2/2023 17:35:41'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42'!
m1

	^ 3 factorial; yourself! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42' prior: 50661568!
m1

	| new |
	new := 3 factorial; yourself.
	^ new! !

!testRun: #ExtractToTemporaryTest #test22ItIsPossibleToExtractACascadeExpression stamp: 'eaam 10/2/2023 17:35:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42'!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42' prior: 50661599!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42' prior: 50661603!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42' prior: 50661607!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42' prior: 50661611!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42' prior: 50661615!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test23CannotUseAReservedNameAsTheNewTemporaryVariable stamp: 'eaam 10/2/2023 17:35:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42'!
m1

	self run! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:42' prior: 50661644!
m1

	| action |
	action := self run! !

!testRun: #ExtractToTemporaryTest #test24WhenExtractingAnEntireStatementItOnlyGeneratesTheVariableAssignment stamp: 'eaam 10/2/2023 17:35:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:43'!
m1: arg ^ self! !

!testRun: #ExtractToTemporaryTest #test25CannotExtractArgumentNamesFromMethodSignature stamp: 'eaam 10/2/2023 17:35:43'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:43'!
m1 ^((self m2) + (self m3)) m1.! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:43' prior: 50661699!
m1 | action |
	action := (self m2) + (self m3).
	^(action) m1.! !

!testRun: #ExtractToTemporaryTest #test26ExtractsCorrectlyWithParentesisInsideParentesis stamp: 'eaam 10/2/2023 17:35:43'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:44'!
m1
self m2.
^self m2.! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:44' prior: 50661731!
m1
| a |
	a := self m2.
^self m2.! !

!testRun: #ExtractToTemporaryTest #test27ExtractRightNodeWhenDuplicates stamp: 'eaam 10/2/2023 17:35:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:44'!
m1
self m2.
^self m2.! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 17:35:44' prior: 50661761!
m1
| a |
	self m2.
a := self m2.
	^a.! !

!testRun: #ExtractToTemporaryTest #test28ExtractRightNodeWhenDuplicatesAndSelectedLastOne stamp: 'eaam 10/2/2023 17:35:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'eaam 10/2/2023 17:35:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test01VariableToRenameHasToBeDefined stamp: 'eaam 10/2/2023 17:35:44'!
PASSED!

!testRun: #RenameTemporaryTest #test02NewVariableNameCanNotBeEmpty stamp: 'eaam 10/2/2023 17:35:44'!
PASSED!

!testRun: #RenameTemporaryTest #test03NewVariableHasToBeValid stamp: 'eaam 10/2/2023 17:35:45'!
PASSED!

!testRun: #RenameTemporaryTest #test04NewVariableNameCanNotBeDefinedInMethod stamp: 'eaam 10/2/2023 17:35:45'!
PASSED!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:45'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'eaam 10/2/2023 17:35:45'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'eaam 10/2/2023 17:35:45'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:45'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'eaam 10/2/2023 17:35:45'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test06FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'eaam 10/2/2023 17:35:45'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'eaam 10/2/2023 17:35:46'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRefactorSuperclass stamp: 'eaam 10/2/2023 17:35:46'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test07RenameCreatesNewTemporaryVariableAndDeletesOldOne stamp: 'eaam 10/2/2023 17:35:46'!
PASSED!

!testRun: #RenameTemporaryTest #test08RenameChangesReferencesFromOldVariableToNewVariable stamp: 'eaam 10/2/2023 17:35:46'!
PASSED!

!testRun: #RenameTemporaryTest #test09RenamesArguments stamp: 'eaam 10/2/2023 17:35:46'!
PASSED!

!testRun: #RenameTemporaryTest #test10NewVariableNameCanNotBeDefinedAsBlockArgument stamp: 'eaam 10/2/2023 17:35:47'!
PASSED!

!testRun: #RenameTemporaryTest #test11RenamesBlockArguments stamp: 'eaam 10/2/2023 17:35:47'!
PASSED!

!testRun: #RenameTemporaryTest #test12RenamesBlockTemporaries stamp: 'eaam 10/2/2023 17:35:47'!
PASSED!

!testRun: #RenameTemporaryTest #test13OldNodeMustBePartOfMethodNode stamp: 'eaam 10/2/2023 17:35:47'!
PASSED!

!testRun: #RenameTemporaryTest #test14OldVariableNodeMustBeArgOrTempNode stamp: 'eaam 10/2/2023 17:35:48'!
PASSED!

!testRun: #RenameTemporaryTest #test15RenameVariablesWithSameNameInDifferentBlocksCorrectly stamp: 'eaam 10/2/2023 17:35:48'!
PASSED!

!testRun: #RenameTemporaryTest #test16CantRenameVariableToANameAlreadyUsedInAnUpperBlock stamp: 'eaam 10/2/2023 17:35:48'!
PASSED!

!testRun: #RenameTemporaryTest #test17RenamesOneCharVariableAfterAReturnWithoutCharsAfterThatCorrectly stamp: 'eaam 10/2/2023 17:35:48'!
PASSED!

!testRun: #RenameTemporaryTest #test18CantRenameVariableToAReservedName stamp: 'eaam 10/2/2023 17:35:48'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutLeadingBlanks stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutTrailingBlanks stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutLeadingBlanks stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutTrailingBlanks stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #MetaclassTest #testHasSubclassesReturnsThisClassHasSubclasses stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testE stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'eaam 10/2/2023 17:35:49'!
FAILURE!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testRoundHalfAwayFromZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testRoundHalfAwayFromZero stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'eaam 10/2/2023 17:35:49'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'eaam 10/2/2023 17:35:49'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'eaam 10/2/2023 17:35:50'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #LargePositiveIntegerTest #test_raisedTo_modulo stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNext stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBits stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBitsInvalid stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextInteger stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextIntegerInvalid stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger1 stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger2 stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSeedAndRepeatability stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSetAtRandom stamp: 'eaam 10/2/2023 17:35:51'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSimpleBuckets stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNext stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBits stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBitsInvalid stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextInteger stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextIntegerInvalid stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger1 stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger2 stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSeedAndRepeatability stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSetAtRandom stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSimpleBuckets stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #TrieUnicodeTest #test01 stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #TrieUnicodeTest #test02 stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #TrieUnicodeTest #test03 stamp: 'eaam 10/2/2023 17:35:52'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'eaam 10/2/2023 17:35:53'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'eaam 10/2/2023 17:35:53'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testCaseConversion stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForCharacterNotIncluded stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForObjectsThatAreNotCharacters stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsTrueForCharacterIncluded stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsNotTestSelectorWhenHasParameters stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsNotTestSelectorWhenItDoesNotStartsWithTest stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsNotValidBinarySelectorIfItContainsACharacterNotAllowed stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsNotValidKeywordSelectorIfItContainsSeparators stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItContainsCharactersUsedInBinarySelectors stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItStartsWithALetterAndContainsSeparators stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsTestSelectorWhenStartsWithTestAndHasNoParameters stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsValidBinarySelectorIfItContainsAnAllowedCharacterOrSequenceOfCharacters stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsValidKeywordSelectorIfItContainsKeywordsWithColons stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #SymbolTest #testIsValidUnarySelectorIfItStartsWithALetterAndDoesNotContainSeparators stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #UnicodeCodePointTest #testCompareIsTransitive stamp: 'eaam 10/2/2023 17:35:53'!
PASSED!

!testRun: #UnicodeCodePointTest #testCompareWithCharacters stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeNormalizationTest #testCanonicalComposites stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeNormalizationTest #testMultipleCombiningMarks stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeNormalizationTest #testSingletons stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test01 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test02 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test03 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test04 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test05Utf8 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test06isAscii stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test07 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test08a stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test08b stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test08c stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test08d stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test09 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test10 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test11 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #test12 stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #testAtPut stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #UnicodeStringsTest #testfromBytesStream stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateTest #testCreation stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateTest #testInvalidOperations stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateTest #testLessDate stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateTest #testLessDuration stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateAndTimeTest #testCreation stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateAndTimeTest #testDayOfWeek stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateAndTimeTest #testInvalidOperations stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateAndTimeTest #testIsDateAndTime stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateAndTimeTest #testLessDateAndTime stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateAndTimeTest #testOperations stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DateAndTimeTest #testToByDo stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #DurationTest #testPrintString stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #MonthTest #testCreation stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #MonthTest #testPrintString stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #TimeTest #testCreation stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #TimeTest #testEqual stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #TimeTest #testSqueakInquiries stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #TimeTest #testTimePartsArePositive stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #TimespanTest #testIsTimespan stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #WeekTest #testCreation stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #WeekTest #testIncluding stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #WeekTest #testInvalidOperations stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #WeekTest #testPrintString stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #WeekTest #testWeekDayNames stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #YearTest #testCreation stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #YearTest #testIncluding stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test01isGetterWhenSameSelectorAsInstanceVariableAndOnlyReturnsThatVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test01withPropertiesDoIfSelectorEvaluatesFirstBlockWhenMethodHasProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test02isNotGetterWhenDifferentSelectorAsInstanceVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test02removePropertiesRestoresPenultimalLiteralToSelector stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test03isNotGetterWhenSameSelectorAsInstanceVariableButDoesOtherThingBesidesReturningVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test03removePropertiesKeepsSelectorIfMethodDoesNotHaveProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test04isSetterWhenSameKeywordSelectorAsInstanceVariableAndOnlySetsTheVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test04withPropertiesDoIfSelectorEvaluatesSecondBlockWhenMethodHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test05hasLiteralSuchThatTravelsListeralsWhenMethodHasProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test05isNotSetterWhenDifferentKeywordSelectorAsInstanceVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test06hasLiteralSuchThatTravelsListeralsWhenMethodHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test06isNotSetterWhenSameKeywordSelectorAsInstanceVariableButDoesNotAssignParameter stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test0701withPropertiesDoReturnsNilIfMethodHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test07AccessorDescriptionIsGetterForAGetter stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test07withPropertiesDoEvaluatesBlockOnlyWhenMethodHasProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test08AccessorDescriptionIsSetterForASetter stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test08hasLiteralThoroughReturnTrueWhenMethodHasPropertiesAndHasLiteral stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test09AccessorDescriptionIsReadForMethodThatReadsInstanceVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test09hasLiteralThoroughReturnFalseWhenMethodHasPropertiesAndHasNoLiteral stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test10AccessorDescriptionIsWriteForMethodThatWritesInstanceVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test10hasLiteralThoroughReturnTrueWhenMethodHasNoPropertiesAndHasLiteral stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test11AccessorDescriptionIsWriteReadForMethodThatWritesAndReadInstanceVariable stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test11hasLiteralThoroughReturnFalseWhenMethodHasNoPropertiesAndHasNoLiteral stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test12pragmaAtReturnsPragmaIfExist stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test13pragmaAtReturnsNilIfPragmaDoesNotExist stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test14pragmasReturnsCollectionOfMethodPragmas stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test15pragmasReturnsEmptyCollectionWhenMethodHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test16propertiesReturnsAnNewAdditionalMethodStateWhenNoPropertiesHasBeenSet stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test17propertiesReturnsTheAlreadySetAdditionalMethodStateWhenHasProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test18propertyKeysAndValuesDoIteratesOverProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test19propertyKeysAndValuesDoDoesNotEvaluateBlockWhenMethodHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test20propertyValueAtReturnsPropertyValueWhenSetted stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test21propertyValueAtReturnsNilWhenPropertyIsNotFound stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test22propertyValueAtReturnsNilWhenMethodHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test23propertyValueAtIfAbsetReturnsPropertyValueWhenFound stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test24propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenNotFound stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test25propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenMethodHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test26propertyValueAtPutCreatesPropertiesWithNewOne stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test27propertyValueAtPutReplacesPropertyIfAlreadyExisted stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test28propertyValueAtPutAddsNewPropertyIfPropertiesExisted stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test29selectorReturnsMethodSelectorWhenNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test30selectorReturnsMethodSelectorWhenHasProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test31SettingSelectorWhenHasNoProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #CompiledMethodTest #test32SettingSelectorWhenHasProperties stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ContextCompilationTest #testVariablesAndOffsetsDo stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testAtomicSuspend stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testIsTerminated stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testProcessFaithfulTermination stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testResumeTerminatingProcess stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testRevisedSuspendExpectations stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testTerminateByHighestPriorityProcess stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testTerminateEnsureAsStackTop stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testTerminateEnsureOnTopOfEnsure stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testTerminateHandlingUnwindError stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #ProcessTest #testTerminateHighestPriorityProcess stamp: 'eaam 10/2/2023 17:35:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:35:55'!
PASSED!

!testRun: #ProcessTest #testTerminateInEnsure stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateInTerminate stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateNiledSuspendedContextProcess stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateProcessTerminatedViaNiledPc stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateSingleEnsure stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateTerminatingProcess stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateTerminatingProcessAfterUnwindStarted stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateWithDelayInUnwind stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testTerminateWithNiledUnwindBlock stamp: 'eaam 10/2/2023 17:35:58'!
PASSED!

!testRun: #ProcessTest #testValueEnsured stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test01FullName stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test02Keywords stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test03HasNoRightNumberOfArgumentsForUnaryMessageAndNotEmptyArguments stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test04HasRightNumberOfArgumentsForUnaryMessageAndEmptyArguments stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test05HasNoRightNumberOfArgumentsForBinaryMessageAndEmptyArguments stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test06HasNoRightNumberOfArgumentsForBinaryMessageAndMoreThanOneArgument stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test07HasRightNumberOfArgumentsForBinaryMessageAndOneArgument stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test08HasNoRightNumberOfArgumentsForKeywordMessageAndLessArguments stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test09HasNoRightNumberOfArgumentsForKeywordMessageAndMoreArguments stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MessageTest #test10HasRightNumberOfArgumentsForKeywordMessageWhenSameNumberOfKeywordsAndArguments stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #DelayTest #testBounds stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #DelayTest #testMultiProcessWaitOnSameDelay stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #DelayTest #testMultiSchedule stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MonitorTest #testExample1 stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MonitorTest #testExample2 stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #MonitorTest #testMonitorNotGainingUnwantedSignalsDuringUnwinding stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testCritical stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testCriticalIfError stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWait stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWait2 stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWaitInEnsure stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWaitInEnsure2 stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWaitSuspended stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalEnsureArgument stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWait stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWait2 stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWaitInEnsure stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWaitInEnsure2 stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testSuspendAndResume stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testWaitAndWaitTimeoutTogether stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!

!testRun: #SemaphoreTest #testWaitTimeoutMSecs stamp: 'eaam 10/2/2023 17:35:59'!
PASSED!
!String methodsFor: 'asRot13' stamp: 'eaam 10/2/2023 17:36:36' prior: 50665018!
asRot13
	self isEmpty ifTrue: [ ^ '' ].
	^ self inject: '' into: [ :argm1_1 :argm1_2 | argm1_1 , argm1_2 asRot13 asString ].! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:42:45'!
PASSED!
!String methodsFor: 'asRot13' stamp: 'eaam 10/2/2023 17:42:48' prior: 50663944!
asRot13
	self isEmpty ifTrue: [ ^ '' ].
	^ self collect: [ :char | char asRot13].! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:42:51'!
PASSED!
!String methodsFor: 'asRot13' stamp: 'eaam 10/2/2023 17:43:36' prior: 50664007!
asRot13
	self isEmpty ifTrue: [ ^ '' ].
	^ self collect: [ :aChar | aChar asRot13].! !

----SNAPSHOT----(2 October 2023 17:44:06) CuisUniversity-5981.image priorSource: 10412113!

TDDBabyStepsGameAnagrams start!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'eaam 10/2/2023 17:45:54'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:48:22'!
PASSED!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'eaam 10/2/2023 17:49:55'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 17:52:00'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 17:52:18'!
ERROR!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 17:52:31'!
anagrams
	self shouldBeImplemented.! !

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'eaam 10/2/2023 17:52:51'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 17:53:03'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 17:56:59'!
PASSED!

----SNAPSHOT----(2 October 2023 17:57:47) CuisUniversity-5981.image priorSource: 10637526!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 17:58:45'!
ERROR!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 17:58:59'!
factorize
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 17:59:14' prior: 50664244!
factorize
	^ Bag new.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 17:59:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 17:59:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 17:59:56'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 17:59:56'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 17:59:56'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 17:59:56'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 17:59:56'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 17:59:56'!
FAILURE!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:01:34' prior: 50664248!
factorize
	self = 1 ifTrue:
		[^Bag new.].
	^Bag with: 2! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:01:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:01:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:40'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:01:40'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:40'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:40'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:01:40'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:40'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:01:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:43'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:01:43'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:03:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:03:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:03:20'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:03:20'!
FAILURE!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:04:09' prior: 50664289!
factorize
	self = 1 ifTrue:
		[^Bag new.].
	self = 2 ifTrue: 
		[^Bag with: 2].
	^Bag with: 3! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:04:11'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:04:11'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:04:11'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:04:11'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:04:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:04:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:04:14'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:04:14'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:04:14'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:04:14'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:04:14'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:04:14'!
FAILURE!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:07:45' prior: 50664376!
factorize
	
	
	self = 1 ifTrue:
		[^Bag new.].
	self = 2 ifTrue: 
		[^Bag with: 2].
	^Bag with: 3! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:12:49' prior: 50664439!
factorize
	
	
	self = 1 ifTrue:
		[^Bag new.].
	self isDivisibleBy: 2 ifTrue:
	self = 2 ifTrue: 
		[^Bag with: 2].
	^Bag with: 3! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:14:56' prior: 50664445!
factorize
	
	
	self = 1 ifTrue:
		[^Bag new.].
	self isDivisibleBy: 2 ifTrue: []
	self = 2 ifTrue: 
		[^Bag with: 2].
	^Bag with: 3! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:19:17' prior: 50664452!
factorize
	
	|factirozacion|
	factirozacion := Bag new.
	self = 1 ifTrue:
		[^factirozacion.].
	(self isDivisibleBy: 2) ifTrue: [^(factirozacion add: 2) addAll: (self/2) factorize; yourself].
	(self = 3) ifTrue: [^Bag with: 3].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:19:19'!
ERROR!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:20:01' prior: 50664459!
factorize
	
	|factirozacion|
	factirozacion := Bag new.
	self = 1 ifTrue:
		[^factirozacion.].
	(self isDivisibleBy: 2) ifTrue: [^ ((factirozacion add: 2) addAll: (self/2) factorize; yourself)].
	(self = 3) ifTrue: [^Bag with: 3].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:20:04'!
ERROR!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:20:38' prior: 50664474!
factorize
	
	|factirozacion|
	factirozacion := Bag new.
	self = 1 ifTrue:
		[^factirozacion.].
	(self isDivisibleBy: 2) ifTrue: [^ ((Bag with: 2) addAll: (self/2) factorize; yourself)].
	(self = 3) ifTrue: [^Bag with: 3].! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:21:06' prior: 50664489!
factorize
	
	self = 1 ifTrue:
		[^Bag new.].
	(self isDivisibleBy: 2) ifTrue: [^ ((Bag with: 2) addAll: (self/2) factorize; yourself)].
	(self = 3) ifTrue: [^Bag with: 3].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:21:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:21:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:21:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:21:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:21:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:21:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:21:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:21:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:21:13'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:21:13'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:21:13'!
PASSED!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:21:13'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:24:50' prior: 50664499!
factorize
	|fact|
	self = 1 ifTrue:
		[^Bag new.].
	"(self isDivisibleBy: 2) ifTrue: [^ ((Bag with: 2) addAll: (self/2) factorize; yourself)].
	"
	(self = 2) ifTrue: [^Bag with: 2].
	(self = 3) ifTrue: [^Bag with: 3].
	fact := Bag with: 2.
	fact add: 2.
	^fact! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:24:55'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:24:55'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:24:55'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:24:55'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:24:55'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:25:07'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:25:07'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:25:07'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:25:07'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:25:07'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:25:07'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:25:07'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:25:07'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:25:07'!
FAILURE!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:25:26' prior: 50664565!
factorize
	
	self = 1 ifTrue:
		[^Bag new.].
	(self isDivisibleBy: 2) ifTrue: [^ ((Bag with: 2) addAll: (self/2) factorize; yourself)].
	(self = 2) ifTrue: [^Bag with: 2].
	(self = 3) ifTrue: [^Bag with: 3].
	"fact := Bag with: 2.
	fact add: 2.
	^fact"! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:25:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:25:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:25:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:25:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:25:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:25:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:25:36'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:25:36'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:25:36'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:25:36'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:25:36'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:25:36'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:25:36'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:25:36'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:25:36'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:25:36'!
FAILURE!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:32:33' prior: 50664646!
factorize
	|actualNumber|
	actualNumber := 2.
	self = 1 ifTrue:
		[^Bag new.].
	(2 to: self) detect: [:numero | (self isDivisibleBy: numero) ].
	(self = 2) ifTrue: [^Bag with: 2].
	(self = 3) ifTrue: [^Bag with: 3].! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:35:27' prior: 50664738!
factorize
	|actualNumber factorization|
	actualNumber := 2.
	factorization := Bag new.
	self = 1 ifTrue:
		[^factorization.].
	(actualNumber < self)
		whileTrue:	
			[(self isDivisibleBy: actualNumber)
				whileTrue:
					[factorization add: actualNumber]
			].
	^factorization
	"(2 to: self) detect: [:numero | (self isDivisibleBy: numero) ].
	(self = 2) ifTrue: [^Bag with: 2].
	(self = 3) ifTrue: [^Bag with: 3]."! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:35:29'!
ERROR!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:36:01' prior: 50664748!
factorize
	|actualNumber factorization|
	actualNumber := 2.
	factorization := Bag new.
	self = 1 ifTrue:
		[^factorization.].
	(actualNumber < self)
		whileTrue:	
			[(self isDivisibleBy: actualNumber)
				whileTrue:
					[factorization add: actualNumber]
			].
	^factorization
	"(2 to: self) detect: [:numero | (self isDivisibleBy: numero) ].
	(self = 2) ifTrue: [^Bag with: 2].
	(self = 3) ifTrue: [^Bag with: 3]."! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:36:02'!
ERROR!
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:36:32' prior: 50664769!
factorize
	|actualNumber factorization|
	actualNumber := 2.
	factorization := Bag new.
	self = 1 ifTrue:
		[^factorization.].
	[actualNumber < self]
		whileTrue:	
			[[self isDivisibleBy: actualNumber]
				whileTrue:
					[factorization add: actualNumber]
			].
	^factorization
	"(2 to: self) detect: [:numero | (self isDivisibleBy: numero) ].
	(self = 2) ifTrue: [^Bag with: 2].
	(self = 3) ifTrue: [^Bag with: 3]."! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:44:10' prior: 50664790!
factorize
	|actualNumber factors|
	actualNumber := 2.
	factors := Bag new.
	self = 1 ifTrue:
		[^factors.].
	[actualNumber < self]
		whileTrue:	
			[[(self isDivisibleBy: actualNumber) and: []]
				whileTrue:
					[factors add: actualNumber].
			actualNumber := actualNumber + 1.
			].
	^factors
	"(2 to: self) detect: [:numero | (self isDivisibleBy: numero) ].
	(self = 2) ifTrue: [^Bag with: 2].
	(self = 3) ifTrue: [^Bag with: 3]."! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:52:45' prior: 50664806!
factorize
	|actualNumber factors left|
	actualNumber := 2.
	factors := Bag new.
	self = 1 ifTrue:
		[^factors.].
	left := self.
	[left > 1]
		whileTrue:	
			[[(left isDivisibleBy: actualNumber)]
				whileTrue:
					[factors add: actualNumber.
					left := left / actualNumber].
			actualNumber := actualNumber + 1.
			].
	^factors! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:52:52' prior: 50664823!
factorize
	|actualNumber factors left|
	actualNumber := 2.
	factors := Bag new.
	self = 1 ifTrue:
		[^factors.].
	left := self.
	[left > 1]
		whileTrue:	
			[[(left isDivisibleBy: actualNumber)]
				whileTrue:
					[
					factors add: actualNumber.
					left := left / actualNumber
					].
			actualNumber := actualNumber + 1.
			].
	^factors! !
!SmallInteger methodsFor: 'factorize' stamp: 'eaam 10/2/2023 18:52:57' prior: 50664837!
factorize
	|actualNumber factors left|
	actualNumber := 2.
	factors := Bag new.
	self = 1 ifTrue:
		[^factors.].
	left := self.
	[left > 1]
		whileTrue:	
			[
			[(left isDivisibleBy: actualNumber)]
				whileTrue:
					[
					factors add: actualNumber.
					left := left / actualNumber
					].
			actualNumber := actualNumber + 1.
			].
	^factors! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:53:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:53:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:53:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:53:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:53:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:53:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:53:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'eaam 10/2/2023 18:53:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:53:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'eaam 10/2/2023 18:53:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'eaam 10/2/2023 18:53:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'eaam 10/2/2023 18:53:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'eaam 10/2/2023 18:53:06'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 18:53:06'!
testExtraToCheckGeneralizationOnKata
	
	self assert: (Bag with: 2 with: 2 with: 3 with: 3 with: 5 with: 13) equals: (2*2*3*3*5*13) factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 18:53:06'!
PASSED!

TDDBabyStepsGameAnagrams start!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'eaam 10/2/2023 19:00:18'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:00:47' prior: 50664151!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:01:08' prior: 50664162!
anagrams
	^''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:01:11'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:01:22' prior: 50664949!
anagrams
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:01:24'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:01:24'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:01:26'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:01:26'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:01:26'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:01:26'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:01:26'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:01:26'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:02:18' prior: 50664957!
anagrams
	self = 'a' ifTrue: [Set with: 'a'].
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:02:20'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:02:30' prior: 50665006!
anagrams
	(self = 'a') ifTrue: [Set with: 'a'].
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:02:32'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:02:58' prior: 50665016!
anagrams
	(self = '') ifTrue: [Set with: ''].
	^Set with: 'a'.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:03:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:03:00'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:03:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:03:00'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:03:34' prior: 50665026!
anagrams
	^Set with: ''.! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:03:43' prior: 50665049!
anagrams
	(self = '') ifTrue: [Set with: ''].
	^Set with: 'a'.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:03:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:03:45'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:03:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:03:45'!
FAILURE!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:04:14' prior: 50664994!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with: 'a') equals: 'a' anagrams
	! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:04:47' prior: 50665053!
anagrams
	(self isEmpty ) ifTrue: [Set with: ''].
	^Set with: 'a'.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:04:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:04:49'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:04:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:04:49'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:05:13' prior: 50665084!
anagrams
	(self isEmpty ) ifTrue: [^Set with: ''].
	^Set with: 'a'.! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:05:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:05:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:05:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:05:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:05:23'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:05:23'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:05:23'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:05:23'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:05:23'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:05:23'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:06:33' prior: 50665107!
anagrams
	(self isEmpty ) ifTrue: [^Set with: ''].
	(self = 'a' ) ifTrue: [^Set with: 'a'].
	^Set with: 'ab' with: 'ba'.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:06:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:06:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:06:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:06:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:06:38'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:06:38'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:06:38'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:06:38'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:06:38'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:06:38'!
FAILURE!

----SNAPSHOT----(2 October 2023 19:07:06) CuisUniversity-5981.image priorSource: 10642783!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:14:06' prior: 50665168!
anagrams
	| firstHalf secondHalf i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	(i < j) whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: i.
	]. 
	
	^Set with: 'ab' with: 'ba'.! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:14:57' prior: 50665257!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	(i < j) whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: i.
		anagrams add: (firstHalf + secondHalf)
	]. 
	
	^Set with: 'ab' with: 'ba'.! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:15:16' prior: 50665268!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	(i < j) whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: i.
		anagrams add: (firstHalf + secondHalf).
		j := j - 1.
	]. 
	
	^Set with: 'ab' with: 'ba'.! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:15:21' prior: 50665281!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	(i < j) whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: i.
		anagrams add: (firstHalf + secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:15:22'!
ERROR!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:15:36' prior: 50665295!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < j] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: i.
		anagrams add: (firstHalf + secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:15:38'!
ERROR!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:15:48' prior: 50665313!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < j] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: i.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:15:49'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:16:11' prior: 50665331!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < j] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: self size.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:16:13'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:16:24'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:16:24'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:16:35' prior: 50665349!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < j + 1] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: self size.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:16:36'!
ERROR!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:16:52' prior: 50665376!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j+1 to: self size.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:16:54'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:17:09'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:18:24'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:18:35' prior: 50665394!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j to: self size.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:18:36'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:18:49' prior: 50665422!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j to: self size - 1.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:18:51'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:19:00' prior: 50665440!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j to: self size.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:19:16' prior: 50665458!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j + 1 to: self size.
		anagrams add: (firstHalf, secondHalf).
		j := j - 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:19:22'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:20:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:21:03'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:21:03'!
FAILURE!

'ab' anagrams!

'ab' anagrams!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:23:07' prior: 50665471!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j + 1 to: self size.
		anagrams add: (firstHalf, secondHalf).
		i := i + 1.
	]. 
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:23:10'!
FAILURE!

'ab' anagrams!

'ab' anagrams!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:26:32' prior: 50665505!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	self size <= 3 ifTrue: [
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j.
		secondHalf := self copyFrom: j + 1 to: self size.
		anagrams add: (firstHalf, secondHalf).
		i := i + 1.
	].].
	
	^anagrams! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:27:16' prior: 50665524!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	self size <= 3 ifTrue: [
	[i < (j + 1)] whileTrue: [
		firstHalf := self copyFrom: i to: j - 1.
		secondHalf := self copyFrom: j  to: self size.
		anagrams add: (firstHalf, secondHalf).
		i := i + 1.
	].].
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:27:18'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:28:05' prior: 50665538!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := self size.
	i := 1.
	anagrams := Set new.
	self size <= 3 ifTrue: [
		firstHalf := self copyFrom: i to: j - 1.
		secondHalf := self copyFrom: j  to: self size.
		anagrams add: (firstHalf, secondHalf).
	].
	
	^anagrams! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:30:29' prior: 50665557!
anagrams
	| firstHalf secondHalf anagrams i j|
	(self isEmpty ) ifTrue: [^Set with: ''].
	j := (self size).
	i := 1.
	anagrams := Set new.
	self size <= 3 ifTrue: [
		[i <= self size] whileTrue:
		[
		| X |
		firstHalf := self copyFrom: i to: j - 1.
		secondHalf := self copyFrom: j  to: self size.
		
		anagrams add: (firstHalf , secondHalf ).
		i := i + 1.
		].
	].
	
	^anagrams! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:36:44' prior: 50665570!
anagrams
	| firstHalf secondHalf anagrams i |
	(self isEmpty ) ifTrue: [^Set with: ''].
	i := 1.
	anagrams := Set new.
	self size <= 3 ifTrue: [
		[i <= self size] whileTrue:
		[
		| X |
		firstHalf := self copyFrom: 1 to: i - 1.
		secondHalf := self copyFrom: i + 1 to: self size.
		X = (firstHalf, secondHalf ) anagrams.
		anagrams do: [:subAnagram | anagrams add: (self at: i) asString, subAnagram].
		].
	].
	
	^anagrams! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:36:51' prior: 50665585!
anagrams
	| firstHalf secondHalf anagrams i |
	(self isEmpty ) ifTrue: [^Set with: ''].
	i := 1.
	anagrams := Set new.
	self size <= 3 ifTrue: [
		[i <= self size] whileTrue:
		[
		| X |
		firstHalf := self copyFrom: 1 to: i - 1.
		secondHalf := self copyFrom: i + 1 to: self size.
		X = (firstHalf, secondHalf ) anagrams.
		anagrams do: [:subAnagram | anagrams add: (self at: i) asString, 		subAnagram].
		].
	].
	
	^anagrams! !

----STARTUP---- (2 October 2023 19:39:33) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!

!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:40:11' prior: 50665168!
anagrams
	(self size < 2 ) ifTrue: [^Set with: self].
	^Set with: self with: self reverse.! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:40:13'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:44:57' prior: 50665622!
anagrams
	| anagrams |
	(self size < 2 ) ifTrue: [^Set with: self].
	"^Set with: self with: self reverse."
	anagrams := Set new.
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:46:20' prior: 50665633!
anagrams
	| anagrams |
	(self size < 2 ) ifTrue: [^Set with: self].
	"^Set with: self with: self reverse."
	anagrams := Set new.
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:46:57' prior: 50665647!
anagrams
	| anagrams |
	(self size < 2 ) ifTrue: [^Set with: self].
	"^Set with: self with: self reverse."
	anagrams := Set new.
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 2).! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:47:02' prior: 50665676!
anagrams
	| anagrams |
	(self size < 2 ) ifTrue: [^Set with: self].
	"^Set with: self with: self reverse."
	anagrams := Set new.
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 2).
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:47:05'!
ERROR!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:47:50' prior: 50665705!
anagrams
	| anagrams |
	(self size < 2 ) ifTrue: [^Set with: self].
	(self size = 2 ) ifTrue: [^Set with: self with: self reverse.].
	anagrams := Set new.
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 2).
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:47:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:47:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:47:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:47:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:47:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 19:47:58'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 19:47:58'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 19:47:58'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 19:47:58'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:47:58'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 19:47:58'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 19:47:58'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 19:47:58'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 19:47:58'!
FAILURE!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:48:15' prior: 50665739!
anagrams
	| anagrams |
	(self size < 2 ) ifTrue: [^Set with: self].
	(self size = 2 ) ifTrue: [^Set with: self with: self reverse.].
	anagrams := Set new.
	
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 2).
	
	^anagrams! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:49:09'!
dropCharAt: index
	^(self)! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:56:21' prior: 50665907!
dropCharAt: index
	^(self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 19:59:28' prior: 50665878!
anagrams
	| anagrams head tails|
	(self size < 2 ) ifTrue: [^Set with: self].
	(self size = 2 ) ifTrue: [^Set with: self with: self reverse.].
	anagrams := Set new.
	
	"anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 1 to: 1), ((self copyFrom: 2 to: 3) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 2 to: 2), (((self copyFrom: 1 to: 1), (self copyFrom: 3 to: 3)) anagrams asOrderedCollection at: 2).
	
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 1).
	anagrams add: (self copyFrom: 3 to: 3), ((self copyFrom: 1 to: 2) anagrams asOrderedCollection at: 2)."
	
	1 to: self size do: [:index | head := self aStringAt: index.
		tails := (self dropCharAt: index) anagrams.
		anagrams addAll: (tails collect: [:tail | (head, tail)]).
		].
	
	^anagrams! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 20:00:11' prior: 50665911!
dropCharAt: index
	^(self copyFrom: 1 to: index - 1), (self copyFrom: index + 1 to: self size)! !
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 20:00:28'!
aStringAt: index
	^(self copyFrom: index to: index index)! !
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:00:30' prior: 50665854!

test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 20:00:30'!
ERROR!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 20:00:43' prior: 50665958!
aStringAt: index
	^(self copyFrom: index to: index)! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'eaam 10/2/2023 20:00:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 20:00:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 20:00:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 20:00:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 20:00:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 20:00:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 20:00:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 20:00:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 20:00:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 20:00:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 20:00:53'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 20:00:53'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:00:53'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 20:00:55'!
PASSED!
!String methodsFor: 'category-name' stamp: 'eaam 10/2/2023 20:01:24' prior: 50665916!
anagrams
	| anagrams head tails|
	(self isEmpty ) ifTrue: [^Set with: self].
	anagrams := Set new.
	1 to: self size do: [:index | head := self aStringAt: index.
		tails := (self dropCharAt: index) anagrams.
		anagrams addAll: (tails collect: [:tail | (head, tail)]).
		].
	
	^anagrams! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 20:01:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'eaam 10/2/2023 20:01:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'eaam 10/2/2023 20:01:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'eaam 10/2/2023 20:01:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'eaam 10/2/2023 20:01:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'eaam 10/2/2023 20:01:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'eaam 10/2/2023 20:01:26'!
PASSED!

----SNAPSHOT----(2 October 2023 20:09:40) CuisUniversity-5981.image priorSource: 10675287!

Object subclass: #hundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!

Object subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Door category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:25:42'!
Object subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Object subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #HundredDoorsTest category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:27:07'!
Object subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:27:47'!
setUp
	! !

Object subclass: #HundredDoorsTest
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #HundredDoorsTest category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:28:13'!
Object subclass: #HundredDoorsTest
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:29:09' prior: 50666189!
setUp
	puertas := OrderedCollection new.
	puertas := 100 timesRepeat: (puertas add: Door new).! !
!Door methodsFor: 'no messages' stamp: 'eaam 10/2/2023 20:29:37'!
isOpen! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:29:43'!
open! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:29:46'!
close! !

Object subclass: #Door
	instanceVariableNames: 'estado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Door category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:31:26'!
Object subclass: #Door
	instanceVariableNames: 'estado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:31:35' prior: 50666210!
isOpen
	^estado! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:31:54' overrides: 16920235!
initialize
	estado := false! !

Object subclass: #Cerrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Cerrada category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:32:17'!
Object subclass: #Cerrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Door subclass: #Cerrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Cerrada category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:32:39'!
Door subclass: #Cerrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Door subclass: #Abierta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Abierta category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:32:43'!
Door subclass: #Abierta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!Abierta methodsFor: 'no messages' stamp: 'eaam 10/2/2023 20:32:57' overrides: 50666230!
isOpen
	^true! !
!Abierta methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:33:07' overrides: 50666213!
open
! !
!Abierta methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:33:17' overrides: 50666216!
close
	
! !

!methodRemoval: Door #initialize stamp: 'eaam 10/2/2023 20:33:34'!
initialize
	estado := false!
!Abierta methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:33:48' prior: 50666278 overrides: 50666216!
close
	! !

Object subclass: #estadoDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Object subclass: #EstadeOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #EstadeOfDoor category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:34:44'!
Object subclass: #EstadeOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Object subclass: #EstateOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #EstateOfDoor category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:34:50'!
Object subclass: #EstateOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classRemoval: #EstadeOfDoor stamp: 'eaam 10/2/2023 20:34:57'!
Object subclass: #EstadeOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Object subclass: #StateOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #StateOfDoor category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:35:02'!
Object subclass: #StateOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classRemoval: #EstateOfDoor stamp: 'eaam 10/2/2023 20:35:06'!
Object subclass: #EstateOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Object subclass: #DoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #DoorState category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:35:22'!
Object subclass: #DoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classRemoval: #StateOfDoor stamp: 'eaam 10/2/2023 20:35:29'!
Object subclass: #StateOfDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classRenamed: #DoorState as: #DoorStado stamp: 'eaam 10/2/2023 20:35:35'!
Smalltalk renameClassNamed: #DoorState as: #DoorStado!

!classRenamed: #DoorStado as: #DoorEstado stamp: 'eaam 10/2/2023 20:36:02'!
Smalltalk renameClassNamed: #DoorStado as: #DoorEstado!

DoorEstado subclass: #Abierta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Abierta category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:36:08'!
DoorEstado subclass: #Abierta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

DoorEstado subclass: #Cerrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Cerrada category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:36:11'!
DoorEstado subclass: #Cerrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Object subclass: #DoorEstado
	instanceVariableNames: 'myDoor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #DoorEstado category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:36:52'!
Object subclass: #DoorEstado
	instanceVariableNames: 'myDoor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!methodRemoval: Abierta #open stamp: 'eaam 10/2/2023 20:37:14'!
open
!
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:38:51' overrides: 16920235!
initialize
	estado := #Cerrada! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:39:47' prior: 50666399 overrides: 16920235!
initialize
	estado := Cerrada new.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:40:48' prior: 50666230!
isOpen
	^estado isOpen.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:41:05' prior: 50666213!
open
	estado := Abierta new.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:41:20' prior: 50666216!
close
	estado := Cerrada new.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:41:31' prior: 50666416!
close
	estado := estado close.! !
!Abierta methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:41:52' prior: 50666285!
close
	^Cerrada new.! !
!Cerrada methodsFor: 'no messages' stamp: 'eaam 10/2/2023 20:42:03'!
close
	^self! !
!Abierta methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:42:19'!
open
	^self.! !
!Cerrada methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:42:31'!
isOpen
	^false! !
!Cerrada methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:42:39'!
open
	^Abierta new.! !
!DoorEstado methodsFor: 'no messages' stamp: 'eaam 10/2/2023 20:42:59'!
close
	^self subclassResponsibility ! !
!DoorEstado methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:43:02'!
open
	^self subclassResponsibility ! !
!DoorEstado methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:43:10'!
isOpen
	^self subclassResponsibility ! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:43:29' prior: 50666412!
open
	estado := estado new.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:43:36' prior: 50666452!
open
	estado := estado open.! !
!HundredDoorsTest commentStamp: '<historical>' prior: 0!
DoorsFlipper!

Object subclass: #DoorsFlipper
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #DoorsFlipper category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:45:19'!
Object subclass: #DoorsFlipper
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

Object subclass: #DoorsFlipper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #DoorsFlipper category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:45:26'!
Object subclass: #DoorsFlipper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

TestCase subclass: #HundredDoorsTest
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #HundredDoorsTest category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:45:38'!
TestCase subclass: #HundredDoorsTest
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:47:53'!
flip
	estado := estado flip.! !
!Abierta methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:48:04'!
flip
	^Cerrada new.! !
!Cerrada methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:48:26'!
flip
	^Abierta new! !

!methodRemoval: Cerrada #open stamp: 'eaam 10/2/2023 20:48:32'!
open
	^Abierta new.!

!methodRemoval: Cerrada #close stamp: 'eaam 10/2/2023 20:48:35'!
close
	^self!

!methodRemoval: Abierta #open stamp: 'eaam 10/2/2023 20:48:39'!
open
	^self.!

!methodRemoval: Abierta #close stamp: 'eaam 10/2/2023 20:48:42'!
close
	^Cerrada new.!

!methodRemoval: Door #open stamp: 'eaam 10/2/2023 20:48:47'!
open
	estado := estado open.!

!methodRemoval: Door #close stamp: 'eaam 10/2/2023 20:48:50'!
close
	estado := estado close.!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:50:31'!
test01DoorClosed
	| door |
	door := Door new.
	self deny: (door isOpen)! !

!testRun: #HundredDoorsTest #test01DoorClosed stamp: 'eaam 10/2/2023 20:50:32'!
PASSED!

!testRun: #HundredDoorsTest #test01DoorClosed stamp: 'eaam 10/2/2023 20:50:32'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:50:41'!
test01DoorFlip
	| door |
	door := Door new.
	self deny: (door isOpen)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:50:53' prior: 50666536!
test01DoorFlip
	| door |
	door := Door new.
	door flip.
	self assert: (door isOpen)! !

!testRun: #HundredDoorsTest #test01DoorFlip stamp: 'eaam 10/2/2023 20:50:57'!
PASSED!

!testRun: #HundredDoorsTest #test01DoorClosed stamp: 'eaam 10/2/2023 20:50:57'!
PASSED!

!testRun: #HundredDoorsTest #test01DoorFlip stamp: 'eaam 10/2/2023 20:50:57'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:51:15'!
test01DoorFlipTwoTimes
	| door |
	door := Door new.
	door flip.
	door flip.
	self deny: (door isOpen)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:51:17' prior: 50666556!
test01DoorFlipTwoTimes
	| door |
	door := Door new.
	door flip.
	door flip.
	self deny: (door isOpen)! !

!testRun: #HundredDoorsTest #test01DoorFlipTwoTimes stamp: 'eaam 10/2/2023 20:51:18'!
PASSED!

!testRun: #HundredDoorsTest #test01DoorClosed stamp: 'eaam 10/2/2023 20:51:18'!
PASSED!

!testRun: #HundredDoorsTest #test01DoorFlip stamp: 'eaam 10/2/2023 20:51:18'!
PASSED!

!testRun: #HundredDoorsTest #test01DoorFlipTwoTimes stamp: 'eaam 10/2/2023 20:51:18'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:52:11'!
test02DoorFlip
	| door |
	door := Door new.
	door flip.
	self assert: (door isOpen)! !

!methodRemoval: HundredDoorsTest #test01DoorFlip stamp: 'eaam 10/2/2023 20:52:11'!
test01DoorFlip
	| door |
	door := Door new.
	door flip.
	self assert: (door isOpen)!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:52:17'!
test03DoorFlipTwoTimes
	| door |
	door := Door new.
	door flip.
	door flip.
	self deny: (door isOpen)! !

!methodRemoval: HundredDoorsTest #test01DoorFlipTwoTimes stamp: 'eaam 10/2/2023 20:52:17'!
test01DoorFlipTwoTimes
	| door |
	door := Door new.
	door flip.
	door flip.
	self deny: (door isOpen)!

!methodRemoval: DoorEstado #close stamp: 'eaam 10/2/2023 20:52:43'!
close
	^self subclassResponsibility !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:53:56'!
test01InitializeDoorAsClosed
	| door |
	door := Door new.
	self deny: (door isOpen)! !

!methodRemoval: HundredDoorsTest #test01DoorClosed stamp: 'eaam 10/2/2023 20:53:56'!
test01DoorClosed
	| door |
	door := Door new.
	self deny: (door isOpen)!
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:55:51' prior: 50666497!
flip
	estado := estado not.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:55:59' prior: 50666404 overrides: 16920235!
initialize
	estado :=false.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:56:06' prior: 50666408!
isOpen
	^estado.! !

!classRemoval: #Abierta stamp: 'eaam 10/2/2023 20:56:20'!
DoorEstado subclass: #Abierta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classRemoval: #Cerrada stamp: 'eaam 10/2/2023 20:56:21'!
DoorEstado subclass: #Cerrada
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classRemoval: #DoorEstado stamp: 'eaam 10/2/2023 20:56:21'!
Object subclass: #DoorEstado
	instanceVariableNames: 'myDoor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #Door category: 'HundredDoors' stamp: 'eaam 10/2/2023 20:56:42'!
Object subclass: #Door
	instanceVariableNames: 'abierta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:56:42' prior: 50666626!
isOpen
	^abierta.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:56:42' prior: 50666622 overrides: 16920235!
initialize
	abierta :=false.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:56:42' prior: 50666617!
flip
	abierta := abierta not.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 20:56:44' prior: 50666660 overrides: 16920235!
initialize
	abierta := false.! !

!classRemoval: #DoorsFlipper stamp: 'eaam 10/2/2023 20:57:12'!
Object subclass: #DoorsFlipper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:57:31'!
test04DoorFlipTwoTimes
	puertas! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:57:43'!
test04
	puertas! !

!methodRemoval: HundredDoorsTest #test04DoorFlipTwoTimes stamp: 'eaam 10/2/2023 20:57:43'!
test04DoorFlipTwoTimes
	puertas!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:59:23'!
test04FlipTwoAllDoors
	|  |! !

!methodRemoval: HundredDoorsTest #test04 stamp: 'eaam 10/2/2023 20:59:36'!
test04
	puertas!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 20:59:44' prior: 50666690!
test04FlipTwoAllDoors
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:01:06' prior: 50666669 overrides: 16920235!
initialize
	abierta := true.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:01:14'!
isClose
	^abierta.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:01:22' prior: 50666664!
flip
	abierta :=false.! !
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:01:27' prior: 50666710!
flip
	abierta := false.! !

Object subclass: #DoorFliper
	instanceVariableNames: 'doors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #DoorFliper category: 'HundredDoors' stamp: 'eaam 10/2/2023 21:03:23'!
Object subclass: #DoorFliper
	instanceVariableNames: 'doors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!DoorFliper class methodsFor: 'no messages' stamp: 'eaam 10/2/2023 21:04:28'!
with: unaCantidadDePuertas
	^self new initializeWith: unaCantidadDePuertas! !

TestCase subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #HundredDoorsTest category: 'HundredDoors' stamp: 'eaam 10/2/2023 21:04:49'!
TestCase subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!methodRemoval: HundredDoorsTest #setUp stamp: 'eaam 10/2/2023 21:04:54'!
setUp
	puertas := OrderedCollection new.
	puertas := 100 timesRepeat: (puertas add: Door new).!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:07:52'!
test04FlipADoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	self assert: (puertas isClose: 1)! !

!methodRemoval: HundredDoorsTest #test04FlipTwoAllDoors stamp: 'eaam 10/2/2023 21:08:09'!
test04FlipTwoAllDoors
	!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:08:14' prior: 50666751!
test04FlipADoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	self assert: (puertas isClosed: 1)! !
!DoorFliper methodsFor: 'no messages' stamp: 'eaam 10/2/2023 21:08:46'!
isClosed: aDoorNumber
	^true! !

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:08:52'!
ERROR!
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:09:11'!
initializeWith: aNumberOfDoors
	! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:10:01' prior: 50666774!
initializeWith: aNumberOfDoors
	doors := OrderedCollection new.
	aNumberOfDoors timesRepeat: [doors add: Door new]! !

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:10:09'!
ERROR!
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:10:22'!
flip! !

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:10:31'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:10:31'!
FAILURE!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:10:31'!
FAILURE!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:10:31'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:10:31'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:10:45'!
FAILURE!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:10:45'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:11:10' prior: 50666714!
flip
	abierta := abierta not.! !

!methodRemoval: Door #isClose stamp: 'eaam 10/2/2023 21:11:14'!
isClose
	^abierta.!
!Door methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:11:18' prior: 50666702 overrides: 16920235!
initialize
	abierta := false.! !

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:11:25'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:11:25'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:11:25'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:11:25'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:12:06'!
test05FlipTwoTimesDoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	puertas flip.
	self assert: (puertas isClosed: 1)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:12:13' prior: 50666761!
test04FlipADoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	self deny: (puertas isClosed: 1)! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:12:22' prior: 50666767!
isClosed: aDoorNumber
	^false! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:12:51' prior: 50666788!
flip
	^(doors at: 1) flip! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:13:18' prior: 50666849!
isClosed: aDoorNumber
	^(doors at: 1) isOpen not! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:13:27' prior: 50666858!
isClosed: aDoorNumber
	^(doors at: aDoorNumber) isOpen not! !

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:13:31'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:13:31'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:13:31'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:13:31'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:13:31'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:13:31'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:15:20'!
test06FlipTwoDoors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flip.
	self deny: (puertas isClosed: 1).
	self deny: (puertas isClosed: 2)! !

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:15:21'!
FAILURE!
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:16:20' prior: 50666854!
flip
	^doors collect: [:puerta | puerta flip].! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:16:27' prior: 50666896!
flip
	^doors do: [:puerta | puerta flip].! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:16:33' prior: 50666901!
flip
	doors do: [:puerta | puerta flip].! !

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:16:44'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:16:44'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:16:44'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:16:44'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:16:44'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:16:44'!
PASSED!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:16:44'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:17:35'!
test07TwoFlipsForTwoDoors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flip.
	puertas flip.
	self assert: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)! !

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:17:41'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:19:26' prior: 50666930!
test07TwoFlipsForTwoDoors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flip.
	puertas flip.
	self deny: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:19:40' prior: 50666835!
test05FlipTwoTimesDoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	puertas flip.
	self deny: (puertas isClosed: 1)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:20:49' prior: 50666962!
test07TwoFlipsForTwoDoors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flip.
	puertas flip.
	self deny: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)! !

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:20:50'!
FAILURE!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:21:04' prior: 50666971!
test05FlipTwoTimesDoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	puertas flip.
	self deny: (puertas isClosed: 1)! !

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:21:06'!
FAILURE!

Object subclass: #DoorFliper
	instanceVariableNames: 'doors multipleToFlipBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!

!classDefinition: #DoorFliper category: 'HundredDoors' stamp: 'eaam 10/2/2023 21:21:46'!
Object subclass: #DoorFliper
	instanceVariableNames: 'doors multipleToFlipBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HundredDoors'!
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:22:01' prior: 50666779!
initializeWith: aNumberOfDoors
	doors := OrderedCollection new.
	aNumberOfDoors timesRepeat: [doors add: Door new].
	multipleToFlipBy := 1.! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:22:45' prior: 50666906!
flip
	self canFlip.
	doors do: [:puerta | puerta flip].! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:23:58'!
canFlip
	doors size < multipleToFlipBy ifTrue: [self error: self class canNotDoMoreFlipsThanDoors]! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:24:41'!
canNotDoMoreFlipsThanDoors
	^'unaCantidadDePuertas'! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:25:03' overrides: 16901507!
at: aDoorNumber
	^(doors at: aDoorNumber)! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:28:10' prior: 50667021!
flip
	self canFlip.
	multipleToFlipBy to: doors by: multipleToFlipBy do: [:puerta | puerta flip].! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:29:22' prior: 50667042!
flip
	self canFlip.
	multipleToFlipBy to: doors size by: multipleToFlipBy do: [:numeroDePuerta | doors at: numeroDePuerta flip].! !

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:29:44'!
ERROR!
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:29:57' prior: 50667049!
flip
	self canFlip.
	multipleToFlipBy to: doors size by: multipleToFlipBy do: [:numeroDePuerta | (doors at: numeroDePuerta) flip].! !

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:30:00'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:30:00'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:30:00'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:30:00'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:30:00'!
FAILURE!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:30:00'!
PASSED!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:30:00'!
FAILURE!
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:30:34' prior: 50667060!
flip
	self canFlip.
	multipleToFlipBy to: doors size by: multipleToFlipBy do: [:numeroDePuerta | (doors at: numeroDePuerta) flip].
	multipleToFlipBy := multipleToFlipBy +1! !

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:30:40'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:30:40'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:30:40'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:30:40'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:30:40'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:30:40'!
ERROR!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:30:40'!
PASSED!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:30:40'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:30:40'!
ERROR!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:31:27' prior: 50667032!
canNotDoMoreFlipsThanDoors
	^'canNotDoMoreFlipsThanDoors'! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:33:20' prior: 50666990!
test05FlipTwoTimesDoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	self should: [puertas flip.]
	raise: Error! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:33:52' prior: 50667129!
test05FlipTwoTimesDoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	self should: [puertas flip.]
	raise: Error
	withMessageText: 'a'! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:34:04' prior: 50667136!
test05FlipTwoTimesDoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	self should: [puertas flip.]
	raise: Error
	withMessageText: 'canNotDoMoreFlipsThanDoors'! !

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:34:44'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:35:13'!
test07100FlipsFor100Doors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flip.
	puertas flip.
	self deny: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:35:23'!
test08100FlipsFor100Doors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flip.
	puertas flip.
	self deny: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)! !

!methodRemoval: HundredDoorsTest #test07100FlipsFor100Doors stamp: 'eaam 10/2/2023 21:35:23'!
test07100FlipsFor100Doors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flip.
	puertas flip.
	self deny: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:35:51' prior: 50667184!
test08100FlipsFor100Doors
	|puertas|
	puertas := DoorFliper with: 2.
	puertas flipAll.
	self deny: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:36:03' prior: 50667201!
test08100FlipsFor100Doors
	|puertas|
	puertas := DoorFliper with: 100.
	puertas flipAll.
	self deny: (puertas isClosed: 1).
	self assert: (puertas isClosed: 2)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:36:21' prior: 50667209!
test08100FlipsFor100Doors
	|puertas|
	puertas := DoorFliper with: 100.
	puertas flipAll.
	self deny: (puertas isClosed: 1).
	self deny: (puertas isClosed: 4)! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:37:08' prior: 50667217!
test08100FlipsFor100Doors
	|puertas|
	puertas := DoorFliper with: 100.
	puertas flipAll.
	self deny: (puertas isClosed: 1).
	self deny: (puertas isClosed: 4).
	self deny: (puertas isClosed: 9).
	self deny: (puertas isClosed: 16).
	self deny: (puertas isClosed: 25).
	self deny: (puertas isClosed: 36).
	self deny: (puertas isClosed: 49).
	self deny: (puertas isClosed: 64).
	self deny: (puertas isClosed: 81).
	self deny: (puertas isClosed: 100).
	
	! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:37:30'!
flipAll
	^doors size timesRepeat: [self flip]! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:37:34' prior: 50667242!
flipAll
	doors size timesRepeat: [self flip]! !

!testRun: #HundredDoorsTest #test08100FlipsFor100Doors stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!

!testRun: #HundredDoorsTest #test08100FlipsFor100Doors stamp: 'eaam 10/2/2023 21:37:38'!
PASSED!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:39:00'!
test09CantBuildANegativeSizeDoorCollection
	|puertas|
	puertas := DoorFliper with: -10.
	
	
	! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:40:43' prior: 50667278!
test09CantBuildANegativeSizeDoorCollection
	self should: [DoorFliper with: -10]
	raise: Error
	withMessageText: 'Cantidad de puertas invalida'
	
	
	! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:41:27' prior: 50667284!
test09CantBuildANegativeSizeDoorCollection
	self should: [DoorFliper with: -10]
	raise: Error
	withMessageText: 'Cantidad de puertas invalida, ¡La cantidad de puertas debe ser positiva!!'
	
	
	! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:42:01'!
doorNumberMustBePositive
	^'Cantidad de puertas invalida, ¡La cantidad de puertas debe ser positiva!!'! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:42:20'!
doorNumberMustBePositiveErrorDescription
	^'Cantidad de puertas invalida, ¡La cantidad de puertas debe ser positiva!!'! !

!methodRemoval: DoorFliper class #doorNumberMustBePositive stamp: 'eaam 10/2/2023 21:42:20'!
doorNumberMustBePositive
	^'Cantidad de puertas invalida, ¡La cantidad de puertas debe ser positiva!!'!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:42:26'!
doorNumberMustBePositiveE
	^'Cantidad de puertas invalida, ¡La cantidad de puertas debe ser positiva!!'! !

!methodRemoval: DoorFliper class #doorNumberMustBePositiveE stamp: 'eaam 10/2/2023 21:42:34'!
doorNumberMustBePositiveE
	^'Cantidad de puertas invalida, ¡La cantidad de puertas debe ser positiva!!'!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:42:58'!
canNotDoMoreFlipsThanDoorsErrorDescription
	^'canNotDoMoreFlipsThanDoors'! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:42:58' prior: 50667026!
canFlip
	doors size < multipleToFlipBy ifTrue: [self error: self class canNotDoMoreFlipsThanDoorsErrorDescription]! !

!methodRemoval: DoorFliper class #canNotDoMoreFlipsThanDoors stamp: 'eaam 10/2/2023 21:42:58'!
canNotDoMoreFlipsThanDoors
	^'canNotDoMoreFlipsThanDoors'!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:44:03' prior: 50666729!
with: unaCantidadDePuertas
	(unaCantidadDePuertas > 0) ifTrue: [self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:44:12' prior: 50667352!
with: unaCantidadDePuertas
	(unaCantidadDePuertas > 0) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:47:11'!
test010CantidadDePuertasDebeSerUnInteger
	self should: [DoorFliper with: 'hello world']
	raise: Error
	withMessageText: 'Cantidad debe ser un entero'
	
	
	! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:47:36'!
cantidadDePuertasDebeSerUnInteger
	^'canNotDoMoreFlipsThanDoors'! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:48:03'!
test10CantidadDePuertasDebeSerUnInteger
	self should: [DoorFliper with: 'hello world']
	raise: Error
	withMessageText: 'Cantidad debe ser un entero'
	
	
	! !

!methodRemoval: HundredDoorsTest #test010CantidadDePuertasDebeSerUnInteger stamp: 'eaam 10/2/2023 21:48:03'!
test010CantidadDePuertasDebeSerUnInteger
	self should: [DoorFliper with: 'hello world']
	raise: Error
	withMessageText: 'Cantidad debe ser un entero'
	
	
	!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:48:20' prior: 50667377!
cantidadDePuertasDebeSerUnInteger
	^'Cantidad debe ser un entero'! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:49:03' prior: 50667361!
with: unaCantidadDePuertas
	(unaCantidadDePuertas isInteger not) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	(unaCantidadDePuertas > 0) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:49:14'!
cantidadDePuertasDebeSerUnIntegerErrorDescription
	^'Cantidad debe ser un entero'! !

!methodRemoval: DoorFliper class #cantidadDePuertasDebeSerUnInteger stamp: 'eaam 10/2/2023 21:49:14'!
cantidadDePuertasDebeSerUnInteger
	^'Cantidad debe ser un entero'!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:49:25' prior: 50667405!
with: unaCantidadDePuertas
	(unaCantidadDePuertas isInteger not) ifTrue: [self error: self cantidadDePuertasDebeSerUnIntegerErrorDescription].
	(unaCantidadDePuertas > 0) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:49:49' prior: 50667334!
canNotDoMoreFlipsThanDoorsErrorDescription
	^'Cant do more flips than doors'! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:50:11' prior: 50667144!
test05FlipTwoTimesDoors
	|puertas|
	puertas := DoorFliper with: 1.
	puertas flip.
	self should: [puertas flip.]
	raise: Error
	withMessageText: 'Can not do more flips than doors'! !

!methodRemoval: DoorFliper #at: stamp: 'eaam 10/2/2023 21:51:18'!
at: aDoorNumber
	^(doors at: aDoorNumber)!
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:54:13'!
test11NoSePuedeVerQueUnaPuertaMayorALaCantidadTotalEstaCerrada
	| miFlipeadorDePorticos |
	miFlipeadorDePorticos := DoorFliper with: 100.
	self should: [miFlipeadorDePorticos isClosed: 101]
	raise: Error
	withMessageText: 'Numero de puerta inválido'
	
	
	! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:57:30'!
numeroDePuertaInvalidoErrorDescription
	^'Numero de puerta inválido'! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:58:22' prior: 50666863!
isClosed: aDoorNumber
	(aDoorNumber between: 1 and: doors size)ifTrue: [self error: self class numeroDePuertaInvalidoErrorDescription].
	^(doors at: aDoorNumber) isOpen not! !
!DoorFliper methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 21:58:24' prior: 50667477!
isClosed: aDoorNumber
	(aDoorNumber between: 1 and: doors size) ifTrue: [self error: self class numeroDePuertaInvalidoErrorDescription].
	^(doors at: aDoorNumber) isOpen not! !
!HundredDoorsTest methodsFor: 'tests' stamp: 'eaam 10/2/2023 21:58:54'!
test12NoSePuedeVerQueUnaPuertaMenorAUnoEstaCerrada
	| miFlipeadorDePorticos |
	miFlipeadorDePorticos := DoorFliper with: 100.
	self should: [miFlipeadorDePorticos isClosed: -101]
	raise: Error
	withMessageText: 'Numero de puerta inválido'
	
	
	! !

!testRun: #HundredDoorsTest #test12NoSePuedeVerQueUnaPuertaMenorAUnoEstaCerrada stamp: 'eaam 10/2/2023 21:59:05'!
ERROR!

!testRun: #HundredDoorsTest #test12NoSePuedeVerQueUnaPuertaMenorAUnoEstaCerrada stamp: 'eaam 10/2/2023 21:59:52'!
ERROR!

!testRun: #HundredDoorsTest #test12NoSePuedeVerQueUnaPuertaMenorAUnoEstaCerrada stamp: 'eaam 10/2/2023 22:00:33'!
ERROR!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 22:03:02' prior: 50667429!
with: unaCantidadDePuertas
	(unaCantidadDePuertas isInteger not) ifTrue: [self error: self cantidadDePuertasDebeSerUnIntegerErrorDescription].
	(unaCantidadDePuertas < 0) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 22:03:06' prior: 50667517!
with: unaCantidadDePuertas
	(unaCantidadDePuertas isInteger not) ifTrue: [self error: self cantidadDePuertasDebeSerUnIntegerErrorDescription].
	(unaCantidadDePuertas <= 0) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 22:03:28' prior: 50667530!
with: unaCantidadDePuertas
	(unaCantidadDePuertas isInteger not) ifTrue: [self error: self cantidadDePuertasDebeSerUnIntegerErrorDescription].
	(unaCantidadDePuertas strictlyPositive) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 22:03:41'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 22:03:41'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 22:03:41'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 22:03:41'!
ERROR!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 22:03:41'!
ERROR!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 22:03:41'!
ERROR!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 22:03:41'!
ERROR!

!testRun: #HundredDoorsTest #test08100FlipsFor100Doors stamp: 'eaam 10/2/2023 22:03:41'!
ERROR!

!testRun: #HundredDoorsTest #test09CantBuildANegativeSizeDoorCollection stamp: 'eaam 10/2/2023 22:03:41'!
FAILURE!

!testRun: #HundredDoorsTest #test10CantidadDePuertasDebeSerUnInteger stamp: 'eaam 10/2/2023 22:03:41'!
PASSED!

!testRun: #HundredDoorsTest #test11NoSePuedeVerQueUnaPuertaMayorALaCantidadTotalEstaCerrada stamp: 'eaam 10/2/2023 22:03:41'!
ERROR!

!testRun: #HundredDoorsTest #test12NoSePuedeVerQueUnaPuertaMenorAUnoEstaCerrada stamp: 'eaam 10/2/2023 22:03:41'!
ERROR!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 22:03:53'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 22:03:58'!
PASSED!

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 22:03:58'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 22:03:58'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 22:03:58'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 22:03:58'!
ERROR!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 22:03:58'!
ERROR!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 22:03:58'!
ERROR!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 22:03:58'!
ERROR!

!testRun: #HundredDoorsTest #test08100FlipsFor100Doors stamp: 'eaam 10/2/2023 22:03:58'!
ERROR!

!testRun: #HundredDoorsTest #test09CantBuildANegativeSizeDoorCollection stamp: 'eaam 10/2/2023 22:03:58'!
FAILURE!

!testRun: #HundredDoorsTest #test10CantidadDePuertasDebeSerUnInteger stamp: 'eaam 10/2/2023 22:03:58'!
PASSED!

!testRun: #HundredDoorsTest #test11NoSePuedeVerQueUnaPuertaMayorALaCantidadTotalEstaCerrada stamp: 'eaam 10/2/2023 22:03:58'!
ERROR!

!testRun: #HundredDoorsTest #test12NoSePuedeVerQueUnaPuertaMenorAUnoEstaCerrada stamp: 'eaam 10/2/2023 22:03:58'!
ERROR!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 22:04:08'!
ERROR!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 22:04:08'!
ERROR!
!DoorFliper class methodsFor: 'as yet unclassified' stamp: 'eaam 10/2/2023 22:04:27' prior: 50667543!
with: unaCantidadDePuertas
	(unaCantidadDePuertas isInteger not) ifTrue: [self error: self cantidadDePuertasDebeSerUnIntegerErrorDescription].
	(unaCantidadDePuertas <= 0) ifTrue: [self error: self doorNumberMustBePositiveErrorDescription].
	^self new initializeWith: unaCantidadDePuertas! !

!testRun: #HundredDoorsTest #test01InitializeDoorAsClosed stamp: 'eaam 10/2/2023 22:04:36'!
PASSED!

!testRun: #HundredDoorsTest #test02DoorFlip stamp: 'eaam 10/2/2023 22:04:36'!
PASSED!

!testRun: #HundredDoorsTest #test03DoorFlipTwoTimes stamp: 'eaam 10/2/2023 22:04:36'!
PASSED!

!testRun: #HundredDoorsTest #test04FlipADoors stamp: 'eaam 10/2/2023 22:04:36'!
ERROR!

!testRun: #HundredDoorsTest #test05FlipTwoTimesDoors stamp: 'eaam 10/2/2023 22:04:36'!
FAILURE!

!testRun: #HundredDoorsTest #test06FlipTwoDoors stamp: 'eaam 10/2/2023 22:04:36'!
ERROR!

!testRun: #HundredDoorsTest #test07TwoFlipsForTwoDoors stamp: 'eaam 10/2/2023 22:04:36'!
ERROR!

!testRun: #HundredDoorsTest #test08100FlipsFor100Doors stamp: 'eaam 10/2/2023 22:04:36'!
ERROR!

!testRun: #HundredDoorsTest #test09CantBuildANegativeSizeDoorCollection stamp: 'eaam 10/2/2023 22:04:36'!
PASSED!

!testRun: #HundredDoorsTest #test10CantidadDePuertasDebeSerUnInteger stamp: 'eaam 10/2/2023 22:04:36'!
PASSED!

!testRun: #HundredDoorsTest #test11NoSePuedeVerQueUnaPuertaMayorALaCantidadTotalEstaCerrada stamp: 'eaam 10/2/2023 22:04:36'!
FAILURE!

!testRun: #HundredDoorsTest #test12NoSePuedeVerQueUnaPuertaMenorAUnoEstaCerrada stamp: 'eaam 10/2/2023 22:04:36'!
FAILURE!

----QUIT----(2 October 2023 22:04:54) CuisUniversity-5981.image priorSource: 10704292!

----STARTUP---- (5 October 2023 17:56:38) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #Calendario category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 17:57:13'!
Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

TestCase subclass: #CalendarioFeriadosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #CalendarioFeriadosTest category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 17:57:48'!
TestCase subclass: #CalendarioFeriadosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioFeriadosTest methodsFor: 'no messages' stamp: 'eaam 10/5/2023 17:58:30'!
test01DomingoEsFeriado! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 17:58:45' prior: 50667727!
test01DomingoEsFeriado
	! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:00:44' prior: 50667732!
test01DomingoEsFeriado
	
	! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:01:01'!
test01FechaEsFeriado
	
	! !

!methodRemoval: CalendarioFeriadosTest #test01DomingoEsFeriado stamp: 'eaam 10/5/2023 18:01:01'!
test01DomingoEsFeriado
	
	!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:01:22'!
test01NavidadEsFeriado
	
	! !

!methodRemoval: CalendarioFeriadosTest #test01FechaEsFeriado stamp: 'eaam 10/5/2023 18:01:22'!
test01FechaEsFeriado
	
	!

!classDefinition: #CalendarioFeriados category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 18:02:19'!
Object subclass: #CalendarioFeriados
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:02:11'!
test01FechaEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new! !

!classRemoval: #Calendario stamp: 'eaam 10/5/2023 18:02:24'!
Object subclass: #Calendario
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!methodRemoval: CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:02:35'!
test01NavidadEsFeriado
	
	!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:02:52'!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new! !

!methodRemoval: CalendarioFeriadosTest #test01FechaEsFeriado stamp: 'eaam 10/5/2023 18:02:52'!
test01FechaEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:03:57' prior: 50667781!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: (miCalendario esFechaFeriado: 25/12/2023) equals: true! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:04:22' prior: 50667793!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: 25/12/2023)! !

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:04:26'!
ERROR!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:04:46'!
esFechaFeriado: aRenameMe1 
	self shouldBeImplemented.! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:05:00' prior: 50667813!
esFechaFeriado: unaFecha 
	^true.! !

25/12/2023!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:09:04' prior: 50667802!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: (Date newDay: 25 month: #december year: 2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:09:11' prior: 50667823!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: (Date newDay: 25 month: #December year: 2023))! !

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:09:14'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:09:14'!
PASSED!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:11:28'!
test02Diciembre23NoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: (Date newDay: 25 month: #December year: 2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:11:37' prior: 50667849!
test02Diciembre23NoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: false equals: (miCalendario esFechaFeriado: (Date newDay: 23 month: #December year: 2023))! !

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:11:38'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:11:53' prior: 50667818!
esFechaFeriado: unaFecha 
	
	^true.! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:13:08' prior: 50667872!
esFechaFeriado: unaFecha 
	(unaFecha dayOfMonth = 25 and: unaFecha monthName = #December) ifTrue: [^true]
	^true.! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:13:12' prior: 50667877!
esFechaFeriado: unaFecha 
	(unaFecha dayOfMonth = 25 and: unaFecha monthName = #December) ifTrue: [^true]
	^false.! !

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:13:21'!
ERROR!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:13:28'!
ERROR!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:13:28'!
ERROR!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:13:32'!
ERROR!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:13:48' prior: 50667884!
esFechaFeriado: unaFecha 
	(unaFecha dayOfMonth = 25 and: unaFecha monthName = #December) ifTrue: [^true].
	^false.! !

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:13:48'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:13:48'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:13:53'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:13:53'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:18:26'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:18:26'!
PASSED!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:18:30' prior: 50667904!
esFechaFeriado: unaFecha
	(unaFecha dayOfMonth = 25 and: unaFecha monthName = #December) ifTrue: [^true].
	^false.! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:19:56'!
test03DomingoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:19:58'!
ERROR!

October/8/2023!

October/8/2023 class!

October/8/2023 class.!

October / 8 / 2023 class.!

October / 8 class!

October class!

a := October/8/2013.
a!

a!

a class!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:23:01' prior: 50667833!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: (December/8/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:23:23' prior: 50667859!
test02Diciembre23NoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: false equals: (miCalendario esFechaFeriado: (December/23/2023))! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:23:36' prior: 50667931!
esFechaFeriado: unaFecha
	(unaFecha day = 25 and: unaFecha month = #December) ifTrue: [^true].
	^false.! !

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:24:05'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:24:05'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:24:05'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:24:18'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:24:18'!
FAILURE!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:24:28' prior: 50667955!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023))! !

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:24:29'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:24:38'!
FAILURE!

a day!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:25:10' prior: 50667973!
esFechaFeriado: unaFecha
	(unaFecha day = Tuesday and: unaFecha month = #December) ifTrue: [^true].
	^false.! !

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:25:18'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:25:19'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:25:19'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:25:19'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:25:32' prior: 50668011!
esFechaFeriado: unaFecha
	(unaFecha day = Tuesday and: unaFecha month = December) ifTrue: [^true].
	^false.! !

a month Tuesday .!

a month !

a := December/25/2023.
a month!

a day !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:26:02' prior: 50668031!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^false.! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:26:05'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:27:04' prior: 50668040!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	(unaFecha day = Saturday) ifTrue: [^true]
	^false.! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:27:13'!
ERROR!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:27:20' prior: 50668050!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	(unaFecha day = Saturday) ifTrue: [^true].
	^false.! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:27:26' prior: 50668061!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^(unaFecha day = Saturday) ifTrue: [^true].! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:27:29'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:27:56' prior: 50668069!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	(unaFecha day = Saturday) ifTrue: [^true].
	^false! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:28:06' prior: 50668080!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^unaFecha day = Saturday! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:28:16'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:28:38' prior: 50668088!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^unaFecha day = Sunday! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:28:41'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:28:41'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:28:41'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:28:41'!
PASSED!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:35:15'!
test04DiaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Sunday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023))! !

!testRun: #CalendarioFeriadosTest #test04DiaMarcadoEsFeriado stamp: 'eaam 10/5/2023 18:35:20'!
ERROR!
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:35:40'!
markDayAsHoliday: Sunday 
	self shouldBeImplemented.! !

Object subclass: #CalendarioFeriados
	instanceVariableNames: 'holidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #CalendarioFeriados category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 18:36:02'!
Object subclass: #CalendarioFeriados
	instanceVariableNames: 'holidays'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:36:25' overrides: 16920235!
initialize
! !
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:37:40' prior: 50668151 overrides: 16920235!
initialize
	holidays := OrderedCollection new.! !
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:38:06' prior: 50668132!
markDayAsHoliday: aHoliday 
	holidays add: aHoliday.! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:38:44'!
test05DiaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Sunday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023))! !

!methodRemoval: CalendarioFeriadosTest #test04DiaMarcadoEsFeriado stamp: 'eaam 10/5/2023 18:38:44'!
test04DiaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Sunday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023))!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:38:56'!
test04SabadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Sunday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:39:10' prior: 50668166!
test05DiaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Sunday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:39:23' prior: 50668195!
test05DiaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Monday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/9/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:39:26' prior: 50668205!
test05DiaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Monday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))! !

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 18:39:30'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:40:00' prior: 50668099!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^unaFecha day = Sunday or: [unaFecha day = Sunday]! !

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:40:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:40:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:40:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 18:40:00'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test05DiaMarcadoEsFeriado stamp: 'eaam 10/5/2023 18:40:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 18:40:00'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:40:13' prior: 50668228!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^unaFecha day = Sunday or: [unaFecha day = Saturday]! !

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:40:14'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:40:14'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:40:14'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 18:40:14'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05DiaMarcadoEsFeriado stamp: 'eaam 10/5/2023 18:40:14'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:40:14'!
FAILURE!

December/23/2023 day!

(December/23/2023) day!

(December/20/2023) day!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:41:14'!
test02Diciembre20NoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: false equals: (miCalendario esFechaFeriado: (December/23/2023))! !

!methodRemoval: CalendarioFeriadosTest #test02Diciembre23NoEsFeriado stamp: 'eaam 10/5/2023 18:41:14'!
test02Diciembre23NoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: false equals: (miCalendario esFechaFeriado: (December/23/2023))!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:41:18' prior: 50668286!
test02Diciembre20NoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: false equals: (miCalendario esFechaFeriado: (December/20/2023))! !

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 18:41:20'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:41:20'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 18:41:20'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:41:20'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 18:41:20'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05DiaMarcadoEsFeriado stamp: 'eaam 10/5/2023 18:41:20'!
PASSED!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:43:04'!
keyword1: unaFecha

	^ unaFecha day = Saturday! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:43:04' prior: 50668256!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^unaFecha day = Sunday or: [self keyword1: unaFecha]! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:43:54'!
esDiaFeriado: unaFecha

	^ unaFecha day = Saturday! !
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:43:54' prior: 50668337!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^unaFecha day = Sunday or: [self esDiaFeriado: unaFecha]! !

!methodRemoval: CalendarioFeriados #keyword1: stamp: 'eaam 10/5/2023 18:43:54'!
keyword1: unaFecha

	^ unaFecha day = Saturday!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:44:14' prior: 50668350!
esFechaFeriado: unaFecha
	(unaFecha day = Monday and: unaFecha month = December) ifTrue: [^true].
	^self esDiaFeriado: unaFecha! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:45:03' prior: 50668345!
esDiaFeriado: unaFecha

	^holidays includes: unaFecha day! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:45:09' prior: 50668371!
esDiaFeriado: unaFecha
	^holidays includes: unaFecha day! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:45:37' prior: 50667938!
test03DomingoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Sunday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:45:46' prior: 50668185!
test04SabadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Saturday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:46:16'!
test05dosDíasDeSemanaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Monday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))! !

!methodRemoval: CalendarioFeriadosTest #test05DiaMarcadoEsFeriado stamp: 'eaam 10/5/2023 18:46:16'!
test05DiaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Monday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:46:40' prior: 50668402!
test05dosDíasDeSemanaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Monday.
	miCalendario markDayAsHoliday: Saturday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (October/9/2023))! !

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 18:47:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 18:47:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 18:47:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 18:47:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 18:47:00'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 18:47:00'!
PASSED!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:47:35'!
test069DeJulioFeriadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: Monday.
	miCalendario markDayAsHoliday: Saturday.
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (October/9/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:48:51' prior: 50668456!
test069DeJulioFeriadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).! !

!testRun: #CalendarioFeriadosTest #test069DeJulioFeriadoEsFeriado stamp: 'eaam 10/5/2023 18:48:53'!
FAILURE!

(July/9) day!

(July/9).!

(July/9) day!

(July/9)!

(July/9) class!

(July/9/2023).!

(July/9/2023) class!

(July/9/2023) month!

(July/9/2023) day!

(July/9)!

(July/9)day!

(July/9) month!

(July/9) day!

(July/9) dayOfMonth!

(July/9) class!

(July/9) dayNumber!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 18:55:03' prior: 50668470!
test069DeJulioFeriadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: July/9.
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).! !

(July/9) dayNumber = July/9/2023 dayNumber.!

(July/9) dayNumber = (July/9/2023) dayNumber.!

(July/9) month = (July/9/2023) month.!

(July/9/2023) class!

(July/9/2023) dayOfMonth!

(July/9) = (July/9/2023) dayOfMonth.!

(July/9) = (July/9/2023) day.!

(July/9) = (July/9/2023) dayOfMonth.!

!testRun: #CalendarioFeriadosTest #test069DeJulioFeriadoEsFeriado stamp: 'eaam 10/5/2023 18:59:18'!
FAILURE!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 18:59:57' prior: 50668363!
esFechaFeriado: unaFecha
	(unaFecha dayOfMonth = December/25) ifTrue: [^true].
	^self esDiaFeriado: unaFecha! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:00:40' prior: 50668376!
esDiaFeriado: unaFecha
	^holidays includes: unaFecha day or: [holidays includes: unaFecha dayOfMonth].! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:00:52' prior: 50668521!
esDiaFeriado: unaFecha
	^(holidays includes: unaFecha day) or: [holidays includes: unaFecha dayOfMonth].! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 19:00:55'!
ERROR!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:01:26' prior: 50667996!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: December/25.
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023))! !

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 19:01:28'!
ERROR!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:01:55' prior: 50668514!
esFechaFeriado: unaFecha
	^self esDiaFeriado: unaFecha! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 19:01:57'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 19:01:57'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 19:01:57'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 19:01:57'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 19:01:57'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 19:01:57'!
PASSED!

!testRun: #CalendarioFeriadosTest #test069DeJulioFeriadoEsFeriado stamp: 'eaam 10/5/2023 19:01:57'!
PASSED!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:02:48'!
XXXX: unaFecha
	^(holidays includes: unaFecha day) or: [holidays includes: unaFecha dayOfMonth].! !
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:02:48' prior: 50668552!
esFechaFeriado: unaFecha
	^self XXXX: unaFecha! !

!methodRemoval: CalendarioFeriados #esDiaFeriado: stamp: 'eaam 10/5/2023 19:02:48'!
esDiaFeriado: unaFecha
	^(holidays includes: unaFecha day) or: [holidays includes: unaFecha dayOfMonth].!

(July/9) = (July/9/2023) dayOfMonth.!

(July/9/2023) monthOfYear.!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:06:44' prior: 50668491!
test069DeJulioFeriadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: December/25.
	miCalendario markDayAsHoliday: July/9.
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:06:53' prior: 50668601!
test069DeJulioFeriadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: December/25.
	miCalendario markDayAsHoliday: July/9.
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023)).! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:07:07'!
test069DeJulioYNavidadSonFeriados
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: December/25.
	miCalendario markDayAsHoliday: July/9.
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023)).! !

!methodRemoval: CalendarioFeriadosTest #test069DeJulioFeriadoEsFeriado stamp: 'eaam 10/5/2023 19:07:07'!
test069DeJulioFeriadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario markDayAsHoliday: December/25.
	miCalendario markDayAsHoliday: July/9.
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023)).!

!testRun: #CalendarioFeriadosTest #test069DeJulioYNavidadSonFeriados stamp: 'eaam 10/5/2023 19:07:09'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 19:07:09'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 19:07:09'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 19:07:09'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 19:07:09'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 19:07:09'!
PASSED!

!testRun: #CalendarioFeriadosTest #test069DeJulioYNavidadSonFeriados stamp: 'eaam 10/5/2023 19:07:09'!
PASSED!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:14:47'!
isWeekDayHoliday: unaFecha
	^(holidays includes: unaFecha day) or: [holidays includes: unaFecha dayOfMonth].! !
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:14:47' prior: 50668587!
esFechaFeriado: unaFecha
	^self isWeekDayHoliday: unaFecha! !

!methodRemoval: CalendarioFeriados #XXXX: stamp: 'eaam 10/5/2023 19:14:47'!
XXXX: unaFecha
	^(holidays includes: unaFecha day) or: [holidays includes: unaFecha dayOfMonth].!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:15:04' prior: 50668684!
esFechaFeriado: unaFecha
	^self isWeekDayHoliday: unaFecha or: [true].! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:15:13' prior: 50668695!
esFechaFeriado: unaFecha
	^(self isWeekDayHoliday: unaFecha) or: [true].! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:15:21' prior: 50668677!
isWeekDayHoliday: unaFecha
	^(holidays includes: unaFecha day).! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:15:34' prior: 50668701!
esFechaFeriado: unaFecha
	^(self isWeekDayHoliday: unaFecha) or: [holidays includes: unaFecha dayOfMonth].! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:16:05'!
isMonthDayHoliday: unaFecha

	^ holidays includes: unaFecha dayOfMonth! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:16:05' prior: 50668713!
esFechaFeriado: unaFecha
	^(self isWeekDayHoliday: unaFecha) or: [self isMonthDayHoliday: unaFecha].! !

!classDefinition: #WeekdayHolydayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 19:24:04'!
Object subclass: #WeekdayHolydayRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:23:53' prior: 50668161!
markDayAsHoliday: aHoliday 
	holidays add: (WeekdayHolydayRule with: aHoliday).! !

!classDefinition: #HolydayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 19:24:30'!
Object subclass: #HolydayRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #WeekdayHolydayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 19:24:30'!
HolydayRule subclass: #WeekdayHolydayRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!WeekdayHolydayRule methodsFor: 'no messages' stamp: 'eaam 10/5/2023 19:25:25'!
initialize: aDay
	! !
!WeekdayHolydayRule methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:25:36' prior: 50668761!
initialize: aHolyday	
! !

HolydayRule subclass: #WeekdayHolydayRule
	instanceVariableNames: 'holiday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #WeekdayHolydayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 19:25:50'!
HolydayRule subclass: #WeekdayHolydayRule
	instanceVariableNames: 'holiday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:26:40'!
markWeekdayAsHoliday: aHoliday 
	holidays add: (WeekdayHolydayRule with: aHoliday).! !
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:26:54'!
markMonthdayAsHoliday: aHoliday 
	holidays add: (WeekdayHolydayRule with: aHoliday).! !

!methodRemoval: CalendarioFeriados #markDayAsHoliday: stamp: 'eaam 10/5/2023 19:26:54'!
markDayAsHoliday: aHoliday 
	holidays add: (WeekdayHolydayRule with: aHoliday).!

!classDefinition: #MonthdayHolydayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 19:27:22'!
HolydayRule subclass: #MonthdayHolydayRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:27:08' prior: 50668788!
markMonthdayAsHoliday: aHoliday 
	holidays add: (MonthdayHolydayRule with: aHoliday).! !
!MonthdayHolydayRule class methodsFor: 'no messages' stamp: 'eaam 10/5/2023 19:27:54'!
with: aHolyday
	^self new initialize: aHolyday ! !
!WeekdayHolydayRule class methodsFor: 'no messages' stamp: 'eaam 10/5/2023 19:28:01'!
with: aHolyday
	^self new initialize: aHolyday ! !
!WeekdayHolydayRule methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:28:38' prior: 50668765!
initialize: aHoliday	
	holiday := aHoliday	! !
!WeekdayHolydayRule class methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:28:48' prior: 50668819!
with: aHoliday
	^self new initialize: aHoliday ! !
!MonthdayHolydayRule methodsFor: 'no messages' stamp: 'eaam 10/5/2023 19:29:25'!
initialize: aHoliday	
	| holiday |
	holiday := aHoliday	! !

HolydayRule subclass: #MonthdayHolydayRule
	instanceVariableNames: 'holiday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!MonthdayHolydayRule methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:30:08' prior: 50668834!
initialize: aHoliday	! !

HolydayRule subclass: #MonthdayHolydayRule
	instanceVariableNames: 'holiday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #MonthdayHolydayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 19:30:14'!
HolydayRule subclass: #MonthdayHolydayRule
	instanceVariableNames: 'holiday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!MonthdayHolydayRule methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:30:21' prior: 50668845!
initialize: aHoliday	
	holiday := aHoliday	! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 19:30:27'!
ERROR!

!classRenamed: #MonthdayHolydayRule as: #MonthdayHolidayRule stamp: 'eaam 10/5/2023 19:31:26'!
Smalltalk renameClassNamed: #MonthdayHolydayRule as: #MonthdayHolidayRule!
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:31:26' prior: 50668808!
markMonthdayAsHoliday: aHoliday 
	holidays add: (MonthdayHolidayRule with: aHoliday).! !

!classRenamed: #WeekdayHolydayRule as: #WeekdayHolidayRule stamp: 'eaam 10/5/2023 19:31:41'!
Smalltalk renameClassNamed: #WeekdayHolydayRule as: #WeekdayHolidayRule!
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:31:41' prior: 50668782!
markWeekdayAsHoliday: aHoliday 
	holidays add: (WeekdayHolidayRule with: aHoliday).! !
!MonthdayHolidayRule methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:32:23'!
isHoliday: aHoliday	
	^holiday = aHoliday dayOfMonth 	! !
!WeekdayHolidayRule methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:32:48'!
isHoliday: aHoliday	
	^holiday = aHoliday day! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:34:27' prior: 50668725!
esFechaFeriado: unaFecha
	^holidays anySatisfy: [:rule | rule isHoliday.]! !
!CalendarioFeriados methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:35:00'!
addRule: aRule 
	holidays add: aRule.! !

!methodRemoval: CalendarioFeriados #markWeekdayAsHoliday: stamp: 'eaam 10/5/2023 19:35:07'!
markWeekdayAsHoliday: aHoliday 
	holidays add: (WeekdayHolidayRule with: aHoliday).!

!methodRemoval: CalendarioFeriados #markMonthdayAsHoliday: stamp: 'eaam 10/5/2023 19:35:10'!
markMonthdayAsHoliday: aHoliday 
	holidays add: (MonthdayHolidayRule with: aHoliday).!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:35:49' prior: 50668538!
test01NavidadEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (MonthdayHolidayRule with: December/25).
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:36:17' prior: 50668627!
test069DeJulioYNavidadSonFeriados
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (MonthdayHolidayRule with: December/25).
	miCalendario addRule: (MonthdayHolidayRule with: July/9).
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023)).! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:37:13' prior: 50668422!
test05dosDíasDeSemanaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (WeekdayHolidayRule with: December/25).
	miCalendario addRule: (WeekdayHolidayRule with: December/25).
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (October/9/2023))! !

Saturday!

Saturday day!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:38:05' prior: 50668953!
test05dosDíasDeSemanaMarcadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (WeekdayHolidayRule with: Saturday).
	miCalendario addRule: (WeekdayHolidayRule with: Monday).
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (October/9/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:38:14' prior: 50668382!
test03DomingoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (WeekdayHolidayRule with: December/25).
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:38:32' prior: 50668392!
test04SabadoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (WeekdayHolidayRule with: Saturday).
	self assert: true equals: (miCalendario esFechaFeriado: (October/7/2023))! !
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 19:38:38' prior: 50668984!
test03DomingoEsFeriado
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (WeekdayHolidayRule with: Sunday).
	self assert: true equals: (miCalendario esFechaFeriado: (October/8/2023))! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 19:38:40'!
ERROR!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 19:38:52'!
ERROR!
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:39:15' prior: 50668905!
esFechaFeriado: unaFecha
	^holidays anySatisfy: [:rule | rule isHoliday: unaFecha .]! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:39:16' prior: 50669023!
esFechaFeriado: unaFecha
	^holidays anySatisfy: [:rule | rule isHoliday: unaFecha.]! !
!CalendarioFeriados methodsFor: 'Observadores' stamp: 'eaam 10/5/2023 19:39:18' prior: 50669029!
esFechaFeriado: unaFecha
	^holidays anySatisfy: [:rule | rule isHoliday: unaFecha]! !

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 19:39:21'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 19:39:21'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 19:39:21'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 19:39:21'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 19:39:21'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 19:39:21'!
PASSED!

!testRun: #CalendarioFeriadosTest #test069DeJulioYNavidadSonFeriados stamp: 'eaam 10/5/2023 19:39:21'!
PASSED!

(December/25/2023) day!

(December/27/2023) day!

(December/2/2023) day!

(December/5/2023) day!

!classDefinition: #BoundedHolidayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 20:00:27'!
HolydayRule subclass: #BoundedHolidayRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 20:00:11'!
test07
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (BoundedHolidayRule from: November/26/2023 to: December/5/2023 for: (WeekdayHolidayRule with: Monday)).
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023)).! !

!classRenamed: #HolydayRule as: #HolidayRule stamp: 'eaam 10/5/2023 20:00:38'!
Smalltalk renameClassNamed: #HolydayRule as: #HolidayRule!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 20:01:03' prior: 50669076!
test07
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (BoundedHolidayRule from: (November/26/2023) to: (December/5/2023) for: (WeekdayHolidayRule with: Monday)).
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).
	self assert: true equals: (miCalendario esFechaFeriado: (December/25/2023)).! !

(November/5/2023) day!

(November/26/2023) day!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 20:02:04' prior: 50669095!
test07
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (BoundedHolidayRule from: (November/26/2023) to: (December/1/2023) for: (WeekdayHolidayRule with: Monday)).
	self assert: true equals: (miCalendario esFechaFeriado: (July/9/2023)).! !

(December/1/2023) day!

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:02:20'!
ERROR!
!BoundedHolidayRule class methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:02:38'!
from: aRenameMe1 to: aRenameMe2 for: aRenameMe3 
	self shouldBeImplemented.! !
!BoundedHolidayRule class methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:03:34' prior: 50669126!
from: aDate to: anotherDate for: aRule 
	self new initializeFrom: aDate to: anotherDate for: aRule.! !
!BoundedHolidayRule class methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:04:13' prior: 50669132!
from: aStartingDate to: aFinalDate for: aRule 
	self new initializeFrom: aStartingDate to: aFinalDate for: aRule.! !

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:04:18'!
ERROR!

!classDefinition: #BoundedHolidayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 20:04:28'!
HolidayRule subclass: #BoundedHolidayRule
	instanceVariableNames: 'startingDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #BoundedHolidayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 20:04:28'!
HolidayRule subclass: #BoundedHolidayRule
	instanceVariableNames: 'startingDate finalDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #BoundedHolidayRule category: 'CalendarioDeFeriados' stamp: 'eaam 10/5/2023 20:04:28'!
HolidayRule subclass: #BoundedHolidayRule
	instanceVariableNames: 'startingDate finalDate rule'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!BoundedHolidayRule methodsFor: 'initialize' stamp: 'eaam 10/5/2023 20:04:28'!
initializeFrom: aStartingDate to: aFinalDate for: aRule 
	self shouldBeImplemented.
	startingDate := aStartingDate.
	finalDate := aFinalDate.
	rule := aRule.! !
!BoundedHolidayRule methodsFor: 'initialize' stamp: 'eaam 10/5/2023 20:04:38' prior: 50669174!
initializeFrom: aStartingDate to: aFinalDate for: aRule 
	startingDate := aStartingDate.
	finalDate := aFinalDate.
	rule := aRule.! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 20:04:55'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 20:04:55'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 20:04:55'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 20:04:55'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 20:04:55'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 20:04:55'!
PASSED!

!testRun: #CalendarioFeriadosTest #test069DeJulioYNavidadSonFeriados stamp: 'eaam 10/5/2023 20:04:55'!
PASSED!

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:04:55'!
ERROR!

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:04:55'!
ERROR!
!BoundedHolidayRule class methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:05:04'!
isHoliday: unaFecha 
	self shouldBeImplemented.! !

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 20:07:56'!
PASSED!

!testRun: #CalendarioFeriadosTest #test01NavidadEsFeriado stamp: 'eaam 10/5/2023 20:07:56'!
PASSED!

!testRun: #CalendarioFeriadosTest #test02Diciembre20NoEsFeriado stamp: 'eaam 10/5/2023 20:07:56'!
PASSED!

!testRun: #CalendarioFeriadosTest #test03DomingoEsFeriado stamp: 'eaam 10/5/2023 20:07:56'!
PASSED!

!testRun: #CalendarioFeriadosTest #test04SabadoEsFeriado stamp: 'eaam 10/5/2023 20:07:56'!
PASSED!

!testRun: #CalendarioFeriadosTest #test05dosDíasDeSemanaMarcadoEsFeriado stamp: 'eaam 10/5/2023 20:07:56'!
PASSED!

!testRun: #CalendarioFeriadosTest #test069DeJulioYNavidadSonFeriados stamp: 'eaam 10/5/2023 20:07:56'!
PASSED!

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:07:56'!
ERROR!

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:07:56'!
ERROR!
!BoundedHolidayRule class methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:08:57' prior: 50669139!
from: aStartingDate to: aFinalDate for: aRule 
	^self new initializeFrom: aStartingDate to: aFinalDate for: aRule.! !

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:09:07'!
ERROR!
!BoundedHolidayRule methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:09:14'!
isHoliday: unaFecha 
	self shouldBeImplemented.! !
!BoundedHolidayRule methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:09:54' prior: 50669261!
isHoliday: unaFecha 
	^rule isHoliday: unaFecha and: [self fechaEnBound: unaFecha]! !
!BoundedHolidayRule methodsFor: 'category-name' stamp: 'eaam 10/5/2023 20:10:04' prior: 50669266!
isHoliday: unaFecha 
	^(rule isHoliday: unaFecha) and: [self fechaEnBound: unaFecha]! !

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:10:10'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:10:25'!
FAILURE!

!testRun: #CalendarioFeriadosTest #test07 stamp: 'eaam 10/5/2023 20:10:25'!
FAILURE!

(November/26/2023) day!
!CalendarioFeriadosTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/5/2023 20:12:57' prior: 50669111!
test07
	| miCalendario |
	miCalendario := CalendarioFeriados new.
	miCalendario addRule: (BoundedHolidayRule from: (November/26/2023) to: (December/1/2023) for: (WeekdayHolidayRule with: Monday)).
	self assert: true equals: (miCalendario esFechaFeriado: (November/27/2023)).! !

----QUIT----(5 October 2023 20:13:08) CuisUniversity-5981.image priorSource: 10753434!

----STARTUP---- (9 October 2023 20:23:01) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/ing-software-1-c2-2023/06-Portfolio1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 20:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:32:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 20:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 20:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:32:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:32:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 20:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:32:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 20:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 20:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:32:47'!
FAILURE!
!Withdraw methodsFor: 'initialization' stamp: 'eaam 10/9/2023 20:38:09' prior: 50669470!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'eaam 10/9/2023 20:38:36' prior: 50669475 overrides: 50669403!
value

	^-1*value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 20:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:38:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 20:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 20:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:38:38'!
FAILURE!

----QUIT----(9 October 2023 20:41:04) CuisUniversity-5981.image priorSource: 10804725!

----STARTUP---- (9 October 2023 20:51:57) as /home/clinux01/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!

!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 20:54:05' prior: 50669519!
balance
	
	^transactions sum: [ :aTransaction | 
		| amountToAdd |
		(aTransaction isKindOf: Deposit ) ifTrue: [amountToAdd  := aTransaction value].
		(aTransaction isKindOf: Withdraw ) ifTrue: [amountToAdd  := (aTransaction value) negated].
		
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 20:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:54:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:54:13'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:54:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 20:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 20:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:54:19'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 20:54:35' prior: 50669643!
balance
	
	^transactions sum: [ :aTransaction | 
		| amountToAdd |
		(aTransaction isKindOf: Deposit ) ifTrue: [amountToAdd  := aTransaction value].
		(aTransaction isKindOf: Withdraw ) ifTrue: [amountToAdd  := (aTransaction value) negated].
		amountToAdd
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 20:54:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:54:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:54:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:54:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 20:54:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 20:54:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:54:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:54:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 20:55:19' prior: 50669685!
balance
	| amountToAdd |
	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Deposit ) ifTrue: [amountToAdd  := aTransaction value].
		(aTransaction isKindOf: Withdraw ) ifTrue: [amountToAdd  := (aTransaction value) negated].
		amountToAdd
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 20:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:55:21'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:55:21'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 20:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 20:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:55:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:55:24'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 20:55:42' prior: 50669728!
balance
	^transactions sum: [ :aTransaction | 
		| amountToAdd |
		(aTransaction isKindOf: Deposit ) ifTrue: [amountToAdd  := aTransaction value].
		(aTransaction isKindOf: Withdraw ) ifTrue: [amountToAdd  := (aTransaction value) negated].
		amountToAdd
		] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'value' stamp: 'eaam 10/9/2023 20:55:48' prior: 50669602 overrides: 50669403!
value

	^value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 20:55:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:55:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 20:55:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 20:55:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 20:55:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 20:55:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 20:55:57'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:00:40' prior: 50669771!
balance
	^0
	"^transactions sum: [ :aTransaction | 
		| amountToAdd |
		(aTransaction isKindOf: Deposit ) ifTrue: [amountToAdd  := aTransaction value].
		(aTransaction isKindOf: Withdraw ) ifTrue: [amountToAdd  := (aTransaction value) negated].
		amountToAdd
		] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:00:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:00:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 21:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 21:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 21:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 21:00:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:00:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:00:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:00:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 21:00:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 21:00:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 21:00:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 21:00:53'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:06:14' prior: 50669814!
balance
	^transactions sum: [ :aTransaction | 
		| amountToAdd |
		(aTransaction isKindOf: Deposit ) ifTrue: [amountToAdd  := aTransaction value].
		(aTransaction isKindOf: Withdraw ) ifTrue: [amountToAdd  := (aTransaction value) negated].
		amountToAdd
		] ifEmpty: [ 0 ]! !
!Deposit methodsFor: 'value' stamp: 'eaam 10/9/2023 21:15:18'!
balance

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'eaam 10/9/2023 21:15:30'!
balance

	^value negated! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:16:24' prior: 50669880!
balance
	^transactions sum: [ :aTransaction | aTransaction balance] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:17:42' prior: 50669898!
balance
	| sum |
	sum := 0.
	transactions do: [ :aTransaction | sum := sum + aTransaction balance].
	^sum ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 21:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 21:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 21:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 21:17:44'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:23:55'!
Mbalance
	| sum |
	sum := 0.
	transactions do: [ :aTransaction | sum := sum + aTransaction balance].
	^sum ! !
!Deposit methodsFor: 'value' stamp: 'eaam 10/9/2023 21:25:59'!
xxxx: nombreDeclarativo

	^ nombreDeclarativo + value! !
!Withdraw methodsFor: 'value' stamp: 'eaam 10/9/2023 21:26:10'!
xxxx: nombreDeclarativo

	^ nombreDeclarativo + value negated! !

!methodRemoval: Withdraw #balance stamp: 'eaam 10/9/2023 21:26:21'!
balance

	^value negated!

!methodRemoval: Deposit #balance stamp: 'eaam 10/9/2023 21:26:27'!
balance

	^ value!

!methodRemoval: ReceptiveAccount #Mbalance stamp: 'eaam 10/9/2023 21:26:37'!
Mbalance
	| sum |
	sum := 0.
	transactions do: [ :aTransaction | sum := sum + aTransaction balance].
	^sum !
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:26:49' prior: 50669904!
balance
	| sum |
	sum := 0.
	transactions do: [ :aTransaction |  aTransaction xxxx: sum].
	^sum ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:26:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:26:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:26:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 21:26:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 21:26:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 21:26:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 21:26:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:26:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:27:21' prior: 50669964!
balance
	| sum |
	sum := 0.
	transactions do: [ :aTransaction | sum :=  aTransaction xxxx: sum].
	^sum ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:27:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:27:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:27:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 21:27:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 21:27:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 21:27:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 21:27:22'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:27:59' prior: 50670001!
balance
	| sum |
	sum := 0.
	transactions do: [ :aTransaction | sum := aTransaction xxxx: sum].
	^sum ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'eaam 10/9/2023 21:30:15' prior: 50670034!
balance
	
	^transactions inject: 0 into: [ :acumulatedBalance :aTransaction |  aTransaction xxxx: acumulatedBalance ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:30:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:30:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/9/2023 21:30:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/9/2023 21:30:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/9/2023 21:30:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/9/2023 21:30:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/9/2023 21:30:17'!
PASSED!
!Deposit methodsFor: 'value' stamp: 'eaam 10/9/2023 21:31:42'!
updateBalance: nombreDeclarativo

	^ nombreDeclarativo + value! !

!methodRemoval: Deposit #xxxx: stamp: 'eaam 10/9/2023 21:31:42'!
xxxx: nombreDeclarativo

	^ nombreDeclarativo + value!
!Withdraw methodsFor: 'value' stamp: 'eaam 10/9/2023 21:32:29'!
updateBalance: nombreDeclarativo

	^ nombreDeclarativo + value negated! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:32:29' prior: 50670041!
balance
	
	^transactions inject: 0 into: [ :acumulatedBalance :aTransaction |  aTransaction updateBalance: acumulatedBalance ].! !

!methodRemoval: Withdraw #xxxx: stamp: 'eaam 10/9/2023 21:32:29'!
xxxx: nombreDeclarativo

	^ nombreDeclarativo + value negated!
!Withdraw methodsFor: 'value' stamp: 'eaam 10/9/2023 21:33:21' prior: 50670082!
updateBalance: aBalanceToUpdate

	^ aBalanceToUpdate + value negated! !
!Deposit methodsFor: 'value' stamp: 'eaam 10/9/2023 21:33:26' prior: 50670074!
updateBalance: aBalanceToUpdate

	^ aBalanceToUpdate + value! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'eaam 10/9/2023 21:34:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/9/2023 21:35:17'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'eaam 10/9/2023 21:35:06'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := Portfolio new.

	self assert: 0 equals: account balance.
! !
!Portfolio methodsFor: 'no messages' stamp: 'eaam 10/9/2023 21:35:33'!
balance
	^0! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:36:09' prior: 50670128!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:39:02'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:39:02'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:39:33'!
test01PortfolioHasZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:39:33'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:44:06'!
test02PortfolioHasZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:47:07'!
test02 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test02PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/9/2023 21:47:07'!
test02PortfolioHasZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:47:28' prior: 50670185!
test02 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:57:05' prior: 50670199!
test02 
	
		| portfolio |
	
	portfolio := Portfolio new.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:57:09' prior: 50670203!
test02 
	
	| portfolio |
	
	portfolio := Portfolio new.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/9/2023 21:57:57'!
test03
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	
! !

----QUIT----(9 October 2023 21:58:02) CuisUniversity-5981.image priorSource: 10815515!

----STARTUP---- (10 October 2023 12:37:50) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:39:01' prior: 50670208!
test02 
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	portfolio add
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:40:27' prior: 50670225!
test02 
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	Deposit register: 50 on: account.
	portfolio addReceptiveAccount: account.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:40:45' prior: 50670232!
test02 
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := AccountTransaction new.
	Deposit register: 50 on: account.
	portfolio addReceptiveAccount: account.
	
	self assert: 50 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:40:47'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:41:19'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:41:59'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/10/2023 12:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/10/2023 12:42:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/10/2023 12:42:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/10/2023 12:42:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/10/2023 12:42:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/10/2023 12:42:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:42:23' prior: 50670241!
test02 
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 50 on: account.
	portfolio addReceptiveAccount: account.
	
	self assert: 50 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:42:24'!
ERROR!
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:42:48'!
addReceptiveAccount: account 
	self shouldBeImplemented.! !

Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 12:43:25'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:43:42' prior: 50670298!
addReceptiveAccount: account 
	balance := 50.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:43:51' prior: 50670135!
balance
	^balance! !
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:44:05'!
initialize: account 
	balance := 0.! !
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:44:31' overrides: 16920235!
initialize 
	balance := 0.! !

!methodRemoval: Portfolio #initialize: stamp: 'eaam 10/10/2023 12:44:31'!
initialize: account 
	balance := 0.!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:44:52'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:44:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:44:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:44:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:48:12' prior: 50670213!
test03
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw regirter: 20 on: account.
	portfolio addReceptiveAccount: account.
	
	self assert: 50 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:48:34' prior: 50670346!
test03
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	portfolio addReceptiveAccount: account.
	
	self assert: 50 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:48:37'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:48:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:48:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:48:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:48:45' prior: 50670358!
test03
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	portfolio addReceptiveAccount: account.
	
	self assert: 500 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:48:46'!
FAILURE!
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:49:24' prior: 50670315!
addReceptiveAccount: aReceptiveAccountToRegister! !
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:49:58' prior: 50670395!
addReceptiveAccount: aReceptiveAccountToRegister
	| registeredAccount |
	^registeredAccount := aReceptiveAccountToRegister.! !
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:50:14' prior: 50670400!
addReceptiveAccount: aReceptiveAccountToRegister
	"^registeredAccount := aReceptiveAccountToRegister."! !

Object subclass: #Portfolio
	instanceVariableNames: 'registeredAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 12:50:19'!
Object subclass: #Portfolio
	instanceVariableNames: 'registeredAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 12:50:26' prior: 50670320!
balance
	^registeredAccount balance.! !
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:50:34' prior: 50670407!
addReceptiveAccount: aReceptiveAccountToRegister
	^registeredAccount := aReceptiveAccountToRegister.! !
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:52:07' prior: 50670327 overrides: 16920235!
initialize 
	registeredAccount := 0.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:52:09'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:52:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:52:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:52:09'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:52:27'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:52:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:52:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:52:27'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:52:59'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:52:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:52:59'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:52:59'!
ERROR!
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:53:21' prior: 50670437 overrides: 16920235!
initialize 
	registeredAccount := ReceptiveAccount new.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:53:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:53:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:53:27'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 12:54:48' prior: 50670286!
test02
	
	| portfolio firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 520 on: firstAccount.
	Withdraw register: 20 on: firstAccount.
	portfolio addReceptiveAccount: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	self assert: 100 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 12:55:07' prior: 50670490!
test02
	
	| portfolio firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 520 on: firstAccount.
	Withdraw register: 20 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	portfolio addReceptiveAccount: firstAccount.
	portfolio addReceptiveAccount: secondAccount.
	
	self assert: 100 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 12:55:12' prior: 50670505!
test02
	
	| portfolio firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 520 on: firstAccount.
	Withdraw register: 20 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	portfolio addReceptiveAccount: firstAccount.
	portfolio addReceptiveAccount: secondAccount.
	
	self assert: 600 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:55:13'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 12:55:42'!
test04
	
	| portfolio firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 520 on: firstAccount.
	Withdraw register: 20 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: firstAccount.
	
	portfolio addReceptiveAccount: firstAccount.
	portfolio addReceptiveAccount: secondAccount.
	
	self assert: 600 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 12:56:32' prior: 50670522!
test02
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 50 on: account.
	
	portfolio addReceptiveAccount: account.

	self assert: 50 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:56:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:56:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:56:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:56:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 12:56:34'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 12:56:34'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:56:39'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 12:56:39'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 12:56:39'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 12:56:39'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 12:56:39'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 12:56:39'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 12:57:00' prior: 50670541!
test04
	
	| portfolio firstAccount secondAccount |
	
	portfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	Deposit register: 520 on: firstAccount.
	Withdraw register: 20 on: firstAccount.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: secondAccount.
	
	portfolio addReceptiveAccount: firstAccount.
	portfolio addReceptiveAccount: secondAccount.
	
	self assert: 600 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 12:57:01'!
FAILURE!
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:57:47' prior: 50670477 overrides: 16920235!
initialize 
	registeredAccount := OrderedCollection new.! !
!Portfolio methodsFor: 'xxxx' stamp: 'eaam 10/10/2023 12:59:11' prior: 50670430!
addReceptiveAccount: aReceptiveAccountToRegister
	^registeredAccount add: aReceptiveAccountToRegister.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 13:01:43'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsInPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 13:01:43' prior: 50670624!
addReceptiveAccount: aReceptiveAccountToRegister
	^accountsInPortfolio add: aReceptiveAccountToRegister.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 13:01:43' prior: 50670619 overrides: 16920235!
initialize 
	accountsInPortfolio := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 13:01:43' prior: 50670426!
balance
	^accountsInPortfolio balance.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:02:34' prior: 50670651!
balance
	^accountsInPortfolio sum: [:aReceptiveAccount |  aReceptiveAccount balance ].! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 13:02:59'!
Object subclass: #Portfolio
	instanceVariableNames: 'totalBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 13:02:59' prior: 50670639!
addReceptiveAccount: aReceptiveAccountToRegister
	^totalBalance add: aReceptiveAccountToRegister.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 13:02:59' prior: 50670646 overrides: 16920235!
initialize 
	totalBalance := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 13:02:59' prior: 50670655!
balance
	^totalBalance sum: [:aReceptiveAccount |  aReceptiveAccount balance ].! !
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 13:03:11' prior: 50670676 overrides: 16920235!
initialize 
	totalBalance := 0.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:03:22' prior: 50670669!
addReceptiveAccount: aReceptiveAccountToRegister
	^totalBalance + aReceptiveAccountToRegister balance.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:04:03' prior: 50670681!
balance
	^totalBalance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:04:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:04:04'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:04:04'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:04:04'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:04:07'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:04:22'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:04:39'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:04:42'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:04:42'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:04:56' prior: 50670691!
addReceptiveAccount: aReceptiveAccountToRegister
	^totalBalance  := totalBalance + aReceptiveAccountToRegister balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:04:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:04:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:04:57'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:04:57'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 13:10:23'!
test05
	
	| portfolio  account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	
	self assert: ( portfolio hasRegistered: account)
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 13:11:09' prior: 50670742!
test05
	
	| portfolio  account deposit|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	deposit := Deposit register: 5 on: account .
	
	self assert: ( portfolio hasRegistered: deposit)
	
! !

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:11:11'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'eaam 10/10/2023 13:11:20'!
hasRegistered: deposit 
	self shouldBeImplemented.! !

Object subclass: #Portfolio
	instanceVariableNames: 'totalBalance accountsInPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 13:12:12'!
Object subclass: #Portfolio
	instanceVariableNames: 'totalBalance accountsInPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 13:12:26' prior: 50670687 overrides: 16920235!
initialize 
	totalBalance := 0.
	accountsInPortfolio := OrderedCollection new.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:12:47' prior: 50670725!
addReceptiveAccount: aReceptiveAccountToRegister
	accountsInPortfolio add: aReceptiveAccountToRegister.
	totalBalance  := totalBalance + aReceptiveAccountToRegister balance.! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 13:27:03' prior: 50670764!
hasRegistered: aDeposit 
	accountsInPortfolio anySatisfy: [:aReceptiveAccount | aReceptiveAccount hasRegistered: aDeposit].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:27:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:27:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:27:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:27:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:27:07'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:27:07'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 13:27:18' prior: 50670798!
hasRegistered: aDeposit 
	^accountsInPortfolio anySatisfy: [:aReceptiveAccount | aReceptiveAccount hasRegistered: aDeposit].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:27:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:27:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:27:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:27:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:27:19'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:28:29' prior: 50670697!
balance
	^accountsInPortfolio first balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:28:30'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:28:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:28:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:28:30'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:28:30'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:30:39' prior: 50670841!
balance
	^accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance].! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:31:44' prior: 50670859!
balance
	^accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [^0].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:31:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:31:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:31:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:31:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:31:46'!
PASSED!
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 13:31:55' prior: 50670783 overrides: 16920235!
initialize 
	accountsInPortfolio := OrderedCollection new.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:32:00' prior: 50670789!
addReceptiveAccount: aReceptiveAccountToRegister
	accountsInPortfolio add: aReceptiveAccountToRegister.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accountsInPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 13:32:06'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsInPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 13:32:53'!
test06
	
	| portfolio  account deposit|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	deposit := Deposit register: 5 on: account .
	
	self assert: ( portfolio hasAccount: account)
	
! !

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:32:57'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 13:33:04'!
hasAccount: account 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 13:34:49' prior: 50670922!
hasAccount: account 
	accountsInPortfolio includes: account.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:35:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'eaam 10/10/2023 13:35:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'eaam 10/10/2023 13:35:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'eaam 10/10/2023 13:35:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'eaam 10/10/2023 13:35:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'eaam 10/10/2023 13:35:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'eaam 10/10/2023 13:35:03'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 13:36:57'!
test07
	
	| portfolio portfolioToAdd account|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	portfolioToAdd.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 13:37:14' prior: 50670959!
test07
	
	| portfolio portfolioToAdd account|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	portfolioToAdd addReceptiveAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:39:10'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:39:25'!
addPortfolio: portfolioToAdd 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:39:36' prior: 50670988!
addPortfolio: portfolioToAdd ! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:39:37' prior: 50670993!
addPortfolio: portfolioToAdd! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:39:46' prior: 50670997!
addPortfolio: portfolioToAdd! !

Object subclass: #Portfolio
	instanceVariableNames: 'accountsInPortfolio innerPortfolioBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 13:40:05'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsInPortfolio innerPortfolioBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:45:14'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:46:21' prior: 50671001!
addPortfolio: portfolioToAdd
	^innerPortfolioBalance! !
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 13:46:32' prior: 50670885 overrides: 16920235!
initialize 
	accountsInPortfolio := OrderedCollection new.
	innerPortfolioBalance := 0! !
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 13:46:33' prior: 50671028 overrides: 16920235!
initialize 
	accountsInPortfolio := OrderedCollection new.
	innerPortfolioBalance := 0.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:46:55' prior: 50670865!
balance
	^accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [^0] + innerPortfolioBalance.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:47:12' prior: 50671022!
addPortfolio: portfolioToAdd
	^innerPortfolioBalance + portfolioToAdd balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:47:13'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:47:13'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:47:13'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:47:13'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:47:13'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:47:13'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:47:18'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:47:34' prior: 50671041!
balance
	^(accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [^0]) + innerPortfolioBalance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:47:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:47:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:47:35'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:47:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:47:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:47:35'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:47:35'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:47:38'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:48:01'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:48:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:48:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:48:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:48:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:48:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:48:08'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:48:08'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 13:48:32' prior: 50671048!
addPortfolio: portfolioToAdd
	^innerPortfolioBalance := innerPortfolioBalance + portfolioToAdd balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:48:33'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:48:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:48:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:48:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:48:33'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:48:33'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:48:33'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:48:36'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:48:47'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 13:49:22' prior: 50670927!
hasAccount: account 
	^accountsInPortfolio includes: account.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:49:24'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:49:24'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:49:24'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:50:30' prior: 50671075!
balance
	| accountBalanceSum |
	accountBalanceSum := (accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [^0]) 
	^+ innerPortfolioBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:50:34' prior: 50671178!
balance
	| accountBalanceSum |
	accountBalanceSum := (accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [^0]) 
	^accountBalanceSum + innerPortfolioBalance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:50:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:50:37'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:50:37'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:50:37'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:50:37'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:50:37'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:50:37'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:50:40'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:51:00' prior: 50671187!
balance
	| accountBalanceSum |
	accountBalanceSum := (accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0]) 
	^accountBalanceSum + innerPortfolioBalance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:51:04'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:51:04'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:51:04'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:51:04'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:51:04'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:51:04'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:51:04'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:51:07'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:51:30'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:51:33'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:53:01'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:53:01'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:53:01'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:53:01'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:53:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:53:01'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:53:01'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:53:04'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:56:32' prior: 50671216!
balance
	| accountBalanceSum |
	accountBalanceSum := (accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0]) 
	^accountBalanceSum + innerPortfolioBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:57:11'!
totalAccountsBalance

	^ accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:57:11' prior: 50671272!
balance
	| accountBalanceSum |
	accountBalanceSum := (self totalAccountsBalance) 
	^accountBalanceSum + innerPortfolioBalance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:57:18'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:57:18'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:57:18'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:57:18'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:57:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:57:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:57:18'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:57:20'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:57:58'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:58:12' prior: 50671288!
balance
	| accountBalanceSum |
	accountBalanceSum := (self totalAccountsBalance) 
	^(self totalAccountsBalance)  + innerPortfolioBalance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:58:15'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:58:15'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:58:15'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:58:15'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:58:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:58:15'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:58:15'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:58:16'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:58:35' prior: 50671320!
balance
	| accountBalanceSum |
	accountBalanceSum := (self totalAccountsBalance) 
	^ ((self totalAccountsBalance)  + innerPortfolioBalance).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:58:38'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:58:38'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:58:38'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:58:38'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:58:38'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:58:38'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:58:38'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:58:39'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:58:47' prior: 50671349!
balance
	^ ((self totalAccountsBalance)  + innerPortfolioBalance).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 13:58:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 13:58:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 13:58:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 13:58:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 13:58:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 13:58:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 13:58:48'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:59:02' prior: 50671378!
balance
	^  (self totalAccountsBalance)  + innerPortfolioBalance.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 13:59:28'!
totalBalanceOfAccounts

	^ accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 13:59:28' prior: 50671401!
balance
	^  (self totalBalanceOfAccounts)  + innerPortfolioBalance.! !

!methodRemoval: Portfolio #totalAccountsBalance stamp: 'eaam 10/10/2023 13:59:28'!
totalAccountsBalance

	^ accountsInPortfolio sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0]!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:00:28' prior: 50670972!
test07
	
	| portfolio portfolioToAdd aPortfolioInOtherPortfolio account|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	portfolioToAdd addReceptiveAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:00:51' prior: 50671425!
test07
	
	| portfolio portfolioToAdd aPortfolioInOtherPortfolio account|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	aPortfolioInOtherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	portfolioToAdd addReceptiveAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:01:08'!
test08
	
	| portfolio portfolioToAdd aPortfolioInOtherPortfolio account|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	aPortfolioInOtherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	aPortfolioInOtherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:01:10'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:01:42' prior: 50671456!
test08
	
	| portfolio portfolioToAdd aPortfolioInOtherPortfolio account|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	aPortfolioInOtherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	aPortfolioInOtherPortfolio addReceptiveAccount: account.
	
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 14:02:05' prior: 50671123!
addPortfolio: portfolioToAdd
	^innerPortfolioBalance := portfolioToAdd balance.! !

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:02:11'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:02:49' prior: 50671475!
test08
	
	| portfolio portfolioToAdd aPortfolioInOtherPortfolio account|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	aPortfolioInOtherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	aPortfolioInOtherPortfolio addReceptiveAccount: account.
	
	portfolioToAdd addPortfolio: aPortfolioInOtherPortfolio.
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:02:50'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:02:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:06:11' prior: 50671500!
test08
	
	| portfolio firstPortfolioToAdd secondPortfolioToAdd firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstPortfolioToAdd := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	secondPortfolioToAdd := Portfolio new.
	
	Deposit register: 450 on: firstAccount.
	Deposit register: 50 on: secondAccount.
	
	firstPortfolioToAdd addReceptiveAccount: firstAccount.
	secondPortfolioToAdd addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: secondPortfolioToAdd.
	portfolio addPortfolio: firstPortfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:06:12'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:06:22' prior: 50671564!
test08
	
	| portfolio firstPortfolioToAdd secondPortfolioToAdd firstAccount secondAccount|
	
	portfolio := Portfolio new.
	firstPortfolioToAdd := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	secondPortfolioToAdd := Portfolio new.
	
	Deposit register: 450 on: firstAccount.
	Deposit register: 50 on: secondAccount.
	
	firstPortfolioToAdd addReceptiveAccount: firstAccount.
	secondPortfolioToAdd addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: firstPortfolioToAdd.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:06:23'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:26:37'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 14:27:00' prior: 50671492!
addPortfolio: portfolioToAdd
	^innerPortfolioBalance :=innerPortfolioBalance + portfolioToAdd balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:30:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:31:53'!
test09
	
	| portfolio portfolioToAdd |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.

	
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:52:56' prior: 50671643!
test09
	
	| portfolio portfolioToAdd |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.

	
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasPortfolio: portfolio).
	
! !

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:52:58'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 14:53:10'!
hasPortfolio: portfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 14:54:07'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsInPortfolio portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:07' prior: 50671413!
balance
	^  (self totalBalanceOfAccounts)  + portfolios.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:07' prior: 50671617!
addPortfolio: portfolioToAdd
	^portfolios :=portfolios + portfolioToAdd balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:07' prior: 50671035 overrides: 16920235!
initialize 
	accountsInPortfolio := OrderedCollection new.
	portfolios := 0.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'eaam 10/10/2023 14:54:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:24' prior: 50671688 overrides: 16920235!
initialize 
	accounts := OrderedCollection new.
	portfolios := 0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:24' prior: 50671152!
hasAccount: account 
	^accounts includes: account.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:24' prior: 50670821!
hasRegistered: aDeposit 
	^accounts anySatisfy: [:aReceptiveAccount | aReceptiveAccount hasRegistered: aDeposit].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:24' prior: 50671406!
totalBalanceOfAccounts

	^ accounts sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 14:54:24' prior: 50670890!
addReceptiveAccount: aReceptiveAccountToRegister
	accounts add: aReceptiveAccountToRegister.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 14:55:22' prior: 50671681!
addPortfolio: portfolioToAdd
	^portfolios add: portfolioToAdd.! !
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 14:55:29' prior: 50671702 overrides: 16920235!
initialize 
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 14:56:05' prior: 50671663!
hasPortfolio: aPortfolioToSearch 
	^portfolios includes: aPortfolioToSearch.! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 14:56:22' prior: 50671708!
hasAccount: aAccountToSearch 
	^accounts includes: aAccountToSearch.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 14:56:41' prior: 50671676!
balance
	^  (self totalBalanceOfAccounts)  + accounts sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 14:56:45' prior: 50671756!
balance
	^  (self totalBalanceOfAccounts)  + portfolios sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 14:57:10' prior: 50671763!
balance
	^  (self totalBalanceOfAccounts)  + portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 14:57:37'!
totalBalanceOfPortfolios

	^ portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 14:57:53' prior: 50671770!
balance
	^  (self totalBalanceOfAccounts)  + self totalBalanceOfPortfolios.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:57:56'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:57:56'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:57:56'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:58:25'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:58:35'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:58:38'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 14:59:22' prior: 50671652!
test09
	
	| portfolio portfolioToAdd |
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.

	
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasPortfolio: portfolioToAdd).
	
! !

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 14:59:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:00:36'!
test10
	
	| portfolio firstPortfolioToAdd secondPortfolioToAdd portfolioToAdd |
	
	portfolio := Portfolio new.
	firstPortfolioToAdd := Portfolio new.
	secondPortfolioToAdd := Portfolio new.

	
	portfolio addPortfolio: firstPortfolioToAdd.
	
	self assert: (portfolio hasPortfolio: portfolioToAdd).
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:00:46' prior: 50671854!
test10
	
	"| portfolio firstPortfolioToAdd secondPortfolioToAdd portfolioToAdd |
	
	portfolio := Portfolio new.
	firstPortfolioToAdd := Portfolio new.
	secondPortfolioToAdd := Portfolio new.

	
	portfolio addPortfolio: firstPortfolioToAdd.
	
	self assert: (portfolio hasPortfolio: portfolioToAdd)."
	
! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:01:05' prior: 50671733!
addPortfolio: portfolioToAdd
	^portfolios := portfolioToAdd.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 15:01:15' prior: 50671776!
totalBalanceOfPortfolios

	^ portfolios balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:01:16'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:01:16'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:01:16'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:01:16'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:01:16'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:01:16'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:01:16'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:01:16'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:01:16'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:01:16'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:01:26'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:01:26'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:01:26'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:01:26'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:01:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:01:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:01:26'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:01:26'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:01:26'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:01:26'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:01:30'!
ERROR!
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 15:02:02' prior: 50671739 overrides: 16920235!
initialize 
	accounts := OrderedCollection new.
	"portfolios := OrderedCollection new."! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:02:03'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:02:03'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:02:03'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:02:03'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:02:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:02:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:02:03'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:02:03'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:02:03'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:02:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:02:05'!
ERROR!
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 15:02:21' prior: 50671944 overrides: 16920235!
initialize 
	accounts := OrderedCollection new.
	portfolios := Portfolio new.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:03:15' prior: 50671880!
addPortfolio: portfolioToAdd
	^portfolios add: portfolioToAdd.! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 15:03:22' prior: 50671885!
totalBalanceOfPortfolios

	^ portfolios first balance.! !
!Portfolio methodsFor: 'initialize' stamp: 'eaam 10/10/2023 15:03:44' prior: 50671979 overrides: 16920235!
initialize 
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:03:46'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:03:46'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:03:46'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:03:46'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:03:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:03:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:03:46'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:03:46'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:03:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:03:46'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:03:48'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 15:04:39' prior: 50671990!
totalBalanceOfPortfolios

	portfolios ifEmpty: [^0] 
	^portfolios first balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:04:40'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:04:40'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:04:40'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:04:40'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:04:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:04:40'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:04:40'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:04:40'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:04:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:04:40'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:04:43'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:04:58'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:04:58'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:04:58'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:04:58'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:04:58'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:04:58'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:04:58'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:04:58'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:04:58'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:04:58'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 15:05:17' prior: 50672030!
totalBalanceOfPortfolios

	portfolios ifNotEmpty: [^portfolios first balance.] 
	^0.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:05:18'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:05:18'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:05:18'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:05:18'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:05:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:05:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:05:18'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:05:18'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:05:18'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:05:18'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:05:19'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 15:05:32' prior: 50672089!
totalBalanceOfPortfolios

	portfolios ifNotEmpty: [^portfolios first balance.].
	^0.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:05:33'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:05:33'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:05:33'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/10/2023 15:06:33' prior: 50672123!
totalBalanceOfPortfolios

	^portfolios sum: [:aReceptivePortfolio | aReceptivePortfolio balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:06:35'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:07:40' prior: 50671867!
test10
	
	| portfolio firstPortfolioToAdd secondPortfolioToAdd |
	
	portfolio := Portfolio new.
	firstPortfolioToAdd := Portfolio new.
	secondPortfolioToAdd := Portfolio new.

	
	portfolio addPortfolio: firstPortfolioToAdd.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: (portfolio hasPortfolio: secondPortfolioToAdd).
	self assert: (portfolio hasPortfolio: secondPortfolioToAdd).
	
! !

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:07:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:10:25' prior: 50672189!
test10
	
	| portfolio firstPortfolioToAdd secondPortfolioToAdd |
	
	portfolio := Portfolio new.
	firstPortfolioToAdd := Portfolio new.
	secondPortfolioToAdd := Portfolio new.

	
	firstPortfolioToAdd addPortfolio: secondPortfolioToAdd.
	portfolio addPortfolio: firstPortfolioToAdd.
	
	self assert: (portfolio hasPortfolio: secondPortfolioToAdd).
	
! !

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:10:26'!
FAILURE!

a := OrderedCollection new.
a includes: $a!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:11:21'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 15:12:16' prior: 50671745!
hasPortfolio: aPortfolioToSearch 
	^(portfolios includes: aPortfolioToSearch) or: (self isInAnotherPortfolio).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:12:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:12:18'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:12:18'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:12:21'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 15:12:28'!
isInAnotherPortfolio
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 15:13:16' prior: 50672286!
isInAnotherPortfolio
	^portfolios anySatisfy: [:aPortfolio].! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 15:13:38'!
isInAnotherPortfolio: portfolio
	^portfolios anySatisfy: [:aPortfolio].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 15:13:38' prior: 50672252!
hasPortfolio: aPortfolioToSearch 
	^(portfolios includes: aPortfolioToSearch) or: (self isInAnotherPortfolio: a).! !

!methodRemoval: Portfolio #isInAnotherPortfolio stamp: 'eaam 10/10/2023 15:13:38'!
isInAnotherPortfolio
	^portfolios anySatisfy: [:aPortfolio].!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 15:14:22' prior: 50672296!
isInAnotherPortfolio: aPortfolioToSearch
	^portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToSearch].! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 15:14:32' prior: 50672302!
hasPortfolio: aPortfolioToSearch 
	^(portfolios includes: aPortfolioToSearch) or: (self isInAnotherPortfolio: aPortfolioToSearch).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:14:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:32:13'!
test11
	
	| portfolio anOrderedCollection account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.

	
	anOrderedCollection add: account.
	portfolio addAccount: account.
	
	
	self assert: anOrderedCollection equeals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:32:24' prior: 50672352!
test11
	
	| portfolio anOrderedCollection account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.

	
	anOrderedCollection add: account.
	portfolio addAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:32:26'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:32:45' prior: 50672365!
test11
	
	| portfolio anOrderedCollection account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.

	
	anOrderedCollection add: account.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:32:46'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:33:00'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:33:11'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:33:39' prior: 50672397!
transactions
	^accounts.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:33:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:34:11'!
test12
	
	| portfolio anOrderedCollection aportfolioToAdd|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.

	
	anOrderedCollection add: aportfolioToAdd.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:34:14'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:35:50' prior: 50672433!
test12
	
	| portfolio anOrderedCollection aportfolioToAdd account|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.

	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:36:17' prior: 50672449!
test12
	
	| portfolio anOrderedCollection aportfolioToAdd account|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:36:19'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:38:58' prior: 50672402!
transactions
	^accounts, (portfolios transactions).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:38:59'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:38:59'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:38:59'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:39:02'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:43:00' prior: 50672483!
transactions
	|  transactions |
	^accounts, (portfolios inject: 0 into: transactions).! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:44:16' prior: 50672520!
transactions
	^OrderedCollection new! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:45:44'!
test13
	
	| portfolio anOrderedCollection aportfolioToAdd account|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !

!methodRemoval: PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:45:48'!
test12
	
	| portfolio anOrderedCollection aportfolioToAdd account|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:45:52'!
test12
	
	| portfolio anOrderedCollection account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.

	
	anOrderedCollection add: account.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:45:57' prior: 50672380!
test11
	
	| portfolio anOrderedCollection account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.

	
	anOrderedCollection add: account.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:46:16' prior: 50672574!
test11
	
	| portfolio anOrderedCollection|
	
	portfolio := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:46:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:46:18'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 15:46:18'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:48:40' prior: 50672561!
test12
	
	| portfolio anOrderedCollection account aTransaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.
	aTransaction := Deposit.
	
	
	anOrderedCollection add: aTransaction.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:49:08' prior: 50672631!
test12
	
	| portfolio anOrderedCollection account aTransaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.
	aTransaction := Deposit register: 0 on: account.
	
	
	anOrderedCollection add: aTransaction.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:49:18'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:51:41' prior: 50672526!
transactions
	^accounts inject: OrderedCollection new into: [:anCollection :anAccount | anCollection addAll: (anAccount transactions)]! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:51:42'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 15:51:42'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 15:51:42'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:52:07' prior: 50672530!
test13
	
	"| portfolio anOrderedCollection aportfolioToAdd account|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions ."
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:52:37' prior: 50670909!
test06
	
	| portfolio  account deposit|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	deposit := Deposit register: 5 on: account .
	
	self assert: ( portfolio hasRegistered: deposit)
	
! !

!methodRemoval: PortfolioTest #test06 stamp: 'eaam 10/10/2023 15:53:09'!
test06
	
	| portfolio  account deposit|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	deposit := Deposit register: 5 on: account .
	
	self assert: ( portfolio hasRegistered: deposit)
	
!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:54:26' prior: 50671820!
test09
	
	| portfolio portfolioToAdd account transaction|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 500 on: account. 
	
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasRegistered: portfolioToAdd).
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:54:55' prior: 50672743!
test09
	
	| portfolio portfolioToAdd account transaction|
	
	portfolio := Portfolio new.
	portfolioToAdd := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 500 on: account. 
	
	portfolioToAdd addReceptiveAccount: account .
	portfolio addPortfolio: portfolioToAdd.
	
	self assert: (portfolio hasRegistered: transaction).
	
! !

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:54:55'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/10/2023 15:56:13' prior: 50671713!
hasRegistered: aDeposit 
	^(accounts anySatisfy: [:aReceptiveAccount | aReceptiveAccount hasRegistered: aDeposit]) or: (portfolios anySatisfy:  [:aPortfolio | aPortfolio hasRegistered: aDeposit]).! !

!methodRemoval: Portfolio #isInAnotherPortfolio: stamp: 'eaam 10/10/2023 15:56:20'!
isInAnotherPortfolio: aPortfolioToSearch
	^portfolios anySatisfy: [:aPortfolio | aPortfolio hasPortfolio: aPortfolioToSearch].!

!methodRemoval: Portfolio #hasPortfolio: stamp: 'eaam 10/10/2023 15:56:24'!
hasPortfolio: aPortfolioToSearch 
	^(portfolios includes: aPortfolioToSearch) or: (self isInAnotherPortfolio: aPortfolioToSearch).!

!methodRemoval: Portfolio #hasAccount: stamp: 'eaam 10/10/2023 15:56:28'!
hasAccount: aAccountToSearch 
	^accounts includes: aAccountToSearch.!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:56:31'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 15:56:31'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:56:31'!
ERROR!

!methodRemoval: PortfolioTest #test10 stamp: 'eaam 10/10/2023 15:56:44'!
test10
	
	| portfolio firstPortfolioToAdd secondPortfolioToAdd |
	
	portfolio := Portfolio new.
	firstPortfolioToAdd := Portfolio new.
	secondPortfolioToAdd := Portfolio new.

	
	firstPortfolioToAdd addPortfolio: secondPortfolioToAdd.
	portfolio addPortfolio: firstPortfolioToAdd.
	
	self assert: (portfolio hasPortfolio: secondPortfolioToAdd).
	
!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 15:57:21'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 15:58:18' prior: 50672664!
transactions
	^accounts inject: OrderedCollection new into: [:anCollection :anAccount | anCollection addAll: (anAccount transactions)]! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 15:58:19'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 15:58:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:58:46' prior: 50672706!
test13
	
	"| portfolio anOrderedCollection aportfolioToAdd account aTransaction|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions ."
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:58:53' prior: 50672936!
test13
	
	"| portfolio anOrderedCollection aportfolioToAdd account aTransaction|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	aTransaction := Deposit register: 0 on: account.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions ."
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:58:59' prior: 50672952!
test13
	
	| portfolio anOrderedCollection aportfolioToAdd account aTransaction|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	aTransaction := Deposit register: 0 on: account.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:59:04' prior: 50672970!
test13
	
	| portfolio anOrderedCollection aportfolioToAdd account aTransaction|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	aTransaction := Deposit register: 10 on: account.
	
	anOrderedCollection add: account.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 15:59:08' prior: 50672646!
test12
	
	| portfolio anOrderedCollection account aTransaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.
	aTransaction := Deposit register: 10 on: account.
	
	
	anOrderedCollection add: aTransaction.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'eaam 10/10/2023 16:05:45' prior: 50672988!
test13
	
	| portfolio anOrderedCollection aportfolioToAdd account aTransaction|
	
	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	aTransaction := Deposit register: 10 on: account.
	
	anOrderedCollection add: aTransaction.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:11:01' prior: 50672873!
transactions
	^ (portfolios inject: OrderedCollection new into: [:anCollection :anPortfolio | anCollection addAll: (anPortfolio transactions)]) addAll: (accounts inject: OrderedCollection new into: [:anCollection :anAccount | anCollection addAll: (anAccount transactions)])! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 16:11:02'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 16:11:02'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 16:11:02'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 16:13:26'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 16:13:26'!
FAILURE!

	portfolio := Portfolio new.
	aportfolioToAdd := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	aTransaction := Deposit register: 10 on: account.
	
	anOrderedCollection add: aTransaction.
	aportfolioToAdd addPortfolio: account.
	portfolio addPortfolio: aportfolioToAdd.
	
	
	portfolio transactions .!

portfolio transactions.!

portfolio := Portfolio new.
aportfolioToAdd := Portfolio new.
anOrderedCollection := OrderedCollection new.
account := ReceptiveAccount new.
aTransaction := Deposit register: 10 on: account.

anOrderedCollection add: aTransaction.
aportfolioToAdd addPortfolio: account.
portfolio addPortfolio: aportfolioToAdd.


portfolio transactions.!

portfolio := Portfolio new.
aportfolioToAdd := Portfolio new.
anOrderedCollection := OrderedCollection new.
account := ReceptiveAccount new.
aTransaction := Deposit register: 10 on: account.

anOrderedCollection add: aTransaction.
aportfolioToAdd addPortfolio: account.
portfolio addPortfolio: aportfolioToAdd.


portfolio transactions.!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:20:53'!
allTheTransactionsOf

	^ portfolios inject: OrderedCollection new into: [:anCollection :anPortfolio | anCollection addAll: (anPortfolio transactions)]! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:20:53' prior: 50673039!
transactions
	^ (self allTheTransactionsOf) addAll: (accounts inject: OrderedCollection new into: [:anCollection :anAccount | anCollection addAll: (anAccount transactions)])! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:21:19'!
allTheTransactionsOf: aCollectionOfChilds

	^ portfolios inject: OrderedCollection new into: [:anCollection :anPortfolio | anCollection addAll: (anPortfolio transactions)]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'eaam 10/10/2023 16:21:19' prior: 50673152!
transactions
	^ (self allTheTransactionsOf: a) addAll: (accounts inject: OrderedCollection new into: [:anCollection :anAccount | anCollection addAll: (anAccount transactions)])! !

!methodRemoval: Portfolio #allTheTransactionsOf stamp: 'eaam 10/10/2023 16:21:19'!
allTheTransactionsOf

	^ portfolios inject: OrderedCollection new into: [:anCollection :anPortfolio | anCollection addAll: (anPortfolio transactions)]!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:21:35' prior: 50673160!
allTheTransactionsOf: aCollectionOfChilds

	^ aCollectionOfChilds inject: OrderedCollection new into: [:anCollection :aChild | anCollection addAll: (aChild transactions)]! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:21:59' prior: 50673169!
transactions
	^ (self allTheTransactionsOf: portfolios) addAll: (self allTheTransactionsOf: accounts )! !
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:22:00' prior: 50673194!
transactions
	^ (self allTheTransactionsOf: portfolios) addAll: (self allTheTransactionsOf: accounts)! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 16:22:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 16:22:01'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 16:22:01'!
FAILURE!

portfolio := Portfolio new.
aportfolioToAdd := Portfolio new.
anOrderedCollection := OrderedCollection new.
account := ReceptiveAccount new.
aTransaction := Deposit register: 10 on: account.

anOrderedCollection add: aTransaction.
aportfolioToAdd addPortfolio: account.
portfolio addPortfolio: aportfolioToAdd.


portfolio transactions.!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/10/2023 16:23:25' prior: 50673201!
transactions
	| allTransactions |
	allTransactions := OrderedCollection new.
	allTransactions addAll: (self allTheTransactionsOf: portfolios).
	allTransactions addAll: (self allTheTransactionsOf: accounts).
	^allTransactions ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/10/2023 16:23:27'!
PASSED!

----QUIT----(10 October 2023 17:31:45) CuisUniversity-5981.image priorSource: 10834142!

----STARTUP---- (11 October 2023 14:23:06) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!

!Portfolio methodsFor: 'balance' stamp: 'eaam 10/11/2023 14:26:58'!
totalBalanceOf: aCollectionOfFinancialAssets

	^ aCollectionOfFinancialAssets sum: [:aFinancialAsset | aFinancialAsset balance] ifEmpty: [0]! !
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/11/2023 14:27:13' prior: 50671782!
balance
	^  (self totalBalanceOf: accounts )  + self totalBalanceOf: portfolios .! !

!methodRemoval: Portfolio #totalBalanceOfAccounts stamp: 'eaam 10/11/2023 14:27:17'!
totalBalanceOfAccounts

	^ accounts sum: [:aReceptiveAccount | aReceptiveAccount balance] ifEmpty: [0]!

!methodRemoval: Portfolio #totalBalanceOfPortfolios stamp: 'eaam 10/11/2023 14:27:20'!
totalBalanceOfPortfolios

	^portfolios sum: [:aReceptivePortfolio | aReceptivePortfolio balance] ifEmpty: [0]!
!Portfolio methodsFor: 'transactions' stamp: 'eaam 10/11/2023 14:29:24' prior: 50673185!
allTheTransactionsOf: aCollectionOfFinancialAssets

	^ aCollectionOfFinancialAssets inject: OrderedCollection new into: [:anCollection :aChild | anCollection addAll: (aChild transactions)]! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/11/2023 14:29:49'!
hasRegistered: aDeposit in: aCollectionOfFinancialAssets
	^(aCollectionOfFinancialAssets anySatisfy: [:aReceptiveAccount | aReceptiveAccount hasRegistered: aDeposit])! !
!Portfolio methodsFor: 'testing' stamp: 'eaam 10/11/2023 14:30:33' prior: 50672773!
hasRegistered: aDeposit 
	^(self hasRegistered: aDeposit in: accounts) or: (self hasRegistered: aDeposit in: portfolios ).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/11/2023 14:30:34'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/11/2023 14:30:34'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/11/2023 14:30:34'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/11/2023 14:30:34'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/11/2023 14:30:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/11/2023 14:30:34'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/11/2023 14:30:34'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/11/2023 14:30:34'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/11/2023 14:30:34'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/11/2023 14:30:34'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/11/2023 14:30:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/11/2023 14:30:38'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'eaam 10/11/2023 14:31:07' prior: 50673300!
balance
	^  (self totalBalanceOf: accounts )  + (self totalBalanceOf: portfolios).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'eaam 10/11/2023 14:31:08'!
PASSED!

----QUIT----(11 October 2023 14:31:29) CuisUniversity-5981.image priorSource: 10932311!

----STARTUP---- (11 October 2023 14:32:42) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (15 October 2023 11:11:01) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (15 October 2023 20:34:35) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (15 October 2023 20:50:24) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (15 October 2023 23:09:31) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (16 October 2023 13:09:48) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (16 October 2023 13:34:41) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (16 October 2023 13:39:26) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (16 October 2023 13:47:46) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (17 October 2023 11:24:09) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 00:14:30) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 01:11:22) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 02:00:36) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 02:45:39) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 12:36:05) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 12:54:15) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 13:58:59) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 14:10:08) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 14:24:04) as /home/ezfloat/ing-software-1-c2-2023/CuisLinux64/CuisUniversity-5981.image!


----STARTUP---- (18 October 2023 16:36:40) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\sofia\Downloads\smalltalkVM\windows64\Portfolio-Ejercicio.st----!
!Portfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 16:50:44'!
canAddFinancialAsset: aFinancialAssetToRegister

	financialAssets add: aFinancialAssetToRegister ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 16:51:48'!
addFinancialAsset: aFinancialAssetToRegister

	financialAssets add: aFinancialAssetToRegister ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 16:52:12' prior: 50693179!
canAddFinancialAsset: aFinancialAssetToRegister

	! !

Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioState category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 16:59:41'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootPortfolio category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 17:00:05'!
PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #NonRootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NonRootPortfolio category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 17:00:13'!
PortfolioState subclass: #NonRootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioState methodsFor: 'no messages' stamp: 'Sof D 10/18/2023 17:01:02'!
isRootPortfolio
	self subclassResponsibility ! !
!NonRootPortfolio methodsFor: 'no messages' stamp: 'Sof D 10/18/2023 17:01:17' overrides: 50693234!
isRootPortfolio
	^false! !
!RootPortfolio methodsFor: 'no messages' stamp: 'Sof D 10/18/2023 17:01:26' overrides: 50693234!
isRootPortfolio
	^true! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 17:03:06'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets receptiveAccounts portfolios parentPortfolio portfolioState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:02:59' prior: 50693085!
canAddPortfolioToPortfolio: aPortfolioToRegister


	receptiveAccounts do: [:aAccount | aPortfolioToRegister canAddAccountToPortfolio: aAccount].
	portfolioState isRootPortfolio.
	(parentPortfolio isEmpty) 
		ifTrue:[ self portfolioIsIncludedInPortfolioOrItsPortfolios: aPortfolioToRegister. 
			self iAmInPortfolio: aPortfolioToRegister.
				"este ciclo esta muy cerca del root 'emoji de asco' "]
		ifFalse: [ parentPortfolio do: [ : aPortfolio | aPortfolio canAddPortfolioToPortfolio: aPortfolioToRegister ]]
		

! !
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 17:05:10' prior: 50693057 overrides: 16920235!
initialize 
	financialAssets := OrderedCollection new.
	receptiveAccounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	parentPortfolio := OrderedCollection new.
	
	portfolioState := NonRootPortfolio new.! !
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 17:05:21' prior: 50693277 overrides: 16920235!
initialize 
	financialAssets := OrderedCollection new.
	receptiveAccounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	parentPortfolio := OrderedCollection new.
	
	portfolioState := RootPortfolio new.! !
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 17:05:49' prior: 50693066!
setAsParentPortfolio: aParentPortfolio 
	parentPortfolio add: aParentPortfolio.
	
	parentPortfolio := NonRootPortfolio new.! !
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 17:06:53' prior: 50693298!
setAsParentPortfolio: aParentPortfolio 
	parentPortfolio add: aParentPortfolio.
	
	portfolioState := NonRootPortfolio new.! !
!Portfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 17:10:15'!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:15:51' prior: 50693311!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister

	(portfolios do: [:aPortfolio | aPortfolio portfolioIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:16:18' prior: 50693317!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:17:31' prior: 50693326!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister])! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'Sof D 10/18/2023 17:18:53'!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 17:19:15' prior: 50693017!
canAddAccountToPortfolio: aReceptiveAccountToRegister

	^(parentPortfolio isEmpty) 
		ifTrue: 
		[
			(self assetIsIncludedInPortfolioOrItsPortfolios: aReceptiveAccountToRegister)
			]
		ifFalse: 
		[
			(parentPortfolio anySatisfy: [:aParentPortfolio | aParentPortfolio canAddAccountToPortfolio: aReceptiveAccountToRegister ]) ifTrue: [self error: self class alreadyInPortfolioErrorDescription].
			]! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:19:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:19:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:19:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:19:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:19:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:19:17'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:19:17'!
FAILURE!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:19:17'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:19:17'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:19:17'!
FAILURE!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:19:17'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:19:17'!
PASSED!

----SNAPSHOT----(18 October 2023 17:19:37) CuisUniversity-5981.image priorSource: 11267890!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:19:46'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:19:46'!
FAILURE!
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'Sof D 10/18/2023 17:24:08'!
alreadyInPortfolioErrorDescription
	^'Account is already in portfolio or its portfolios'! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:18' prior: 50692448!
test12PortfolioCantAddAlreadyAddedAccount
	
	| portfolio anAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: ReceptiveAccount alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:24' prior: 50692461!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anAccount aParentPortfolio|
	
	portfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: ReceptiveAccount alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:32' prior: 50693499!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anAccount aParentPortfolio|
	
	portfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:40' prior: 50693485!
test12PortfolioCantAddAlreadyAddedAccount
	
	| portfolio anAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!methodRemoval: ReceptiveAccount class #alreadyInPortfolioErrorDescription stamp: 'Sof D 10/18/2023 17:24:57'!
alreadyInPortfolioErrorDescription
	^'Account is already in portfolio or its portfolios'!
!FinancialAsset class methodsFor: 'no messages' stamp: 'Sof D 10/18/2023 17:25:03'!
alreadyInPortfolioErrorDescription
	^'Account is already in portfolio or its portfolios'! !
!FinancialAsset class methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:25:09' prior: 50693555!
alreadyInPortfolioErrorDescription
	^'Asset is already in portfolio or its portfolios'! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:25:12'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:25:12'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:25:12'!
FAILURE!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:25:12'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:25:12'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:25:37'!
FAILURE!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:25:37'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:25:53' prior: 50692478!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio1 portfolio2 anAccount aParentPortfolio|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: portfolio2.
	aParentPortfolio addPortfolio: portfolio1.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:25:59' prior: 50692498!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio anAccount aParentPortfolio1 aParentPortfolio2|
	
	portfolio := Portfolio new.
	aParentPortfolio1 := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aParentPortfolio1 addReceptiveAccount: anAccount.
	aParentPortfolio1 addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:26:03' prior: 50692518!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio anAccount aParentPortfolio1 aParentPortfolio2|
	
	portfolio := Portfolio new.
	aParentPortfolio1 := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aParentPortfolio2 addReceptiveAccount: anAccount.
	aParentPortfolio1 addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: aParentPortfolio1.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:26:04'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:26:04'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:26:04'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:26:17'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:26:17'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:26:17'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:26:28' prior: 50692598!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	| portfolio  anotherPortfolio account |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account .
	anotherPortfolio addReceptiveAccount: account .
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:26:29'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20'!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister])! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20'!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20' prior: 50693357!
canAddAccountToPortfolio: aReceptiveAccountToRegister

	^(parentPortfolio isEmpty) 
		ifTrue: 
		[
			(self assetIsIncludedInPortfolioCollection: aReceptiveAccountToRegister)
			]
		ifFalse: 
		[
			(parentPortfolio anySatisfy: [:aParentPortfolio | aParentPortfolio canAddAccountToPortfolio: aReceptiveAccountToRegister ]) ifTrue: [self error: self class alreadyInPortfolioErrorDescription].
			]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20' prior: 50693336!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20' prior: 50694055!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister])! !

!methodRemoval: Portfolio #assetIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 17:28:20'!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister])!

!methodRemoval: ReceptiveAccount #assetIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 17:28:20'!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:29:41'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:29:44'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:29:45'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:14' prior: 50693693!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio anAccount anotherPortfolio aParentPortfolio2|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	anotherPortfolio addReceptiveAccount: anAccount.
	anotherPortfolio addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:23' prior: 50694238!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio anAccount anotherPortfolio yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	anotherPortfolio addReceptiveAccount: anAccount.
	anotherPortfolio addPortfolio: portfolio.
	yetAnotherPortfolio addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:44' prior: 50692310!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	| portfolio account secondAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: secondAccount.
	
	portfolio addReceptiveAccount: account.
	portfolio addReceptiveAccount: secondAccount.
	
	self assert: 600 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:52' prior: 50694280!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anotherAccount.
	
	portfolio addReceptiveAccount: account.
	portfolio addReceptiveAccount: anotherAccount.
	
	self assert: 600 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:07' prior: 50692341!
test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt
	
	| portfolio anotherPortfolio aPortfolioInOtherPortfolio account|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	aPortfolioInOtherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:20' prior: 50694318!
test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio account|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:34' prior: 50692360!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio secondPortfolioToAdd firstAccount secondAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	secondPortfolioToAdd := Portfolio new.
	
	Deposit register: 450 on: firstAccount.
	Deposit register: 50 on: secondAccount.
	
	anotherPortfolio addReceptiveAccount: firstAccount.
	secondPortfolioToAdd addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:42' prior: 50694356!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 450 on: firstAccount.
	Deposit register: 50 on: secondAccount.
	
	anotherPortfolio addReceptiveAccount: firstAccount.
	yetAnotherPortfolio addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: yetAnotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:46' prior: 50694381!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio account secondAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 450 on: account.
	Deposit register: 50 on: secondAccount.
	
	anotherPortfolio addReceptiveAccount: account.
	yetAnotherPortfolio addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: yetAnotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:55' prior: 50694406!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio account anotherAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 450 on: account.
	Deposit register: 50 on: anotherAccount.
	
	anotherPortfolio addReceptiveAccount: account.
	yetAnotherPortfolio addReceptiveAccount: anotherAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: yetAnotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:32:28' prior: 50692385!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	| portfolio anotherPortfolio account transaction|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 500 on: account. 
	
	anotherPortfolio addReceptiveAccount: account .
	portfolio addPortfolio: anotherPortfolio.
	
	self assert: (portfolio hasRegistered: transaction).
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:32:54' prior: 50692329!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	| portfolio  account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	transaction := Deposit register: 5 on: account .
	
	self assert: ( portfolio hasRegistered: transaction)
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:04' prior: 50692411!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	| portfolio anOrderedCollection account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.
	transaction := Deposit register: 10 on: account.
	
	
	anOrderedCollection add: transaction.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:17' prior: 50692428!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	| portfolio anOrderedCollection anotherPortfolio account aTransaction|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	aTransaction := Deposit register: 10 on: account.
	
	anOrderedCollection add: aTransaction.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:20' prior: 50694502!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	| portfolio anOrderedCollection anotherPortfolio account transaction|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 10 on: account.
	
	anOrderedCollection add: transaction.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:26' prior: 50693535!
test12PortfolioCantAddAlreadyAddedAccount
	
	| portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:33' prior: 50693517!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio account aParentPortfolio|
	
	portfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:42' prior: 50694556!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio account anotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	
	
	self should: [anotherPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:18' prior: 50693672!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio1 anotherPortfolio anAccount aParentPortfolio|
	
	portfolio1 := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: anotherPortfolio.
	aParentPortfolio addPortfolio: portfolio1.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:23' prior: 50694592!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anotherPortfolio anAccount aParentPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: anotherPortfolio.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:27' prior: 50694613!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anotherPortfolio account aParentPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	aParentPortfolio addPortfolio: anotherPortfolio.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:38' prior: 50694634!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anotherPortfolio account yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	yetAnotherPortfolio addPortfolio: anotherPortfolio.
	yetAnotherPortfolio addPortfolio: portfolio.
	
	
	self should: [yetAnotherPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:56' prior: 50694259!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio account anotherPortfolio yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	anotherPortfolio addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	yetAnotherPortfolio addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:35:03' prior: 50693714!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio account aParentPortfolio1 aParentPortfolio2|
	
	portfolio := Portfolio new.
	aParentPortfolio1 := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	aParentPortfolio2 addReceptiveAccount: account.
	aParentPortfolio1 addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: aParentPortfolio1.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:10' prior: 50694697!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio account anotherPortfolio aParentPortfolio2|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	aParentPortfolio2 addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: anotherPortfolio.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:15' prior: 50694718!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio account anotherPortfolio yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	yetAnotherPortfolio addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	yetAnotherPortfolio addPortfolio: anotherPortfolio.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:33' prior: 50692615!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	| portfolio  anotherPortfolio yetAnotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	
	portfolio addPortfolio: yetAnotherPortfolio .
	anotherPortfolio addPortfolio: yetAnotherPortfolio .
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:43' prior: 50692633!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	| portfolio  anotherPortfolio yetAnotherPortfolio anotherChildPortfolio yetAnotherChildPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	yetAnotherChildPortfolio := Portfolio new.
	
	portfolio addPortfolio: yetAnotherChildPortfolio .
	portfolio addPortfolio: yetAnotherPortfolio .
	anotherPortfolio addPortfolio: yetAnotherPortfolio .
	anotherPortfolio addPortfolio: anotherChildPortfolio .
	
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:38:01' prior: 50694779!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	| portfolio  anotherPortfolio aChildPortfolio anotherChildPortfolio yetAnotherChildPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aChildPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	yetAnotherChildPortfolio := Portfolio new.
	
	portfolio addPortfolio: yetAnotherChildPortfolio .
	portfolio addPortfolio: aChildPortfolio .
	anotherPortfolio addPortfolio: aChildPortfolio .
	anotherPortfolio addPortfolio: anotherChildPortfolio .
	
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'p1 p2 p3 p4 p5 a1 a2 a3 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 17:41:33'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'p1 p2 p3 p4 p5 a1 a2 a3 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:41:38' prior: 50692278!
test01PortfolioHasZeroAsBalanceWhenCreated 

	| portfolio |
	
	p1 := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:41:46' prior: 50694844!
test01PortfolioHasZeroAsBalanceWhenCreated 

	
	p1 := Portfolio new.

	self assert: 0 equals: p1 balance.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:42:09' prior: 50692285!
test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 50 on: a1.
	
	p1 addReceptiveAccount: a1.

	self assert: 50 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:43:06' prior: 50692297!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	p1 addReceptiveAccount: a1.
	
	self assert: 500 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:43:13' prior: 50694870!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	p1 addReceptiveAccount: a1.
	
	self assert: 500 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:44:47' prior: 50694299!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	p1 addReceptiveAccount: a1.
	p1 addReceptiveAccount: a2.
	
	self assert: 600 equals: p1 balance.
	
! !

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:44:52'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:44:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:45:49' prior: 50694472!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	t := Deposit register: 5 on: a1 .
	
	self assert: ( p1 hasRegistered: t)
	
! !

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:45:56'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:46:49' prior: 50694430!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	p3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	p2 addReceptiveAccount: a1.
	p3 addReceptiveAccount: a2.
	
	p1 addPortfolio: p2.
	p1 addPortfolio: p3.
	
	self assert: 500 equals: p1 balance.
	
! !

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:47:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:47:44' prior: 50694455!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 500 on: a1. 
	
	p2 addReceptiveAccount: a1 .
	p1 addPortfolio: p2.
	
	self assert: (p1 hasRegistered: t).
	
! !

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:47:50'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:47:51'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 17:48:14'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'p1 p2 p3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:48:12' prior: 50692401!
test09PortfolioHasNoTransactionsWhenCreated
	
	
	
	p1 := Portfolio new.
	oc := OrderedCollection new.
	
	
	self assert: oc equals: p1 transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:49:36' prior: 50694485!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	oc := OrderedCollection new.
	t := Deposit register: 10 on: a1.
	
	
	oc add: t.
	p1 addReceptiveAccount: a1.
	
	
	self assert: oc equals: p1 transactions .
	
! !

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:49:43'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:49:44'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:49:44'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:50:15' prior: 50694522!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	oc := OrderedCollection new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 10 on: a1.
	
	oc add: t.
	p2 addReceptiveAccount: a1.
	p1 addPortfolio: p2.
	
	
	self assert: oc equals: p1 transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:52:16' prior: 50694542!
test12PortfolioCantAddAlreadyAddedAccount
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	
	
	self should: [p1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:52:42' prior: 50694574!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	p2 addPortfolio: p1.
	
	
	self should: [p2 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:52:47'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:53:21' prior: 50694655!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	p3 addPortfolio: p2.
	p3 addPortfolio: p1.
	
	
	self should: [p3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:53:29'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:53:30'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:54:04' prior: 50694676!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p2 addReceptiveAccount: a1.
	p2 addPortfolio: p1.
	p3 addPortfolio: p1.
	
	
	self should: [p1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:54:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:54:35' prior: 50694739!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p3 addReceptiveAccount: a1.
	p2 addPortfolio: p1.
	p3 addPortfolio: p2.
	
	
	self should: [p1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:54:51' prior: 50692539!
test17PortfolioCantAddItselfToItsPortfolios
	
	
	
	p1 := Portfolio new.
	
	self should: [ p1 addPortfolio: p1 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:55:06' prior: 50692549!
test18PortfolioCantAddRepeatedPortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p1 addPortfolio: p2 .
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:55:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:55:30' prior: 50692562!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	p1 addPortfolio: p2 .
	p2 addPortfolio: p3 .
	
	self should: [ p1 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:55:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:56:03' prior: 50692580!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	p1 addPortfolio: p2 .
	p1 addPortfolio: p3 .
	
	self should: [ p2 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:56:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:56:30' prior: 50693938!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1 .
	p2 addReceptiveAccount: a1 .
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:56:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:56:56' prior: 50694760!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	p1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:57:01'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:57:02'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:57:02'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:57:02'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:57:02'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:57:02'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:57:02'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:57:42' prior: 50694805!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	p1 addPortfolio: p5 .
	p1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:57:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:58:29' prior: 50692658!
test24
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	p1 addPortfolio: p5 .
	p5 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 17:58:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 17:58:36'!
PASSED!

!methodRemoval: PortfolioTest #xxx stamp: 'Sof D 10/18/2023 17:58:42'!
xxx
	
	| portfolio anotherPortfolio yetAnotherPortfolio  anAccount |
	
	"portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	anotherPortfolio addReceptiveAccount: anAccount .
	
	portfolio addPortfolio: yetAnotherPortfolio.
	portfolio addPortfolio: anotherPortfolio .
	
	self should: [ yetAnotherPortfolio addReceptiveAccount: anAccount . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	"
!
!PortfolioTest methodsFor: 'nil' stamp: 'Sof D 10/18/2023 17:59:54' overrides: 16961394!
setUp

	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:06' prior: 50696676 overrides: 16961394!
setUp

	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:00:33'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 p2 p3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695365!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	oc := OrderedCollection new.
	t := Deposit register: 10 on: a1.
	
	
	oc add: t.
	portfolio1 addReceptiveAccount: a1.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50696091!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p2 .
	portfolio1 addPortfolio: p3 .
	
	self should: [ p2 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695357!
test09PortfolioHasNoTransactionsWhenCreated
	
	
	
	portfolio1 := Portfolio new.
	oc := OrderedCollection new.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50696316!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50694894!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	portfolio1 addReceptiveAccount: a1.
	portfolio1 addReceptiveAccount: a2.
	
	self assert: 600 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50696203!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1 .
	p2 addReceptiveAccount: a1 .
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695844!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p3 addReceptiveAccount: a1.
	p2 addPortfolio: portfolio1.
	p3 addPortfolio: p2.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50696686 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50694859!
test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 50 on: a1.
	
	portfolio1 addReceptiveAccount: a1.

	self assert: 50 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695869!
test18PortfolioCantAddRepeatedPortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	portfolio1 addPortfolio: p2 .
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695501!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	p2 addPortfolio: portfolio1.
	
	
	self should: [p2 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50696429!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695729!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p2 addReceptiveAccount: a1.
	p2 addPortfolio: portfolio1.
	p3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695859!
test17PortfolioCantAddItselfToItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	
	self should: [ portfolio1 addPortfolio: portfolio1 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695476!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	oc := OrderedCollection new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 10 on: a1.
	
	oc add: t.
	p2 addReceptiveAccount: a1.
	portfolio1 addPortfolio: p2.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695010!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	t := Deposit register: 5 on: a1 .
	
	self assert: ( portfolio1 hasRegistered: t)
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695489!
test12PortfolioCantAddAlreadyAddedAccount
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695979!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p2 .
	p2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50694852!
test01PortfolioHasZeroAsBalanceWhenCreated 

	
	portfolio1 := Portfolio new.

	self assert: 0 equals: portfolio1 balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50695614!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	p3 addPortfolio: p2.
	p3 addPortfolio: portfolio1.
	
	
	self should: [p3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50694882!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	portfolio1 addReceptiveAccount: a1.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50696545!
test24
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50695237!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 500 on: a1. 
	
	p2 addReceptiveAccount: a1 .
	portfolio1 addPortfolio: p2.
	
	self assert: (portfolio1 hasRegistered: t).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50695120!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	p3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	p2 addReceptiveAccount: a1.
	p3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: p2.
	portfolio1 addPortfolio: p3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:00:47'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 p3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50697022!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	p3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	portfolio2 addReceptiveAccount: a1.
	p3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: p3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696873!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio2 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	p3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696840!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	
	
	self should: [portfolio2 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696993!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: p3 .
	portfolio2 addPortfolio: p3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50697009!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 500 on: a1. 
	
	portfolio2 addReceptiveAccount: a1 .
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: t).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696741!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p3 .
	portfolio2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696773!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1 .
	portfolio2 addReceptiveAccount: a1 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696901!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	oc := OrderedCollection new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 10 on: a1.
	
	oc add: t.
	portfolio2 addReceptiveAccount: a1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696963!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	p3 addPortfolio: portfolio2.
	p3 addPortfolio: portfolio1.
	
	
	self should: [p3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696805 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696828!
test18PortfolioCantAddRepeatedPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addPortfolio: portfolio2 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696941!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696718!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio1 addPortfolio: p3 .
	
	self should: [ portfolio2 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696855!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: p3 .
	portfolio2 addPortfolio: p3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50696788!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p3 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	p3 addPortfolio: portfolio2.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:00:56'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697102!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697221!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio2 addPortfolio: portfolio3 .
	
	self should: [ portfolio1 addPortfolio: portfolio3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697236!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio1 addPortfolio: portfolio3 .
	
	self should: [ portfolio2 addPortfolio: portfolio3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697179!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	portfolio3 addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697270!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio3 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697197 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697068!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio2 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697133!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697251!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50697049!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	portfolio3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	portfolio2 addReceptiveAccount: a1.
	portfolio3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:01:05'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:05' prior: 50697384 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:05' prior: 50697429!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:05' prior: 50697297!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:01:12'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:12' prior: 50697479 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:12' prior: 50697490!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio5 .
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:12' prior: 50697510!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio5 .
	portfolio5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:01:21'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50697449!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	portfolio3 := Portfolio new.
	
	Deposit register: 450 on: account1.
	Deposit register: 50 on: a2.
	
	portfolio2 addReceptiveAccount: account1.
	portfolio3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50697395!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio2 addReceptiveAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50697086!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	
	
	self should: [portfolio2 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50696916!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	t := Deposit register: 5 on: account1 .
	
	self assert: ( portfolio1 hasRegistered: t)
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50697119!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	t := Deposit register: 500 on: account1. 
	
	portfolio2 addReceptiveAccount: account1 .
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: t).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50696816!
test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	portfolio1 addReceptiveAccount: account1.

	self assert: 50 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50696928!
test12PortfolioCantAddAlreadyAddedAccount
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	
	
	self should: [portfolio1 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50696705!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	oc := OrderedCollection new.
	t := Deposit register: 10 on: account1.
	
	
	oc add: t.
	portfolio1 addReceptiveAccount: account1.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50697164!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	oc := OrderedCollection new.
	account1 := ReceptiveAccount new.
	t := Deposit register: 10 on: account1.
	
	oc add: t.
	portfolio2 addReceptiveAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50697148!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1 .
	portfolio2 addReceptiveAccount: account1 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50696980!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 520 on: account1.
	Withdraw register: 20 on: account1.
	portfolio1 addReceptiveAccount: account1.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50696756!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 520 on: account1.
	Withdraw register: 20 on: account1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio1 addReceptiveAccount: a2.
	
	self assert: 600 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:22' prior: 50697347!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio3 addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio3 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:22' prior: 50697538 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:22' prior: 50697365!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio3 addReceptiveAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	
	
	self should: [portfolio1 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:01:28'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:28' prior: 50697769!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 520 on: account1.
	Withdraw register: 20 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account2.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio1 addReceptiveAccount: account2.
	
	self assert: 600 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:28' prior: 50697806 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := 	ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:28' prior: 50697600!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio3 := Portfolio new.
	
	Deposit register: 450 on: account1.
	Deposit register: 50 on: account2.
	
	portfolio2 addReceptiveAccount: account1.
	portfolio3 addReceptiveAccount: account2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:01:40'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 a3 t orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50697708!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	orderedCollection := OrderedCollection new.
	t := Deposit register: 10 on: account1.
	
	
	orderedCollection add: t.
	portfolio1 addReceptiveAccount: account1.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50696732!
test09PortfolioHasNoTransactionsWhenCreated
	
	
	
	portfolio1 := Portfolio new.
	orderedCollection := OrderedCollection new.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50697866 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := 	ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	orderedCollection := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50697722!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	orderedCollection := OrderedCollection new.
	account1 := ReceptiveAccount new.
	t := Deposit register: 10 on: account1.
	
	orderedCollection add: t.
	portfolio2 addReceptiveAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 t orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:01:51'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 t orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:02:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 transaction orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50697910!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	orderedCollection := OrderedCollection new.
	transaction := Deposit register: 10 on: account1.
	
	
	orderedCollection add: transaction.
	portfolio1 addReceptiveAccount: account1.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50697667!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	transaction := Deposit register: 500 on: account1. 
	
	portfolio2 addReceptiveAccount: account1 .
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: transaction).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50697655!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	transaction := Deposit register: 5 on: account1 .
	
	self assert: ( portfolio1 hasRegistered: transaction)
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50697948!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	orderedCollection := OrderedCollection new.
	account1 := ReceptiveAccount new.
	transaction := Deposit register: 10 on: account1.
	
	orderedCollection add: transaction.
	portfolio2 addReceptiveAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:02:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:02:32'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:04:14' prior: 50693257!
canAddPortfolioToPortfolio: aPortfolioToRegister


	receptiveAccounts do: [:aAccount | aPortfolioToRegister canAddAccountToPortfolio: aAccount].
	
	(parentPortfolio isEmpty) 
		ifTrue:[ self assetIsIncludedInPortfolioCollection: aPortfolioToRegister. 
			self iAmInPortfolio: aPortfolioToRegister.
				"este ciclo esta muy cerca del root 'emoji de asco' "]
		ifFalse: [ parentPortfolio do: [ : aPortfolio | aPortfolio canAddPortfolioToPortfolio: aPortfolioToRegister ]]
		

! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:04:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:04:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:04:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:04:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:04:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:04:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:04:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:04:17'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:04:43' prior: 50693103!
iAmInPortfolio: aPortfolioToRegister

	aPortfolioToRegister assetIsIncludedInPortfolioCollection: self.
	portfolios do: [:aPortfolio | aPortfolioToRegister iAmInPortfolio: aPortfolio]! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:04:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:04:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:04:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:04:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:04:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:04:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:04:48'!
PASSED!

!methodRemoval: Portfolio #portfolioIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 18:05:01'!
portfolioIsIncludedInPortfolioOrItsPortfolios: aPortfolioToRegister

	(aPortfolioToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].
	
	(portfolios do: [:aPortfolio | aPortfolio portfolioIsIncludedInPortfolioOrItsPortfolios: aPortfolioToRegister])
			!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:05:14'!
PASSED!
!FinancialAsset methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:05:36'!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	self subclassResponsibility ! !

!methodRemoval: Portfolio #accountIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 18:06:03'!
accountIsIncludedInPortfolioOrItsPortfolios: aReceptiveAccountToRegister

	^(receptiveAccounts includes: aReceptiveAccountToRegister) or: (portfolios anySatisfy: [:aPortfolio | aPortfolio accountIsIncludedInPortfolioOrItsPortfolios: aReceptiveAccountToRegister])
			!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:06:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:06:07'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:06:26'!
canAddFinancialAssetToPortfolio: aFinancialAssetToRegister

	! !

!methodRemoval: Portfolio #canAddFinancialAsset: stamp: 'Sof D 10/18/2023 18:06:26'!
canAddFinancialAsset: aFinancialAssetToRegister

	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:07:26' prior: 50693185!
addFinancialAsset: aFinancialAssetToRegister

	self canAddFinancialAssetToPortfolio: aFinancialAssetToRegister .
	financialAssets add: aFinancialAssetToRegister ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:27:35' prior: 50698590!
canAddFinancialAssetToPortfolio: aFinancialAssetToRegister

	portfolioState canAddAsset: aFinancialAssetToRegister toPortfolio: self! !
!PortfolioState methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:27:58'!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo
	self subclassResponsibility ! !

!methodRemoval: PortfolioState #isRootPortfolio stamp: 'Sof D 10/18/2023 18:28:02'!
isRootPortfolio
	self subclassResponsibility !

!methodRemoval: NonRootPortfolio #isRootPortfolio stamp: 'Sof D 10/18/2023 18:28:04'!
isRootPortfolio
	^false!
!NonRootPortfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:28:17' overrides: 50698616!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo
! !
!RootPortfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:28:24' overrides: 50698616!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:30:54' prior: 50698636 overrides: 50698616!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:33:20' prior: 50694076!
canAddAccountToPortfolio: aReceptiveAccountToRegister

	^(parentPortfolio isEmpty) 
		ifTrue: 
		[
			(self assetIsIncludedInPortfolioCollection: aReceptiveAccountToRegister)
			]
		ifFalse: 
		[
			(parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddAccountToPortfolio: aReceptiveAccountToRegister ]) 
			]! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:33:21'!
PASSED!
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 18:36:15'!
isFinancialAssetInAPortfolioInCollection: aFinancialAssetToRegister
	parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddFinancialAssetToPortfolio: aFinancialAssetToRegister ]! !
!NonRootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:36:29' prior: 50698630 overrides: 50698616!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo isFinancialAssetInAPortfolioInCollection: aFinancialAssetToRegister ! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:37:17' prior: 50692998!
addReceptiveAccount: aReceptiveAccountToRegister
	"self canAddAccountToPortfolio: aReceptiveAccountToRegister.
	receptiveAccounts add: aReceptiveAccountToRegister.
	financialAssets add: aReceptiveAccountToRegister."
	
	self addFinancialAsset: aReceptiveAccountToRegister ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:37:18'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:37:18'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:37:18'!
FAILURE!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:37:32'!
FAILURE!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:37:32'!
FAILURE!

!methodRemoval: RootPortfolio #isRootPortfolio stamp: 'Sof D 10/18/2023 18:39:00'!
isRootPortfolio
	^true!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:39:55' prior: 50698779!
addReceptiveAccount: aReceptiveAccountToRegister
	self canAddAccountToPortfolio: aReceptiveAccountToRegister.
	receptiveAccounts add: aReceptiveAccountToRegister.
	financialAssets add: aReceptiveAccountToRegister.
	
	! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:39:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:39:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:39:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:39:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:39:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:39:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:39:56'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:40:04' prior: 50698902!
addReceptiveAccount: aReceptiveAccountToRegister
	"self canAddAccountToPortfolio: aReceptiveAccountToRegister.
	receptiveAccounts add: aReceptiveAccountToRegister.
	financialAssets add: aReceptiveAccountToRegister."
	
	self addFinancialAsset: aReceptiveAccountToRegister ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:40:06'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:40:06'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:40:06'!
FAILURE!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:40:13'!
FAILURE!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:40:13'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:40:16'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:40:18'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:40:21'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:40:41'!
FAILURE!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:40:41'!
FAILURE!

----STARTUP---- (18 October 2023 18:41:23) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!

!ReceptiveAccount class methodsFor: 'no messages' stamp: 'Sof D 10/18/2023 17:24:08'!
alreadyInPortfolioErrorDescription
	^'Account is already in portfolio or its portfolios'! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:18' prior: 50692448!
test12PortfolioCantAddAlreadyAddedAccount
	
	| portfolio anAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: ReceptiveAccount alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:24' prior: 50692461!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anAccount aParentPortfolio|
	
	portfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: ReceptiveAccount alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:32' prior: 50699270!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anAccount aParentPortfolio|
	
	portfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:24:40' prior: 50699256!
test12PortfolioCantAddAlreadyAddedAccount
	
	| portfolio anAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!methodRemoval: ReceptiveAccount class #alreadyInPortfolioErrorDescription stamp: 'Sof D 10/18/2023 18:41:43'!
alreadyInPortfolioErrorDescription
	^'Account is already in portfolio or its portfolios'!
!FinancialAsset class methodsFor: 'no messages' stamp: 'Sof D 10/18/2023 17:25:03'!
alreadyInPortfolioErrorDescription
	^'Account is already in portfolio or its portfolios'! !
!FinancialAsset class methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:25:09' prior: 50699326!
alreadyInPortfolioErrorDescription
	^'Asset is already in portfolio or its portfolios'! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:25:53' prior: 50692478!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio1 portfolio2 anAccount aParentPortfolio|
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: portfolio2.
	aParentPortfolio addPortfolio: portfolio1.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:25:59' prior: 50692498!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio anAccount aParentPortfolio1 aParentPortfolio2|
	
	portfolio := Portfolio new.
	aParentPortfolio1 := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aParentPortfolio1 addReceptiveAccount: anAccount.
	aParentPortfolio1 addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:26:03' prior: 50692518!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio anAccount aParentPortfolio1 aParentPortfolio2|
	
	portfolio := Portfolio new.
	aParentPortfolio1 := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aParentPortfolio2 addReceptiveAccount: anAccount.
	aParentPortfolio1 addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: aParentPortfolio1.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:26:28' prior: 50692598!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	| portfolio  anotherPortfolio account |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account .
	anotherPortfolio addReceptiveAccount: account .
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20'!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister])! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20'!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20' prior: 50693357!
canAddAccountToPortfolio: aReceptiveAccountToRegister

	^(parentPortfolio isEmpty) 
		ifTrue: 
		[
			(self assetIsIncludedInPortfolioCollection: aReceptiveAccountToRegister)
			]
		ifFalse: 
		[
			(parentPortfolio anySatisfy: [:aParentPortfolio | aParentPortfolio canAddAccountToPortfolio: aReceptiveAccountToRegister ]) ifTrue: [self error: self class alreadyInPortfolioErrorDescription].
			]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20' prior: 50693336!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 17:28:20' prior: 50699420!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister])! !

!methodRemoval: Portfolio #assetIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 18:41:44'!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	(financialAssets do: [:aPortfolio | aPortfolio assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister])!

!methodRemoval: ReceptiveAccount #assetIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 18:41:44'!
assetIsIncludedInPortfolioOrItsPortfolios: aFinancialAssetToRegister
	
	(aFinancialAssetToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].

	!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:14' prior: 50699360!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio anAccount anotherPortfolio aParentPortfolio2|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	anotherPortfolio addReceptiveAccount: anAccount.
	anotherPortfolio addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:23' prior: 50699504!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio anAccount anotherPortfolio yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	anotherPortfolio addReceptiveAccount: anAccount.
	anotherPortfolio addPortfolio: portfolio.
	yetAnotherPortfolio addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:44' prior: 50692310!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	| portfolio account secondAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: secondAccount.
	
	portfolio addReceptiveAccount: account.
	portfolio addReceptiveAccount: secondAccount.
	
	self assert: 600 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:30:52' prior: 50699546!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anotherAccount.
	
	portfolio addReceptiveAccount: account.
	portfolio addReceptiveAccount: anotherAccount.
	
	self assert: 600 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:07' prior: 50692341!
test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt
	
	| portfolio anotherPortfolio aPortfolioInOtherPortfolio account|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	aPortfolioInOtherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:20' prior: 50699584!
test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio account|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 520 on: account.
	Withdraw register: 20 on: account.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:34' prior: 50692360!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio secondPortfolioToAdd firstAccount secondAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	secondPortfolioToAdd := Portfolio new.
	
	Deposit register: 450 on: firstAccount.
	Deposit register: 50 on: secondAccount.
	
	anotherPortfolio addReceptiveAccount: firstAccount.
	secondPortfolioToAdd addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: secondPortfolioToAdd.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:42' prior: 50699622!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio firstAccount secondAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	firstAccount := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 450 on: firstAccount.
	Deposit register: 50 on: secondAccount.
	
	anotherPortfolio addReceptiveAccount: firstAccount.
	yetAnotherPortfolio addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: yetAnotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:46' prior: 50699647!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio account secondAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	secondAccount := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 450 on: account.
	Deposit register: 50 on: secondAccount.
	
	anotherPortfolio addReceptiveAccount: account.
	yetAnotherPortfolio addReceptiveAccount: secondAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: yetAnotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:31:55' prior: 50699672!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	| portfolio anotherPortfolio yetAnotherPortfolio account anotherAccount|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	yetAnotherPortfolio := Portfolio new.
	
	Deposit register: 450 on: account.
	Deposit register: 50 on: anotherAccount.
	
	anotherPortfolio addReceptiveAccount: account.
	yetAnotherPortfolio addReceptiveAccount: anotherAccount.
	
	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: yetAnotherPortfolio.
	
	self assert: 500 equals: portfolio balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:32:28' prior: 50692385!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	| portfolio anotherPortfolio account transaction|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 500 on: account. 
	
	anotherPortfolio addReceptiveAccount: account .
	portfolio addPortfolio: anotherPortfolio.
	
	self assert: (portfolio hasRegistered: transaction).
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:32:54' prior: 50692329!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	| portfolio  account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	transaction := Deposit register: 5 on: account .
	
	self assert: ( portfolio hasRegistered: transaction)
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:04' prior: 50692411!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	| portfolio anOrderedCollection account transaction|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anOrderedCollection := OrderedCollection new.
	transaction := Deposit register: 10 on: account.
	
	
	anOrderedCollection add: transaction.
	portfolio addReceptiveAccount: account.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:17' prior: 50692428!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	| portfolio anOrderedCollection anotherPortfolio account aTransaction|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	aTransaction := Deposit register: 10 on: account.
	
	anOrderedCollection add: aTransaction.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:20' prior: 50699768!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	| portfolio anOrderedCollection anotherPortfolio account transaction|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anOrderedCollection := OrderedCollection new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 10 on: account.
	
	anOrderedCollection add: transaction.
	anotherPortfolio addReceptiveAccount: account.
	portfolio addPortfolio: anotherPortfolio.
	
	
	self assert: anOrderedCollection equals: portfolio transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:26' prior: 50699306!
test12PortfolioCantAddAlreadyAddedAccount
	
	| portfolio account|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:33' prior: 50699288!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio account aParentPortfolio|
	
	portfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:33:42' prior: 50699822!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio account anotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	
	
	self should: [anotherPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:18' prior: 50699339!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio1 anotherPortfolio anAccount aParentPortfolio|
	
	portfolio1 := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: anotherPortfolio.
	aParentPortfolio addPortfolio: portfolio1.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:23' prior: 50699858!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anotherPortfolio anAccount aParentPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: anAccount.
	aParentPortfolio addPortfolio: anotherPortfolio.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: anAccount]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:27' prior: 50699879!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anotherPortfolio account aParentPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	aParentPortfolio addPortfolio: anotherPortfolio.
	aParentPortfolio addPortfolio: portfolio.
	
	
	self should: [aParentPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:38' prior: 50699900!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	| portfolio anotherPortfolio account yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addReceptiveAccount: account.
	yetAnotherPortfolio addPortfolio: anotherPortfolio.
	yetAnotherPortfolio addPortfolio: portfolio.
	
	
	self should: [yetAnotherPortfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:34:56' prior: 50699525!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	| portfolio account anotherPortfolio yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	anotherPortfolio addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	yetAnotherPortfolio addPortfolio: portfolio.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:35:03' prior: 50699381!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio account aParentPortfolio1 aParentPortfolio2|
	
	portfolio := Portfolio new.
	aParentPortfolio1 := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	aParentPortfolio2 addReceptiveAccount: account.
	aParentPortfolio1 addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: aParentPortfolio1.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:10' prior: 50699963!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio account anotherPortfolio aParentPortfolio2|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aParentPortfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	aParentPortfolio2 addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	aParentPortfolio2 addPortfolio: anotherPortfolio.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:15' prior: 50699984!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	| portfolio account anotherPortfolio yetAnotherPortfolio|
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	yetAnotherPortfolio addReceptiveAccount: account.
	anotherPortfolio addPortfolio: portfolio.
	yetAnotherPortfolio addPortfolio: anotherPortfolio.
	
	
	self should: [portfolio addReceptiveAccount: account]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:33' prior: 50692615!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	| portfolio  anotherPortfolio yetAnotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	
	portfolio addPortfolio: yetAnotherPortfolio .
	anotherPortfolio addPortfolio: yetAnotherPortfolio .
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:37:43' prior: 50692633!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	| portfolio  anotherPortfolio yetAnotherPortfolio anotherChildPortfolio yetAnotherChildPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	yetAnotherChildPortfolio := Portfolio new.
	
	portfolio addPortfolio: yetAnotherChildPortfolio .
	portfolio addPortfolio: yetAnotherPortfolio .
	anotherPortfolio addPortfolio: yetAnotherPortfolio .
	anotherPortfolio addPortfolio: anotherChildPortfolio .
	
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:38:01' prior: 50700045!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	| portfolio  anotherPortfolio aChildPortfolio anotherChildPortfolio yetAnotherChildPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	aChildPortfolio := Portfolio new.
	anotherChildPortfolio := Portfolio new.
	yetAnotherChildPortfolio := Portfolio new.
	
	portfolio addPortfolio: yetAnotherChildPortfolio .
	portfolio addPortfolio: aChildPortfolio .
	anotherPortfolio addPortfolio: aChildPortfolio .
	anotherPortfolio addPortfolio: anotherChildPortfolio .
	
	
	self should: [ portfolio addPortfolio: anotherPortfolio . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'p1 p2 p3 p4 p5 a1 a2 a3 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'p1 p2 p3 p4 p5 a1 a2 a3 t'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:41:38' prior: 50692278!
test01PortfolioHasZeroAsBalanceWhenCreated 

	| portfolio |
	
	p1 := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:41:46' prior: 50700114!
test01PortfolioHasZeroAsBalanceWhenCreated 

	
	p1 := Portfolio new.

	self assert: 0 equals: p1 balance.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:42:09' prior: 50692285!
test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 50 on: a1.
	
	p1 addReceptiveAccount: a1.

	self assert: 50 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:43:06' prior: 50692297!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	p1 addReceptiveAccount: a1.
	
	self assert: 500 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:43:13' prior: 50700140!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	p1 addReceptiveAccount: a1.
	
	self assert: 500 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:44:47' prior: 50699565!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	p1 addReceptiveAccount: a1.
	p1 addReceptiveAccount: a2.
	
	self assert: 600 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:45:49' prior: 50699738!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	t := Deposit register: 5 on: a1 .
	
	self assert: ( p1 hasRegistered: t)
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:46:49' prior: 50699696!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	p3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	p2 addReceptiveAccount: a1.
	p3 addReceptiveAccount: a2.
	
	p1 addPortfolio: p2.
	p1 addPortfolio: p3.
	
	self assert: 500 equals: p1 balance.
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:47:44' prior: 50699721!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 500 on: a1. 
	
	p2 addReceptiveAccount: a1 .
	p1 addPortfolio: p2.
	
	self assert: (p1 hasRegistered: t).
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'p1 p2 p3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:48:12' prior: 50692401!
test09PortfolioHasNoTransactionsWhenCreated
	
	
	
	p1 := Portfolio new.
	oc := OrderedCollection new.
	
	
	self assert: oc equals: p1 transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:49:36' prior: 50699751!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	oc := OrderedCollection new.
	t := Deposit register: 10 on: a1.
	
	
	oc add: t.
	p1 addReceptiveAccount: a1.
	
	
	self assert: oc equals: p1 transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:50:15' prior: 50699788!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	oc := OrderedCollection new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 10 on: a1.
	
	oc add: t.
	p2 addReceptiveAccount: a1.
	p1 addPortfolio: p2.
	
	
	self assert: oc equals: p1 transactions .
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:52:16' prior: 50699808!
test12PortfolioCantAddAlreadyAddedAccount
	
	
	
	p1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	
	
	self should: [p1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:52:42' prior: 50699840!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	p2 addPortfolio: p1.
	
	
	self should: [p2 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:53:21' prior: 50699921!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1.
	p3 addPortfolio: p2.
	p3 addPortfolio: p1.
	
	
	self should: [p3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:54:04' prior: 50699942!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p2 addReceptiveAccount: a1.
	p2 addPortfolio: p1.
	p3 addPortfolio: p1.
	
	
	self should: [p1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:54:35' prior: 50700005!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p3 addReceptiveAccount: a1.
	p2 addPortfolio: p1.
	p3 addPortfolio: p2.
	
	
	self should: [p1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:54:51' prior: 50692539!
test17PortfolioCantAddItselfToItsPortfolios
	
	
	
	p1 := Portfolio new.
	
	self should: [ p1 addPortfolio: p1 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:55:06' prior: 50692549!
test18PortfolioCantAddRepeatedPortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p1 addPortfolio: p2 .
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:55:30' prior: 50692562!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	p1 addPortfolio: p2 .
	p2 addPortfolio: p3 .
	
	self should: [ p1 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:56:03' prior: 50692580!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	p1 addPortfolio: p2 .
	p1 addPortfolio: p3 .
	
	self should: [ p2 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:56:30' prior: 50699402!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p1 addReceptiveAccount: a1 .
	p2 addReceptiveAccount: a1 .
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:56:56' prior: 50700026!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	p1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:57:42' prior: 50700071!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	p1 addPortfolio: p5 .
	p1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 17:58:29' prior: 50692658!
test24
	
	
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	p1 addPortfolio: p5 .
	p5 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ p1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!methodRemoval: PortfolioTest #xxx stamp: 'Sof D 10/18/2023 18:41:44'!
xxx
	
	| portfolio anotherPortfolio yetAnotherPortfolio  anAccount |
	
	"portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	yetAnotherPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	anotherPortfolio addReceptiveAccount: anAccount .
	
	portfolio addPortfolio: yetAnotherPortfolio.
	portfolio addPortfolio: anotherPortfolio .
	
	self should: [ yetAnotherPortfolio addReceptiveAccount: anAccount . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	"
!
!PortfolioTest methodsFor: 'nil' stamp: 'Sof D 10/18/2023 17:59:54' overrides: 16961394!
setUp

	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:06' prior: 50700458 overrides: 16961394!
setUp

	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 p2 p3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700237!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	oc := OrderedCollection new.
	t := Deposit register: 10 on: a1.
	
	
	oc add: t.
	portfolio1 addReceptiveAccount: a1.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700367!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p2 .
	portfolio1 addPortfolio: p3 .
	
	self should: [ p2 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700229!
test09PortfolioHasNoTransactionsWhenCreated
	
	
	
	portfolio1 := Portfolio new.
	oc := OrderedCollection new.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700394!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700164!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	portfolio1 addReceptiveAccount: a1.
	portfolio1 addReceptiveAccount: a2.
	
	self assert: 600 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700380!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1 .
	p2 addReceptiveAccount: a1 .
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700318!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p3 addReceptiveAccount: a1.
	p2 addPortfolio: portfolio1.
	p3 addPortfolio: p2.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700468 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700129!
test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 50 on: a1.
	
	portfolio1 addReceptiveAccount: a1.

	self assert: 50 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700343!
test18PortfolioCantAddRepeatedPortfolio
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	portfolio1 addPortfolio: p2 .
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700274!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	p2 addPortfolio: portfolio1.
	
	
	self should: [p2 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700408!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700303!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p2 addReceptiveAccount: a1.
	p2 addPortfolio: portfolio1.
	p3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700333!
test17PortfolioCantAddItselfToItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	
	self should: [ portfolio1 addPortfolio: portfolio1 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700249!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	oc := OrderedCollection new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 10 on: a1.
	
	oc add: t.
	p2 addReceptiveAccount: a1.
	portfolio1 addPortfolio: p2.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700180!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	t := Deposit register: 5 on: a1 .
	
	self assert: ( portfolio1 hasRegistered: t)
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700262!
test12PortfolioCantAddAlreadyAddedAccount
	
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700354!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p2 .
	p2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700122!
test01PortfolioHasZeroAsBalanceWhenCreated 

	
	portfolio1 := Portfolio new.

	self assert: 0 equals: portfolio1 balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:33' prior: 50700288!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	p3 addPortfolio: p2.
	p3 addPortfolio: portfolio1.
	
	
	self should: [p3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50700152!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	portfolio1 := Portfolio new.
	a1 := ReceptiveAccount new.
	Deposit register: 520 on: a1.
	Withdraw register: 20 on: a1.
	portfolio1 addReceptiveAccount: a1.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50700424!
test24
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: p3 .
	p2 addPortfolio: p3 .
	p2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: p2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50700208!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 500 on: a1. 
	
	p2 addReceptiveAccount: a1 .
	portfolio1 addPortfolio: p2.
	
	self assert: (portfolio1 hasRegistered: t).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:34' prior: 50700191!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	p2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	p3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	p2 addReceptiveAccount: a1.
	p3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: p2.
	portfolio1 addPortfolio: p3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 p3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700804!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	p3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	portfolio2 addReceptiveAccount: a1.
	p3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: p3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700655!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio2 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	p3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700622!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	
	
	self should: [portfolio2 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700775!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: p3 .
	portfolio2 addPortfolio: p3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700791!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 500 on: a1. 
	
	portfolio2 addReceptiveAccount: a1 .
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: t).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700523!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: p3 .
	portfolio2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700555!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1 .
	portfolio2 addReceptiveAccount: a1 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700683!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	oc := OrderedCollection new.
	a1 := ReceptiveAccount new.
	t := Deposit register: 10 on: a1.
	
	oc add: t.
	portfolio2 addReceptiveAccount: a1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700745!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	p3 addPortfolio: portfolio2.
	p3 addPortfolio: portfolio1.
	
	
	self should: [p3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700587 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700610!
test18PortfolioCantAddRepeatedPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addPortfolio: portfolio2 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700723!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio2 addPortfolio: p3 .
	
	self should: [ portfolio1 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700500!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio1 addPortfolio: p3 .
	
	self should: [ portfolio2 addPortfolio: p3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700637!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: p3 .
	portfolio2 addPortfolio: p3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:47' prior: 50700570!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	p3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	p3 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	p3 addPortfolio: portfolio2.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 p4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50700884!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50701003!
test19PortfolioCantAddPortfolioAlreadyInItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio2 addPortfolio: portfolio3 .
	
	self should: [ portfolio1 addPortfolio: portfolio3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50701018!
test20PortfolioCantAddPortfolioThatsInItsParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio2 .
	portfolio1 addPortfolio: portfolio3 .
	
	self should: [ portfolio2 addPortfolio: portfolio3 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50700961!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: a1.
	portfolio3 addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio3 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50701052!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio3 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50700979 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50700850!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	a1 := ReceptiveAccount new.
	
	portfolio2 addReceptiveAccount: a1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: a1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50700915!
test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50701033!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: p4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:00:56' prior: 50700831!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	a1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	portfolio3 := Portfolio new.
	
	Deposit register: 450 on: a1.
	Deposit register: 50 on: a2.
	
	portfolio2 addReceptiveAccount: a1.
	portfolio3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 p5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:05' prior: 50701166 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	p5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:05' prior: 50701211!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:05' prior: 50701079!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	p5 := Portfolio new.
	
	portfolio1 addPortfolio: p5 .
	p5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 a1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:12' prior: 50701261 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	a1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:12' prior: 50701272!
test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio5 .
	portfolio1 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:12' prior: 50701292!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio5 .
	portfolio5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 a2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50701231!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	portfolio3 := Portfolio new.
	
	Deposit register: 450 on: account1.
	Deposit register: 50 on: a2.
	
	portfolio2 addReceptiveAccount: account1.
	portfolio3 addReceptiveAccount: a2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50701177!
test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio2 addReceptiveAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio1 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700868!
test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	
	
	self should: [portfolio2 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700698!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	t := Deposit register: 5 on: account1 .
	
	self assert: ( portfolio1 hasRegistered: t)
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700901!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	t := Deposit register: 500 on: account1. 
	
	portfolio2 addReceptiveAccount: account1 .
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: t).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700598!
test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	portfolio1 addReceptiveAccount: account1.

	self assert: 50 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700710!
test12PortfolioCantAddAlreadyAddedAccount
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	
	
	self should: [portfolio1 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700487!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	oc := OrderedCollection new.
	t := Deposit register: 10 on: account1.
	
	
	oc add: t.
	portfolio1 addReceptiveAccount: account1.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700946!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	oc := OrderedCollection new.
	account1 := ReceptiveAccount new.
	t := Deposit register: 10 on: account1.
	
	oc add: t.
	portfolio2 addReceptiveAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: oc equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700930!
test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1 .
	portfolio2 addReceptiveAccount: account1 .
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700762!
test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 520 on: account1.
	Withdraw register: 20 on: account1.
	portfolio1 addReceptiveAccount: account1.
	
	self assert: 500 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:21' prior: 50700538!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 520 on: account1.
	Withdraw register: 20 on: account1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio1 addReceptiveAccount: a2.
	
	self assert: 600 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:22' prior: 50701129!
test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio3 addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio1.
	
	
	self should: [portfolio3 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:22' prior: 50701320 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := 	ReceptiveAccount new.
	a2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:22' prior: 50701147!
test16PortfolioCantAddAccountThatsIncludedInParentPortfolio
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio3 addReceptiveAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	
	
	self should: [portfolio1 addReceptiveAccount: account1]
	raise: Error
	withMessageText: FinancialAsset alreadyInPortfolioErrorDescription 
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 a3 t oc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:28' prior: 50701551!
test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 520 on: account1.
	Withdraw register: 20 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account2.
	
	portfolio1 addReceptiveAccount: account1.
	portfolio1 addReceptiveAccount: account2.
	
	self assert: 600 equals: portfolio1 balance.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:28' prior: 50701588 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := 	ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	oc := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:28' prior: 50701382!
test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio3 := Portfolio new.
	
	Deposit register: 450 on: account1.
	Deposit register: 50 on: account2.
	
	portfolio2 addReceptiveAccount: account1.
	portfolio3 addReceptiveAccount: account2.
	
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: 500 equals: portfolio1 balance.
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:46'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 a3 t orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50701490!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	orderedCollection := OrderedCollection new.
	t := Deposit register: 10 on: account1.
	
	
	orderedCollection add: t.
	portfolio1 addReceptiveAccount: account1.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50700514!
test09PortfolioHasNoTransactionsWhenCreated
	
	
	
	portfolio1 := Portfolio new.
	orderedCollection := OrderedCollection new.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50701648 overrides: 16961394!
setUp

	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account1 := 	ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	orderedCollection := 	OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:01:40' prior: 50701504!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	orderedCollection := OrderedCollection new.
	account1 := ReceptiveAccount new.
	t := Deposit register: 10 on: account1.
	
	orderedCollection add: t.
	portfolio2 addReceptiveAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:46'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 t orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:46'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 t orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 18:41:46'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account1 account2 transaction orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50701692!
test10PortfolioKnowsTransactionsOfAccountInIt
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	orderedCollection := OrderedCollection new.
	transaction := Deposit register: 10 on: account1.
	
	
	orderedCollection add: transaction.
	portfolio1 addReceptiveAccount: account1.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50701449!
test08PortfolioHasTransactionFromPortfoliosInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	transaction := Deposit register: 500 on: account1. 
	
	portfolio2 addReceptiveAccount: account1 .
	portfolio1 addPortfolio: portfolio2.
	
	self assert: (portfolio1 hasRegistered: transaction).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50701437!
test05PortfolioHasTransactionFromAccountInItRegistered
	
	
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 addReceptiveAccount: account1.
	transaction := Deposit register: 5 on: account1 .
	
	self assert: ( portfolio1 hasRegistered: transaction)
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:02:26' prior: 50701730!
test11PortfolioKnowsTransactionsOfPortfoliosInIt
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	orderedCollection := OrderedCollection new.
	account1 := ReceptiveAccount new.
	transaction := Deposit register: 10 on: account1.
	
	orderedCollection add: transaction.
	portfolio2 addReceptiveAccount: account1.
	portfolio1 addPortfolio: portfolio2.
	
	
	self assert: orderedCollection equals: portfolio1 transactions .
	
! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:04:14' prior: 50693257!
canAddPortfolioToPortfolio: aPortfolioToRegister


	receptiveAccounts do: [:aAccount | aPortfolioToRegister canAddAccountToPortfolio: aAccount].
	
	(parentPortfolio isEmpty) 
		ifTrue:[ self assetIsIncludedInPortfolioCollection: aPortfolioToRegister. 
			self iAmInPortfolio: aPortfolioToRegister.
				"este ciclo esta muy cerca del root 'emoji de asco' "]
		ifFalse: [ parentPortfolio do: [ : aPortfolio | aPortfolio canAddPortfolioToPortfolio: aPortfolioToRegister ]]
		

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:04:43' prior: 50693103!
iAmInPortfolio: aPortfolioToRegister

	aPortfolioToRegister assetIsIncludedInPortfolioCollection: self.
	portfolios do: [:aPortfolio | aPortfolioToRegister iAmInPortfolio: aPortfolio]! !

!methodRemoval: Portfolio #portfolioIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 18:41:46'!
portfolioIsIncludedInPortfolioOrItsPortfolios: aPortfolioToRegister

	(aPortfolioToRegister = self) ifTrue: [ self error: self class alreadyInPortfolioErrorDescription ].
	
	(portfolios do: [:aPortfolio | aPortfolio portfolioIsIncludedInPortfolioOrItsPortfolios: aPortfolioToRegister])
			!
!FinancialAsset methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:05:36'!
assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister
	self subclassResponsibility ! !

!methodRemoval: Portfolio #accountIsIncludedInPortfolioOrItsPortfolios: stamp: 'Sof D 10/18/2023 18:41:46'!
accountIsIncludedInPortfolioOrItsPortfolios: aReceptiveAccountToRegister

	^(receptiveAccounts includes: aReceptiveAccountToRegister) or: (portfolios anySatisfy: [:aPortfolio | aPortfolio accountIsIncludedInPortfolioOrItsPortfolios: aReceptiveAccountToRegister])
			!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:06:26'!
canAddFinancialAssetToPortfolio: aFinancialAssetToRegister

	! !

!methodRemoval: Portfolio #canAddFinancialAsset: stamp: 'Sof D 10/18/2023 18:41:46'!
canAddFinancialAsset: aFinancialAssetToRegister

	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:07:26' prior: 50693185!
addFinancialAsset: aFinancialAssetToRegister

	self canAddFinancialAssetToPortfolio: aFinancialAssetToRegister .
	financialAssets add: aFinancialAssetToRegister ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:27:35' prior: 50701899!
canAddFinancialAssetToPortfolio: aFinancialAssetToRegister

	portfolioState canAddAsset: aFinancialAssetToRegister toPortfolio: self! !
!PortfolioState methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:27:58'!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo
	self subclassResponsibility ! !

!methodRemoval: PortfolioState #isRootPortfolio stamp: 'Sof D 10/18/2023 18:41:46'!
isRootPortfolio
	self subclassResponsibility !

!methodRemoval: NonRootPortfolio #isRootPortfolio stamp: 'Sof D 10/18/2023 18:41:46'!
isRootPortfolio
	^false!
!NonRootPortfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:28:17' overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo
! !
!RootPortfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 18:28:24' overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:30:54' prior: 50701945 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:33:20' prior: 50699441!
canAddAccountToPortfolio: aReceptiveAccountToRegister

	^(parentPortfolio isEmpty) 
		ifTrue: 
		[
			(self assetIsIncludedInPortfolioCollection: aReceptiveAccountToRegister)
			]
		ifFalse: 
		[
			(parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddAccountToPortfolio: aReceptiveAccountToRegister ]) 
			]! !
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 18:36:15'!
isFinancialAssetInAPortfolioInCollection: aFinancialAssetToRegister
	parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddFinancialAssetToPortfolio: aFinancialAssetToRegister ]! !
!NonRootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 18:36:29' prior: 50701939 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo isFinancialAssetInAPortfolioInCollection: aFinancialAssetToRegister ! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:37:17' prior: 50692998!
addReceptiveAccount: aReceptiveAccountToRegister
	"self canAddAccountToPortfolio: aReceptiveAccountToRegister.
	receptiveAccounts add: aReceptiveAccountToRegister.
	financialAssets add: aReceptiveAccountToRegister."
	
	self addFinancialAsset: aReceptiveAccountToRegister ! !

!methodRemoval: RootPortfolio #isRootPortfolio stamp: 'Sof D 10/18/2023 18:41:46'!
isRootPortfolio
	^true!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:39:55' prior: 50701993!
addReceptiveAccount: aReceptiveAccountToRegister
	self canAddAccountToPortfolio: aReceptiveAccountToRegister.
	receptiveAccounts add: aReceptiveAccountToRegister.
	financialAssets add: aReceptiveAccountToRegister.
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 18:40:04' prior: 50702008!
addReceptiveAccount: aReceptiveAccountToRegister
	"self canAddAccountToPortfolio: aReceptiveAccountToRegister.
	receptiveAccounts add: aReceptiveAccountToRegister.
	financialAssets add: aReceptiveAccountToRegister."
	
	self addFinancialAsset: aReceptiveAccountToRegister ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 18:42:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:42:33'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 18:42:33'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 18:42:33'!
FAILURE!

----SNAPSHOT----(18 October 2023 18:51:30) CuisUniversity-5981.image priorSource: 11578155!

----SNAPSHOT----(18 October 2023 19:12:32) CuisUniversity-5981.image priorSource: 11855298!
!RootPortfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 20:46:53' prior: 50701952 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister.
	aPortfolioToAddTheAssetTo iAmInPortfolio: aFinancialAssetToRegister ! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'Sof D 10/18/2023 20:47:39'!
iAmInPortfolio: aPortfolioToRegister

	aPortfolioToRegister assetIsIncludedInPortfolioCollection: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 20:47:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/18/2023 20:47:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/18/2023 20:47:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/18/2023 20:47:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/18/2023 20:47:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/18/2023 20:47:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/18/2023 20:47:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 20:47:45'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 20:47:45'!
FAILURE!
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 21:33:28'!
isFinancialAssetInAParentPortfolios: aFinancialAssetToRegister
	parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddFinancialAssetToPortfolio: aFinancialAssetToRegister ]! !
!NonRootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:33:28' prior: 50701984 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo isFinancialAssetInAParentPortfolios: aFinancialAssetToRegister ! !

!methodRemoval: Portfolio #isFinancialAssetInAPortfolioInCollection: stamp: 'Sof D 10/18/2023 21:33:28'!
isFinancialAssetInAPortfolioInCollection: aFinancialAssetToRegister
	parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddFinancialAssetToPortfolio: aFinancialAssetToRegister ]!
!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 21:36:32'!
isFinancialAssetInAParentPortfolio: aFinancialAssetToRegister
	parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddFinancialAssetToPortfolio: aFinancialAssetToRegister ]! !
!NonRootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:36:32' prior: 50702289 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo isFinancialAssetInAParentPortfolio: aFinancialAssetToRegister ! !

!methodRemoval: Portfolio #isFinancialAssetInAParentPortfolios: stamp: 'Sof D 10/18/2023 21:36:32'!
isFinancialAssetInAParentPortfolios: aFinancialAssetToRegister
	parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddFinancialAssetToPortfolio: aFinancialAssetToRegister ]!
!RootPortfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 21:43:30' prior: 50702136 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: aFinancialAssetToRegister.
	aFinancialAssetToRegister areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ! !
!FinancialAsset methodsFor: 'nil' stamp: 'Sof D 10/18/2023 21:44:11'!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo ! !
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:44:44' prior: 50702345!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	self subclassResponsibility 
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'Sof D 10/18/2023 21:44:50' overrides: 50702351!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self
	! !
!Portfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 21:46:18' overrides: 50702351!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]! !
!RootPortfolio methodsFor: 'nil' stamp: 'Sof D 10/18/2023 21:46:37' prior: 50702334 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	
	aFinancialAssetToRegister areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ! !
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:47:22'!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	self subclassResponsibility 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:47:22' overrides: 50702383!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:47:22' overrides: 50702383!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:47:22' prior: 50702364 overrides: 50702351!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:47:22' prior: 50702375 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	
	aFinancialAssetToRegister isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:47:22' prior: 50702389 overrides: 50702383!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]! !

!methodRemoval: FinancialAsset #areAssetsAlreadyInPortfolio: stamp: 'Sof D 10/18/2023 21:47:22'!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	self subclassResponsibility 
	!

!methodRemoval: Portfolio #areAssetsAlreadyInPortfolio: stamp: 'Sof D 10/18/2023 21:47:22'!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]!

!methodRemoval: ReceptiveAccount #areAssetsAlreadyInPortfolio: stamp: 'Sof D 10/18/2023 21:47:22'!
areAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self
	!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:47:32'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 21:47:32'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:47:32'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 21:49:55' prior: 50692989!
addPortfolio: aPortfolioToAdd

	"self canAddPortfolioToPortfolio: portfolioToAdd .
	portfolioToAdd setAsParentPortfolio: self.
	
	portfolios add: portfolioToAdd.
	financialAssets add: portfolioToAdd."
	
	self canAddFinancialAssetToPortfolio: aPortfolioToAdd .
	financialAssets add: aPortfolioToAdd ! !

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:51:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:51:18'!
FAILURE!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 21:51:18'!
FAILURE!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 21:51:18'!
FAILURE!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 21:51:18'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:51:32'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 21:51:32'!
FAILURE!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 21:51:32'!
FAILURE!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 21:51:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:51:38'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:51:38'!
FAILURE!

----SNAPSHOT----(18 October 2023 21:51:48) CuisUniversity-5981.image priorSource: 11855391!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:51:54'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:51:54'!
FAILURE!

----STARTUP---- (18 October 2023 21:52:32) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!

!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:55:48'!
isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	self subclassResponsibility 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:55:49' overrides: 50702757!
isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:55:49' overrides: 50702757!
isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:55:49' prior: 50702429 overrides: 50702383!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:55:49' prior: 50702420 overrides: 50701925!
canAddAsset: aFinancialAssetToRegister toPortfolio: aPortfolioToAddTheAssetTo

	
	aFinancialAssetToRegister isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 21:55:49' prior: 50702764 overrides: 50702757!
isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]! !

!methodRemoval: FinancialAsset #isAssetAlreadyInPortfolio: stamp: 'Sof D 10/18/2023 21:55:49'!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	self subclassResponsibility 
	!

!methodRemoval: Portfolio #isAssetAlreadyInPortfolio: stamp: 'Sof D 10/18/2023 21:55:49'!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self.
	financialAssets do: [ : aFinancialAsset | aFinancialAsset isAssetOrItsAssetsAlreadyInPortfolio: aPortfolioToAddTheAssetTo ]!

!methodRemoval: ReceptiveAccount #isAssetAlreadyInPortfolio: stamp: 'Sof D 10/18/2023 21:55:49'!
isAssetAlreadyInPortfolio: aPortfolioToAddTheAssetTo

	aPortfolioToAddTheAssetTo assetIsIncludedInPortfolioCollection: self
	!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 21:57:27' prior: 50702563!
addPortfolio: aPortfolioToAdd

	"self canAddPortfolioToPortfolio: portfolioToAdd .
	portfolioToAdd setAsParentPortfolio: self.
	
	portfolios add: portfolioToAdd.
	financialAssets add: portfolioToAdd."
	
	self canAddFinancialAssetToPortfolio: aPortfolioToAdd .
	aPortfolioToAdd setAsParentPortfolio: self.
	financialAssets add: aPortfolioToAdd ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 21:57:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 21:57:29'!
PASSED!

!methodRemoval: Portfolio #canAddAccountToPortfolio: stamp: 'Sof D 10/18/2023 21:58:00'!
canAddAccountToPortfolio: aReceptiveAccountToRegister

	^(parentPortfolio isEmpty) 
		ifTrue: 
		[
			(self assetIsIncludedInPortfolioCollection: aReceptiveAccountToRegister)
			]
		ifFalse: 
		[
			(parentPortfolio do: [:aParentPortfolio | aParentPortfolio canAddAccountToPortfolio: aReceptiveAccountToRegister ]) 
			]!

!methodRemoval: Portfolio #canAddPortfolioToPortfolio: stamp: 'Sof D 10/18/2023 21:58:09'!
canAddPortfolioToPortfolio: aPortfolioToRegister


	receptiveAccounts do: [:aAccount | aPortfolioToRegister canAddAccountToPortfolio: aAccount].
	
	(parentPortfolio isEmpty) 
		ifTrue:[ self assetIsIncludedInPortfolioCollection: aPortfolioToRegister. 
			self iAmInPortfolio: aPortfolioToRegister.
				"este ciclo esta muy cerca del root 'emoji de asco' "]
		ifFalse: [ parentPortfolio do: [ : aPortfolio | aPortfolio canAddPortfolioToPortfolio: aPortfolioToRegister ]]
		

!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 21:58:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 21:58:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 21:58:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 21:58:14'!
PASSED!

!methodRemoval: ReceptiveAccount #iAmInPortfolio: stamp: 'Sof D 10/18/2023 21:59:03'!
iAmInPortfolio: aPortfolioToRegister

	aPortfolioToRegister assetIsIncludedInPortfolioCollection: self.!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 21:59:07'!
PASSED!

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets  parentPortfolio portfolioState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 21:59:17'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets parentPortfolio portfolioState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 21:59:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 21:59:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 21:59:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 21:59:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 21:59:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 21:59:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 21:59:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 21:59:22'!
PASSED!

!methodRemoval: Portfolio #iAmInPortfolio: stamp: 'Sof D 10/18/2023 22:41:54'!
iAmInPortfolio: aPortfolioToRegister

	aPortfolioToRegister assetIsIncludedInPortfolioCollection: self.
	portfolios do: [:aPortfolio | aPortfolioToRegister iAmInPortfolio: aPortfolio]!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'Sof D 10/18/2023 22:46:43'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Sof D 10/18/2023 22:47:37'!
test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio5 .
	portfolio5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
! !

!methodRemoval: PortfolioTest #test24 stamp: 'Sof D 10/18/2023 22:47:40'!
test24
	
	
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	portfolio1 addPortfolio: portfolio5 .
	portfolio5 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio3 .
	portfolio2 addPortfolio: portfolio4 .
	
	
	self should: [ portfolio1 addPortfolio: portfolio2 . ]
	raise: Error
	withMessageText: Portfolio alreadyInPortfolioErrorDescription 
	
!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 22:47:43'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 22:49:17'!
addTransactionsInto: aListOfTransactions
	financialAssets do: [ : aFinancialAsset | aFinancialAsset addTransactionsInto: aListOfTransactions ]! !
!FinancialAsset methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 22:49:34'!
addTransactionsInto: aListOfTransactions
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 22:49:50' overrides: 50703535!
addTransactionsInto: aListOfTransactions
	aListOfTransactions addAll: transactions ! !
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 22:50:06' prior: 50693048 overrides: 50692946!
transactions
	| allTransactions |
	allTransactions := OrderedCollection new.
	self addTransactionsInto: allTransactions 
	^allTransactions ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 22:50:08'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 22:50:08'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 22:50:08'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 22:50:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 22:50:32'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 22:50:32'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 22:50:32'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 22:50:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 22:50:39'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 22:50:39'!
ERROR!

----SNAPSHOT----(18 October 2023 22:50:55) CuisUniversity-5981.image priorSource: 11874921!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 22:58:51'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 22:58:51'!
ERROR!

----STARTUP---- (18 October 2023 22:59:12) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!


portfolio transactions !

----STARTUP---- (18 October 2023 23:01:25) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!

!Portfolio methodsFor: 'initialize' stamp: 'Sof D 10/18/2023 23:01:46' prior: 50693288 overrides: 16920235!
initialize 
	financialAssets := OrderedCollection new.
	
	parentPortfolio := OrderedCollection new.
	
	portfolioState := RootPortfolio new.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:01:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:01:47'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:01:47'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:01:47'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:01:48'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Sof D 10/18/2023 23:02:04'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets parentPortfolios portfolioState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 23:02:04' prior: 50693305!
setAsParentPortfolio: aParentPortfolio 
	parentPortfolios add: aParentPortfolio.
	
	portfolioState := NonRootPortfolio new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 23:02:04' prior: 50703777 overrides: 16920235!
initialize 
	financialAssets := OrderedCollection new.
	
	parentPortfolios := OrderedCollection new.
	
	portfolioState := RootPortfolio new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sof D 10/18/2023 23:02:04' prior: 50702306!
isFinancialAssetInAParentPortfolio: aFinancialAssetToRegister
	parentPortfolios do: [:aParentPortfolio | aParentPortfolio canAddFinancialAssetToPortfolio: aFinancialAssetToRegister ]! !

----SNAPSHOT----(18 October 2023 23:03:23) CuisUniversity-5981.image priorSource: 11907396!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:03:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sof D 10/18/2023 23:03:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sof D 10/18/2023 23:03:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sof D 10/18/2023 23:03:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sof D 10/18/2023 23:03:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sof D 10/18/2023 23:03:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sof D 10/18/2023 23:03:32'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:03:34'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:03:34'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:03:34'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:03:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:03:37'!
ERROR!

----STARTUP---- (18 October 2023 23:06:06) as C:\Users\sofia\Downloads\smalltalkVM\windows64\CuisUniversity-5981.image!

!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 23:06:42' prior: 50703548 overrides: 50692946!
transactions
	| allTransactions |
	allTransactions := OrderedCollection new.
	allTransactions := self allTheTransactionsOf: financialAssets 
	^allTransactions ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:06:43'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:06:43'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:06:43'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:06:43'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 23:07:36' prior: 50704051 overrides: 50692946!
transactions
	| allTransactions |
	allTransactions := OrderedCollection new.
	allTransactions addAll: (self allTheTransactionsOf: financialAssets ).
	^allTransactions ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:07:37'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 23:09:37' prior: 50704157 overrides: 50692946!
transactions
	| allTransactions |
	allTransactions := OrderedCollection new.
	"allTransactions addAll: (self allTheTransactionsOf: financialAssets )."
	self addTransactionsInto: allTransactions .
	^allTransactions ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:09:38'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:09:39'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:09:46'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'Sof D 10/18/2023 23:09:51' prior: 50704264 overrides: 50692946!
transactions
	| allTransactions |
	allTransactions := OrderedCollection new.
	
	self addTransactionsInto: allTransactions .
	^allTransactions ! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:09:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:10:03'!
PASSED!

!methodRemoval: Portfolio #addFinancialAsset: stamp: 'Sof D 10/18/2023 23:19:27'!
addFinancialAsset: aFinancialAssetToRegister

	self canAddFinancialAssetToPortfolio: aFinancialAssetToRegister .
	financialAssets add: aFinancialAssetToRegister !
!Portfolio methodsFor: 'asset management' stamp: 'Sof D 10/18/2023 23:19:45' prior: 50702842!
addPortfolio: aPortfolioToAdd

	
	
	self canAddFinancialAssetToPortfolio: aPortfolioToAdd .
	aPortfolioToAdd setAsParentPortfolio: self.
	financialAssets add: aPortfolioToAdd ! !
!Portfolio methodsFor: 'asset management' stamp: 'Sof D 10/18/2023 23:20:08' prior: 50702018!
addReceptiveAccount: aReceptiveAccountToRegister
	self canAddFinancialAssetToPortfolio: aReceptiveAccountToRegister.
	financialAssets add: aReceptiveAccountToRegister.
	
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:20:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:20:09'!
PASSED!

!methodRemoval: Portfolio #allTheTransactionsOf: stamp: 'Sof D 10/18/2023 23:26:28'!
allTheTransactionsOf: aCollectionOfFinancialAssets

	^ aCollectionOfFinancialAssets inject: OrderedCollection new into: [:anCollection :aChild | anCollection addAll: (aChild transactions)]!

----SNAPSHOT----(18 October 2023 23:37:12) CuisUniversity-5981.image priorSource: 11912473!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceChangesWhenAccountInItRegistersTransaction stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceIsCorrectAfterMultipleTransactionsFromAccountInIt stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioBalanceIsCorrectAfterChangesOnMultipleTransactionsFromDifferentAccountsInIt stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTransactionFromAccountInItRegistered stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioBalanceIsCorrectAfterTransactionFromPortfolioInIt stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioBalanceIsCorrectAfterTransactionsFromMultiplePortfoliosInIt stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasTransactionFromPortfoliosInItRegistered stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasNoTransactionsWhenCreated stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioKnowsTransactionsOfAccountInIt stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioKnowsTransactionsOfPortfoliosInIt stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddAlreadyAddedAccount stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAPortfolioThatHasAnAccountItAlreadyHas stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantAddAccountThatsAlreadyInPortfolioItsIn stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantAddAccountThatsIncludedInParentPortfolio stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioCantAddItselfToItsPortfolios stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioCantAddRepeatedPortfolio stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioCantAddPortfolioAlreadyInItsPortfolios stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test20PortfolioCantAddPortfolioThatsInItsParentPortfolio stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithAccountCantAddPortfolioWithTheSameAccount stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithPortfolioCantAddPortfolioWithOnlyTheSamePortfolio stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test23PortfolioWithPortfoliosCantAddPortfolioWithTheSamePortfolios stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!

!testRun: #PortfolioTest #test24PortfolioCantAddPortfolioThatHasPortfolioThatIsInOneOfItsPortfolios stamp: 'Sof D 10/18/2023 23:37:22'!
PASSED!